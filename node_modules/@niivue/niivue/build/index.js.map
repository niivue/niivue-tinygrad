{"version":3,"sources":["../src/niivue/index.ts","../package.json","../src/logger.ts","../src/shader.ts","../src/shader-srcs.ts","../src/orientCube.ts","../src/niivue-object3D.ts","../src/nvmesh.ts","../src/cmaps/index.js","../src/cmaps/_itksnap.json","../src/cmaps/_slicer3d.json","../src/cmaps/actc.json","../src/cmaps/bcgwhw_dark.json","../src/cmaps/bcgwhw.json","../src/cmaps/blue2red.json","../src/cmaps/blue2magenta.json","../src/cmaps/blue2cyan.json","../src/cmaps/bluegrn.json","../src/cmaps/blue.json","../src/cmaps/bone.json","../src/cmaps/bronze.json","../src/cmaps/cet_l17.json","../src/cmaps/cividis.json","../src/cmaps/cool.json","../src/cmaps/copper2.json","../src/cmaps/copper.json","../src/cmaps/ct_airways.json","../src/cmaps/ct_artery.json","../src/cmaps/ct_bones.json","../src/cmaps/ct_brain_gray.json","../src/cmaps/ct_brain.json","../src/cmaps/ct_cardiac.json","../src/cmaps/ct_head.json","../src/cmaps/ct_kidneys.json","../src/cmaps/ct_liver.json","../src/cmaps/ct_muscles.json","../src/cmaps/ct_scalp.json","../src/cmaps/ct_skull.json","../src/cmaps/ct_soft.json","../src/cmaps/ct_soft_tissue.json","../src/cmaps/ct_surface.json","../src/cmaps/ct_vessels.json","../src/cmaps/ct_w_contrast.json","../src/cmaps/cubehelix.json","../src/cmaps/electric_blue.json","../src/cmaps/freesurfer.json","../src/cmaps/ge_color.json","../src/cmaps/gold.json","../src/cmaps/gray.json","../src/cmaps/green.json","../src/cmaps/green2cyan.json","../src/cmaps/green2orange.json","../src/cmaps/hotiron.json","../src/cmaps/hot.json","../src/cmaps/hsv.json","../src/cmaps/inferno.json","../src/cmaps/jet.json","../src/cmaps/linspecer.json","../src/cmaps/magma.json","../src/cmaps/mako.json","../src/cmaps/nih.json","../src/cmaps/plasma.json","../src/cmaps/random.json","../src/cmaps/red.json","../src/cmaps/redyell.json","../src/cmaps/rocket.json","../src/cmaps/surface.json","../src/cmaps/turbo.json","../src/cmaps/violet.json","../src/cmaps/viridis.json","../src/cmaps/warm.json","../src/cmaps/winter.json","../src/cmaps/x_rain.json","../src/cmaps/afni_blues_inv.json","../src/cmaps/afni_reds_inv.json","../src/cmaps/roi_i256.json","../src/colortables.ts","../src/nvmesh-utilities.ts","../src/nvmesh-loaders.ts","../src/nvutilities.ts","../src/fonts/Roboto-Regular.json","../src/nvdocument.ts","../src/nvimage/index.ts","../src/nvimage/utils.ts","../src/nvlabel.ts","../src/nvconnectome.ts","../src/niivue/utils.ts","../src/session-bus.ts","../src/nvcontroller.ts"],"sourcesContent":["import { mat4, vec2, vec3, vec4 } from 'gl-matrix'\nimport { version } from '../../package.json'\nimport { Shader } from '../shader.js'\nimport { log } from '../logger.js'\nimport {\n  vertOrientCubeShader,\n  fragOrientCubeShader,\n  vertSliceMMShader,\n  fragSliceMMShader,\n  fragSliceV1Shader,\n  vertRectShader,\n  vertLineShader,\n  vertLine3DShader,\n  fragRectShader,\n  fragRectOutlineShader,\n  vertRenderShader,\n  fragRenderShader,\n  fragRenderGradientShader,\n  fragRenderSliceShader,\n  vertColorbarShader,\n  fragColorbarShader,\n  vertFontShader,\n  fragFontShader,\n  vertCircleShader,\n  fragCircleShader,\n  vertBmpShader,\n  fragBmpShader,\n  vertOrientShader,\n  vertPassThroughShader,\n  fragPassThroughShader,\n  vertGrowCutShader,\n  fragGrowCutShader,\n  fragOrientShaderU,\n  fragOrientShaderI,\n  fragOrientShaderF,\n  fragOrientShader,\n  fragOrientShaderAtlas,\n  fragRGBOrientShader,\n  vertMeshShader,\n  fragMeshShader,\n  fragMeshToonShader,\n  fragMeshMatcapShader,\n  fragMeshOutlineShader,\n  fragMeshEdgeShader,\n  fragMeshShaderCrevice,\n  fragMeshDiffuseEdgeShader,\n  fragMeshHemiShader,\n  fragMeshMatteShader,\n  fragMeshDepthShader,\n  fragMeshShaderSHBlue,\n  fragMeshSpecularEdgeShader,\n  vertFlatMeshShader,\n  fragFlatMeshShader,\n  vertFiberShader,\n  fragFiberShader,\n  vertSurfaceShader,\n  fragSurfaceShader,\n  fragVolumePickingShader,\n  blurVertShader,\n  blurFragShader,\n  sobelFragShader\n} from '../shader-srcs.js'\nimport { orientCube } from '../orientCube.js'\nimport { NiivueObject3D } from '../niivue-object3D.js'\nimport { LoadFromUrlParams, MeshType, NVMesh, NVMeshLayer } from '../nvmesh.js'\nimport defaultMatCap from '../matcaps/Shiny.jpg'\nimport defaultFontPNG from '../fonts/Roboto-Regular.png'\nimport defaultFontMetrics from '../fonts/Roboto-Regular.json'\nimport { ColorMap, cmapper } from '../colortables.js'\nimport {\n  NVDocument,\n  NVConfigOptions,\n  Scene,\n  SLICE_TYPE,\n  SHOW_RENDER,\n  DRAG_MODE,\n  MULTIPLANAR_TYPE,\n  DEFAULT_OPTIONS,\n  ExportDocumentData,\n  INITIAL_SCENE_DATA\n} from '../nvdocument.js'\n\nimport {\n  LabelTextAlignment,\n  LabelLineTerminator,\n  NVLabel3D,\n  NVLabel3DStyle,\n  LabelAnchorPoint,\n  LabelAnchorFlag\n} from '../nvlabel.js'\nimport { FreeSurferConnectome, NVConnectome } from '../nvconnectome.js'\nimport {\n  NVImage,\n  NVImageFromUrlOptions,\n  NVIMAGE_TYPE,\n  NiiDataType,\n  NiiIntentCode,\n  ImageFromUrlOptions\n} from '../nvimage/index.js'\nimport { NVUtilities } from '../nvutilities.js'\nimport { NVMeshUtilities } from '../nvmesh-utilities.js'\nimport {\n  Connectome,\n  LegacyConnectome,\n  NVConnectomeNode,\n  NiftiHeader,\n  DragReleaseParams,\n  NiiVueLocation,\n  NiiVueLocationValue,\n  SyncOpts\n} from '../types.js'\nimport {\n  clamp,\n  decodeRLE,\n  deg2rad,\n  encodeRLE,\n  img2ras16,\n  intensityRaw2Scaled,\n  isRadiological,\n  negMinMax,\n  swizzleVec3,\n  tickSpacing,\n  unProject,\n  unpackFloatFromVec4i\n} from './utils.js'\nexport { NVMesh, NVMeshFromUrlOptions, NVMeshLayerDefaults } from '../nvmesh.js'\nexport { NVController } from '../nvcontroller.js'\nexport { ColorTables as colortables, cmapper } from '../colortables.js'\n\nexport { NVImage, NVImageFromUrlOptions } from '../nvimage/index.js'\n// export { NVDocument, SLICE_TYPE, DocumentData } from '../nvdocument.js'\n// address rollup error - https://github.com/rollup/plugins/issues/71\nexport * from '../nvdocument.js'\nexport { NVUtilities } from '../nvutilities.js'\nexport { LabelTextAlignment, LabelLineTerminator, NVLabel3DStyle, NVLabel3D, LabelAnchorPoint } from '../nvlabel.js'\nexport { NVMeshLoaders } from '../nvmesh-loaders.js'\nexport { NVMeshUtilities } from '../nvmesh-utilities.js'\n\n// same rollup error as above during npm run dev, and during the umd build\n// TODO: at least remove the umd build when AFNI do not need it anymore\nexport * from '../types.js'\n\ntype FontMetrics = {\n  distanceRange: number\n  size: number\n  mets: Record<\n    number,\n    {\n      xadv: number\n      uv_lbwh: number[]\n      lbwh: number[]\n    }\n  >\n}\n\ntype ColormapListEntry = {\n  name: string\n  min: number\n  max: number\n  alphaThreshold: boolean\n  negative: boolean\n  visible: boolean\n  invert: boolean\n}\n\ntype Graph = {\n  LTWH: number[]\n  plotLTWH?: number[]\n  opacity: number\n  vols: number[]\n  autoSizeMultiplanar: boolean\n  normalizeValues: boolean\n  isRangeCalMinMax: boolean\n  backColor?: number[]\n  lineColor?: number[]\n  textColor?: number[]\n  lineThickness?: number\n  lineAlpha?: number\n  lines?: number[][]\n  selectedColumn?: number\n  lineRGB?: number[][]\n}\n\ntype Descriptive = {\n  mean: number\n  stdev: number\n  nvox: number\n  volumeMM3: number\n  volumeML: number\n  min: number\n  max: number\n  meanNot0: number\n  stdevNot0: number\n  nvoxNot0: number\n  minNot0: number\n  maxNot0: number\n  cal_min: number\n  cal_max: number\n  robust_min: number\n  robust_max: number\n  area: number | null\n}\n\ntype SliceScale = {\n  volScale: number[]\n  vox: number[]\n  longestAxis: number\n  dimsMM: vec3\n}\n\ntype MvpMatrix2D = {\n  modelViewProjectionMatrix: mat4\n  modelMatrix: mat4\n  normalMatrix: mat4\n  leftTopMM: number[]\n  fovMM: number[]\n}\n\ntype MM = {\n  mnMM: vec3\n  mxMM: vec3\n  rotation: mat4\n  fovMM: vec3\n}\n\n/**\n * mesh file formats that can be loaded\n */\nconst MESH_EXTENSIONS = [\n  'ASC',\n  'BYU',\n  'DFS',\n  'FSM',\n  'PIAL',\n  'ORIG',\n  'INFLATED',\n  'SMOOTHWM',\n  'SPHERE',\n  'WHITE',\n  'G',\n  'GEO',\n  'GII',\n  'ICO',\n  'MZ3',\n  'NV',\n  'OBJ',\n  'OFF',\n  'PLY',\n  'SRF',\n  'STL',\n  'TCK',\n  'TRACT',\n  'TRI',\n  'TRK',\n  'TT',\n  'TRX',\n  'VTK',\n  'X3D',\n  'JCON',\n  'JSON'\n]\n\n// mouse button codes\nconst LEFT_MOUSE_BUTTON = 0\nconst CENTER_MOUSE_BUTTON = 1\nconst RIGHT_MOUSE_BUTTON = 2\n\n// https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/Constants\n// gl.TEXTURE0..31 are constants 0x84C0..0x84DF = 33984..34015\n// https://github.com/niivue/niivue/blob/main/docs/development-notes/webgl.md\n// persistent textures\nconst TEXTURE0_BACK_VOL = 33984\nconst TEXTURE1_COLORMAPS = 33985\nconst TEXTURE2_OVERLAY_VOL = 33986\nconst TEXTURE3_FONT = 33987\nconst TEXTURE4_THUMBNAIL = 33988\nconst TEXTURE5_MATCAP = 33989\nconst TEXTURE6_GRADIENT = 33990\nconst TEXTURE7_DRAW = 33991\n// subsequent textures only used transiently\nconst TEXTURE8_GRADIENT_TEMP = 33992\nconst TEXTURE9_ORIENT = 33993\nconst TEXTURE10_BLEND = 33994\nconst TEXTURE11_GC_BACK = 33995\nconst TEXTURE12_GC_STRENGTH0 = 33996\nconst TEXTURE13_GC_STRENGTH1 = 33997\nconst TEXTURE14_GC_LABEL0 = 33998\nconst TEXTURE15_GC_LABEL1 = 33999\n\ntype UIData = {\n  mousedown: boolean\n  touchdown: boolean\n  mouseButtonLeftDown: boolean\n  mouseButtonCenterDown: boolean\n  mouseButtonRightDown: boolean\n  mouseDepthPicker: boolean\n  clickedTile: number\n  pan2DxyzmmAtMouseDown: vec4\n  prevX: number\n  prevY: number\n  currX: number\n  currY: number\n  currentTouchTime: number\n  lastTouchTime: number\n  touchTimer: NodeJS.Timeout | null\n  doubleTouch: boolean\n  isDragging: boolean\n  dragStart: number[]\n  dragEnd: number[]\n  dragClipPlaneStartDepthAziElev: number[]\n  lastTwoTouchDistance: number\n  multiTouchGesture: boolean\n  dpr?: number\n}\n\ntype SaveImageOptions = {\n  filename: string\n  isSaveDrawing: boolean\n  volumeByIndex: number\n}\n\n// default SaveImageOptions\nconst defaultSaveImageOptions: SaveImageOptions = {\n  filename: '',\n  isSaveDrawing: false,\n  volumeByIndex: 0\n}\n\n/**\n * Niivue can be attached to a canvas. An instance of Niivue contains methods for\n * loading and rendering NIFTI image data in a WebGL 2.0 context.\n *\n * @example\n * let niivue = new Niivue({crosshairColor: [0,1,0,0.5], textHeight: 0.5}) // a see-through green crosshair, and larger text labels\n */\nexport class Niivue {\n  loaders = {}\n  canvas: HTMLCanvasElement | null = null // the reference to the canvas element on the page\n  _gl: WebGL2RenderingContext | null = null // the gl context\n  isBusy = false // flag to indicate if the scene is busy drawing\n  needsRefresh = false // flag to indicate if the scene needs to be redrawn\n  colormapTexture: WebGLTexture | null = null // the GPU memory storage of the colormap\n  colormapLists: ColormapListEntry[] = [] // one entry per colorbar: min, max, tic\n  volumeTexture: WebGLTexture | null = null // the GPU memory storage of the volume\n  gradientTexture: WebGLTexture | null = null // 3D texture for volume rnedering lighting\n  gradientTextureAmount = 0.0\n  drawTexture: WebGLTexture | null = null // the GPU memory storage of the drawing\n  drawUndoBitmaps: Uint8Array[] = [] // array of drawBitmaps for undo\n  drawLut = cmapper.makeDrawLut('$itksnap') // the color lookup table for drawing\n  drawOpacity = 0.8 // opacity of drawing (default)\n  clickToSegmentIsGrowing = false // flag to indicate if the clickToSegment flood fill growing is in progress with left mouse down + drag\n  clickToSegmentGrowingBitmap: Uint8Array | null = null // the bitmap of the growing flood fill\n  clickToSegmentXY = [0, 0] // the x,y location of the clickToSegment flood fill\n  renderDrawAmbientOcclusion = 0.4\n  colorbarHeight = 0 // height in pixels, set when colorbar is drawn\n  drawPenLocation = [NaN, NaN, NaN]\n  drawPenAxCorSag = -1 // do not allow pen to drag between Sagittal/Coronal/Axial\n  drawFillOverwrites = true // if true, fill overwrites existing drawing\n  drawPenFillPts: number[][] = [] // store mouse points for filled pen\n  overlayTexture: WebGLTexture | null = null\n  overlayTextureID: WebGLTexture | null = null\n  sliceMMShader?: Shader\n  sliceV1Shader?: Shader\n  orientCubeShader?: Shader\n  orientCubeShaderVAO: WebGLVertexArrayObject | null = null\n  rectShader?: Shader\n  rectOutlineShader?: Shader\n  renderShader?: Shader\n  lineShader?: Shader\n  line3DShader?: Shader\n  passThroughShader?: Shader\n  renderGradientShader?: Shader\n  renderSliceShader?: Shader\n  renderVolumeShader?: Shader\n  pickingMeshShader?: Shader\n  pickingImageShader?: Shader\n  colorbarShader?: Shader\n  fontShader: Shader | null = null\n  fiberShader?: Shader\n  fontTexture: WebGLTexture | null = null\n  circleShader?: Shader\n  matCapTexture: WebGLTexture | null = null\n  bmpShader: Shader | null = null\n  bmpTexture: WebGLTexture | null = null // thumbnail WebGLTexture object\n  thumbnailVisible = false\n  bmpTextureWH = 1.0 // thumbnail width/height ratio\n  growCutShader?: Shader\n  orientShaderAtlasU: Shader | null = null\n  orientShaderAtlasI: Shader | null = null\n  orientShaderU: Shader | null = null\n  orientShaderI: Shader | null = null\n  orientShaderF: Shader | null = null\n  orientShaderRGBU: Shader | null = null\n  surfaceShader: Shader | null = null\n  blurShader: Shader | null = null\n  sobelShader: Shader | null = null\n  genericVAO: WebGLVertexArrayObject | null = null // used for 2D slices, 2D lines, 2D Fonts\n  unusedVAO = null\n  crosshairs3D: NiivueObject3D | null = null\n  private DEFAULT_FONT_GLYPH_SHEET = defaultFontPNG // \"/fonts/Roboto-Regular.png\";\n  private DEFAULT_FONT_METRICS = defaultFontMetrics // \"/fonts/Roboto-Regular.json\";\n  private fontMetrics?: typeof defaultFontMetrics\n  private fontMets: FontMetrics | null = null\n  backgroundMasksOverlays = 0\n  overlayOutlineWidth = 0 // float, 0 for none\n  overlayAlphaShader = 1 // float, 1 for opaque\n  isAlphaClipDark = false\n  position?: vec3\n  extentsMin?: vec3\n  extentsMax?: vec3\n  // ResizeObserver\n  private resizeObserver: ResizeObserver | null = null\n  // syncOpts: Record<string, unknown> = {}\n  syncOpts: SyncOpts = {\n    '3d': false, // legacy option\n    '2d': false, // legacy option\n    zoomPan: false,\n    cal_min: false,\n    cal_max: false,\n    clipPlane: false,\n    gamma: false,\n    sliceType: false,\n    crosshair: false\n  }\n\n  readyForSync = false\n\n  // UI Data\n  uiData: UIData = {\n    mousedown: false,\n    touchdown: false,\n    mouseButtonLeftDown: false,\n    mouseButtonCenterDown: false,\n    mouseButtonRightDown: false,\n    mouseDepthPicker: false,\n    clickedTile: -1,\n\n    pan2DxyzmmAtMouseDown: [0, 0, 0, 1],\n    prevX: 0,\n    prevY: 0,\n    currX: 0,\n    currY: 0,\n    currentTouchTime: 0,\n    lastTouchTime: 0,\n    touchTimer: null,\n    doubleTouch: false,\n    isDragging: false,\n    dragStart: [0.0, 0.0],\n    dragEnd: [0.0, 0.0],\n    dragClipPlaneStartDepthAziElev: [0, 0, 0],\n    lastTwoTouchDistance: 0,\n    multiTouchGesture: false\n  }\n\n  back: NVImage | null = null // base layer; defines image space to work in. Defined as this.volumes[0] in Niivue.loadVolumes\n  overlays: NVImage[] = [] // layers added on top of base image (e.g. masks or stat maps). Essentially everything after this.volumes[0] is an overlay. So is necessary?\n  deferredVolumes: ImageFromUrlOptions[] = []\n  deferredMeshes: LoadFromUrlParams[] = []\n  furthestVertexFromOrigin = 100\n  volScale: number[] = []\n  vox: number[] = []\n  mousePos = [0, 0]\n  screenSlices: Array<{\n    leftTopWidthHeight: number[]\n    axCorSag: SLICE_TYPE\n    sliceFrac: number\n    AxyzMxy: number[]\n    leftTopMM: number[]\n    fovMM: number[]\n    screen2frac?: number[]\n  }> = [] // empty array\n\n  cuboidVertexBuffer?: WebGLBuffer\n\n  otherNV: Niivue[] | null = null // another niivue instance that we wish to sync position with\n  volumeObject3D: NiivueObject3D | null = null\n  pivot3D = [0, 0, 0] // center for rendering rotation\n  furthestFromPivot = 10.0 // most distant point from pivot\n\n  currentClipPlaneIndex = 0\n  lastCalled = new Date().getTime()\n\n  selectedObjectId = -1\n  CLIP_PLANE_ID = 1\n  VOLUME_ID = 254\n  DISTANCE_FROM_CAMERA = -0.54\n  graph: Graph = {\n    LTWH: [0, 0, 640, 480],\n    opacity: 0.0,\n    vols: [0], // e.g. timeline for background volume only, e.g. [0,2] for first and third volumes\n    autoSizeMultiplanar: false,\n    normalizeValues: false,\n    isRangeCalMinMax: false\n  }\n\n  meshShaders: Array<{ Name: string; Frag: string; shader?: Shader }> = [\n    {\n      Name: 'Phong',\n      Frag: fragMeshShader\n    },\n    {\n      Name: 'Matte',\n      Frag: fragMeshMatteShader\n    },\n    {\n      Name: 'Harmonic',\n      Frag: fragMeshShaderSHBlue\n    },\n    {\n      Name: 'Hemispheric',\n      Frag: fragMeshHemiShader\n    },\n    {\n      Name: 'Crevice',\n      Frag: fragMeshShaderCrevice\n    },\n    {\n      Name: 'Edge',\n      Frag: fragMeshEdgeShader\n    },\n    {\n      Name: 'Diffuse',\n      Frag: fragMeshDiffuseEdgeShader\n    },\n    {\n      Name: 'Outline',\n      Frag: fragMeshOutlineShader\n    },\n    {\n      Name: 'Specular',\n      Frag: fragMeshSpecularEdgeShader\n    },\n    {\n      Name: 'Toon',\n      Frag: fragMeshToonShader\n    },\n    {\n      Name: 'Flat',\n      Frag: fragFlatMeshShader\n    },\n    {\n      Name: 'Matcap',\n      Frag: fragMeshMatcapShader\n    }\n  ]\n\n  // TODO just let users use DRAG_MODE instead\n  dragModes = {\n    contrast: DRAG_MODE.contrast,\n    measurement: DRAG_MODE.measurement,\n    none: DRAG_MODE.none,\n    pan: DRAG_MODE.pan,\n    slicer3D: DRAG_MODE.slicer3D,\n    callbackOnly: DRAG_MODE.callbackOnly\n  }\n\n  // TODO just let users use SLICE_TYPE instead\n  sliceTypeAxial = SLICE_TYPE.AXIAL\n  sliceTypeCoronal = SLICE_TYPE.CORONAL\n  sliceTypeSagittal = SLICE_TYPE.SAGITTAL\n  sliceTypeMultiplanar = SLICE_TYPE.MULTIPLANAR\n  sliceTypeRender = SLICE_TYPE.RENDER\n\n  // Event listeners\n  /**\n   * callback function to run when the right mouse button is released after dragging\n   * @example\n   * niivue.onDragRelease = () => {\n   *   console.log('drag ended')\n   * }\n   */\n  onDragRelease: (params: DragReleaseParams) => void = () => {} // function to call when contrast drag is released by default. Can be overridden by user\n\n  /**\n   * callback function to run when the left mouse button is released\n   * @example\n   * niivue.onMouseUp = () => {\n   *   console.log('mouse up')\n   * }\n   */\n  onMouseUp: (data: Partial<UIData>) => void = () => {}\n  /**\n   * callback function to run when the crosshair location changes\n   * @example\n   * niivue.onLocationChange = (data) => {\n   * console.log('location changed')\n   * console.log('mm: ', data.mm)\n   * console.log('vox: ', data.vox)\n   * console.log('frac: ', data.frac)\n   * console.log('values: ', data.values)\n   * }\n   */\n  onLocationChange: (location: unknown) => void = () => {}\n  /**\n   * callback function to run when the user changes the intensity range with the selection box action (right click)\n   * @example\n   * niivue.onIntensityChange = (volume) => {\n   * console.log('intensity changed')\n   * console.log('volume: ', volume)\n   * }\n   */\n  onIntensityChange: (volume: NVImage) => void = () => {}\n\n  /**\n   * callback function when clickToSegment is enabled and the user clicks on the image. data contains the volume of the segmented region in mm3 and mL\n   * @example\n   * niivue.onClickToSegment = (data) => {\n   * console.log('clicked to segment')\n   * console.log('volume mm3: ', data.mm3)\n   * console.log('volume mL: ', data.mL)\n   * }\n   */\n  onClickToSegment: (data: { mm3: number; mL: number }) => void = () => {}\n\n  /**\n   * callback function to run when a new volume is loaded\n   * @example\n   * niivue.onImageLoaded = (volume) => {\n   * console.log('volume loaded')\n   * console.log('volume: ', volume)\n   * }\n   */\n  onImageLoaded: (volume: NVImage) => void = () => {}\n\n  /**\n   * callback function to run when a new mesh is loaded\n   * @example\n   * niivue.onMeshLoaded = (mesh) => {\n   * console.log('mesh loaded')\n   * console.log('mesh: ', mesh)\n   * }\n   */\n  onMeshLoaded: (mesh: NVMesh) => void = () => {}\n\n  /**\n   * callback function to run when the user changes the volume when a 4D image is loaded\n   * @example\n   * niivue.onFrameChange = (volume, frameNumber) => {\n   * console.log('frame changed')\n   * console.log('volume: ', volume)\n   * console.log('frameNumber: ', frameNumber)\n   * }\n   */\n  onFrameChange: (volume: NVImage, index: number) => void = () => {}\n\n  /**\n   * callback function to run when niivue reports an error\n   * @example\n   * niivue.onError = (error) => {\n   * console.log('error: ', error)\n   * }\n   */\n  onError: () => void = () => {}\n\n  /// TODO was undocumented\n  onColormapChange: () => void = () => {}\n\n  /**\n   * callback function to run when niivue reports detailed info\n   * @example\n   * niivue.onInfo = (info) => {\n   * console.log('info: ', info)\n   * }\n   */\n  onInfo: () => void = () => {}\n\n  /**\n   * callback function to run when niivue reports a warning\n   * @example\n   * niivue.onWarn = (warn) => {\n   * console.log('warn: ', warn)\n   * }\n   */\n  onWarn: () => void = () => {}\n\n  /**\n   * callback function to run when niivue reports a debug message\n   * @example\n   * niivue.onDebug = (debug) => {\n   * console.log('debug: ', debug)\n   * }\n   */\n  onDebug: () => void = () => {}\n\n  /**\n   * callback function to run when a volume is added from a url\n   * @example\n   * niivue.onVolumeAddedFromUrl = (imageOptions, volume) => {\n   * console.log('volume added from url')\n   * console.log('imageOptions: ', imageOptions)\n   * console.log('volume: ', volume)\n   * }\n   */\n  onVolumeAddedFromUrl: (imageOptions: ImageFromUrlOptions, volume: NVImage) => void = () => {}\n  onVolumeWithUrlRemoved: (url: string) => void = () => {}\n\n  /**\n   * callback function to run when updateGLVolume is called (most users will not need to use\n   * @example\n   * niivue.onVolumeUpdated = () => {\n   * console.log('volume updated')\n   * }\n   */\n  onVolumeUpdated: () => void = () => {}\n\n  /**\n   * callback function to run when a mesh is added from a url\n   * @example\n   * niivue.onMeshAddedFromUrl = (meshOptions, mesh) => {\n   * console.log('mesh added from url')\n   * console.log('meshOptions: ', meshOptions)\n   * console.log('mesh: ', mesh)\n   * }\n   */\n  onMeshAddedFromUrl: (meshOptions: LoadFromUrlParams, mesh: NVMesh) => void = () => {}\n\n  // TODO seems redundant with onMeshLoaded\n  onMeshAdded: () => void = () => {}\n  onMeshWithUrlRemoved: (url: string) => void = () => {}\n\n  // not implemented anywhere...\n  onZoom3DChange: (zoom: number) => void = () => {}\n\n  /**\n   * callback function to run when the user changes the rotation of the 3D rendering\n   * @example\n   * niivue.onAzimuthElevationChange = (azimuth, elevation) => {\n   * console.log('azimuth: ', azimuth)\n   * console.log('elevation: ', elevation)\n   * }\n   */\n  onAzimuthElevationChange: (azimuth: number, elevation: number) => void = () => {}\n\n  /**\n   * callback function to run when the user changes the clip plane\n   * @example\n   * niivue.onClipPlaneChange = (clipPlane) => {\n   * console.log('clipPlane: ', clipPlane)\n   * }\n   */\n  onClipPlaneChange: (clipPlane: number[]) => void = () => {}\n  onCustomMeshShaderAdded: (fragmentShaderText: string, name: string) => void = () => {}\n  onMeshShaderChanged: (meshIndex: number, shaderIndex: number) => void = () => {}\n  onMeshPropertyChanged: (meshIndex: number, key: string, val: unknown) => void = () => {}\n\n  /**\n   * callback function to run when the user loads a new NiiVue document\n   * @example\n   * niivue.onDocumentLoaded = (document) => {\n   * console.log('document: ', document)\n   * }\n   */\n  onDocumentLoaded: (document: NVDocument) => void = () => {}\n\n  document = new NVDocument()\n\n  get scene(): Scene {\n    return this.document.scene\n  }\n\n  get opts(): NVConfigOptions {\n    return this.document.opts\n  }\n\n  get sliceMosaicString(): string {\n    return this.document.opts.sliceMosaicString || ''\n  }\n\n  set sliceMosaicString(newSliceMosaicString: string) {\n    this.document.opts.sliceMosaicString = newSliceMosaicString\n  }\n\n  mediaUrlMap: Map<NVImage | NVMesh, string> = new Map()\n  initialized = false\n  currentDrawUndoBitmap: number\n  loadingText: string\n\n  /**\n   * @param options  - options object to set modifiable Niivue properties\n   */\n  constructor(options: Partial<NVConfigOptions> = DEFAULT_OPTIONS) {\n    // populate Niivue with user supplied options\n    for (const name in options) {\n      // if the user supplied a function for a callback, use it, else use the default callback or nothing\n      if (typeof options[name as keyof typeof options] === 'function') {\n        this[name] = options[name]\n      } else {\n        this.opts[name] = DEFAULT_OPTIONS[name] === undefined ? DEFAULT_OPTIONS[name] : options[name]\n      }\n    }\n\n    if (this.opts.isHighResolutionCapable) {\n      this.uiData.dpr = window.devicePixelRatio || 1\n    } else {\n      this.uiData.dpr = 1\n    }\n\n    // now that opts have been parsed, set the current undo to max undo\n    this.currentDrawUndoBitmap = this.opts.maxDrawUndoBitmaps // analogy: cylinder position of a revolver\n\n    if (this.opts.drawingEnabled) {\n      this.createEmptyDrawing()\n    }\n\n    if (this.opts.thumbnail.length > 0) {\n      this.thumbnailVisible = true\n    }\n\n    this.loadingText = this.opts.loadingText\n    log.setLogLevel(this.opts.logLevel)\n  }\n\n  get volumes(): NVImage[] {\n    return this.document.volumes\n  }\n\n  set volumes(volumes) {\n    this.document.volumes = volumes\n  }\n\n  get meshes(): NVMesh[] {\n    return this.document.meshes\n  }\n\n  set meshes(meshes) {\n    this.document.meshes = meshes\n  }\n\n  get drawBitmap(): Uint8Array | null {\n    return this.document.drawBitmap\n  }\n\n  set drawBitmap(drawBitmap) {\n    this.document.drawBitmap = drawBitmap\n  }\n\n  get volScaleMultiplier(): number {\n    return this.scene.volScaleMultiplier\n  }\n\n  set volScaleMultiplier(scale) {\n    this.setScale(scale)\n  }\n\n  /**\n   * save webgl2 canvas as png format bitmap\n   * @param filename - filename for screen capture\n   * @example niivue.saveScene('test.png');\n   * @see {@link https://niivue.github.io/niivue/features/ui.html | live demo usage}\n   */\n  async saveScene(filename = 'niivue.png'): Promise<void> {\n    function saveBlob(blob: Blob, name: string): void {\n      const a = document.createElement('a')\n      document.body.appendChild(a)\n      a.style.display = 'none'\n      const url = window.URL.createObjectURL(blob)\n      a.href = url\n      a.download = name\n      a.click()\n      a.remove()\n    }\n\n    const canvas = this.canvas\n\n    if (!canvas) {\n      throw new Error('canvas not defined')\n    }\n    this.drawScene()\n    canvas.toBlob((blob) => {\n      if (!blob) {\n        return\n      }\n      if (filename === '') {\n        filename = `niivue-screenshot-${new Date().toString()}.png`\n        filename = filename.replace(/\\s/g, '_')\n      }\n      saveBlob(blob, filename)\n    })\n  }\n\n  /**\n   * attach the Niivue instance to the webgl2 canvas by element id\n   * @param id - the id of an html canvas element\n   * @param isAntiAlias - determines if anti-aliasing is requested (if not specified, AA usage depends on hardware)\n   * @example niivue = new Niivue().attachTo('gl')\n   * @example niivue.attachTo('gl')\n   * @see {@link https://niivue.github.io/niivue/features/basic.multiplanar.html | live demo usage}\n   */\n  async attachTo(id: string, isAntiAlias = null): Promise<this> {\n    await this.attachToCanvas(document.getElementById(id) as HTMLCanvasElement, isAntiAlias)\n    log.debug('attached to element with id: ', id)\n    return this\n  }\n\n  /**\n   * attach the Niivue instance to a canvas element directly\n   * @param canvas - the canvas element reference\n   * @example\n   * niivue = new Niivue()\n   * niivue.attachToCanvas(document.getElementById(id))\n   */\n  async attachToCanvas(canvas: HTMLCanvasElement, isAntiAlias: boolean | null = null): Promise<this> {\n    this.canvas = canvas\n    if (isAntiAlias === null) {\n      isAntiAlias = navigator.hardwareConcurrency > 6\n      log.debug('AntiAlias ', isAntiAlias, ' Threads ', navigator.hardwareConcurrency)\n    }\n    this.gl = this.canvas.getContext('webgl2', {\n      alpha: true,\n      antialias: isAntiAlias\n    })\n\n    log.info('NIIVUE VERSION ', version)\n\n    // set parent background container to black (default empty canvas color)\n    // avoids white cube around image in 3D render mode\n    this.canvas!.parentElement!.style.backgroundColor = 'black'\n    // fill all space in parent\n    if (this.opts.isResizeCanvas) {\n      this.canvas.style.width = '100%'\n      this.canvas.style.height = '100%'\n      this.canvas.style.display = 'block'\n      this.canvas.width = this.canvas.offsetWidth\n      this.canvas.height = this.canvas.offsetHeight\n      window.addEventListener('resize', () => {\n        requestAnimationFrame(() => {\n          this.resizeListener()\n        })\n      })\n      this.resizeObserver = new ResizeObserver(() => {\n        requestAnimationFrame(() => {\n          this.resizeListener()\n        })\n      })\n      this.resizeObserver.observe(this.canvas.parentElement!)\n    }\n    this.registerInteractions() // attach mouse click and touch screen event handlers for the canvas\n    await this.init()\n    this.drawScene()\n    return this\n  }\n\n  /**\n   * Sync the scene controls (orientation, crosshair location, etc.) from one Niivue instance to another. useful for using one canvas to drive another.\n   * @param otherNV - the other Niivue instance that is the main controller\n   * @example\n   * niivue1 = new Niivue()\n   * niivue2 = new Niivue()\n   * niivue2.syncWith(niivue1)\n   * @deprecated use broadcastTo instead\n   * @see {@link https://niivue.github.io/niivue/features/sync.mesh.html | live demo usage}\n   */\n  syncWith(otherNV: Niivue | Niivue[], syncOpts = { '2d': true, '3d': true }): void {\n    // if otherNV is not an array, make it an array of one\n    if (!(otherNV instanceof Array)) {\n      otherNV = [otherNV]\n    }\n    this.otherNV = otherNV\n    this.syncOpts = { ...syncOpts }\n  }\n\n  /**\n   * Sync the scene controls (orientation, crosshair location, etc.) from one Niivue instance to others. useful for using one canvas to drive another.\n   * @param otherNV - the other Niivue instance(s)\n   * @example\n   * niivue1 = new Niivue()\n   * niivue2 = new Niivue()\n   * niivue3 = new Niivue()\n   * niivue1.broadcastTo(niivue2)\n   * niivue1.broadcastTo([niivue2, niivue3])\n   * @see {@link https://niivue.github.io/niivue/features/sync.mesh.html | live demo usage}\n   */\n  broadcastTo(otherNV: Niivue | Niivue[], syncOpts = { '2d': true, '3d': true }): void {\n    // if otherNV is a single instance then make it an array of one\n    if (!(otherNV instanceof Array)) {\n      otherNV = [otherNV]\n    }\n    this.otherNV = otherNV\n    this.syncOpts = syncOpts\n  }\n\n  doSync3d(otherNV: Niivue): void {\n    otherNV.scene.renderAzimuth = this.scene.renderAzimuth\n    otherNV.scene.renderElevation = this.scene.renderElevation\n    otherNV.scene.volScaleMultiplier = this.scene.volScaleMultiplier\n  }\n\n  // both crosshair and zoomPan\n  doSync2d(otherNV: Niivue): void {\n    const thisMM = this.frac2mm(this.scene.crosshairPos)\n    otherNV.scene.crosshairPos = otherNV.mm2frac(thisMM)\n    otherNV.scene.pan2Dxyzmm = vec4.clone(this.scene.pan2Dxyzmm)\n  }\n\n  doSyncGamma(otherNV: Niivue): void {\n    // gamma not dependent on 2d/3d\n    const thisGamma = this.scene.gamma\n    const otherGamma = otherNV.scene.gamma\n    if (thisGamma !== otherGamma) {\n      otherNV.setGamma(thisGamma)\n    }\n  }\n\n  doSyncZoomPan(otherNV: Niivue): void {\n    otherNV.scene.pan2Dxyzmm = vec4.clone(this.scene.pan2Dxyzmm)\n  }\n\n  doSyncCrosshair(otherNV: Niivue): void {\n    const thisMM = this.frac2mm(this.scene.crosshairPos)\n    otherNV.scene.crosshairPos = otherNV.mm2frac(thisMM)\n  }\n\n  doSyncCalMin(otherNV: Niivue): void {\n    // only call updateGLVolume if the cal_min is different\n    // because updateGLVolume is expensive, but required to update the volume\n    if (this.volumes[0].cal_min !== otherNV.volumes[0].cal_min) {\n      otherNV.volumes[0].cal_min = this.volumes[0].cal_min\n      otherNV.updateGLVolume()\n    }\n  }\n\n  doSyncCalMax(otherNV: Niivue): void {\n    // only call updateGLVolume if the cal_max is different\n    // because updateGLVolume is expensive, but required to update the volume\n    if (this.volumes[0].cal_max !== otherNV.volumes[0].cal_max) {\n      otherNV.volumes[0].cal_max = this.volumes[0].cal_max\n      otherNV.updateGLVolume()\n    }\n  }\n\n  doSyncSliceType(otherNV: Niivue): void {\n    otherNV.setSliceType(this.opts.sliceType)\n  }\n\n  doSyncClipPlane(otherNV: Niivue): void {\n    otherNV.setClipPlane(this.scene.clipPlaneDepthAziElev)\n  }\n\n  /**\n   * Sync the scene controls (orientation, crosshair location, etc.) from one Niivue instance to another. useful for using one canvas to drive another.\n   * @internal\n   * @example\n   * niivue1 = new Niivue()\n   * niivue2 = new Niivue()\n   * niivue2.syncWith(niivue1)\n   * niivue2.sync()\n   */\n  sync(): void {\n    if (!this.gl || !this.otherNV || typeof this.otherNV === 'undefined') {\n      return\n    }\n    // canvas must have focus to send messages issue706\n    if (!(this.gl.canvas as HTMLCanvasElement).matches(':focus')) {\n      return\n    }\n    for (let i = 0; i < this.otherNV.length; i++) {\n      if (this.otherNV[i] === this) {\n        continue\n      }\n      // gamma\n      if (this.syncOpts.gamma) {\n        this.doSyncGamma(this.otherNV[i])\n      }\n      // crosshair\n      if (this.syncOpts.crosshair) {\n        this.doSyncCrosshair(this.otherNV[i])\n      }\n      // zoomPan\n      if (this.syncOpts.zoomPan) {\n        this.doSyncZoomPan(this.otherNV[i])\n      }\n      // sliceType\n      if (this.syncOpts.sliceType) {\n        this.doSyncSliceType(this.otherNV[i])\n      }\n      // cal_min\n      if (this.syncOpts.cal_min) {\n        this.doSyncCalMin(this.otherNV[i])\n      }\n      // cal_max\n      if (this.syncOpts.cal_max) {\n        this.doSyncCalMax(this.otherNV[i])\n      }\n      // clipPlane\n      if (this.syncOpts.clipPlane) {\n        this.doSyncClipPlane(this.otherNV[i])\n      }\n      // legacy 2d option for multiple properties\n      if (this.syncOpts['2d']) {\n        this.doSync2d(this.otherNV[i])\n      }\n      // legacy 3d option for multiple properties\n      if (this.syncOpts['3d']) {\n        this.doSync3d(this.otherNV[i])\n      }\n      this.otherNV[i].drawScene()\n      this.otherNV[i].createOnLocationChange()\n    }\n  }\n\n  /** Not documented publicly for now\n   * test if two arrays have equal values for each element\n   * @param a - the first array\n   * @param b - the second array\n   * @example Niivue.arrayEquals(a, b)\n   *\n   * TODO this should maybe just use array-equal from NPM\n   */\n  arrayEquals(a: unknown[], b: unknown[]): boolean {\n    return Array.isArray(a) && Array.isArray(b) && a.length === b.length && a.every((val, index) => val === b[index])\n  }\n\n  /**\n   * callback function to handle resize window events, redraws the scene.\n   * @internal\n   */\n  resizeListener(): void {\n    if (!this.canvas || !this.gl) {\n      return\n    }\n    if (!this.opts.isResizeCanvas) {\n      if (this.opts.isHighResolutionCapable) {\n        log.warn('isHighResolutionCapable requires isResizeCanvas')\n        this.opts.isHighResolutionCapable = false\n      }\n      this.uiData.dpr = 1\n      this.drawScene()\n      return\n    }\n    this.canvas.style.width = '100%'\n    this.canvas.style.height = '100%'\n    this.canvas.style.display = 'block'\n\n    // https://webglfundamentals.org/webgl/lessons/webgl-resizing-the-canvas.html\n    // https://www.khronos.org/webgl/wiki/HandlingHighDPI\n    if (this.opts.isHighResolutionCapable) {\n      this.uiData.dpr = window.devicePixelRatio || 1\n      log.debug('devicePixelRatio: ' + this.uiData.dpr)\n    } else {\n      this.uiData.dpr = 1\n    }\n    if ('width' in this.canvas.parentElement!) {\n      this.canvas.width = (this.canvas.parentElement.width as number) * this.uiData.dpr\n      // @ts-expect-error not sure why height is not defined for HTMLElement\n      this.canvas.height = this.canvas.parentElement.height * this.uiData.dpr\n    } else {\n      this.canvas.width = this.canvas.offsetWidth * this.uiData.dpr\n      this.canvas.height = this.canvas.offsetHeight * this.uiData.dpr\n    }\n    this.gl.viewport(0, 0, this.gl.canvas.width, this.gl.canvas.height)\n    this.drawScene()\n  }\n\n  /* Not included in public docs\n   * The following two functions are to address offset issues\n   * https://stackoverflow.com/questions/42309715/how-to-correctly-pass-mouse-coordinates-to-webgl\n   * note:  no test yet\n   */\n  /**\n   * callback to handle mouse move events relative to the canvas\n   * @internal\n   * @returns the mouse position relative to the canvas\n   */\n  getRelativeMousePosition(event: MouseEvent, target?: EventTarget | null): { x: number; y: number } | undefined {\n    target = target || event.target\n    if (!target) {\n      return\n    }\n    // @ts-expect-error -- not sure how this works, this would be an EventTarget?\n    const rect = target.getBoundingClientRect()\n    return {\n      x: event.clientX - rect.left,\n      y: event.clientY - rect.top\n    }\n  }\n\n  // not included in public docs\n  // assumes target or event.target is canvas\n  // note: no test yet\n  getNoPaddingNoBorderCanvasRelativeMousePosition(\n    event: MouseEvent,\n    target: EventTarget\n  ): { x: number; y: number } | undefined {\n    target = target || event.target\n    const pos = this.getRelativeMousePosition(event, target)\n    return pos\n  }\n\n  // not included in public docs\n  // handler for context menu (right click)\n  // here, we disable the normal context menu so that\n  // we can use some custom right click events\n  // note: no test yet\n  mouseContextMenuListener(e: MouseEvent): void {\n    e.preventDefault()\n  }\n\n  // not included in public docs\n  // handler for all mouse button presses\n  // note: no test yet\n  mouseDownListener(e: MouseEvent): void {\n    e.preventDefault()\n    // var rect = this.canvas.getBoundingClientRect();\n    this.drawPenLocation = [NaN, NaN, NaN]\n    this.drawPenAxCorSag = -1\n    this.uiData.mousedown = true\n    // reset drag positions used previously.\n    this.setDragStart(0, 0)\n    this.setDragEnd(0, 0)\n    log.debug('mouse down')\n    log.debug(e)\n    // record tile where mouse clicked\n    const pos = this.getNoPaddingNoBorderCanvasRelativeMousePosition(e, this.gl.canvas)\n    if (!pos) {\n      return\n    }\n\n    const [x, y] = [pos.x * this.uiData.dpr!, pos.y * this.uiData.dpr!]\n    if (this.opts.clickToSegment) {\n      this.clickToSegmentXY = [x, y]\n    }\n    const label = this.getLabelAtPoint([x, y])\n    if (label) {\n      // check for user defined onclick handler\n      if (label.onClick) {\n        label.onClick(label)\n        return\n      }\n      // find associated mesh\n      for (const mesh of this.meshes) {\n        if (mesh.type !== MeshType.CONNECTOME) {\n          continue\n        }\n        for (const node of mesh.nodes as NVConnectomeNode[]) {\n          if (node.label === label) {\n            this.scene.crosshairPos = this.mm2frac([node.x, node.y, node.z])\n            this.updateGLVolume()\n            this.drawScene()\n          }\n        }\n      }\n    }\n    this.uiData.clickedTile = this.tileIndex(x, y)\n    // respond to different types of mouse clicks\n    if (e.button === LEFT_MOUSE_BUTTON && e.shiftKey) {\n      this.uiData.mouseButtonCenterDown = true\n      this.mouseCenterButtonHandler(e)\n    } else if (e.button === LEFT_MOUSE_BUTTON) {\n      this.uiData.mouseButtonLeftDown = true\n      this.mouseLeftButtonHandler(e)\n    } else if (e.button === RIGHT_MOUSE_BUTTON) {\n      this.uiData.mouseButtonRightDown = true\n      this.mouseRightButtonHandler(e)\n    } else if (e.button === CENTER_MOUSE_BUTTON) {\n      this.uiData.mouseButtonCenterDown = true\n      this.mouseCenterButtonHandler(e)\n    }\n  }\n\n  // not included in public docs\n  // handler for mouse left button down\n  // note: no test yet\n  mouseLeftButtonHandler(e: MouseEvent): void {\n    const pos = this.getNoPaddingNoBorderCanvasRelativeMousePosition(e, this.gl.canvas)\n    this.mouseDown(pos!.x, pos!.y)\n    this.mouseClick(pos!.x, pos!.y)\n  }\n\n  // not included in public docs\n  // handler for mouse center button down\n  // note: no test yet\n  mouseCenterButtonHandler(e: MouseEvent): void {\n    const pos = this.getNoPaddingNoBorderCanvasRelativeMousePosition(e, this.gl.canvas)\n    this.mousePos = [pos!.x * this.uiData.dpr!, pos!.y * this.uiData.dpr!]\n    if (this.opts.dragMode === DRAG_MODE.none) {\n      return\n    }\n    this.setDragStart(pos!.x, pos!.y)\n    if (!this.uiData.isDragging) {\n      this.uiData.pan2DxyzmmAtMouseDown = vec4.clone(this.scene.pan2Dxyzmm)\n    }\n    this.uiData.isDragging = true\n    this.uiData.dragClipPlaneStartDepthAziElev = this.scene.clipPlaneDepthAziElev\n  }\n\n  // not included in public docs\n  // handler for mouse right button down\n  // note: no test yet\n  mouseRightButtonHandler(e: MouseEvent): void {\n    // this.uiData.isDragging = true;\n    const pos = this.getNoPaddingNoBorderCanvasRelativeMousePosition(e, this.gl.canvas)\n    this.mousePos = [pos!.x * this.uiData.dpr!, pos!.y * this.uiData.dpr!]\n    if (this.opts.dragMode === DRAG_MODE.none) {\n      return\n    }\n    this.setDragStart(pos!.x, pos!.y)\n    if (!this.uiData.isDragging) {\n      this.uiData.pan2DxyzmmAtMouseDown = vec4.clone(this.scene.pan2Dxyzmm)\n    }\n    this.uiData.isDragging = true\n    this.uiData.dragClipPlaneStartDepthAziElev = this.scene.clipPlaneDepthAziElev\n  }\n\n  /**\n   * calculate the the min and max voxel indices from an array of two values (used in selecting intensities with the selection box)\n   * @param array - an array of two values\n   * @returns an array of two values representing the min and max voxel indices\n   */\n  calculateMinMaxVoxIdx(array: number[]): number[] {\n    if (array.length > 2) {\n      throw new Error('array must not contain more than two values')\n    }\n    return [Math.floor(Math.min(array[0], array[1])), Math.floor(Math.max(array[0], array[1]))]\n  }\n\n  // not included in public docs\n  // note: no test yet\n  calculateNewRange({ volIdx = 0 } = {}): void {\n    if (this.opts.sliceType === SLICE_TYPE.RENDER && this.sliceMosaicString.length < 1) {\n      return\n    }\n    if (this.uiData.dragStart[0] === this.uiData.dragEnd[0] && this.uiData.dragStart[1] === this.uiData.dragEnd[1]) {\n      return\n    }\n    // calculate our box\n    let frac = this.canvasPos2frac([this.uiData.dragStart[0], this.uiData.dragStart[1]])\n    if (frac[0] < 0) {\n      return\n    }\n    const startVox = this.frac2vox(frac, volIdx)\n    frac = this.canvasPos2frac([this.uiData.dragEnd[0], this.uiData.dragEnd[1]])\n    if (frac[0] < 0) {\n      return\n    }\n    const endVox = this.frac2vox(frac, volIdx)\n\n    let hi = -Number.MAX_VALUE\n    let lo = Number.MAX_VALUE\n    const xrange = this.calculateMinMaxVoxIdx([startVox[0], endVox[0]])\n    const yrange = this.calculateMinMaxVoxIdx([startVox[1], endVox[1]])\n    const zrange = this.calculateMinMaxVoxIdx([startVox[2], endVox[2]])\n\n    // for our constant dimension we add one so that the for loop runs at least once\n    if (startVox[0] - endVox[0] === 0) {\n      xrange[1] = startVox[0] + 1\n    } else if (startVox[1] - endVox[1] === 0) {\n      yrange[1] = startVox[1] + 1\n    } else if (startVox[2] - endVox[2] === 0) {\n      zrange[1] = startVox[2] + 1\n    }\n\n    const hdr = this.volumes[volIdx].hdr\n    const img = this.volumes[volIdx].img\n    if (!hdr || !img) {\n      return\n    }\n\n    const xdim = hdr.dims[1]\n    const ydim = hdr.dims[2]\n    for (let z = zrange[0]; z < zrange[1]; z++) {\n      const zi = z * xdim * ydim\n      for (let y = yrange[0]; y < yrange[1]; y++) {\n        const yi = y * xdim\n        for (let x = xrange[0]; x < xrange[1]; x++) {\n          const index = zi + yi + x\n          if (lo > img[index]) {\n            lo = img[index]\n          }\n          if (hi < img[index]) {\n            hi = img[index]\n          }\n        }\n      }\n    }\n    if (lo >= hi) {\n      return\n    } // no variability or outside volume\n    const mnScale = intensityRaw2Scaled(hdr, lo)\n    const mxScale = intensityRaw2Scaled(hdr, hi)\n    this.volumes[volIdx].cal_min = mnScale\n    this.volumes[volIdx].cal_max = mxScale\n    this.onIntensityChange(this.volumes[volIdx])\n  }\n\n  generateMouseUpCallback(fracStart: vec3, fracEnd: vec3): void {\n    // calculate details for callback\n    const tileStart = this.tileIndex(this.uiData.dragStart[0], this.uiData.dragStart[1])\n    const tileEnd = this.tileIndex(this.uiData.dragEnd[0], this.uiData.dragEnd[1])\n    // a tile index of -1 indicates invalid: drag not constrained to one tile\n    let tileIdx = -1\n    if (tileStart === tileEnd) {\n      tileIdx = tileEnd\n    }\n    let axCorSag = -1\n    if (tileIdx >= 0) {\n      axCorSag = this.screenSlices[tileIdx].axCorSag\n    }\n    const mmStart = this.frac2mm(fracStart)\n    const mmEnd = this.frac2mm(fracEnd)\n    const v = vec3.create()\n    vec3.sub(v, vec3.fromValues(mmStart[0], mmStart[1], mmStart[2]), vec3.fromValues(mmEnd[0], mmEnd[1], mmEnd[2]))\n    const mmLength = vec3.len(v)\n    const voxStart = this.frac2vox(fracStart)\n    const voxEnd = this.frac2vox(fracEnd)\n    this.onDragRelease({\n      fracStart,\n      fracEnd,\n      voxStart,\n      voxEnd,\n      mmStart,\n      mmEnd,\n      mmLength,\n      tileIdx,\n      axCorSag\n    })\n  }\n\n  // not included in public docs\n  // handler for mouse button up (all buttons)\n  // note: no test yet\n  mouseUpListener(): void {\n    function isFunction(test: unknown): boolean {\n      return Object.prototype.toString.call(test).indexOf('Function') > -1\n    }\n    // let fracPos = this.canvasPos2frac(this.mousePos);\n    const uiData = {\n      mouseButtonRightDown: this.uiData.mouseButtonRightDown,\n      mouseButtonCenterDown: this.uiData.mouseButtonCenterDown,\n      isDragging: this.uiData.isDragging,\n      mousePos: this.mousePos,\n      fracPos: this.canvasPos2frac(this.mousePos)\n      // xyzMM: this.frac2mm(fracPos),\n    }\n    this.uiData.mousedown = false\n    this.uiData.mouseButtonRightDown = false\n    const wasCenterDown = this.uiData.mouseButtonCenterDown\n    this.uiData.mouseButtonCenterDown = false\n    this.uiData.mouseButtonLeftDown = false\n    if (this.drawPenFillPts.length > 0) {\n      this.drawPenFilled()\n    } else if (this.drawPenAxCorSag >= 0) {\n      if (this.opts.clickToSegment) {\n        // copy clickToSegment bitmap to drawBitmap.\n        // determine which bitmap has more non-zero values, indicating it is more recent\n        const sumBitmap = this.sumBitmap(this.drawBitmap)\n        const sumSeg = this.sumBitmap(this.clickToSegmentGrowingBitmap)\n        if (sumSeg > sumBitmap) {\n          this.updateBitmapFromClickToSegment()\n        }\n      }\n    }\n    // add the bitmap after the clickToSegment update\n    this.drawAddUndoBitmap()\n    this.drawPenLocation = [NaN, NaN, NaN]\n    this.drawPenAxCorSag = -1\n    if (isFunction(this.onMouseUp)) {\n      this.onMouseUp(uiData)\n    }\n    if (this.uiData.isDragging) {\n      this.uiData.isDragging = false\n      if (this.opts.dragMode === DRAG_MODE.callbackOnly) {\n        this.drawScene()\n      } // hide selectionbox\n      const fracStart = this.canvasPos2frac([this.uiData.dragStart[0], this.uiData.dragStart[1]])\n      const fracEnd = this.canvasPos2frac([this.uiData.dragEnd[0], this.uiData.dragEnd[1]])\n      this.generateMouseUpCallback(fracStart, fracEnd)\n      // if roiSelection drag mode\n      if (this.opts.dragMode === DRAG_MODE.roiSelection) {\n        // do not call drawScene so that the selection box remains visible\n        return\n      }\n      if (this.opts.dragMode !== DRAG_MODE.contrast) {\n        return\n      }\n      if (wasCenterDown) {\n        return\n      }\n      if (this.uiData.dragStart[0] === this.uiData.dragEnd[0] && this.uiData.dragStart[1] === this.uiData.dragEnd[1]) {\n        return\n      }\n      this.calculateNewRange({ volIdx: 0 })\n      this.refreshLayers(this.volumes[0], 0)\n    }\n    this.drawScene()\n  }\n\n  // not included in public docs\n  checkMultitouch(e: TouchEvent): void {\n    if (this.uiData.touchdown && !this.uiData.multiTouchGesture) {\n      const rect = this.canvas!.getBoundingClientRect()\n      this.mouseDown(e.touches[0].clientX - rect.left, e.touches[0].clientY - rect.top)\n\n      this.mouseClick(e.touches[0].clientX - rect.left, e.touches[0].clientY - rect.top)\n    }\n  }\n\n  // not included in public docs\n  // handler for single finger touch event (like mouse down)\n  // note: no test yet\n  touchStartListener(e: TouchEvent): void {\n    e.preventDefault()\n    if (!this.uiData.touchTimer) {\n      this.uiData.touchTimer = setTimeout(() => {\n        // this.drawScene()\n        this.resetBriCon(e)\n      }, this.opts.longTouchTimeout)\n    }\n    this.uiData.touchdown = true\n    this.uiData.currentTouchTime = new Date().getTime()\n    const timeSinceTouch = this.uiData.currentTouchTime - this.uiData.lastTouchTime\n    if (timeSinceTouch < this.opts.doubleTouchTimeout && timeSinceTouch > 0) {\n      this.uiData.doubleTouch = true\n      this.setDragStart(\n        e.targetTouches[0].clientX - (e.target as HTMLElement).getBoundingClientRect().left,\n        e.targetTouches[0].clientY - (e.target as HTMLElement).getBoundingClientRect().top\n      )\n      this.resetBriCon(e)\n      this.uiData.lastTouchTime = this.uiData.currentTouchTime\n      return\n    } else {\n      // reset values to be ready for next touch\n      this.uiData.doubleTouch = false\n      this.setDragStart(0, 0)\n      this.setDragEnd(0, 0)\n      this.uiData.lastTouchTime = this.uiData.currentTouchTime\n    }\n    if (this.uiData.touchdown && e.touches.length < 2) {\n      this.uiData.multiTouchGesture = false\n    } else {\n      this.uiData.multiTouchGesture = true\n    }\n    setTimeout(this.checkMultitouch.bind(this), 1, e)\n  }\n\n  // not included in public docs\n  // handler for touchend (finger lift off screen)\n  // note: no test yet\n  touchEndListener(e: TouchEvent): void {\n    e.preventDefault()\n    this.uiData.touchdown = false\n    this.uiData.lastTwoTouchDistance = 0\n    this.uiData.multiTouchGesture = false\n    if (this.uiData.touchTimer) {\n      clearTimeout(this.uiData.touchTimer)\n      this.uiData.touchTimer = null\n    }\n    if (this.uiData.isDragging) {\n      this.uiData.isDragging = false\n      // if drag mode is contrast, and the user double taps and drags...\n      if (this.opts.dragMode === DRAG_MODE.contrast) {\n        this.calculateNewRange()\n        this.refreshLayers(this.volumes[0], 0)\n      }\n      const fracStart = this.canvasPos2frac([this.uiData.dragStart[0], this.uiData.dragStart[1]])\n      const fracEnd = this.canvasPos2frac([this.uiData.dragEnd[0], this.uiData.dragEnd[1]])\n      // just use the generateMouseUpCallback since it\n      // does everything we need (same as the behaviour in mouseUpListener)\n      this.generateMouseUpCallback(fracStart, fracEnd)\n    }\n    // mouseUp generates this.drawScene();\n    this.mouseUpListener()\n  }\n\n  // not included in public docs\n  // handler for mouse move over canvas\n  // note: no test yet\n  mouseMoveListener(e: MouseEvent): void {\n    // move crosshair and change slices if mouse click and move\n    if (this.uiData.mousedown) {\n      const pos = this.getNoPaddingNoBorderCanvasRelativeMousePosition(e, this.gl.canvas)\n      // ignore if mouse moves outside of tile of initial click\n      if (!pos) {\n        return\n      }\n\n      const x = pos.x * this.uiData.dpr!\n      const y = pos.y * this.uiData.dpr!\n      const tile = this.tileIndex(x, y)\n      if (tile !== this.uiData.clickedTile) {\n        return\n      }\n      if (this.uiData.mouseButtonLeftDown) {\n        this.mouseMove(pos.x, pos.y)\n        this.mouseClick(pos.x, pos.y)\n      } else if (this.uiData.mouseButtonRightDown || this.uiData.mouseButtonCenterDown) {\n        this.setDragEnd(pos.x, pos.y)\n      }\n      this.drawScene()\n      this.uiData.prevX = this.uiData.currX\n      this.uiData.prevY = this.uiData.currY\n    } else if (!this.uiData.mousedown && this.opts.clickToSegment) {\n      const pos = this.getNoPaddingNoBorderCanvasRelativeMousePosition(e, this.gl.canvas)\n      // ignore if mouse moves outside of tile of initial click\n      if (!pos) {\n        return\n      }\n      const x = pos.x * this.uiData.dpr!\n      const y = pos.y * this.uiData.dpr!\n      this.mousePos = [x, y]\n      this.drawScene()\n    }\n  }\n\n  // not included in public docs\n  // note: should update this to accept a volume index to reset a selected volume rather than only the background (TODO)\n  // reset brightness and contrast to global min and max\n  // note: no test yet\n  resetBriCon(msg: TouchEvent | MouseEvent | null = null): void {\n    // this.volumes[0].cal_min = this.volumes[0].global_min;\n    // this.volumes[0].cal_max = this.volumes[0].global_max;\n    // don't reset bri/con if the user is in 3D mode and double clicks\n    if (this.uiData.isDragging) {\n      return\n    }\n    let isRender = false\n    if (this.opts.sliceType === SLICE_TYPE.RENDER) {\n      isRender = true\n    }\n    let x = 0\n    let y = 0\n    if (msg !== null) {\n      // if a touch event\n      if ('targetTouches' in msg) {\n        x = msg.targetTouches[0].clientX - (msg.target as HTMLElement).getBoundingClientRect().left\n        y = msg.targetTouches[0].clientY - (msg.target as HTMLElement).getBoundingClientRect().top\n      } else {\n        // if a mouse event\n        x = msg.offsetX\n        y = msg.offsetY\n      }\n      x *= this.uiData.dpr!\n      y *= this.uiData.dpr!\n      // test if render is one of the tiles\n      if (this.inRenderTile(x, y) >= 0) {\n        isRender = true\n      }\n    }\n    if (isRender) {\n      this.uiData.mouseDepthPicker = true\n      this.drawScene()\n      this.drawScene() // this duplicate drawScene is necessary for depth picking. DO NOT REMOVE\n      return\n    }\n    if (this.opts.dragMode === DRAG_MODE.slicer3D) {\n      return\n    }\n    if (this.volumes.length < 1) {\n      return\n    } // issue468, AFTER render depth picking\n    if (this.uiData.doubleTouch) {\n      return\n    }\n    this.volumes[0].cal_min = this.volumes[0].robust_min\n    this.volumes[0].cal_max = this.volumes[0].robust_max\n    this.onIntensityChange(this.volumes[0])\n    this.refreshLayers(this.volumes[0], 0)\n    this.drawScene()\n  }\n\n  setDragStart(x: number, y: number): void {\n    x *= this.uiData.dpr!\n    y *= this.uiData.dpr!\n    this.uiData.dragStart[0] = x\n    this.uiData.dragStart[1] = y\n  }\n\n  setDragEnd(x: number, y: number): void {\n    x *= this.uiData.dpr!\n    y *= this.uiData.dpr!\n    this.uiData.dragEnd[0] = x\n    this.uiData.dragEnd[1] = y\n  }\n\n  // not included in public docs\n  // handler for touch move (moving finger on screen)\n  // note: no test yet\n  touchMoveListener(e: TouchEvent): void {\n    if (this.uiData.touchdown && e.touches.length < 2) {\n      const rect = this.canvas!.getBoundingClientRect()\n      if (!this.uiData.isDragging) {\n        this.uiData.pan2DxyzmmAtMouseDown = vec4.clone(this.scene.pan2Dxyzmm)\n      }\n      this.uiData.isDragging = true\n      if (this.uiData.doubleTouch && this.uiData.isDragging) {\n        this.setDragEnd(\n          e.targetTouches[0].clientX - (e.target as HTMLElement).getBoundingClientRect().left,\n          e.targetTouches[0].clientY - (e.target as HTMLElement).getBoundingClientRect().top\n        )\n        this.drawScene()\n        return\n      }\n      this.mouseClick(e.touches[0].clientX - rect.left, e.touches[0].clientY - rect.top)\n      this.mouseMove(e.touches[0].clientX - rect.left, e.touches[0].clientY - rect.top)\n    } else {\n      // Check this event for 2-touch Move/Pinch/Zoom gesture\n      this.handlePinchZoom(e)\n    }\n  }\n\n  // not included in public docs\n  handlePinchZoom(e: TouchEvent): void {\n    if (e.targetTouches.length === 2 && e.changedTouches.length === 2) {\n      const dist = Math.hypot(e.touches[0].pageX - e.touches[1].pageX, e.touches[0].pageY - e.touches[1].pageY)\n\n      const rect = this.canvas!.getBoundingClientRect()\n      this.mousePos = [e.touches[0].clientX - rect.left, e.touches[0].clientY - rect.top]\n\n      // scroll 2D slices\n      if (dist < this.uiData.lastTwoTouchDistance) {\n        // this.scene.volScaleMultiplier = Math.max(0.5, this.scene.volScaleMultiplier * 0.95);\n        this.sliceScroll2D(-0.01, e.touches[0].clientX - rect.left, e.touches[0].clientY - rect.top)\n      } else {\n        // this.scene.volScaleMultiplier = Math.min(2.0, this.scene.volScaleMultiplier * 1.05);\n        this.sliceScroll2D(0.01, e.touches[0].clientX - rect.left, e.touches[0].clientY - rect.top)\n      }\n      // this.drawScene();\n      this.uiData.lastTwoTouchDistance = dist\n    }\n  }\n\n  // not included in public docs\n  // handler for keyboard shortcuts\n  keyUpListener(e: KeyboardEvent): void {\n    if (e.code === this.opts.clipPlaneHotKey) {\n      /* if (this.opts.sliceType!= SLICE_TYPE.RENDER) {\n      return;\n    } */ // bravo\n      const now = new Date().getTime()\n      const elapsed = now - this.lastCalled\n      if (elapsed > this.opts.keyDebounceTime) {\n        this.currentClipPlaneIndex = (this.currentClipPlaneIndex + 1) % 7\n        switch (this.currentClipPlaneIndex) {\n          case 0: // NONE\n            this.scene.clipPlaneDepthAziElev = [2, 0, 0]\n            break\n          case 1: // left a 270 e 0\n            // this.scene.clipPlane = [1, 0, 0, 0];\n            this.scene.clipPlaneDepthAziElev = [0, 270, 0]\n            break\n          case 2: // right a 90 e 0\n            this.scene.clipPlaneDepthAziElev = [0, 90, 0]\n            break\n          case 3: // posterior a 0 e 0\n            this.scene.clipPlaneDepthAziElev = [0, 0, 0]\n            break\n          case 4: // anterior a 0 e 0\n            this.scene.clipPlaneDepthAziElev = [0, 180, 0]\n            break\n          case 5: // inferior a 0 e -90\n            this.scene.clipPlaneDepthAziElev = [0, 0, -90]\n            break\n          case 6: // superior: a 0 e 90'\n            this.scene.clipPlaneDepthAziElev = [0, 0, 90]\n            break\n        }\n        this.setClipPlane(this.scene.clipPlaneDepthAziElev)\n      }\n      this.lastCalled = now\n    } else if (e.code === this.opts.viewModeHotKey) {\n      const now = new Date().getTime()\n      const elapsed = now - this.lastCalled\n      if (elapsed > this.opts.keyDebounceTime) {\n        this.setSliceType((this.opts.sliceType + 1) % 5) // 5 total slice types\n        this.lastCalled = now\n      }\n    }\n  }\n\n  keyDownListener(e: KeyboardEvent): void {\n    if (e.code === 'KeyH' && this.opts.sliceType === SLICE_TYPE.RENDER) {\n      this.setRenderAzimuthElevation(this.scene.renderAzimuth - 1, this.scene.renderElevation)\n    } else if (e.code === 'KeyL' && this.opts.sliceType === SLICE_TYPE.RENDER) {\n      this.setRenderAzimuthElevation(this.scene.renderAzimuth + 1, this.scene.renderElevation)\n    } else if (e.code === 'KeyJ' && this.opts.sliceType === SLICE_TYPE.RENDER) {\n      this.setRenderAzimuthElevation(this.scene.renderAzimuth, this.scene.renderElevation + 1)\n    } else if (e.code === 'KeyK' && this.opts.sliceType === SLICE_TYPE.RENDER) {\n      this.setRenderAzimuthElevation(this.scene.renderAzimuth, this.scene.renderElevation - 1)\n    } else if (e.code === 'KeyH' && this.opts.sliceType !== SLICE_TYPE.RENDER) {\n      this.moveCrosshairInVox(-1, 0, 0)\n    } else if (e.code === 'KeyL' && this.opts.sliceType !== SLICE_TYPE.RENDER) {\n      this.moveCrosshairInVox(1, 0, 0)\n    } else if (e.code === 'KeyU' && this.opts.sliceType !== SLICE_TYPE.RENDER && e.ctrlKey) {\n      this.moveCrosshairInVox(0, 0, 1)\n    } else if (e.code === 'KeyD' && this.opts.sliceType !== SLICE_TYPE.RENDER && e.ctrlKey) {\n      this.moveCrosshairInVox(0, 0, -1)\n    } else if (e.code === 'KeyJ' && this.opts.sliceType !== SLICE_TYPE.RENDER) {\n      this.moveCrosshairInVox(0, -1, 0)\n    } else if (e.code === 'KeyK' && this.opts.sliceType !== SLICE_TYPE.RENDER) {\n      this.moveCrosshairInVox(0, 1, 0)\n    } else if (e.code === 'KeyM' && this.opts.sliceType !== SLICE_TYPE.RENDER) {\n      this.opts.dragMode++\n      if (this.opts.dragMode >= DRAG_MODE.slicer3D) {\n        this.opts.dragMode = DRAG_MODE.none\n      }\n      log.info('drag mode changed to ', DRAG_MODE[this.opts.dragMode])\n    } else if (e.code === 'ArrowLeft') {\n      // only works for background (first loaded image is index 0)\n      this.setFrame4D(this.volumes[0].id, this.volumes[0].frame4D - 1)\n    } else if (e.code === 'ArrowRight') {\n      // only works for background (first loaded image is index 0)\n      this.setFrame4D(this.volumes[0].id, this.volumes[0].frame4D + 1)\n    } else if (e.code === 'Slash' && e.shiftKey) {\n      alert(`NIIVUE VERSION: ${version}`)\n    }\n  }\n\n  // not included in public docs\n  // handler for scroll wheel events (slice scrolling)\n  // note: no test yet\n  wheelListener(e: WheelEvent): void {\n    // scroll 2D slices\n    e.preventDefault()\n    e.stopPropagation()\n    // if thumbnailVisible this do not activate a canvas interaction when scrolling\n    if (this.thumbnailVisible) {\n      return\n    }\n    // check that the user has actually created an ROI already.\n    const dragStartSum = this.uiData.dragStart.reduce((a, b) => a + b, 0)\n    const dragEndSum = this.uiData.dragEnd.reduce((a, b) => a + b, 0)\n    const validDrag = dragStartSum > 0 && dragEndSum > 0\n    // if dragMode is roiSelection, grow or shrink the selection box\n    // by scrolling the mouse wheel. Grows by 1 pixel per scroll\n    if (this.opts.dragMode === DRAG_MODE.roiSelection && validDrag) {\n      const delta = e.deltaY > 0 ? 1 : -1\n      // update the uiData.dragStart and uiData.dragEnd values to grow or shrink the selection box\n      if (this.uiData.dragStart[0] < this.uiData.dragEnd[0]) {\n        this.uiData.dragStart[0] -= delta\n        this.uiData.dragEnd[0] += delta\n      } else {\n        this.uiData.dragStart[0] += delta\n        this.uiData.dragEnd[0] -= delta\n      }\n      if (this.uiData.dragStart[1] < this.uiData.dragEnd[1]) {\n        this.uiData.dragStart[1] -= delta\n        this.uiData.dragEnd[1] += delta\n      } else {\n        this.uiData.dragStart[1] += delta\n        this.uiData.dragEnd[1] -= delta\n      }\n      // draw the scene\n      this.uiData.isDragging = true // set is dragging so the selection box is drawn for this drawScene call\n      this.drawScene() // drawScene uses isDragging to determine if the selection box or ROI should be drawn\n      this.uiData.isDragging = false // reset is dragging\n      const tileIdx = this.tileIndex(this.uiData.dragStart[0], this.uiData.dragStart[1])\n      this.generateMouseUpCallback(\n        this.screenXY2TextureFrac(this.uiData.dragStart[0], this.uiData.dragStart[1], tileIdx),\n        this.screenXY2TextureFrac(this.uiData.dragEnd[0], this.uiData.dragEnd[1], tileIdx)\n      )\n      return\n    }\n    const rect = this.canvas!.getBoundingClientRect()\n    if (e.deltaY < 0) {\n      this.sliceScroll2D(-0.01, e.clientX - rect.left, e.clientY - rect.top)\n    } else {\n      this.sliceScroll2D(0.01, e.clientX - rect.left, e.clientY - rect.top)\n    }\n  }\n\n  // not included in public docs\n  // setup interactions with the canvas. Mouse clicks and touches\n  // note: no test yet\n  registerInteractions(): void {\n    if (!this.canvas) {\n      throw new Error('canvas undefined')\n    }\n    // add mousedown\n    this.canvas.addEventListener('mousedown', this.mouseDownListener.bind(this))\n    // add mouseup\n    this.canvas.addEventListener('mouseup', this.mouseUpListener.bind(this))\n    // add mouse move\n    this.canvas.addEventListener('mousemove', this.mouseMoveListener.bind(this))\n\n    // add touchstart\n    this.canvas.addEventListener('touchstart', this.touchStartListener.bind(this))\n    // add touchend\n    this.canvas.addEventListener('touchend', this.touchEndListener.bind(this))\n    // add touchmove\n    this.canvas.addEventListener('touchmove', this.touchMoveListener.bind(this))\n\n    // add scroll wheel\n    this.canvas.addEventListener('wheel', this.wheelListener.bind(this))\n    // add context event disabler\n    this.canvas.addEventListener('contextmenu', this.mouseContextMenuListener.bind(this))\n\n    // add double click\n    this.canvas.addEventListener('dblclick', this.resetBriCon.bind(this))\n\n    //  drag and drop support\n    this.canvas.addEventListener('dragenter', this.dragEnterListener.bind(this), false)\n    this.canvas.addEventListener('dragover', this.dragOverListener.bind(this), false)\n    this.canvas.addEventListener('drop', this.dropListener.bind(this), false)\n\n    // add keyup\n    this.canvas.setAttribute('tabindex', '0')\n    this.canvas.addEventListener('keyup', this.keyUpListener.bind(this), false)\n\n    // keydown\n    this.canvas.addEventListener('keydown', this.keyDownListener.bind(this), false)\n  }\n\n  // not included in public docs\n  dragEnterListener(e: MouseEvent): void {\n    e.stopPropagation()\n    e.preventDefault()\n  }\n\n  // not included in public docs\n  dragOverListener(e: MouseEvent): void {\n    e.stopPropagation()\n    e.preventDefault()\n  }\n\n  // not included in public docs\n  getFileExt(fullname: string, upperCase = true): string {\n    log.debug('fullname: ', fullname)\n    const re = /(?:\\.([^.]+))?$/\n    let ext = re.exec(fullname)![1]\n    ext = ext.toUpperCase()\n    if (ext === 'GZ') {\n      ext = re.exec(fullname.slice(0, -3))![1] // img.trk.gz -> img.trk\n      ext = ext.toUpperCase()\n    } else if (ext === 'CBOR') {\n      // we want to keep cbor WITH the extension before it.\n      // e.g. if fullname is img.iwi.cbor, we want the ext to be iwi.cbor\n      const endExt = ext\n      ext = re.exec(fullname.slice(0, -5))![1] // img.iwi.cbor -> iwi.cbor\n      ext = ext.toUpperCase()\n      ext = `${ext}.${endExt}`\n    }\n    return upperCase ? ext : ext.toLowerCase() // developer can choose to have extensions as upper or lower\n  }\n\n  /**\n   * Add an image and notify subscribers\n   * @see {@link https://niivue.github.io/niivue/features/document.3d.html | live demo usage}\n   */\n  async addVolumeFromUrl(imageOptions: ImageFromUrlOptions): Promise<NVImage> {\n    const volume = await NVImage.loadFromUrl(imageOptions)\n    this.document.addImageOptions(volume, imageOptions)\n    volume.onColormapChange = this.onColormapChange\n    this.mediaUrlMap.set(volume, imageOptions.url)\n    if (this.onVolumeAddedFromUrl) {\n      this.onVolumeAddedFromUrl(imageOptions, volume)\n    }\n    this.addVolume(volume)\n    return volume\n  }\n\n  async addVolumesFromUrl(imageOptionsArray: ImageFromUrlOptions[]): Promise<NVImage[]> {\n    const promises = imageOptionsArray.map(async (imageItem) => {\n      // first check this.loaders to see if the user has\n      // registered a custom loader for this file type.\n      // if so, use that loader to load the file.\n      const ext = this.getFileExt(imageItem.name || imageItem.url)\n      if (this.loaders[ext]) {\n        let itemToLoad: string | Uint8Array | ArrayBuffer = imageItem.url\n        const toExt = this.loaders[ext].toExt\n        let name = imageItem.name || imageItem.url\n        // in case the name is a url, just get the basename without the slashes\n        name = name.split('/').pop()\n        // if url is a string fetch the file first\n        if (typeof imageItem.url === 'string') {\n          const url = imageItem.url\n          try {\n            const response = await fetch(url)\n            if (!response.ok) {\n              throw new Error(`Failed to load file: ${response.statusText}`)\n            }\n            itemToLoad = await response.arrayBuffer()\n          } catch (error) {\n            throw new Error(`Failed to load url ${url}: ${error}`)\n          }\n        }\n        const buffer = await this.loaders[ext].loader(itemToLoad)\n        imageItem.url = buffer\n        imageItem.name = `${name}.${toExt}`\n      }\n      const imageOptions = {\n        url: imageItem.url!,\n        headers: imageItem.headers,\n        name: imageItem.name,\n        colormap: imageItem.colormap ? imageItem.colormap : imageItem.colorMap,\n        colormapNegative: imageItem.colormapNegative ? imageItem.colormapNegative : imageItem.colorMapNegative,\n        opacity: imageItem.opacity,\n        urlImgData: imageItem.urlImgData,\n        cal_min: imageItem.cal_min,\n        cal_max: imageItem.cal_max,\n        trustCalMinMax: this.opts.trustCalMinMax,\n        isManifest: imageItem.isManifest,\n        frame4D: imageItem.frame4D,\n        limitFrames4D: imageItem.limitFrames4D || this.opts.limitFrames4D,\n        colorbarVisible: imageItem.colorbarVisible\n      }\n      const volume = await NVImage.loadFromUrl(imageOptions)\n      this.document.addImageOptions(volume, imageOptions)\n      volume.onColormapChange = this.onColormapChange\n      this.mediaUrlMap.set(volume, imageOptions.url)\n      if (this.onVolumeAddedFromUrl) {\n        this.onVolumeAddedFromUrl(imageOptions, volume)\n      }\n      return volume\n    })\n\n    const volumes = await Promise.all(promises)\n\n    for (let i = 0; i < volumes.length; i++) {\n      this.addVolume(volumes[i])\n    }\n    return volumes\n  }\n\n  /**\n   * Find media by url\n   */\n  getMediaByUrl(url: string): NVImage | NVMesh | undefined {\n    return [...this.mediaUrlMap.entries()]\n      .filter((v) => v[1] === url)\n      .map((v) => v[0])\n      .pop()\n  }\n\n  /**\n   * Remove volume by url\n   * @param url - Volume added by url to remove\n   * @see {@link https://niivue.github.io/niivue/features/document.3d.html | live demo usage}\n   */\n  removeVolumeByUrl(url: string): void {\n    const volume = this.getMediaByUrl(url)\n    if (volume) {\n      this.removeVolume(volume as NVImage)\n    } else {\n      throw new Error('No volume with URL present')\n    }\n  }\n\n  readDirectory(directory: FileSystemDirectoryEntry): FileSystemEntry[] {\n    const reader = directory.createReader()\n    let allEntiresInDir: FileSystemEntry[] = []\n    const getFileObjects = async (fileSystemEntries: FileSystemEntry[]): Promise<File | File[]> => {\n      const allFileObects: File[] = []\n      // https://stackoverflow.com/a/53113059\n      const getFile = async (fileEntry: FileSystemFileEntry): Promise<File> => {\n        return new Promise((resolve, reject) => fileEntry.file(resolve, reject))\n      }\n      for (let i = 0; i < fileSystemEntries.length; i++) {\n        allFileObects.push(await getFile(fileSystemEntries[i] as FileSystemFileEntry))\n      }\n      return allFileObects\n    }\n    const readEntries = (): void => {\n      reader.readEntries((entries) => {\n        if (entries.length) {\n          allEntiresInDir = allEntiresInDir.concat(entries)\n          readEntries()\n        } else {\n          getFileObjects(allEntiresInDir)\n            .then((allFileObjects) => {\n              NVImage.loadFromFile({\n                file: allFileObjects, // an array of file objects\n                name: directory.name,\n                urlImgData: null, // nothing\n                imageType: NVIMAGE_TYPE.DCM_FOLDER // signify that this is a dicom directory\n              })\n                .then((volume) => {\n                  this.addVolume(volume)\n                  this.setDrawingEnabled(true)\n                })\n                .catch((e) => {\n                  throw e\n                })\n            })\n            .catch((e) => {\n              throw e\n            })\n        }\n      })\n    }\n    readEntries()\n    return allEntiresInDir\n  }\n\n  /**\n   * Returns boolean: true if filename ends with mesh extension (TRK, pial, etc)\n   * @param url - filename\n   */\n  isMeshExt(url: string): boolean {\n    const ext = this.getFileExt(url)\n    log.debug('dropped ext')\n    log.debug(ext)\n    return MESH_EXTENSIONS.includes(ext)\n  }\n\n  /**\n   * Load an image or mesh from an array buffer\n   * @param buffer - ArrayBuffer with the entire contents of a mesh or volume\n   * @param name - string of filename, extension used to infer type (NIfTI, MGH, MZ3, etc)\n   * @see {@link http://192.168.0.150:8080/features/draganddrop.html | live demo usage}\n   */\n  async loadFromArrayBuffer(buffer: ArrayBuffer, name: string): Promise<void> {\n    const ext = this.getFileExt(name)\n    if (MESH_EXTENSIONS.includes(ext)) {\n      await this.addMeshFromUrl({ url: name, buffer })\n      return\n    }\n    const imageOptions = NVImageFromUrlOptions(name)\n    imageOptions.buffer = buffer\n    imageOptions.name = name\n    await this.addVolumeFromUrl(imageOptions)\n  }\n\n  /**\n   * Load a mesh or image from a file object\n   * @param file - File object\n   */\n  async loadFromFile(file: File): Promise<void> {\n    const ext = this.getFileExt(file.name)\n    // first check if it's a mesh\n    if (MESH_EXTENSIONS.includes(ext)) {\n      await NVMesh.loadFromFile({ file, gl: this.gl, name: file.name }).then((mesh) => {\n        this.addMesh(mesh)\n      })\n      return\n    }\n    // load as a volume if not a mesh\n    await NVImage.loadFromFile({\n      file,\n      name: file.name\n    }).then((volume) => {\n      this.addVolume(volume)\n    })\n  }\n\n  /* useLoader\n\n  registers an external file loader for niivue to use when reading files.\n\n  the loader must return an array buffer of the file contents for niivue\n  to parse and the extension of the file so niivue can infer the file type to load. \n\n  example: \n\n  const myCustomLoader = (File) => {\n    // ... do parsing here ...\n    return {\n      arrayBuffer: ArrayBuffer,\n      fileExt: 'iwi.cbor',\n      positions: Float32Array | [], // allows for mesh loading to mz3\n      indices: Uint32Array | [], // allows for mesh loading to mz3\n    }\n\n  nv.useLoader({\n    loader: myCustomLoader,\n    fileExt: 'iwi.cbor',\n    toExt: 'nii'\n  })\n\n  */\n  useLoader(loader: unknown, fileExt: string, toExt: string): void {\n    this.loaders = {\n      ...this.loaders,\n      [fileExt.toUpperCase()]: {\n        loader,\n        toExt\n      }\n    }\n  }\n\n  // not included in public docs\n  dropListener(e: DragEvent): void {\n    e.stopPropagation()\n    e.preventDefault()\n    // don't do anything if drag and drop has been turned off\n    if (!this.opts.dragAndDropEnabled) {\n      return\n    }\n    const urlsToLoad: string[] = []\n    const dt = e.dataTransfer\n    if (!dt) {\n      return\n    }\n    const url = dt.getData('text/uri-list')\n    if (url) {\n      urlsToLoad.push(url)\n      const imageOptions = NVImageFromUrlOptions(url)\n      const ext = this.getFileExt(url)\n      log.debug('dropped ext')\n      log.debug(ext)\n      if (MESH_EXTENSIONS.includes(ext)) {\n        this.addMeshFromUrl({ url }).catch((e) => {\n          throw e\n        })\n      } else if (ext === 'NVD') {\n        this.loadDocumentFromUrl(url).catch((e) => {\n          throw e\n        })\n      } else {\n        this.addVolumeFromUrl(imageOptions).catch((e) => {\n          throw e\n        })\n      }\n    } else {\n      // const files = dt.files;\n      const items = dt.items\n      if (items.length > 0) {\n        // adding or replacing\n        if (!e.shiftKey && !e.altKey) {\n          this.volumes = []\n          this.overlays = []\n          this.meshes = []\n        }\n        this.closeDrawing()\n        for (const item of Array.from(items)) {\n          const entry = item.webkitGetAsEntry()\n          log.debug(entry)\n          if (!entry) {\n            throw new Error('could not get entry from file')\n          }\n          if (entry.isFile) {\n            const ext = this.getFileExt(entry.name)\n            if (ext === 'PNG') {\n              ;(entry as FileSystemFileEntry).file((file) => {\n                // @ts-expect-error FIXME looks like a file gets passed instead of a string\n                this.loadBmpTexture(file).catch((e) => {\n                  throw e\n                })\n              })\n              continue\n            }\n            let pairedImageData: FileSystemEntry\n            // check for afni HEAD BRIK pair\n            if (entry.name.lastIndexOf('HEAD') !== -1) {\n              for (const pairedItem of Array.from(items)) {\n                const pairedEntry = pairedItem.webkitGetAsEntry()\n                if (!pairedEntry) {\n                  throw new Error('could not get paired entry')\n                }\n                const fileBaseName = entry.name.substring(0, entry.name.lastIndexOf('HEAD'))\n                const pairedItemBaseName = pairedEntry.name.substring(0, pairedEntry.name.lastIndexOf('BRIK'))\n                if (fileBaseName === pairedItemBaseName) {\n                  pairedImageData = pairedEntry\n                }\n              }\n            }\n            if (entry.name.lastIndexOf('BRIK') !== -1) {\n              continue\n            }\n            if (MESH_EXTENSIONS.includes(ext)) {\n              ;(entry as FileSystemFileEntry).file((file) => {\n                NVMesh.loadFromFile({\n                  file,\n                  gl: this.gl,\n                  name: file.name\n                })\n                  .then((mesh) => {\n                    this.addMesh(mesh)\n                  })\n                  .catch((e) => {\n                    throw e\n                  })\n              })\n              continue\n            } else if (ext === 'NVD') {\n              ;(entry as FileSystemFileEntry).file((file) => {\n                NVDocument.loadFromFile(file)\n                  .then((nvdoc) => {\n                    this.loadDocument(nvdoc)\n                    log.debug('loaded document')\n                  })\n                  .catch((e) => {\n                    throw e\n                  })\n              })\n              break\n            }\n            ;(entry as FileSystemFileEntry).file((file) => {\n              if (pairedImageData) {\n                // if we have paired header/img data\n                ;(pairedImageData as FileSystemFileEntry).file((imgfile) => {\n                  NVImage.loadFromFile({\n                    file,\n                    urlImgData: imgfile,\n                    limitFrames4D: this.opts.limitFrames4D\n                  })\n                    .then((volume) => {\n                      this.addVolume(volume)\n                    })\n                    .catch((e) => {\n                      throw e\n                    })\n                })\n              } else {\n                // else, just a single file to load (not a pair)\n                NVImage.loadFromFile({\n                  file,\n                  urlImgData: pairedImageData,\n                  limitFrames4D: this.opts.limitFrames4D\n                })\n                  .then((volume) => {\n                    if (e.altKey) {\n                      log.debug('alt key detected: assuming this is a drawing overlay')\n                      this.drawClearAllUndoBitmaps()\n                      this.loadDrawing(volume)\n                    } else {\n                      this.addVolume(volume)\n                      // set drawing enabled to make sure\n                      // the new drawing bitmap matches the background volume dims\n                      // this.setDrawingEnabled(true)\n                    }\n                  })\n                  .catch((e) => {\n                    throw e\n                  })\n              }\n            })\n          } else if (entry.isDirectory) {\n            this.readDirectory(entry as FileSystemDirectoryEntry)\n          }\n        }\n      }\n    }\n    // this.createEmptyDrawing();\n    this.drawScene() // <- this seems to be required if you drag and drop a mesh, not a volume\n  }\n\n  /**\n   * insert a gap between slices of a mutliplanar view.\n   * @param pixels - spacing between tiles of multiplanar view\n   * @example niivue.setMultiplanarPadPixels(4)\n   * @see {@link https://niivue.github.io/niivue/features/atlas.html | live demo usage}\n   */\n  setMultiplanarPadPixels(pixels: number): void {\n    this.opts.multiplanarPadPixels = pixels\n    this.drawScene()\n  }\n\n  /**\n   * control placement of 2D slices.\n   * @param layout - AUTO: 0, COLUMN: 1, GRID: 2, ROW: 3,\n   * @example niivue.setMultiplanarLayout(2)\n   * @see {@link https://niivue.github.io/niivue/features/layout.html | live demo usage}\n   */\n  setMultiplanarLayout(layout: number): void {\n    if (typeof layout === 'string') {\n      layout = parseInt(layout)\n    }\n    this.opts.multiplanarLayout = layout\n    this.drawScene()\n  }\n\n  /**\n   * determine if text appears at corner (true) or sides of 2D slice.\n   * @param isCornerOrientationText - controls position of text\n   * @example niivue.setCornerOrientationText(true)\n   * @see {@link https://niivue.github.io/niivue/features/worldspace2.html | live demo usage}\n   */\n  setCornerOrientationText(isCornerOrientationText: boolean): void {\n    this.opts.isCornerOrientationText = isCornerOrientationText\n    this.updateGLVolume()\n  }\n\n  /**\n   * determine proportion of screen real estate devoted to rendering in multiplanar view.\n   * @param fraction - proportion of screen devoted to primary (hero) image (0 to disable)\n   * @example niivue.setHeroImage(0.5)\n   * @see {@link https://niivue.github.io/niivue/features/layout.html | live demo usage}\n   */\n  setHeroImage(fraction: number): void {\n    this.opts.heroImageFraction = fraction\n    this.drawScene()\n  }\n\n  /**\n   * control whether 2D slices use radiological or neurological convention.\n   * @param isRadiologicalConvention - new display convention\n   * @example niivue.setRadiologicalConvention(true)\n   * @see {@link https://niivue.github.io/niivue/features/worldspace.html | live demo usage}\n   */\n  setRadiologicalConvention(isRadiologicalConvention: boolean): void {\n    this.opts.isRadiologicalConvention = isRadiologicalConvention\n    this.updateGLVolume()\n  }\n\n  /**\n   * Reset scene to default settings.\n   * @param options - @see NiiVueOptions\n   * @param resetBriCon - also reset contrast (default false).\n   * @example niivue.nv1.setDefaults(opts, true);\n   * @see {@link https://niivue.github.io/niivue/features/connectome.html | live demo usage}\n   */\n  setDefaults(options: Partial<NVConfigOptions> = {}, resetBriCon = false): void {\n    this.document.opts = { ...DEFAULT_OPTIONS }\n    this.scene.sceneData = { ...INITIAL_SCENE_DATA }\n    // populate Niivue with user supplied options\n    for (const name in options) {\n      if (typeof options[name as keyof NVConfigOptions] === 'function') {\n        this[name] = options[name]\n      } else {\n        this.opts[name] = DEFAULT_OPTIONS[name] === undefined ? DEFAULT_OPTIONS[name] : options[name]\n      }\n    }\n    this.scene.pan2Dxyzmm = [0, 0, 0, 1]\n    // optional: reset volume contrast and brightness\n    if (resetBriCon && this.volumes && this.volumes.length > 0) {\n      for (let i = 0; i < this.volumes.length; i++) {\n        this.volumes[i].cal_min = this.volumes[i].robust_min\n        this.volumes[i].cal_max = this.volumes[i].robust_max\n      }\n    }\n    // display reset image\n    this.updateGLVolume()\n  }\n\n  /**\n   * Limit visibility of mesh in front of a 2D image. Requires world-space mode.\n   * @param meshThicknessOn2D - distance from voxels for clipping mesh. Use Infinity to show entire mesh or 0.0 to hide mesh.\n   * @example niivue.setMeshThicknessOn2D(42)\n   * @see {@link https://niivue.github.io/niivue/features/worldspace2.html | live demo usage}\n   */\n  setMeshThicknessOn2D(meshThicknessOn2D: number): void {\n    this.opts.meshThicknessOn2D = meshThicknessOn2D\n    this.updateGLVolume()\n  }\n\n  /**\n   * Create a custom multi-slice mosaic (aka lightbox, montage) view.\n   * @param str - description of mosaic.\n   * @example niivue.setSliceMosaicString(\"A 0 20 C 30 S 42\")\n   * @see {@link https://niivue.github.io/niivue/features/mosaics.html | live demo usage}\n   */\n  setSliceMosaicString(str: string): void {\n    this.sliceMosaicString = str\n    this.updateGLVolume()\n  }\n\n  /**\n   * control 2D slice view mode.\n   * @param isSliceMM - control whether 2D slices use world space (true) or voxel space (false). Beware that voxel space mode limits properties like panning, zooming and mesh visibility.\n   * @example niivue.setSliceMM(true)\n   * @see {@link https://niivue.github.io/niivue/features/worldspace2.html | live demo usage}\n   */\n  setSliceMM(isSliceMM: boolean): void {\n    this.opts.isSliceMM = isSliceMM\n    this.updateGLVolume()\n  }\n\n  /**\n   * control whether voxel overlays are combined using additive (emission) or traditional (transmission) blending.\n   * @param isAdditiveBlend - emission (true) or transmission (false) mixing\n   * @example niivue.isAdditiveBlend(true)\n   * @see {@link https://niivue.github.io/niivue/features/additive.voxels.html | live demo usage}\n   */\n  setAdditiveBlend(isAdditiveBlend: boolean): void {\n    this.opts.isAdditiveBlend = isAdditiveBlend\n    this.updateGLVolume()\n  }\n\n  /**\n   * Detect if display is using radiological or neurological convention.\n   * @returns radiological convention status\n   * @example let rc = niivue.getRadiologicalConvention()\n   */\n  getRadiologicalConvention(): boolean {\n    return this.opts.isRadiologicalConvention\n  }\n\n  /**\n   * Force WebGL canvas to use high resolution display, regardless of browser defaults.\n   * @param isHighResolutionCapable - allow high-DPI display\n   * @example niivue.setHighResolutionCapable(true);\n   * @see {@link https://niivue.github.io/niivue/features/sync.mesh.html | live demo usage}\n   */\n  setHighResolutionCapable(isHighResolutionCapable: boolean): void {\n    this.opts.isHighResolutionCapable = isHighResolutionCapable\n    if (isHighResolutionCapable && !this.opts.isResizeCanvas) {\n      log.warn('isHighResolutionCapable requires isResizeCanvas')\n      this.opts.isHighResolutionCapable = false\n    }\n    if (!this.opts.isHighResolutionCapable) {\n      this.uiData.dpr = 1\n    }\n    this.resizeListener() // test isHighResolutionCapable\n    this.drawScene()\n  }\n\n  /**\n   * add a new volume to the canvas\n   * @param volume - the new volume to add to the canvas\n   * @example\n   * niivue = new Niivue()\n   * niivue.addVolume(NVImage.loadFromUrl({url:'../someURL.nii.gz'}))\n   * @see {@link https://niivue.github.io/niivue/features/document.3d.html | live demo usage}\n   */\n  addVolume(volume: NVImage): void {\n    this.volumes.push(volume)\n    const idx = this.volumes.length === 1 ? 0 : this.volumes.length - 1\n    this.setVolume(volume, idx)\n    this.onImageLoaded(volume)\n    log.debug('loaded volume', volume.name)\n    log.debug(volume)\n  }\n\n  /**\n   * add a new mesh to the canvas\n   * @param mesh - the new mesh to add to the canvas\n   * @example\n   * niivue = new Niivue()\n   * niivue.addMesh(NVMesh.loadFromUrl({url:'../someURL.gii'}))\n   * @see {@link https://niivue.github.io/niivue/features/document.3d.html | live demo usage}\n   */\n  addMesh(mesh: NVMesh): void {\n    this.meshes.push(mesh)\n    const idx = this.meshes.length === 1 ? 0 : this.meshes.length - 1\n    this.setMesh(mesh, idx)\n    this.onMeshLoaded(mesh)\n  }\n\n  /**\n   * get the index of a volume by its unique id. unique ids are assigned to the NVImage.id property when a new NVImage is created.\n   * @param id - the id string to search for\n   * @example\n   * niivue = new Niivue()\n   * niivue.getVolumeIndexByID(someVolume.id)\n   */\n  getVolumeIndexByID(id: string): number {\n    const n = this.volumes.length\n    for (let i = 0; i < n; i++) {\n      const id_i = this.volumes[i].id\n      if (id_i === id) {\n        return i\n      }\n    }\n    return -1 // -1 signals that no valid index was found for a volume with the given id\n  }\n\n  // not included in public docs\n  // Internal function to store drawings that can be used for undo operations\n  drawAddUndoBitmap(): void {\n    if (!this.drawBitmap || this.drawBitmap.length < 1) {\n      log.debug('drawAddUndoBitmap error: No drawing open')\n      return\n    }\n    // let rle = encodeRLE(this.drawBitmap);\n    // the bitmaps are a cyclical loop, like a revolver hand gun: increment the cylinder\n    this.currentDrawUndoBitmap++\n    if (this.currentDrawUndoBitmap >= this.opts.maxDrawUndoBitmaps) {\n      this.currentDrawUndoBitmap = 0\n    }\n    this.drawUndoBitmaps[this.currentDrawUndoBitmap] = encodeRLE(this.drawBitmap)\n  }\n\n  // not included in public docs\n  // Internal function to delete all drawing undo images\n  drawClearAllUndoBitmaps(): void {\n    this.currentDrawUndoBitmap = this.opts.maxDrawUndoBitmaps // next add will be cylinder 0\n    if (!this.drawUndoBitmaps || this.drawUndoBitmaps.length < 1) {\n      return\n    }\n    for (let i = this.drawUndoBitmaps.length - 1; i >= 0; i--) {\n      this.drawUndoBitmaps[i] = new Uint8Array()\n    }\n  }\n\n  /**\n   * Restore drawing to previous state\n   * @example niivue.drawUndo();\n   * @see {@link https://niivue.github.io/niivue/features/draw.ui.html | live demo usage}\n   */\n  drawUndo(): void {\n    if (this.drawUndoBitmaps.length < 1) {\n      log.debug('undo bitmaps not loaded')\n      return\n    }\n    this.currentDrawUndoBitmap--\n    if (this.currentDrawUndoBitmap < 0) {\n      this.currentDrawUndoBitmap = this.drawUndoBitmaps.length - 1\n    }\n    if (this.currentDrawUndoBitmap >= this.drawUndoBitmaps.length) {\n      this.currentDrawUndoBitmap = 0\n    }\n    if (this.drawUndoBitmaps[this.currentDrawUndoBitmap].length < 2) {\n      log.debug('drawUndo is misbehaving')\n      return\n    }\n    this.drawBitmap = decodeRLE(this.drawUndoBitmaps[this.currentDrawUndoBitmap], this.drawBitmap!.length)\n    this.refreshDrawing(true)\n  }\n\n  // not included in public docs\n  loadDrawing(drawingBitmap: NVImage): boolean {\n    if (this.drawBitmap) {\n      log.debug('Overwriting open drawing!')\n    }\n    if (!this.back) {\n      throw new Error('back undefined')\n    }\n    this.drawClearAllUndoBitmaps()\n    const dims = drawingBitmap.hdr!.dims\n    if (\n      dims[1] !== this.back.hdr!.dims[1] ||\n      dims[2] !== this.back.hdr!.dims[2] ||\n      dims[3] !== this.back.hdr!.dims[3]\n    ) {\n      log.debug('drawing dimensions do not match background image')\n      return false\n    }\n    if (drawingBitmap.img!.constructor !== Uint8Array) {\n      log.debug('Drawings should be UINT8')\n    }\n    const perm = drawingBitmap.permRAS!\n    const vx = dims[1] * dims[2] * dims[3]\n    this.drawBitmap = new Uint8Array(vx)\n    this.drawTexture = this.r8Tex(this.drawTexture, TEXTURE7_DRAW, this.back.dims!, true)\n    const layout = [0, 0, 0]\n    for (let i = 0; i < 3; i++) {\n      for (let j = 0; j < 3; j++) {\n        if (Math.abs(perm[i]) - 1 !== j) {\n          continue\n        }\n        layout[j] = i * Math.sign(perm[i])\n      }\n    }\n    let stride = 1\n    const instride = [1, 1, 1]\n    const inflip = [false, false, false]\n    for (let i = 0; i < layout.length; i++) {\n      for (let j = 0; j < layout.length; j++) {\n        const a = Math.abs(layout[j])\n        if (a !== i) {\n          continue\n        }\n        instride[j] = stride\n        // detect -0: https://medium.com/coding-at-dawn/is-negative-zero-0-a-number-in-javascript-c62739f80114\n        if (layout[j] < 0 || Object.is(layout[j], -0)) {\n          inflip[j] = true\n        }\n        stride *= dims[j + 1]\n      }\n    }\n    // lookup table for flips and stride offsets:\n    let xlut = NVUtilities.range(0, dims[1] - 1, 1)\n    if (inflip[0]) {\n      xlut = NVUtilities.range(dims[1] - 1, 0, -1)\n    }\n    for (let i = 0; i < dims[1]; i++) {\n      xlut[i] *= instride[0]\n    }\n    let ylut = NVUtilities.range(0, dims[2] - 1, 1)\n    if (inflip[1]) {\n      ylut = NVUtilities.range(dims[2] - 1, 0, -1)\n    }\n    for (let i = 0; i < dims[2]; i++) {\n      ylut[i] *= instride[1]\n    }\n    let zlut = NVUtilities.range(0, dims[3] - 1, 1)\n    if (inflip[2]) {\n      zlut = NVUtilities.range(dims[3] - 1, 0, -1)\n    }\n    for (let i = 0; i < dims[3]; i++) {\n      zlut[i] *= instride[2]\n    }\n    // convert data\n    const inVs = drawingBitmap.img! // new Uint8Array(this.drawBitmap);\n    const outVs = this.drawBitmap\n    // for (let i = 0; i < vx; i++)\n    //  outVs[i] = i % 3;\n    let j = 0\n    for (let z = 0; z < dims[3]; z++) {\n      for (let y = 0; y < dims[2]; y++) {\n        for (let x = 0; x < dims[1]; x++) {\n          outVs[xlut[x] + ylut[y] + zlut[z]] = inVs[j]\n          j++\n        }\n      }\n    }\n    this.drawAddUndoBitmap()\n    this.refreshDrawing(false)\n    this.drawScene()\n    return true\n  }\n\n  // not included in public docs\n  binarize(volume: NVImage): void {\n    const dims = volume.hdr!.dims\n    const vx = dims[1] * dims[2] * dims[3]\n    const img = new Uint8Array(vx)\n    for (let i = 0; i < vx; i++) {\n      if (volume.img![i] !== 0) {\n        img[i] = 1\n      }\n    }\n    volume.img = img\n    volume.hdr!.datatypeCode = NiiDataType.DT_UINT8\n    volume.hdr!.cal_min = 0\n    volume.hdr!.cal_max = 1\n  }\n\n  /**\n   * Open drawing\n   * @param filename - of NIfTI format drawing\n   * @param isBinarize - if true will force drawing voxels to be either 0 or 1.\n   * @example niivue.loadDrawingFromUrl(\"../images/lesion.nii.gz\");\n   * @see {@link https://niivue.github.io/niivue/features/draw.ui.html | live demo usage}\n   */\n  async loadDrawingFromUrl(fnm: string, isBinarize = false): Promise<boolean> {\n    if (this.drawBitmap) {\n      log.debug('Overwriting open drawing!')\n    }\n    this.drawClearAllUndoBitmaps()\n    let ok = false\n    try {\n      const volume = await NVImage.loadFromUrl(NVImageFromUrlOptions(fnm))\n      if (isBinarize) {\n        await this.binarize(volume)\n      }\n      ok = this.loadDrawing(volume)\n    } catch (err) {\n      log.error('loadDrawingFromUrl() failed to load ' + fnm)\n      this.drawClearAllUndoBitmaps()\n    }\n    return ok\n  }\n\n  // not included in public docs\n  findOtsu(mlevel = 2): number[] {\n    // C: https://github.com/rordenlab/niimath\n    // Java: https://github.com/stevenjwest/Multi_OTSU_Segmentation\n    if (this.volumes.length < 1) {\n      return []\n    }\n    const img = this.volumes[0].img!\n    const nvox = img.length\n    if (nvox < 1) {\n      return []\n    }\n    const nBin = 256\n    const maxBin = nBin - 1 // bins indexed from 0: if 256 bins then 0..255\n    const h = new Array(nBin).fill(0)\n    // build 1D histogram\n    const mn = this.volumes[0].cal_min!\n    const mx = this.volumes[0].cal_max!\n    if (mx <= mn) {\n      return []\n    }\n    const scale2raw = (mx - mn) / nBin\n    function bin2raw(bin: number): number {\n      return bin * scale2raw + mn\n    }\n    const scale2bin = (nBin - 1) / Math.abs(mx - mn)\n    const inter = this.volumes[0].hdr!.scl_inter\n    const slope = this.volumes[0].hdr!.scl_slope\n    for (let v = 0; v < nvox; v++) {\n      let val = img![v] * slope + inter\n      val = Math.min(Math.max(val, mn), mx)\n      val = Math.round((val - mn) * scale2bin)\n      h[val]++\n    }\n    // h[1] = h[1] + h[0]; h[0] = 0;\n    // in theory one can convert h from count to probability:\n    // for (let v = 0; v < nBin; v++)\n    //  h[v] = h[v] / nvox;\n    const P = Array(nBin)\n      .fill(0)\n      .map(() => Array(nBin).fill(0))\n    const S = Array(nBin)\n      .fill(0)\n      .map(() => Array(nBin).fill(0))\n    // diagonal\n    for (let i = 1; i < nBin; ++i) {\n      P[i][i] = h[i]\n      S[i][i] = i * h[i]\n    }\n    // calculate first row (row 0 is all zero)\n    for (let i = 1; i < nBin - 1; ++i) {\n      P[1][i + 1] = P[1][i] + h[i + 1]\n      S[1][i + 1] = S[1][i] + (i + 1) * h[i + 1]\n    }\n    // using row 1 to calculate others\n    for (let i = 2; i < nBin; i++) {\n      for (let j = i + 1; j < nBin; j++) {\n        P[i][j] = P[1][j] - P[1][i - 1]\n        S[i][j] = S[1][j] - S[1][i - 1]\n      }\n    }\n    // now calculate H[i][j]\n    for (let i = 1; i < nBin; ++i) {\n      for (let j = i + 1; j < nBin; j++) {\n        if (P[i][j] !== 0) {\n          P[i][j] = (S[i][j] * S[i][j]) / P[i][j]\n        }\n      }\n    }\n    let max = 0\n    const t = [Infinity, Infinity, Infinity]\n    if (mlevel > 3) {\n      for (let l = 0; l < nBin - 3; l++) {\n        for (let m = l + 1; m < nBin - 2; m++) {\n          for (let h = m + 1; h < nBin - 1; h++) {\n            const v = P[0][l] + P[l + 1][m] + P[m + 1][h] + P[h + 1][maxBin]\n            if (v > max) {\n              t[0] = l\n              t[1] = m\n              t[2] = h\n              max = v\n            }\n          }\n        }\n      }\n    } else if (mlevel === 3) {\n      for (let l = 0; l < nBin - 2; l++) {\n        for (let h = l + 1; h < nBin - 1; h++) {\n          const v = P[0][l] + P[l + 1][h] + P[h + 1][maxBin]\n          if (v > max) {\n            t[0] = l\n            t[1] = h\n            max = v\n          }\n        }\n      }\n    } else {\n      for (let i = 0; i < nBin - 1; i++) {\n        const v = P[0][i] + P[i + 1][maxBin]\n        if (v > max) {\n          t[0] = i\n          max = v\n        }\n      }\n    }\n    return [bin2raw(t[0]), bin2raw(t[1]), bin2raw(t[2])]\n  }\n\n  /**\n   * remove dark voxels in air\n   * @param levels - (2-4) segment brain into this many types. For example drawOtsu(2) will create a binary drawing where bright voxels are colored and dark voxels are clear.\n   * @example niivue.drawOtsu(3);\n   * @see {@link https://niivue.github.io/niivue/features/draw.ui.html | live demo usage}\n   */\n  drawOtsu(levels = 2): void {\n    if (this.volumes.length === 0) {\n      return\n    }\n    const nvox = this.volumes[0].img!.length\n    const thresholds = this.findOtsu(levels)\n    if (thresholds.length < 3) {\n      return\n    }\n    if (!this.drawBitmap) {\n      this.createEmptyDrawing()\n    }\n    const drawImg = this.drawBitmap as Uint8Array\n    const img = this.volumes[0].img!\n    for (let i = 0; i < nvox; i++) {\n      if (drawImg[i] !== 0) {\n        continue\n      }\n      const v = img[i]\n      if (v > thresholds[0]) {\n        drawImg[i] = 1\n      }\n      if (v > thresholds[1]) {\n        drawImg[i] = 2\n      }\n      if (v > thresholds[2]) {\n        drawImg[i] = 3\n      }\n    }\n    this.drawAddUndoBitmap()\n    this.refreshDrawing(true)\n  }\n\n  /**\n   * remove dark voxels in air\n   * @param level - (1-5) larger values for more preserved voxels\n   * @param volIndex - volume to dehaze\n   * @example niivue.removeHaze(3, 0);\n   * @see {@link https://niivue.github.io/niivue/features/draw.ui.html | live demo usage}\n   */\n  removeHaze(level = 5, volIndex = 0): void {\n    const img = this.volumes[volIndex].img!\n    const hdr = this.volumes[volIndex].hdr!\n\n    const nvox = img.length\n    let otsu = 2\n    if (level === 5 || level === 1) {\n      otsu = 4\n    }\n    if (level === 4 || level === 2) {\n      otsu = 3\n    }\n    const thresholds = this.findOtsu(otsu)\n    if (thresholds.length < 3) {\n      return\n    }\n    let threshold = thresholds[0]\n    if (level === 1) {\n      threshold = thresholds[2]\n    }\n    if (level === 2) {\n      threshold = thresholds[1]\n    }\n\n    const inter = hdr.scl_inter\n    const slope = hdr.scl_slope\n    const mn = this.volumes[volIndex].global_min!\n    for (let v = 0; v < nvox; v++) {\n      const val = img[v] * slope + inter\n      if (val < threshold) {\n        img[v] = mn\n      }\n    }\n    this.refreshLayers(this.volumes[volIndex], 0)\n    this.drawScene()\n  }\n\n  /**\n   * save voxel-based image to disk\n   * @param fnm - filename of NIfTI image to create\n   * @param isSaveDrawing - determines whether drawing or background image is saved\n   * @param volumeByIndex - determines layer to save (0 for background)\n   * @param volumeByIndex - determines layer to save (0 for background)\n   * @example niivue.saveImage({ filename: \"myimage.nii.gz\", isSaveDrawing: true });\n   * @see {@link https://niivue.github.io/niivue/features/draw.ui.html | live demo usage}\n   */\n  saveImage(options: SaveImageOptions = defaultSaveImageOptions): Uint8Array | boolean {\n    const saveOptions: SaveImageOptions = {\n      ...defaultSaveImageOptions,\n      ...options\n    }\n    const { filename, isSaveDrawing, volumeByIndex } = saveOptions\n    log.debug('saveImage', filename, isSaveDrawing, volumeByIndex)\n    if (this.back?.dims === undefined) {\n      log.debug('No voxelwise image open')\n      return false\n    }\n    if (isSaveDrawing) {\n      if (!this.drawBitmap) {\n        log.debug('No drawing open')\n        return false\n      }\n      const perm = this.volumes[0].permRAS!\n      if (perm[0] === 1 && perm[1] === 2 && perm[2] === 3) {\n        log.debug('saving drawing')\n        const img = this.volumes[0].saveToDisk(filename, this.drawBitmap) // createEmptyDrawing\n        return img\n      } else {\n        log.debug('saving drawing')\n        const dims = this.volumes[0].hdr!.dims // reverse to original\n        // reverse RAS to native space, layout is mrtrix MIF format\n        // for details see NVImage.readMIF()\n        const layout = [0, 0, 0]\n        for (let i = 0; i < 3; i++) {\n          for (let j = 0; j < 3; j++) {\n            if (Math.abs(perm[i]) - 1 !== j) {\n              continue\n            }\n            layout[j] = i * Math.sign(perm[i])\n          }\n        }\n        let stride = 1\n        const instride = [1, 1, 1]\n        const inflip = [false, false, false]\n        for (let i = 0; i < layout.length; i++) {\n          for (let j = 0; j < layout.length; j++) {\n            const a = Math.abs(layout[j])\n            if (a !== i) {\n              continue\n            }\n            instride[j] = stride\n            // detect -0: https://medium.com/coding-at-dawn/is-negative-zero-0-a-number-in-javascript-c62739f80114\n            if (layout[j] < 0 || Object.is(layout[j], -0)) {\n              inflip[j] = true\n            }\n            stride *= dims[j + 1]\n          }\n        }\n\n        let xlut = NVUtilities.range(0, dims[1] - 1, 1)\n        if (inflip[0]) {\n          xlut = NVUtilities.range(dims[1] - 1, 0, -1)\n        }\n        for (let i = 0; i < dims[1]; i++) {\n          xlut[i] *= instride[0]\n        }\n        let ylut = NVUtilities.range(0, dims[2] - 1, 1)\n        if (inflip[1]) {\n          ylut = NVUtilities.range(dims[2] - 1, 0, -1)\n        }\n        for (let i = 0; i < dims[2]; i++) {\n          ylut[i] *= instride[1]\n        }\n        let zlut = NVUtilities.range(0, dims[3] - 1, 1)\n        if (inflip[2]) {\n          zlut = NVUtilities.range(dims[3] - 1, 0, -1)\n        }\n        for (let i = 0; i < dims[3]; i++) {\n          zlut[i] *= instride[2]\n        }\n        // convert data\n\n        const inVs = new Uint8Array(this.drawBitmap)\n        const outVs = new Uint8Array(dims[1] * dims[2] * dims[3])\n        let j = 0\n        for (let z = 0; z < dims[3]; z++) {\n          for (let y = 0; y < dims[2]; y++) {\n            for (let x = 0; x < dims[1]; x++) {\n              outVs[j] = inVs[xlut[x] + ylut[y] + zlut[z]]\n              j++\n            }\n          }\n        }\n        log.debug('saving drawing')\n        const img = this.volumes[0].saveToDisk(filename, outVs)\n        return img\n      }\n    }\n    log.debug('saving image')\n    const img = this.volumes[volumeByIndex].saveToDisk(filename)\n    return img\n  }\n\n  // not included in public docs\n  getMeshIndexByID(id: string | number): number {\n    if (typeof id === 'number') {\n      if (id >= this.meshes.length) {\n        return -1\n      } // range 0..len-1\n      return id\n    }\n    const n = this.meshes.length\n    for (let i = 0; i < n; i++) {\n      const id_i = this.meshes[i].id\n      if (id_i === id) {\n        return i\n      }\n    }\n    return -1 // -1 signals that no valid index was found for a volume with the given id\n  }\n\n  /**\n   * change property of mesh, tractogram or connectome\n   * @param id - identity of mesh to change\n   * @param key - attribute to change\n   * @param value - for attribute\n   * @example niivue.setMeshProperty(niivue.meshes[0].id, 'fiberLength', 42)\n   * @see {@link https://niivue.github.io/niivue/features/meshes.html | live demo usage}\n   */\n  setMeshProperty(id: number, key: keyof NVMesh, val: number): void {\n    const idx = this.getMeshIndexByID(id)\n    if (idx < 0) {\n      log.warn('setMeshProperty() id not loaded', id)\n      return\n    }\n    this.meshes[idx].setProperty(key, val, this.gl)\n    this.updateGLVolume()\n    this.onMeshPropertyChanged(idx, key, val)\n  }\n\n  /**\n   * returns the index of the mesh vertex that is closest to the provided coordinates\n   * @param id - identity of mesh to change\n   * @param Xmm - location in left/right dimension\n   * @param Ymm - location in posterior/anterior dimension\n   * @param Zmm - location in foot/head dimension\n   * @returns the an array where ret[0] is the mesh index and ret[1] is distance from vertex to coordinates\n   * @example niivue.indexNearestXYZmm(niivue.meshes[0].id, -22, 42, 13)\n   * @see {@link https://niivue.github.io/niivue/features/clipplanes.html | live demo usage}\n   */\n  indexNearestXYZmm(mesh: number, Xmm: number, Ymm: number, Zmm: number): number[] {\n    const idx = this.getMeshIndexByID(mesh)\n    if (idx < 0) {\n      log.warn('indexNearestXYZmm() id not loaded', mesh)\n      return [NaN, NaN]\n    }\n    return this.meshes[idx].indexNearestXYZmm(Xmm, Ymm, Zmm)\n  }\n\n  /**\n   * reduce complexity of FreeSurfer mesh\n   * @param mesh - identity of mesh to change\n   * @param order - decimation order 0..6\n   * @example niivue.decimateHierarchicalMesh(niivue.meshes[0].id, 4)\n   * @returns boolean false if mesh is not hierarchical or of lower order\n   * @see {@link https://niivue.github.io/niivue/features/meshes.html | live demo usage}\n   */\n  decimateHierarchicalMesh(mesh: number, order: number = 3): boolean {\n    const idx = this.getMeshIndexByID(mesh)\n    if (idx < 0) {\n      log.warn('reverseFaces() id not loaded', mesh)\n      return\n    }\n    const ret = this.meshes[idx].decimateHierarchicalMesh(this.gl, order)\n    this.updateGLVolume()\n    return ret\n  }\n\n  /**\n   * reverse triangle winding of mesh (swap front and back faces)\n   * @param id - identity of mesh to change\n   * @example niivue.reverseFaces(niivue.meshes[0].id)\n   * @see {@link https://niivue.github.io/niivue/features/meshes.html | live demo usage}\n   */\n  reverseFaces(mesh: number): void {\n    const idx = this.getMeshIndexByID(mesh)\n    if (idx < 0) {\n      log.warn('reverseFaces() id not loaded', mesh)\n      return\n    }\n    this.meshes[idx].reverseFaces(this.gl)\n    this.updateGLVolume()\n  }\n\n  /**\n   * reverse triangle winding of mesh (swap front and back faces)\n   * @param mesh - identity of mesh to change\n   * @param layer - selects the mesh overlay (e.g. GIfTI or STC file)\n   * @param key - attribute to change\n   * @param value - for attribute\n   * @example niivue.setMeshLayerProperty(niivue.meshes[0].id, 0, 'frame4D', 22)\n   * @see {@link https://niivue.github.io/niivue/features/mesh.4D.html | live demo usage}\n   */\n  setMeshLayerProperty(mesh: number, layer: number, key: keyof NVMeshLayer, val: number): void {\n    const idx = this.getMeshIndexByID(mesh)\n    if (idx < 0) {\n      log.warn('setMeshLayerProperty() id not loaded', mesh)\n      return\n    }\n    this.meshes[idx].setLayerProperty(layer, key, val, this.gl)\n    this.updateGLVolume()\n  }\n\n  /**\n   * adjust offset position and scale of 2D sliceScale\n   * @param xyzmmZoom - first three components are spatial, fourth is scaling\n   * @example niivue.setPan2Dxyzmm([5,-4, 2, 1.5])\n   */\n  setPan2Dxyzmm(xyzmmZoom: vec4): void {\n    this.scene.pan2Dxyzmm = xyzmmZoom\n    if (this.opts.yoke3Dto2DZoom) {\n      this.scene.volScaleMultiplier = xyzmmZoom[3]\n    }\n    this.drawScene()\n  }\n\n  /**\n   * set rotation of 3D render view\n   * @example niivue.setRenderAzimuthElevation(45, 15)\n   * @see {@link https://niivue.github.io/niivue/features/mask.html | live demo usage}\n   */\n  setRenderAzimuthElevation(a: number, e: number): void {\n    this.scene.renderAzimuth = a\n    this.scene.renderElevation = e\n    this.onAzimuthElevationChange(a, e)\n    this.drawScene()\n  }\n\n  /**\n   * get the index of an overlay by its unique id. unique ids are assigned to the NVImage.id property when a new NVImage is created.\n   * @param id - the id string to search for\n   * @see NiiVue#getVolumeIndexByID\n   * @example\n   * niivue = new Niivue()\n   * niivue.getOverlayIndexByID(someVolume.id)\n   */\n  getOverlayIndexByID(id: string): number {\n    const n = this.overlays.length\n    for (let i = 0; i < n; i++) {\n      const id_i = this.overlays[i].id\n      if (id_i === id) {\n        return i\n      }\n    }\n    return -1 // -1 signals that no valid index was found for an overlay with the given id\n  }\n\n  /**\n   * set the index of a volume. This will change it's ordering and appearance if there are multiple volumes loaded.\n   * @param volume - the volume to update\n   * @param toIndex - the index to move the volume to. The default is the background (0 index)\n   * @example\n   * niivue = new Niivue()\n   * niivue.setVolume(someVolume, 1) // move it to the second position in the array of loaded volumes (0 is the first position)\n   */\n  setVolume(volume: NVImage, toIndex = 0): void {\n    const numberOfLoadedImages = this.volumes.length\n    if (toIndex > numberOfLoadedImages) {\n      return\n    }\n\n    const volIndex = this.getVolumeIndexByID(volume.id)\n    if (toIndex === 0) {\n      this.volumes.splice(volIndex, 1)\n      this.volumes.unshift(volume)\n      this.back = this.volumes[0]\n      this.overlays = this.volumes.slice(1)\n    } else if (toIndex < 0) {\n      // -1 to remove a volume\n      this.volumes.splice(this.getVolumeIndexByID(volume.id), 1)\n      // this.volumes = this.overlays\n      this.back = this.volumes[0]\n      if (this.volumes.length > 1) {\n        this.overlays = this.volumes.slice(1)\n      } else {\n        this.overlays = []\n      }\n    } else {\n      this.volumes.splice(volIndex, 1)\n      this.volumes.splice(toIndex, 0, volume)\n      this.overlays = this.volumes.slice(1)\n      this.back = this.volumes[0]\n    }\n    this.updateGLVolume()\n  }\n\n  // not included in public docs\n  setMesh(mesh: NVMesh, toIndex = 0): void {\n    this.meshes.forEach((m) => {\n      log.debug('MESH: ', m.name)\n    })\n    const numberOfLoadedMeshes = this.meshes.length\n    if (toIndex > numberOfLoadedMeshes) {\n      return\n    }\n    const meshIndex = this.getMeshIndexByID(mesh.id)\n    if (toIndex === 0) {\n      this.meshes.splice(meshIndex, 1)\n      this.meshes.unshift(mesh)\n    } else if (toIndex < 0) {\n      this.meshes.splice(this.getMeshIndexByID(mesh.id), 1)\n    } else {\n      this.meshes.splice(meshIndex, 1)\n      this.meshes.splice(toIndex, 0, mesh)\n    }\n    this.updateGLVolume()\n    this.meshes.forEach((m) => {\n      log.debug(m.name)\n    })\n  }\n\n  /**\n   * Remove a volume\n   * @param volume - volume to delete\n   * @example\n   * niivue = new Niivue()\n   * niivue.removeVolume(this.volumes[3])\n   * @see {@link https://niivue.github.io/niivue/features/document.3d.html | live demo usage}\n   */\n  removeVolume(volume: NVImage): void {\n    this.setVolume(volume, -1)\n    // check if we have a url for this volume\n    if (this.mediaUrlMap.has(volume)) {\n      const url = this.mediaUrlMap.get(volume)!\n      // notify subscribers that we are about to remove a volume\n      this.onVolumeWithUrlRemoved(url)\n\n      this.mediaUrlMap.delete(volume)\n    }\n\n    this.drawScene()\n  }\n\n  /**\n   * Remove a volume by index\n   * @param index - of volume to remove\n   */\n  removeVolumeByIndex(index: number): void {\n    if (index >= this.volumes.length) {\n      throw new Error('Index of volume out of bounds')\n    }\n    this.removeVolume(this.volumes[index])\n  }\n\n  /**\n   * Remove a triangulated mesh, connectome or tractogram\n   * @param mesh - mesh to delete\n   * @example\n   * niivue = new Niivue()\n   * niivue.removeMesh(this.meshes[3])\n   * @see {@link https://niivue.github.io/niivue/features/multiuser.meshes.html | live demo usage}\n   */\n  removeMesh(mesh: NVMesh): void {\n    mesh.unloadMesh(this.gl)\n    this.setMesh(mesh, -1)\n    if (this.mediaUrlMap.has(mesh)) {\n      const url = this.mediaUrlMap.get(mesh)!\n      this.onMeshWithUrlRemoved(url)\n      this.mediaUrlMap.delete(mesh)\n    }\n  }\n\n  /**\n   * Remove a triangulated mesh, connectome or tractogram\n   * @param url - URL of mesh to delete\n   * @example\n   * niivue.removeMeshByUrl('../images/cit168.mz3')\n   */\n  removeMeshByUrl(url: string): void {\n    const mesh = this.getMediaByUrl(url)\n    if (mesh) {\n      this.removeMesh(mesh as NVMesh)\n      this.mediaUrlMap.delete(mesh)\n      this.onMeshWithUrlRemoved(url)\n    }\n  }\n\n  /**\n   * Move a volume to the bottom of the stack of loaded volumes. The volume will become the background\n   * @param volume - the volume to move\n   * @example\n   * niivue = new Niivue()\n   * niivue.moveVolumeToBottom(this.volumes[3]) // move the 4th volume to the 0 position. It will be the new background\n   */\n  moveVolumeToBottom(volume: NVImage): void {\n    this.setVolume(volume, 0)\n  }\n\n  /**\n   * Move a volume up one index position in the stack of loaded volumes. This moves it up one layer\n   * @param volume - the volume to move\n   * @example\n   * niivue = new Niivue()\n   * niivue.moveVolumeUp(this.volumes[0]) // move the background image to the second index position (it was 0 index, now will be 1)\n   */\n  moveVolumeUp(volume: NVImage): void {\n    const volIdx = this.getVolumeIndexByID(volume.id)\n    this.setVolume(volume, volIdx + 1)\n  }\n\n  /**\n   * Move a volume down one index position in the stack of loaded volumes. This moves it down one layer\n   * @param volume - the volume to move\n   * @example\n   * niivue = new Niivue()\n   * niivue.moveVolumeDown(this.volumes[1]) // move the second image to the background position (it was 1 index, now will be 0)\n   */\n  moveVolumeDown(volume: NVImage): void {\n    const volIdx = this.getVolumeIndexByID(volume.id)\n    this.setVolume(volume, volIdx - 1)\n  }\n\n  /**\n   * Move a volume to the top position in the stack of loaded volumes. This will be the top layer\n   * @param volume - the volume to move\n   * @example\n   * niivue = new Niivue()\n   * niivue.moveVolumeToTop(this.volumes[0]) // move the background image to the top layer position\n   */\n  moveVolumeToTop(volume: NVImage): void {\n    this.setVolume(volume, this.volumes.length - 1)\n  }\n\n  // not included in public docs\n  // update mouse position from new mouse down coordinates\n  // note: no test yet\n  mouseDown(x: number, y: number): void {\n    x *= this.uiData.dpr!\n    y *= this.uiData.dpr!\n    this.mousePos = [x, y]\n    // if (this.inRenderTile(x, y) < 0) return;\n  }\n\n  // not included in public docs\n  // note: no test yet\n  mouseMove(x: number, y: number): void {\n    x *= this.uiData.dpr!\n    y *= this.uiData.dpr!\n    const dx = (x - this.mousePos[0]) / this.uiData.dpr!\n    const dy = (y - this.mousePos[1]) / this.uiData.dpr!\n    this.mousePos = [x, y]\n\n    if (this.inRenderTile(x, y) < 0) {\n      return\n    }\n\n    if (Math.abs(dx) < 1 && Math.abs(dy) < 1) {\n      return\n    }\n    this.scene.renderAzimuth += dx\n    this.scene.renderElevation += dy\n\n    this.drawScene()\n  }\n\n  /**\n   * convert spherical AZIMUTH, ELEVATION to Cartesian\n   * @param azimuth - azimuth number\n   * @param elevation - elevation number\n   * @returns the converted [x, y, z] coordinates\n   * @example\n   * niivue = new Niivue()\n   * xyz = niivue.sph2cartDeg(42, 42)\n   */\n  sph2cartDeg(azimuth: number, elevation: number): number[] {\n    // convert spherical AZIMUTH,ELEVATION,RANGE to Cartesion\n    // see Matlab's [x,y,z] = sph2cart(THETA,PHI,R)\n    // reverse with cart2sph\n    const Phi = -elevation * (Math.PI / 180)\n    const Theta = ((azimuth - 90) % 360) * (Math.PI / 180)\n    const ret = [Math.cos(Phi) * Math.cos(Theta), Math.cos(Phi) * Math.sin(Theta), Math.sin(Phi)]\n    const len = Math.sqrt(ret[0] * ret[0] + ret[1] * ret[1] + ret[2] * ret[2])\n    if (len <= 0.0) {\n      return ret\n    }\n    ret[0] /= len\n    ret[1] /= len\n    ret[2] /= len\n    return ret\n  }\n\n  /**\n   * update the clip plane orientation in 3D view mode\n   * @param azimuthElevationDepth - a two component vector. azimuth: camera position in degrees around object, typically 0..360 (or -180..+180). elevation: camera height in degrees, range -90..90\n   * @example\n   * niivue = new Niivue()\n   * niivue.setClipPlane([42, 42])\n   * @see {@link https://niivue.github.io/niivue/features/mask.html | live demo usage}\n   */\n  setClipPlane(depthAzimuthElevation: number[]): void {\n    //  depth: distance of clip plane from center of volume, range 0..~1.73 (e.g. 2.0 for no clip plane)\n    //  azimuthElevation is 2 component vector [a, e, d]\n    //  azimuth: camera position in degrees around object, typically 0..360 (or -180..+180)\n    //  elevation: camera height in degrees, range -90..90\n\n    const v = this.sph2cartDeg(depthAzimuthElevation[1] + 180, depthAzimuthElevation[2])\n    this.scene.clipPlane = [v[0], v[1], v[2], depthAzimuthElevation[0]]\n    this.scene.clipPlaneDepthAziElev = depthAzimuthElevation\n    this.onClipPlaneChange(this.scene.clipPlane)\n    // if (this.opts.sliceType!= SLICE_TYPE.RENDER) return;\n    this.drawScene()\n  }\n\n  /**\n   * set the crosshair and colorbar outline color\n   * @param color - an RGBA array. values range from 0 to 1\n   * @example\n   * niivue = new Niivue()\n   * niivue.setCrosshairColor([0, 1, 0, 0.5]) // set crosshair to transparent green\n   * @see {@link https://niivue.github.io/niivue/features/colormaps.html | live demo usage}\n   */\n  setCrosshairColor(color: number[]): void {\n    this.opts.crosshairColor = color\n    this.drawScene()\n  }\n\n  /**\n   * set thickness of crosshair\n   * @example niivue.crosshairWidth(2)\n   * @see {@link https://niivue.github.io/niivue/features/colormaps.html | live demo usage}\n   */\n  setCrosshairWidth(crosshairWidth: number): void {\n    this.opts.crosshairWidth = crosshairWidth\n    if (this.crosshairs3D) {\n      this.crosshairs3D.mm![0] = NaN // force redraw\n    }\n    this.drawScene()\n  }\n\n  /*\n   * set colors and labels for different drawing values\n   * @param {array} cmap a structure mapping indices to colors and labels\n   * @example\n   * let cmap = {\n   *    R: [0, 255, 0],\n   *    G: [0, 20, 0],\n   *    B: [0, 20, 80],\n   *    A: [0, 255, 255],\n   *    labels: [\"\", \"white-matter\", \"delete T1\"],\n   *  };\n   *  nv.setDrawColormap(cmap);\n   * @see {@link https://niivue.github.io/niivue/features/draw.ui.html | live demo usage}\n   */\n  setDrawColormap(name: string): void {\n    this.drawLut = cmapper.makeDrawLut(name)\n    this.updateGLVolume()\n  }\n\n  /**\n   * does dragging over a 2D slice create a drawing?\n   * @param trueOrFalse - enabled (true) or not (false)\n   * @example niivue.setDrawingEnabled(true)\n   * @see {@link https://niivue.github.io/niivue/features/draw.ui.html | live demo usage}\n   */\n  setDrawingEnabled(trueOrFalse: boolean): void {\n    this.opts.drawingEnabled = trueOrFalse\n    if (this.opts.drawingEnabled) {\n      if (!this.drawBitmap) {\n        this.createEmptyDrawing()\n      }\n    }\n    this.drawScene()\n  }\n\n  /**\n   * determine color and style of drawing\n   * @param penValue - sets the color of the pen\n   * @param isFilledPen - determines if dragging creates flood-filled shape\n   * @example niivue.setPenValue(1, true)\n   * @see {@link https://niivue.github.io/niivue/features/draw.ui.html | live demo usage}\n   */\n  setPenValue(penValue: number, isFilledPen = false): void {\n    this.opts.penValue = penValue\n    this.opts.isFilledPen = isFilledPen\n    this.drawScene()\n  }\n\n  /**\n   * control whether drawing is transparent (0), opaque (1) or translucent (between 0 and 1).\n   * @param opacity - translucency of drawing\n   * @example niivue.setDrawOpacity(0.7)\n   * @see {@link https://niivue.github.io/niivue/features/draw.ui.html | live demo usage}\n   */\n  setDrawOpacity(opacity: number): void {\n    this.drawOpacity = opacity\n    this.drawScene()\n  }\n\n  /**\n   * set the selection box color. A selection box is drawn when you right click and drag to change image contrast\n   * @param color - an RGBA array. values range from 0 to 1\n   * @example\n   * niivue = new Niivue()\n   * niivue.setSelectionBoxColor([0, 1, 0, 0.5]) // set to transparent green\n   * @see {@link https://niivue.github.io/niivue/features/colormaps.html | live demo usage}\n   */\n  setSelectionBoxColor(color: number[]): void {\n    this.opts.selectionBoxColor = color\n  }\n\n  // not included in public docs\n  sliceScroll2D(posChange: number, x: number, y: number, isDelta = true): void {\n    // check if the canvas has focus\n    if (this.opts.scrollRequiresFocus && this.canvas !== document.activeElement) {\n      log.warn('Canvas element does not have focus. Scroll events will not be processed.')\n      return\n    }\n\n    if (this.inGraphTile(x, y)) {\n      let vol = this.volumes[0].frame4D\n      if (posChange > 0) {\n        vol++\n      }\n      if (posChange < 0) {\n        vol--\n      }\n      this.setFrame4D(this.volumes[0].id, vol)\n      return\n    }\n    if (\n      posChange !== 0 &&\n      this.opts.dragMode === DRAG_MODE.pan &&\n      this.inRenderTile(this.uiData.dpr! * x, this.uiData.dpr! * y) === -1\n    ) {\n      let zoom = this.scene.pan2Dxyzmm[3] * (1.0 + 10 * posChange)\n      zoom = Math.round(zoom * 10) / 10\n      const zoomChange = this.scene.pan2Dxyzmm[3] - zoom\n      if (this.opts.yoke3Dto2DZoom) {\n        this.scene.volScaleMultiplier = zoom\n      }\n      this.scene.pan2Dxyzmm[3] = zoom\n      const mm = this.frac2mm(this.scene.crosshairPos)\n      this.scene.pan2Dxyzmm[0] += zoomChange * mm[0]\n      this.scene.pan2Dxyzmm[1] += zoomChange * mm[1]\n      this.scene.pan2Dxyzmm[2] += zoomChange * mm[2]\n      this.drawScene()\n      this.canvas!.focus() // required after change for issue706\n      this.sync()\n      return\n    }\n    this.mouseClick(x, y, posChange, isDelta)\n  }\n\n  /**\n   * set the slice type. This changes the view mode\n   * @param sliceType - an enum of slice types to use\n   * @example\n   * niivue = new Niivue()\n   * niivue.setSliceType(Niivue.sliceTypeMultiplanar)\n   * @see {@link https://niivue.github.io/niivue/features/basic.multiplanar.html | live demo usage}\n   */\n  setSliceType(st: SLICE_TYPE): this {\n    this.opts.sliceType = st\n    this.drawScene()\n    return this\n  }\n\n  /**\n   * set the opacity of a volume given by volume index\n   * @param volIdx - the volume index of the volume to change\n   * @param newOpacity - the opacity value. valid values range from 0 to 1. 0 will effectively remove a volume from the scene\n   * @example\n   * niivue = new Niivue()\n   * niivue.setOpacity(0, 0.5) // make the first volume transparent\n   * @see {@link https://niivue.github.io/niivue/features/atlas.html | live demo usage}\n   */\n  setOpacity(volIdx: number, newOpacity: number): void {\n    this.volumes[volIdx].opacity = newOpacity\n    if (volIdx === 0) {\n      // background layer opacity set dynamically with shader\n      this.drawScene()\n      return\n    }\n    // all overlays are combined as a single texture, so changing opacity to one requires us to refresh textures\n    this.updateGLVolume()\n    //\n  }\n\n  /**\n   * set the scale of the 3D rendering. Larger numbers effectively zoom.\n   * @param scale - the new scale value\n   * @example\n   * niivue.setScale(2) // zoom some\n   * @see {@link https://niivue.github.io/niivue/features/shiny.volumes.html | live demo usage}\n   */\n  setScale(scale: number): void {\n    this.scene.volScaleMultiplier = scale\n    this.drawScene()\n  }\n\n  /**\n   * set the color of the 3D clip plane\n   * @param color - the new color. expects an array of RGBA values. values can range from 0 to 1\n   * @example\n   * niivue.setClipPlaneColor([1, 1, 1, 0.5]) // white, transparent\n   * @see {@link https://niivue.github.io/niivue/features/clipplanes.html | live demo usage}\n   */\n  setClipPlaneColor(color: number[]): void {\n    this.opts.clipPlaneColor = color\n    this.renderShader!.use(this.gl)\n    this.gl.uniform4fv(this.renderShader!.uniforms.clipPlaneColor!, this.opts.clipPlaneColor)\n    this.drawScene()\n  }\n\n  /**\n   * adjust thickness of the 3D clip plane\n   * @param thick - thickness of slab. Value 0..1.73 (cube opposite corner length is sqrt(3)).\n   * @example\n   * niivue.setClipPlaneThick(0.3) // thin slab\n   * @see {@link https://niivue.github.io/niivue/features/clipplanes.html | live demo usage}\n   */\n  setClipPlaneThick(thick: number): void {\n    this.opts.clipThick = thick\n    this.renderShader!.use(this.gl)\n    this.gl.uniform1f(this.renderShader!.uniforms.clipThick!, this.opts.clipThick)\n    // this.renderShader!.use(this.gl)\n    // this.gl.uniform4fv(this.renderShader!.uniforms.clipPlaneColor!, this.opts.clipPlaneColor)\n    this.drawScene()\n  }\n\n  /**\n   * set the clipping region for volume rendering\n   * @param color - the new color. expects an array of RGBA values. values can range from 0 to 1\n   * @example\n   * niivue.setClipPlaneColor([0.0, 0.0, 0.2], [1.0, 1.0, 0.7]) // remove inferior 20% and superior 30%\n   * @see {@link https://niivue.github.io/niivue/features/clipplanes.html | live demo usage}\n   */\n  setClipVolume(low: number[], high: number[]): void {\n    this.opts.clipVolumeLow = [Math.min(low[0], high[0]), Math.min(low[1], high[1]), Math.min(low[2], high[2])]\n    this.opts.clipVolumeHigh = [Math.max(low[0], high[0]), Math.max(low[1], high[1]), Math.max(low[2], high[2])]\n    this.renderShader!.use(this.gl)\n    this.gl.uniform3fv(this.renderShader!.uniforms.clipLo!, this.opts.clipVolumeLow)\n    this.gl.uniform3fv(this.renderShader!.uniforms.clipHi!, this.opts.clipVolumeHigh)\n    this.pickingImageShader!.use(this.gl)\n    this.gl.uniform3fv(this.pickingImageShader!.uniforms.clipLo!, this.opts.clipVolumeLow)\n    this.gl.uniform3fv(this.pickingImageShader!.uniforms.clipHi!, this.opts.clipVolumeHigh)\n    this.drawScene()\n  }\n\n  /**\n   * set proportion of volume rendering influenced by selected matcap.\n   * @param gradientAmount - amount of matcap (0..1), default 0 (matte, surface normal does not influence color)\n   * @example\n   * niivue.setVolumeRenderIllumination(0.6);\n   * @see {@link https://niivue.github.io/niivue/features/shiny.volumes.html | live demo usage}\n   */\n  async setVolumeRenderIllumination(gradientAmount = 0.0): Promise<void> {\n    this.renderShader = this.renderVolumeShader\n    if (gradientAmount > 0.0) {\n      this.renderShader = this.renderGradientShader\n    }\n    if (gradientAmount < 0.0) {\n      this.renderShader = this.renderSliceShader\n    }\n    this.initRenderShader(this.renderShader!, gradientAmount)\n    this.renderShader!.use(this.gl)\n    this.setClipPlaneColor(this.opts.clipPlaneColor)\n    this.gradientTextureAmount = gradientAmount\n    this.refreshLayers(this.volumes[0], 0)\n    this.drawScene()\n  }\n\n  // not included in public docs.\n  // note: marked for removal at some point in the future (this just makes a test sphere)\n  overlayRGBA(volume: NVImage): Uint8ClampedArray {\n    const hdr = volume.hdr!\n    const vox = hdr.dims[1] * hdr.dims[2] * hdr.dims[3]\n    const imgRGBA = new Uint8ClampedArray(vox * 4)\n    const radius = 0.2 * Math.min(Math.min(hdr.dims[1], hdr.dims[2]), hdr.dims[3])\n    const halfX = 0.5 * hdr.dims[1]\n    const halfY = 0.5 * hdr.dims[2]\n    const halfZ = 0.5 * hdr.dims[3]\n    let j = 0\n    for (let z = 0; z < hdr.dims[3]; z++) {\n      for (let y = 0; y < hdr.dims[2]; y++) {\n        for (let x = 0; x < hdr.dims[1]; x++) {\n          const dx = Math.abs(x - halfX)\n          const dy = Math.abs(y - halfY)\n          const dz = Math.abs(z - halfZ)\n          const dist = Math.sqrt(dx * dx + dy * dy + dz * dz)\n          let v = 0\n          if (dist < radius) {\n            v = 255\n          }\n          imgRGBA[j++] = 0 // Red\n          imgRGBA[j++] = v // Green\n          imgRGBA[j++] = 0 // Blue\n          imgRGBA[j++] = v * 0.5 // Alpha\n        }\n      }\n    }\n    return imgRGBA\n  }\n\n  // not included in public docs\n  vox2mm(XYZ: number[], mtx: mat4): vec3 {\n    return NVUtilities.vox2mm(XYZ, mtx)\n  }\n\n  /**\n   * clone a volume and return a new volume\n   * @param index - the index of the volume to clone\n   * @returns new volume to work with, but that volume is not added to the canvas\n   * @example\n   * niivue = new Niivue()\n   * niivue.cloneVolume(0)\n   */\n  cloneVolume(index: number): NVImage {\n    return this.volumes[index].clone()\n  }\n\n  /**\n   *\n   * @param url - URL of NVDocument\n   */\n  async loadDocumentFromUrl(url: string): Promise<void> {\n    const document = await NVDocument.loadFromUrl(url)\n    this.loadDocument(document)\n  }\n\n  /**\n   * Loads an NVDocument\n   * @returns  Niivue instance\n   * @see {@link https://niivue.github.io/niivue/features/document.load.html | live demo usage}\n   */\n  loadDocument(document: NVDocument): this {\n    this.volumes = []\n    this.meshes = []\n    this.document = document\n    this.document.labels = this.document.labels ? this.document.labels : [] // for older documents w/o labels\n    const opts = { ...DEFAULT_OPTIONS, ...document.opts }\n    this.scene.pan2Dxyzmm = document.scene.pan2Dxyzmm ? document.scene.pan2Dxyzmm : [0, 0, 0, 1] // for older documents that don't have this\n    this.document.opts = opts\n    this.setClipPlane(this.scene.clipPlaneDepthAziElev)\n    log.debug('load document', document)\n    this.mediaUrlMap.clear()\n    this.createEmptyDrawing()\n\n    // const imagesToAdd = new Map<ImageFromUrlOptions, NVImage>()\n\n    // load our images and meshes\n    const encodedImageBlobs = document.encodedImageBlobs\n    for (let i = 0; i < document.imageOptionsArray.length; i++) {\n      const imageOptions = document.imageOptionsArray[i]\n      const base64 = encodedImageBlobs[i]\n      if (base64) {\n        if ('colorMap' in imageOptions) {\n          imageOptions.colormap = imageOptions.colorMap\n        }\n        const image = NVImage.loadFromBase64({ base64, ...imageOptions })\n        if (image) {\n          if (image.colormapLabel) {\n            const length = Object.keys(image.colormapLabel.lut).length\n\n            // Create a new Uint8ClampedArray with the length of the object.\n            const uint8ClampedArray = new Uint8ClampedArray(length)\n\n            // Iterate over the object and set the values of the Uint8ClampedArray.\n            for (const key in image.colormapLabel.lut) {\n              uint8ClampedArray[key] = image.colormapLabel.lut[key]\n            }\n            image.colormapLabel.lut = uint8ClampedArray\n          }\n          this.addVolume(image)\n        }\n      }\n    }\n\n    // reset our image options map\n    // document.imageOptionsMap.clear()\n\n    // for(const imageOptions of map.keys()) {\n\n    // }\n\n    if (this.volumes.length > 0) {\n      this.back = this.volumes[0]\n    }\n\n    const base64 = document.encodedDrawingBlob\n    if (base64) {\n      const imageOptions = document.imageOptionsArray[0]\n      const drawingBitmap = NVImage.loadFromBase64({ base64, ...imageOptions })\n      if (drawingBitmap) {\n        this.loadDrawing(drawingBitmap)\n      }\n    }\n\n    for (const meshDataObject of document.meshDataObjects ?? []) {\n      const meshInit = { gl: this.gl, ...meshDataObject }\n      if (meshDataObject.offsetPt0) {\n        meshInit.rgba255[3] = 0 // this is a streamline\n        meshInit.tris = new Uint32Array(meshDataObject.offsetPt0)\n      }\n      log.debug(meshInit)\n      const meshToAdd = new NVMesh(\n        meshInit.pts,\n        meshInit.tris!,\n        meshInit.name,\n        meshInit.rgba255,\n        meshInit.opacity,\n        meshInit.visible,\n        this.gl,\n        meshInit.connectome,\n        meshInit.dpg,\n        meshInit.dps,\n        meshInit.dpv\n      )\n      if (meshDataObject.offsetPt0) {\n        meshToAdd.fiberGroupColormap = meshDataObject.fiberGroupColormap\n        meshToAdd.fiberColor = meshDataObject.fiberColor\n        meshToAdd.fiberDither = meshDataObject.fiberDither\n        meshToAdd.fiberRadius = meshDataObject.fiberRadius\n        meshToAdd.colormap = meshDataObject.colormap\n      }\n      meshToAdd.meshShaderIndex = meshInit.meshShaderIndex\n      meshToAdd.layers = meshInit.layers\n      meshToAdd.updateMesh(this.gl)\n      log.debug(meshToAdd)\n      this.addMesh(meshToAdd)\n    }\n    // add connectomes\n    if (document.data.connectomes) {\n      for (const connectomeString of document.data.connectomes) {\n        const connectome = JSON.parse(connectomeString)\n        const meshToAdd = this.loadConnectomeAsMesh(connectome)\n        meshToAdd.updateMesh(this.gl)\n        this.addMesh(meshToAdd)\n      }\n    }\n\n    this.updateGLVolume()\n    this.drawScene()\n    this.onDocumentLoaded(document)\n    return this\n  }\n\n  /**\n * generates JavaScript to load the current scene as a document\n * @param canvasId - id of canvas NiiVue will be attached to\n * @param esm - bundled version of NiiVue\n * @example\n * const javascript = this.generateLoadDocumentJavaScript(\"gl1\");\n * const html = `<html><body><canvas id=\"gl1\"></canvas><script type=\"module\" async>\n        ${javascript}</script></body></html>`;\n */\n  async generateLoadDocumentJavaScript(canvasId: string, esm: string): Promise<string> {\n    const json = this.json()\n\n    const base64 = await NVUtilities.compressToBase64String(JSON.stringify(json))\n    const javascript = `\n        ${esm}\n\n        async function saveNiivueAsHtml(pageName) {\n          //get new docstring\n          const docString = nv1.json();\n          const html =\n          document.getElementsByTagName(\"html\")[0]\n              .innerHTML.replace(base64, await NVUtilities.compressToBase64String(JSON.stringify(docString)));\n          NVUtilities.download(html, pageName, \"application/html\");\n        }\n\n        var nv1 = new Niivue();\n        nv1.attachTo(\"${canvasId}\");\n        var base64 = \"${base64}\";\n        NVUtilities.decompressBase64String(base64).then((jsonText) => {\n          var json = JSON.parse(jsonText); // string -> JSON\n          var doc = NVDocument.loadFromJSON(json);\n          nv1.loadDocument(doc);\n          nv1.updateGLVolume();\n        });\n\n      `\n\n    return javascript\n  }\n\n  /**\n   * generates HTML of current scene\n   * @param canvasId - id of canvas NiiVue will be attached to\n   * @param esm - bundled version of NiiVue\n   * @returns HTML with javascript of the current scene\n   * @example\n   * const template = `<html><body><canvas id=\"gl1\"></canvas><script type=\"module\" async>\n   *       %%javascript%%</script></body></html>`;\n   * nv1.generateHTML(\"page.html\", esm);\n   */\n  async generateHTML(canvasId = 'gl1', esm: string): Promise<string> {\n    const javascript = await this.generateLoadDocumentJavaScript(canvasId, esm)\n    const html = `<!DOCTYPE html>\n        <html lang=\"en\">\n          <head>\n            <meta charset=\"utf-8\" />\n            <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n            <meta name=\"viewport\" content=\"width=device-width,initial-scale=1.0\" />\n            <title>Save as HTML</title>\n            <style>\n            html {\n              height: auto;\n              min-height: 100%;\n              margin: 0;\n            }\n            body {\n              display: flex;\n              flex-direction: column;\n              margin: 0;\n              min-height: 100%;\n              width: 100%;\n              position: absolute;\n              font-family: system-ui, Arial, Helvetica, sans-serif;\n              background: #ffffff;\n              color: black;\n              user-select: none; /* Standard syntax */\n            }\n            header {\n              margin: 10px;\n            }\n            main {\n              flex: 1;\n              background: #000000;\n              position: relative;\n            }\n            footer {\n              margin: 10px;\n            }\n            canvas {\n              position: absolute;\n              cursor: crosshair;\n            }\n            canvas:focus {\n              outline: 0px;\n            }\n            div {\n              display: table-row;\n              background-color: blue;\n            }\n            </style>\n          </head>\n          <body>\n            <noscript>niivue requires JavaScript.</noscript>\n            <header>\n            Save the current scene as HTML\n            <button id=\"save\">Save as HTML</button>\n            </header>\n            <main>\n              <canvas id=\"gl1\"></canvas>\n            </main>\n            <script type=\"module\" async>\n              ${javascript}\n              function saveAsHtml() {\n                saveNiivueAsHtml(\"page.html\");\n              }\n              // assign our event handler\n              var button = document.getElementById(\"save\");\n              button.onclick = saveAsHtml;\n            </script>\n          </body>\n        </html>`\n    return html\n  }\n\n  /**\n   * save current scene as HTML\n   * @param fileName - the name of the HTML file\n   * @param canvasId - id of canvas NiiVue will be attached to\n   * @param esm - bundled version of NiiVue\n   */\n  async saveHTML(fileName = 'untitled.html', canvasId = 'gl1', esm: string): Promise<void> {\n    const html = await this.generateHTML(canvasId, esm)\n    return NVUtilities.download(html, fileName, 'application/html')\n  }\n\n  /**\n   * Converts NiiVue scene to JSON\n   */\n  json(): ExportDocumentData {\n    this.document.opts = this.opts\n    this.document.scene = this.scene\n    this.document.volumes = this.volumes\n    this.document.meshes = this.meshes\n    // we need to re-render before we generate the data URL https://stackoverflow.com/questions/30628064/how-to-toggle-preservedrawingbuffer-in-three-js\n    this.drawScene()\n    this.document.previewImageDataURL = this.canvas!.toDataURL()\n    const json = this.document.json()\n\n    return json\n  }\n\n  /**\n   * save the entire scene (objects and settings) as a document\n   * @param fileName - the name of the document storing the scene\n   * @param compress - whether the file should be compressed\n   * @example\n   * niivue.saveDocument(\"niivue.basic.nvd\")\n   * @see {@link https://niivue.github.io/niivue/features/document.3d.html | live demo usage}\n   */\n  async saveDocument(fileName = 'untitled.nvd', compress = true): Promise<void> {\n    this.document.title = fileName\n    log.debug('saveDocument', this.volumes[0])\n    // we need to re-render before we generate the data URL https://stackoverflow.com/questions/30628064/how-to-toggle-preservedrawingbuffer-in-three-js\n    this.drawScene()\n    this.document.previewImageDataURL = this.canvas!.toDataURL()\n    this.document.volumes = this.volumes\n    this.document.meshes = this.meshes\n    return this.document.download(fileName, compress)\n  }\n\n  // generic loadImages that wraps loadVolumes and loadMeshes\n  async loadImages(images: Array<ImageFromUrlOptions | LoadFromUrlParams>): Promise<this> {\n    const volumes = []\n    const meshes = []\n    for (const image of images) {\n      if ('url' in image) {\n        const ext = this.getFileExt(image.url)\n        // check this.loaders to see if a user has register\n        // a custom loader for this file extension\n        if (this.loaders[ext]) {\n          // check if the loader type property is a volume or mesh\n          // by using the toExt property\n          const toExt = this.loaders[ext].toExt.toUpperCase()\n          if (MESH_EXTENSIONS.includes(toExt)) {\n            meshes.push(image)\n          } else {\n            volumes.push(image)\n          }\n          // continue to the next image\n          continue\n        }\n\n        if (MESH_EXTENSIONS.includes(ext.toUpperCase())) {\n          meshes.push(image)\n        } else {\n          volumes.push(image)\n        }\n      }\n    }\n    if (volumes.length > 0) {\n      await this.loadVolumes(volumes as ImageFromUrlOptions[])\n    }\n    if (meshes.length > 0) {\n      await this.loadMeshes(meshes as LoadFromUrlParams[])\n    }\n\n    return this\n  }\n\n  /**\n   * load an array of volume objects\n   * @param volumeList - the array of objects to load. each object must have a resolvable \"url\" property at a minimum\n   * @returns returns the Niivue instance\n   * @example\n   * niivue = new Niivue()\n   * niivue.loadVolumes([{url: 'someImage.nii.gz}, {url: 'anotherImage.nii.gz'}])\n   * @see {@link https://niivue.github.io/niivue/features/mask.html | live demo usage}\n   */\n  async loadVolumes(volumeList: ImageFromUrlOptions[]): Promise<this> {\n    this.loadingText = 'loading...'\n    this.drawScene()\n    // this.loadingText = this.opts.loadingText\n\n    if (this.thumbnailVisible) {\n      // defer volume loading until user clicks on canvas with thumbnail image\n      this.deferredVolumes = volumeList\n      return this\n    }\n    this.volumes = []\n    this.gl.clearColor(0.0, 0.0, 0.0, 1.0)\n    this.gl.clear(this.gl.COLOR_BUFFER_BIT)\n    // if more than one volume, then fetch them all simultaneously\n    // using addVolumesFromUrl (note the \"s\" in \"Volumes\")\n    // if (volumeList.length > 1) {\n    //   await this.addVolumesFromUrl(volumeList)\n    //   return this\n    // }\n\n    await this.addVolumesFromUrl(volumeList)\n    return this\n    // const imageOptions = {\n    //   url: volumeList[0].url!,\n    //   headers: volumeList[0].headers,\n    //   name: volumeList[0].name,\n    //   colormap: volumeList[0].colormap ? volumeList[0].colormap : volumeList[0].colorMap,\n    //   colormapNegative: volumeList[0].colormapNegative\n    //     ? volumeList[0].colormapNegative\n    //     : volumeList[0].colorMapNegative,\n    //   opacity: volumeList[0].opacity,\n    //   urlImgData: volumeList[0].urlImgData,\n    //   cal_min: volumeList[0].cal_min,\n    //   cal_max: volumeList[0].cal_max,\n    //   trustCalMinMax: this.opts.trustCalMinMax,\n    //   isManifest: volumeList[0].isManifest,\n    //   frame4D: volumeList[0].frame4D,\n    //   limitFrames4D: volumeList[0].limitFrames4D || this.opts.limitFrames4D,\n    //   colorbarVisible: volumeList[0].colorbarVisible\n    // }\n    // await this.addVolumeFromUrl(imageOptions)\n    // return this\n  }\n\n  /**\n   * Add mesh and notify subscribers\n   * @see {@link https://niivue.github.io/niivue/features/multiuser.meshes.html | live demo usage}\n   */\n  async addMeshFromUrl(meshOptions: LoadFromUrlParams): Promise<NVMesh> {\n    const ext = this.getFileExt(meshOptions.url)\n    if (ext === 'JCON' || ext === 'JSON') {\n      const response = await fetch(meshOptions.url, {})\n      const json = await response.json()\n      const mesh = this.loadConnectomeAsMesh(json)\n      this.mediaUrlMap.set(mesh, meshOptions.url)\n      this.onMeshAddedFromUrl(meshOptions, mesh)\n      this.addMesh(mesh)\n      return mesh\n    }\n    const mesh = await NVMesh.loadFromUrl({ ...meshOptions, gl: this.gl })\n    this.mediaUrlMap.set(mesh, meshOptions.url)\n    this.onMeshAddedFromUrl(meshOptions, mesh)\n    this.addMesh(mesh)\n    return mesh\n  }\n\n  /**\n   * Add mesh and notify subscribers\n   * @see {@link https://niivue.github.io/niivue/features/multiuser.meshes.html | live demo usage}\n   */\n  async addMeshesFromUrl(meshOptions: LoadFromUrlParams[]): Promise<NVMesh[]> {\n    const promises = meshOptions.map(async (meshItem) => {\n      // first check this.loaders to see if the user has\n      // registered a custom loader for this file type.\n      // if so, use that loader to load the file.\n      const ext = this.getFileExt(meshItem.name || meshItem.url)\n      if (this.loaders[ext]) {\n        let itemToLoad: string | Uint8Array | ArrayBuffer = meshItem.url\n        const toExt = this.loaders[ext].toExt\n        let name = meshItem.name || meshItem.url\n        // in case the name is a url, just get the basename without the slashes\n        name = name.split('/').pop()\n        if (typeof meshItem.url === 'string') {\n          const url = meshItem.url\n          try {\n            const response = await fetch(url)\n            if (!response.ok) {\n              throw new Error(`Failed to load file: ${response.statusText}`)\n            }\n            itemToLoad = await response.arrayBuffer()\n          } catch (error) {\n            throw new Error(`Failed to load url ${url}: ${error}`)\n          }\n        }\n        const { positions, indices } = await this.loaders[ext].loader(itemToLoad)\n        meshItem.name = `${name}.${toExt}`\n        const mz3 = NVMeshUtilities.createMZ3(positions, indices, false)\n        meshItem.buffer = mz3\n        // return await this.loadFromArrayBuffer(mz3, meshItem.name)\n      }\n      if (ext === 'JCON' || ext === 'JSON') {\n        const response = await fetch(meshItem.url, {})\n        const json = await response.json()\n        const mesh = this.loadConnectomeAsMesh(json)\n        this.mediaUrlMap.set(mesh, meshItem.url)\n        this.onMeshAddedFromUrl(meshItem, mesh)\n        return mesh\n      }\n      const mesh = await NVMesh.loadFromUrl({ ...meshItem, gl: this.gl })\n      this.mediaUrlMap.set(mesh, meshItem.url)\n      this.onMeshAddedFromUrl(meshItem, mesh)\n      return mesh\n    })\n    const meshes = await Promise.all(promises)\n\n    for (let i = 0; i < meshes.length; i++) {\n      this.addMesh(meshes[i])\n    }\n    return meshes\n  }\n\n  /**\n   * load an array of meshes\n   * @param meshList - the array of objects to load. each object must have a resolvable \"url\" property at a minimum\n   * @returns Niivue instance\n   * @example\n   * niivue = new Niivue()\n   * niivue.loadMeshes([{url: 'someMesh.gii'}])\n   * @see {@link https://niivue.github.io/niivue/features/meshes.html | live demo usage}\n   */\n  async loadMeshes(meshList: LoadFromUrlParams[]): Promise<this> {\n    this.loadingText = 'loading...'\n    this.drawScene()\n\n    if (this.thumbnailVisible) {\n      // defer loading until user clicks on canvas with thumbnail image\n      this.deferredMeshes = meshList\n      return this\n    }\n    if (!this.initialized) {\n      // await this.init();\n    }\n    this.meshes = []\n    this.gl.clearColor(0.0, 0.0, 0.0, 1.0)\n    this.gl.clear(this.gl.COLOR_BUFFER_BIT)\n\n    // if more than one mesh, then fetch them all simultaneously\n    // using addMeshesFromUrl (note the \"s\" in \"Meshes\")\n    // if (meshList.length > 1) {\n    await this.addMeshesFromUrl(meshList)\n    this.updateGLVolume()\n    this.drawScene()\n    return this\n    // }\n\n    // await this.addMeshFromUrl(meshList[0])\n    // this.updateGLVolume()\n    // this.drawScene()\n    // return this\n  }\n\n  /**\n   * load a connectome specified by url\n   * @returns Niivue instance\n   * @see {@link https://niivue.github.io/niivue/features/connectome.html | live demo usage}\n   */\n  async loadConnectomeFromUrl(url: string, headers = {}): Promise<this> {\n    const response = await fetch(url, { headers })\n    const json = await response.json()\n    return this.loadConnectome(json)\n  }\n\n  /**\n   * load a connectome specified by url\n   * @returns Niivue instance\n   * @see {@link https://niivue.github.io/niivue/features/connectome.html | live demo usage}\n   */\n  async loadFreeSurferConnectomeFromUrl(url: string, headers = {}): Promise<this> {\n    const response = await fetch(url, { headers })\n    const json = await response.json()\n    return this.loadFreeSurferConnectome(json)\n  }\n\n  /**\n   * load a connectome specified by json\n   * @param connectome - freesurfer model\n   * @returns Niivue instance\n   * @see {@link https://niivue.github.io/niivue/features/connectome.html | live demo usage}\n   */\n  async loadFreeSurferConnectome(json: FreeSurferConnectome): Promise<this> {\n    const connectome = NVConnectome.convertFreeSurferConnectome(json)\n    return this.loadConnectome(connectome)\n  }\n\n  handleNodeAdded(event: { detail: { node: NVConnectomeNode } }): void {\n    const node = event.detail.node\n    const rgba = [1, 1, 1, 1]\n    this.addLabel(\n      node.name,\n      {\n        textColor: rgba,\n        bulletScale: 1,\n        bulletColor: rgba,\n        lineWidth: 0,\n        lineColor: rgba,\n        lineTerminator: LabelLineTerminator.NONE,\n        textScale: 1.0\n      },\n      [node.x, node.y, node.z]\n    )\n    this.drawScene()\n  }\n\n  loadConnectomeAsMesh(json: Connectome | LegacyConnectome | FreeSurferConnectome): NVMesh {\n    let connectome = json\n    if ('data_type' in json && json.data_type === 'fs_pointset') {\n      connectome = NVConnectome.convertFreeSurferConnectome(json as FreeSurferConnectome)\n      log.warn('converted FreeSurfer connectome', connectome)\n    } else if ('nodes' in json) {\n      const nodes = json.nodes\n      if ('names' in nodes && 'X' in nodes && 'Y' in nodes && 'Z' in nodes && 'Color' in nodes && 'Size' in nodes) {\n        // legacy format\n        connectome = NVConnectome.convertLegacyConnectome(json as LegacyConnectome)\n        log.warn('converted legacy connectome', connectome)\n      }\n    } else {\n      throw new Error('not a known connectome format')\n    }\n    return new NVConnectome(this.gl, connectome as LegacyConnectome)\n  }\n\n  /**\n   * load a connectome specified by json\n   * @param connectome - model\n   * @returns Niivue instance\n   * @see {@link https://niivue.github.io/niivue/features/connectome.html | live demo usage}\n   */\n  loadConnectome(json: Connectome | LegacyConnectome): this {\n    this.loadingText = 'loading...'\n    this.drawScene()\n    this.meshes = []\n    this.gl.clearColor(0.0, 0.0, 0.0, 1.0)\n    this.gl.clear(this.gl.COLOR_BUFFER_BIT)\n\n    const mesh = this.loadConnectomeAsMesh(json)\n    this.addMesh(mesh)\n    this.drawScene()\n    return this\n  }\n\n  /**\n   * generate a blank canvas for the pen tool\n   * @example niivue.createEmptyDrawing()\n   * @see {@link https://niivue.github.io/niivue/features/cactus.html | live demo usage}\n   */\n  createEmptyDrawing(): void {\n    if (this.back === null || !this.back.dims) {\n      return\n    }\n    const mn = Math.min(Math.min(this.back.dims[1], this.back.dims[2]), this.back.dims[3])\n    if (mn < 1) {\n      return\n    } // something is horribly wrong!\n    const vx = this.back.dims[1] * this.back.dims[2] * this.back.dims[3]\n    this.drawBitmap = new Uint8Array(vx)\n    this.clickToSegmentGrowingBitmap = new Uint8Array(vx)\n    this.drawClearAllUndoBitmaps()\n    this.drawAddUndoBitmap()\n    this.drawTexture = this.r8Tex(this.drawTexture, TEXTURE7_DRAW, this.back.dims, true)\n    this.refreshDrawing(false)\n  }\n\n  // not included in public docs\n  // create a 1-component (red) 16-bit signed integer texture on the GPU\n  r16Tex(texID: WebGLTexture | null, activeID: number, dims: number[], img16: Int16Array): WebGLTexture {\n    if (texID) {\n      this.gl.deleteTexture(texID)\n    }\n    texID = this.gl.createTexture()!\n    this.gl.activeTexture(activeID)\n    this.gl.bindTexture(this.gl.TEXTURE_3D, texID)\n    this.gl.texParameteri(this.gl.TEXTURE_3D, this.gl.TEXTURE_MIN_FILTER, this.gl.NEAREST)\n    this.gl.texParameteri(this.gl.TEXTURE_3D, this.gl.TEXTURE_MAG_FILTER, this.gl.NEAREST)\n    this.gl.texParameteri(this.gl.TEXTURE_3D, this.gl.TEXTURE_WRAP_R, this.gl.CLAMP_TO_EDGE)\n    this.gl.texParameteri(this.gl.TEXTURE_3D, this.gl.TEXTURE_WRAP_S, this.gl.CLAMP_TO_EDGE)\n    this.gl.texParameteri(this.gl.TEXTURE_3D, this.gl.TEXTURE_WRAP_T, this.gl.CLAMP_TO_EDGE)\n    this.gl.pixelStorei(this.gl.UNPACK_ALIGNMENT, 1)\n    this.gl.texStorage3D(this.gl.TEXTURE_3D, 1, this.gl.R16I, dims[1], dims[2], dims[3]) // output background dimensions\n    const nv = dims[1] * dims[2] * dims[3]\n    if (img16.length !== nv) {\n      img16 = new Int16Array(nv)\n    }\n    this.gl.texSubImage3D(\n      this.gl.TEXTURE_3D,\n      0,\n      0,\n      0,\n      0,\n      dims[1],\n      dims[2],\n      dims[3],\n      this.gl.RED_INTEGER,\n      this.gl.SHORT,\n      img16\n    ) // this.gl.SHORT,\n\n    return texID\n  }\n\n  /**\n   * dilate drawing so all voxels are colored.\n   * works on drawing with multiple colors\n   * @example niivue.drawGrowCut();\n   * @see {@link https://niivue.github.io/niivue/features/draw2.html | live demo usage}\n   */\n  drawGrowCut(): void {\n    // this compute shader transiently requires 5 3D Textures:\n    // TEXTURE11_GC_BACK      = 33995 background voxel intensity\n    // TEXTURE12_GC_STRENGTH0 = 33996 weighting read/write\n    // TEXTURE13_GC_STRENGTH1 = 33997 weighting write/read\n    // TEXTURE14_GC_LABEL0    = 33998 drawing color read/write\n    // TEXTURE15_GC_LABEL1    = 33999 drawing color write/read\n    if (!this.back || !this.back.dims) {\n      // TODO gl and back etc should be centrally guaranteed to be set\n      throw new Error('back not defined')\n    }\n    const hdr = this.back.hdr!\n    const gl = this.gl\n    const nv = hdr.dims[1] * hdr.dims[2] * hdr.dims[3]\n    if (!this.drawBitmap || this.drawBitmap.length !== nv) {\n      log.debug('bitmap dims are wrong')\n      return\n    }\n    // this.drawUndoBitmap = this.drawBitmap.slice();\n    const fb = gl.createFramebuffer()\n    gl.bindFramebuffer(gl.FRAMEBUFFER, fb)\n    gl.disable(gl.CULL_FACE)\n    gl.viewport(0, 0, this.back.dims[1], this.back.dims[2]) // output in background dimensions\n    gl.disable(gl.BLEND)\n    let img16 = img2ras16(this.back)\n    const background = this.r16Tex(null, TEXTURE11_GC_BACK, this.back.dims, img16)\n    for (let i = 1; i < nv; i++) {\n      img16[i] = this.drawBitmap[i]\n    }\n    const label0 = this.r16Tex(null, TEXTURE14_GC_LABEL0, this.back.dims, img16)\n    const label1 = this.r16Tex(null, TEXTURE15_GC_LABEL1, this.back.dims, img16)\n    const kMAX_STRENGTH = 10000\n    for (let i = 1; i < nv; i++) {\n      if (img16[i] > 0) {\n        img16[i] = kMAX_STRENGTH\n      }\n    }\n    const strength0 = this.r16Tex(null, TEXTURE12_GC_STRENGTH0, this.back.dims, img16)\n    const strength1 = this.r16Tex(null, TEXTURE13_GC_STRENGTH1, this.back.dims, img16)\n    gl.bindVertexArray(this.genericVAO)\n    const shader = this.growCutShader!\n    shader.use(gl)\n    const iterations = 128 // will run 2x this value\n    gl.uniform1i(shader.uniforms.finalPass, 0)\n    gl.uniform1i(shader.uniforms.backTex, 11) // background is TEXTURE11_GC_BACK\n    for (let j = 0; j < iterations; j++) {\n      gl.uniform1i(shader.uniforms.labelTex, 14) // label0 is TEXTURE14_GC_LABEL0\n      gl.uniform1i(shader.uniforms.strengthTex, 12) // strength0 is TEXTURE12_GC_STRENGTH0\n      for (let i = 0; i < this.back.dims[3]; i++) {\n        const coordZ = (1 / this.back.dims[3]) * (i + 0.5)\n        gl.uniform1f(shader.uniforms.coordZ, coordZ)\n        gl.framebufferTextureLayer(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, label1, 0, i)\n        gl.framebufferTextureLayer(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT1, strength1, 0, i)\n        gl.drawBuffers([gl.COLOR_ATTACHMENT0, gl.COLOR_ATTACHMENT1])\n        const status = gl.checkFramebufferStatus(gl.FRAMEBUFFER)\n        if (status !== gl.FRAMEBUFFER_COMPLETE) {\n          log.error('Incomplete framebuffer')\n        }\n        gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4)\n      }\n      // reverse order strength1/label1 and strength0/label0 for reading and writing:\n      if (j === iterations - 1) {\n        gl.uniform1i(shader.uniforms.finalPass, 1)\n      }\n      gl.uniform1i(shader.uniforms.labelTex, 15) // label1 is TEXTURE15_GC_LABEL1\n      gl.uniform1i(shader.uniforms.strengthTex, 13) // strength1 is TEXTURE13_GC_STRENGTH1\n      for (let i = 0; i < this.back.dims[3]; i++) {\n        const coordZ = (1 / this.back.dims[3]) * (i + 0.5)\n        gl.uniform1f(shader.uniforms.coordZ, coordZ)\n        gl.framebufferTextureLayer(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, label0, 0, i)\n        gl.framebufferTextureLayer(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT1, strength0, 0, i)\n        gl.drawBuffers([gl.COLOR_ATTACHMENT0, gl.COLOR_ATTACHMENT1])\n        const status = gl.checkFramebufferStatus(gl.FRAMEBUFFER)\n        if (status !== gl.FRAMEBUFFER_COMPLETE) {\n          log.error('Incomplete framebuffer')\n        }\n        gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4)\n      }\n    }\n    // read data\n    gl.drawBuffers([gl.COLOR_ATTACHMENT0])\n    const readAttach = gl.COLOR_ATTACHMENT1\n    const readTex = label0\n    gl.readBuffer(readAttach) // label\n    // assuming a framebuffer is bound with the texture to read attached\n    const format = gl.getParameter(gl.IMPLEMENTATION_COLOR_READ_FORMAT)\n    const type = gl.getParameter(gl.IMPLEMENTATION_COLOR_READ_TYPE)\n    if (format !== gl.RED_INTEGER || type !== gl.SHORT) {\n      log.debug('readPixels will fail.')\n    }\n    img16 = new Int16Array()\n    const nv2D = this.back.dims[1] * this.back.dims[2]\n    const slice16 = new Int16Array(nv2D)\n    for (let i = 0; i < this.back.dims[3]; i++) {\n      gl.framebufferTextureLayer(\n        gl.FRAMEBUFFER,\n        readAttach, // gl.COLOR_ATTACHMENT1,//COLOR_ATTACHMENT1\n        readTex, // strength1,//strength0\n        0,\n        i\n      )\n      gl.readPixels(0, 0, this.back.dims[1], this.back.dims[2], format, type, slice16)\n      // img16.push(...slice16); // <- will elicit call stack limit error\n      img16 = Int16Array.from([...img16, ...slice16])\n    }\n    let mx = img16[0]\n    for (let i = 0; i < img16.length; i++) {\n      mx = Math.max(mx, img16[i])\n    }\n    for (let i = 1; i < nv; i++) {\n      this.drawBitmap[i] = img16[i]\n    }\n    gl.deleteTexture(background)\n    gl.deleteTexture(strength0)\n    gl.deleteTexture(strength1)\n    gl.deleteTexture(label0)\n    gl.deleteTexture(label1)\n    gl.bindVertexArray(this.unusedVAO)\n    // gl.deleteTexture(blendTexture);\n    gl.viewport(0, 0, gl.canvas.width, gl.canvas.height)\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null)\n    gl.deleteFramebuffer(fb)\n    this.drawAddUndoBitmap()\n    this.refreshDrawing(true)\n  }\n\n  // not included in public docs\n  // set color of single voxel in drawing\n  drawPt(x: number, y: number, z: number, penValue: number): void {\n    if (!this.back?.dims) {\n      throw new Error('back.dims not set')\n    }\n    const dx = this.back.dims[1]\n    const dy = this.back.dims[2]\n    const dz = this.back.dims[3]\n    x = Math.min(Math.max(x, 0), dx - 1)\n    y = Math.min(Math.max(y, 0), dy - 1)\n    z = Math.min(Math.max(z, 0), dz - 1)\n    this.drawBitmap![x + y * dx + z * dx * dy] = penValue\n    // get tile index for voxel\n    const isAx = this.drawPenAxCorSag === 0\n    const isCor = this.drawPenAxCorSag === 1\n    const isSag = this.drawPenAxCorSag === 2\n    // since the pen is only drawing in one 2D plane,\n    // only draw the neighbors (based on penSize) in that plane.\n    // if penSize is 1, only draw the voxel itself.\n    // if penSize is even (2, 4, 6, etc.), then the extra voxel will be drawn in the positive direction.\n    // if penSize is odd (3, 5, 7, etc.), then the the pen will be centered on the voxel.\n    if (this.opts.penSize > 1) {\n      const halfPenSize = Math.floor(this.opts.penSize / 2)\n      for (let i = -halfPenSize; i <= halfPenSize; i++) {\n        for (let j = -halfPenSize; j <= halfPenSize; j++) {\n          if (isAx) {\n            this.drawBitmap![x + i + (y + j) * dx + z * dx * dy] = penValue\n          } else if (isCor) {\n            this.drawBitmap![x + i + y * dx + (z + j) * dx * dy] = penValue\n          } else if (isSag) {\n            this.drawBitmap![x + (y + j) * dx + (z + i) * dx * dy] = penValue\n          }\n        }\n      }\n    }\n  }\n\n  // not included in public docs\n  // create line between to voxels in drawing\n  // https://en.wikipedia.org/wiki/Bresenham%27s_line_algorithm\n  // https://www.geeksforgeeks.org/bresenhams-algorithm-for-3-d-line-drawing/\n  // ptA, ptB are start and end points of line (each XYZ)\n  drawPenLine(ptA: number[], ptB: number[], penValue: number): void {\n    const dx = Math.abs(ptA[0] - ptB[0])\n    const dy = Math.abs(ptA[1] - ptB[1])\n    const dz = Math.abs(ptA[2] - ptB[2])\n    let xs = -1\n    let ys = -1\n    let zs = -1\n    if (ptB[0] > ptA[0]) {\n      xs = 1\n    }\n    if (ptB[1] > ptA[1]) {\n      ys = 1\n    }\n    if (ptB[2] > ptA[2]) {\n      zs = 1\n    }\n    let x1 = ptA[0]\n    let y1 = ptA[1]\n    let z1 = ptA[2]\n    const x2 = ptB[0]\n    const y2 = ptB[1]\n    const z2 = ptB[2]\n    if (dx >= dy && dx >= dz) {\n      // Driving axis is X-axis\"\n      let p1 = 2 * dy - dx\n      let p2 = 2 * dz - dx\n      while (x1 !== x2) {\n        x1 += xs\n        if (p1 >= 0) {\n          y1 += ys\n          p1 -= 2 * dx\n        }\n        if (p2 >= 0) {\n          z1 += zs\n          p2 -= 2 * dx\n        }\n        p1 += 2 * dy\n        p2 += 2 * dz\n        this.drawPt(x1, y1, z1, penValue)\n      }\n    } else if (dy >= dx && dy >= dz) {\n      // Driving axis is Y-axis\"\n      let p1 = 2 * dx - dy\n      let p2 = 2 * dz - dy\n      while (y1 !== y2) {\n        y1 += ys\n        if (p1 >= 0) {\n          x1 += xs\n          p1 -= 2 * dy\n        }\n        if (p2 >= 0) {\n          z1 += zs\n          p2 -= 2 * dy\n        }\n        p1 += 2 * dx\n        p2 += 2 * dz\n        this.drawPt(x1, y1, z1, penValue)\n      }\n    } else {\n      // # Driving axis is Z-axis\n      let p1 = 2 * dy - dz\n      let p2 = 2 * dx - dz\n      while (z1 !== z2) {\n        z1 += zs\n        if (p1 >= 0) {\n          y1 += ys\n          p1 -= 2 * dz\n        }\n        if (p2 >= 0) {\n          x1 += xs\n          p2 -= 2 * dz\n        }\n        p1 += 2 * dy\n        p2 += 2 * dx\n        this.drawPt(x1, y1, z1, penValue)\n      }\n    }\n  }\n\n  /**\n   * Performs a 1-voxel binary dilation on a connected cluster within the drawing mask using the drawFloodFillCore function.\n   *\n   * @param seedXYZ -  voxel index of the seed voxel in the mask array.\n   * @param neighbors - Number of neighbors to consider for connectivity and dilation (6, 18, or 26).\n   */\n  drawingBinaryDilationWithSeed(\n    seedXYZ: number[], // seed voxel x,y,z\n    neighbors: 6 | 18 | 26 = 6\n  ): void {\n    try {\n      const mask = this.drawBitmap\n      const xDim = this.back.dims[1]\n      const yDim = this.back.dims[2]\n      const zDim = this.back.dims[3]\n      const nx = xDim\n      const nxy = xDim * yDim\n      const totalVoxels = nxy * zDim\n      function xyz2vx(pt: number[]): number {\n        return pt[0] + pt[1] * nx + pt[2] * nxy\n      }\n\n      const seedIndex = xyz2vx(seedXYZ)\n\n      // check that the seed index is within bounds\n      if (seedIndex < 0 || seedIndex >= totalVoxels) {\n        throw new Error('Seed index is out of bounds.')\n      }\n\n      // get value of the seed voxel\n      const seedValue = mask[seedIndex]\n\n      // check that the seed voxel is filled\n      if (seedValue === 0) {\n        throw new Error('Seed voxel is not part of a filled cluster.')\n      }\n\n      // create a copy of the mask to work on\n      const img = mask.slice()\n      // binarise the img since there could be multiple colors in the mask\n      for (let i = 0; i < totalVoxels; i++) {\n        img[i] = img[i] === seedValue ? 1 : 0\n      }\n\n      // use drawFloodFillCore to identify the connected cluster starting from seedIndex\n      this.drawFloodFillCore(img, seedIndex, neighbors)\n\n      // now, img has the cluster marked with value 2\n      // create an output mask for dilation\n      const outputMask = mask.slice() // Clone the original mask\n\n      // precompute neighbor offsets based on connectivity\n      const neighborOffsets: number[] = []\n\n      // offsets for 6-connectivity (face neighbors)\n      const offsets6 = [-nxy, nxy, -xDim, xDim, -1, 1]\n\n      neighborOffsets.push(...offsets6)\n\n      if (neighbors > 6) {\n        // offsets for 18-connectivity (edge neighbors)\n        neighborOffsets.push(\n          -xDim - 1,\n          -xDim + 1,\n          xDim - 1,\n          xDim + 1,\n          -nxy - xDim,\n          -nxy + xDim,\n          -nxy - 1,\n          -nxy + 1,\n          nxy - xDim,\n          nxy + xDim,\n          nxy - 1,\n          nxy + 1\n        )\n      }\n\n      if (neighbors > 18) {\n        // offsets for 26-connectivity (corner neighbors)\n        neighborOffsets.push(\n          -nxy - xDim - 1,\n          -nxy - xDim + 1,\n          -nxy + xDim - 1,\n          -nxy + xDim + 1,\n          nxy - xDim - 1,\n          nxy - xDim + 1,\n          nxy + xDim - 1,\n          nxy + xDim + 1\n        )\n      }\n\n      // iterate over the cluster voxels (value 2 in img) to perform dilation\n      for (let idx = 0; idx < totalVoxels; idx++) {\n        if (img[idx] === 2) {\n          const x = idx % xDim\n          const y = Math.floor((idx % nxy) / xDim)\n          const z = Math.floor(idx / nxy)\n\n          for (const offset of neighborOffsets) {\n            const neighborIdx = idx + offset\n\n            // skip if neighbor index is out of bounds\n            if (neighborIdx < 0 || neighborIdx >= totalVoxels) {\n              continue\n            }\n\n            // calculate neighbor coordinates\n            const nx = neighborIdx % xDim\n            const ny = Math.floor((neighborIdx % nxy) / xDim)\n            const nz = Math.floor(neighborIdx / nxy)\n\n            // ensure neighbor is adjacent (prevent wrapping around edges)\n            if (Math.abs(nx - x) > 1 || Math.abs(ny - y) > 1 || Math.abs(nz - z) > 1) {\n              continue\n            }\n\n            // if the neighbor voxel is empty in the original mask, fill it in the output mask\n            if (mask[neighborIdx] === 0) {\n              outputMask[neighborIdx] = seedValue\n            }\n          }\n        }\n      }\n      // set the output as the new drawing bitmap\n      this.drawBitmap = outputMask\n      // update the undo stack\n      this.drawAddUndoBitmap()\n      // refresh the drawing (copy from cpu to gpu) and show immediately\n      this.refreshDrawing(true)\n    } catch (error) {\n      log.error('Error in drawingBinaryDilationWithSeed:', error)\n    }\n  }\n\n  // a voxel can be defined as having 6, 18 or 26 neighbors:\n  //   6: neighbors share faces (distance=1)\n  //  18: neighbors share faces (distance=1) or edges (1.4)\n  //  26: neighbors share faces (distance=1), edges (1.4) or corners (1.7)\n  drawFloodFillCore(img: Uint8Array, seedVx: number, neighbors = 6): void {\n    if (!this.back?.dims) {\n      throw new Error('back.dims undefined')\n    }\n    const dims = [this.back.dims[1], this.back.dims[2], this.back.dims[3]] // +1: dims indexed from 0!\n    const nx = dims[0]\n    const nxy = nx * dims[1]\n    function xyz2vx(pt: number[]): number {\n      // provided an XYZ 3D point, provide address in 1D array\n      return pt[0] + pt[1] * nx + pt[2] * nxy\n    }\n    function vx2xyz(vx: number): number[] {\n      // provided address in 1D array, return XYZ coordinate\n      const Z = Math.floor(vx / nxy) // slice\n      const Y = Math.floor((vx - Z * nxy) / nx) // column\n      const X = Math.floor(vx % nx)\n      return [X, Y, Z]\n    }\n    // 1. Set Q to the empty queue or stack.\n    const Q = []\n    // 2. Add node to the end of Q.\n    Q.push(seedVx)\n    img[seedVx] = 2 // part of cluster\n    // 3. While Q is not empty:\n    while (Q.length > 0) {\n      // 4.   Set n equal to the first element of Q.\n      const vx = Q[0]\n      // 5.   Remove first element from Q.\n      Q.shift()\n      // 6. Test six neighbors of n (left,right,anterior,posterior,inferior, superior\n      //   If any is is unfound part of cluster (value = 1) set it to found (value 2) and add to Q\n      const xyz = vx2xyz(vx)\n\n      function testNeighbor(offset: number[]): void {\n        const xyzN = xyz.slice()\n        xyzN[0] += offset[0]\n        xyzN[1] += offset[1]\n        xyzN[2] += offset[2]\n        if (xyzN[0] < 0 || xyzN[1] < 0 || xyzN[2] < 0) {\n          return\n        }\n        if (xyzN[0] >= dims[0] || xyzN[1] >= dims[1] || xyzN[2] >= dims[2]) {\n          return\n        }\n        const vxT = xyz2vx(xyzN)\n        if (img[vxT] !== 1) {\n          return\n        }\n        img[vxT] = 2 // part of cluster\n        Q.push(vxT)\n      }\n      // test neighbors that share face\n      testNeighbor([0, 0, -1]) // inferior\n      testNeighbor([0, 0, 1]) // superior\n      testNeighbor([0, -1, 0]) // posterior\n      testNeighbor([0, 1, 0]) // anterior\n      testNeighbor([-1, 0, 0]) // left\n      testNeighbor([1, 0, 0]) // right\n      if (neighbors <= 6) {\n        continue\n      }\n      // test voxels that share edge\n      testNeighbor([-1, -1, 0]) // left posterior\n      testNeighbor([1, 1, 0]) // right posterior\n      testNeighbor([-1, 1, 0]) // left anterior\n      testNeighbor([1, 1, 0]) // right anterior\n      testNeighbor([0, -1, -1]) // posterior inferior\n      testNeighbor([0, 1, -1]) // anterior inferior\n      testNeighbor([-1, 0, -1]) // left inferior\n      testNeighbor([1, 0, -1]) // right inferior\n      testNeighbor([0, -1, 1]) // posterior superior\n      testNeighbor([0, 1, 1]) // anterior superior\n      testNeighbor([-1, 0, 1]) // left superior\n      testNeighbor([1, 0, 1]) // right superior\n      if (neighbors <= 18) {\n        continue\n      }\n      // test neighbors that share a corner\n      testNeighbor([-1, -1, -1]) // left posterior inferior\n      testNeighbor([1, -1, -1]) // right posterior inferior\n      testNeighbor([-1, 1, -1]) // left anterior inferior\n      testNeighbor([1, 1, -1]) // right anterior inferior\n      testNeighbor([-1, -1, 1]) // left posterior superior\n      testNeighbor([1, -1, 1]) // right posterior superior\n      testNeighbor([-1, 1, 1]) // left anterior superior\n      testNeighbor([1, 1, 1]) // right anterior superior\n      // 7. Continue looping until Q is exhausted.\n    }\n  }\n\n  // not included in public docs\n  // set all connected voxels in drawing to new color\n  drawFloodFill(\n    seedXYZ: number[],\n    newColor = 0,\n    growSelectedCluster = 0, // if non-zero, growth based on background intensity POSITIVE_INFINITY for selected or bright, NEGATIVE_INFINITY for selected or darker\n    forceMin = NaN,\n    forceMax = NaN,\n    neighbors = 6,\n    // option for only flood filling within max distance from seed voxel\n    maxDistanceMM = Number.POSITIVE_INFINITY,\n    is2D = false\n  ): void {\n    if (!this.drawBitmap) {\n      throw new Error('drawBitmap undefined')\n    }\n    if (!this.back?.dims) {\n      throw new Error('back.dims undefined')\n    }\n    // 3D \"paint bucket\" fill:\n    // set all voxels connected to seed point to newColor\n    // https://en.wikipedia.org/wiki/Flood_fill\n    newColor = Math.abs(newColor)\n    const dims = [this.back.dims[1], this.back.dims[2], this.back.dims[3]] // +1: dims indexed from 0!\n    if (seedXYZ[0] < 0 || seedXYZ[1] < 0 || seedXYZ[2] < 0) {\n      return\n    }\n    if (seedXYZ[0] >= dims[0] || seedXYZ[1] >= dims[1] || seedXYZ[2] >= dims[2]) {\n      return\n    }\n    const nx = dims[0]\n    const nxy = nx * dims[1]\n    const nxyz = nxy * dims[2]\n    let img = this.drawBitmap.slice()\n    let drawBitmap = this.drawBitmap\n    // use the growing bitmap if the clickToSegmentIsGrowing flag is set.\n    // this allows previewing the flood fill, and the results are copied\n    // to the drawBitmap when the user releases the mouse button.\n    if (this.clickToSegmentIsGrowing) {\n      img = this.clickToSegmentGrowingBitmap.slice()\n      drawBitmap = this.clickToSegmentGrowingBitmap\n    }\n\n    if (img.length !== nxy * dims[2]) {\n      return\n    }\n    // mask2D: axial slices constrained in Z, coronal in Y and sagittal in X\n    let constrainXYZ = -1\n    if (is2D && this.drawPenAxCorSag === SLICE_TYPE.AXIAL) {\n      constrainXYZ = 2\n    } else if (is2D && this.drawPenAxCorSag === SLICE_TYPE.CORONAL) {\n      constrainXYZ = 1\n    } else if (is2D && this.drawPenAxCorSag === SLICE_TYPE.SAGITTAL) {\n      constrainXYZ = 0\n    }\n    function vx2xyz(vx: number): number[] {\n      // provided address in 1D array, return XYZ coordinate\n      const Z = Math.floor(vx / nxy) // slice\n      const Y = Math.floor((vx - Z * nxy) / nx) // column\n      const X = Math.floor(vx % nx)\n      return [X, Y, Z]\n    }\n    function xyz2vx(pt: number[]): number {\n      // provided an XYZ 3D point, provide address in 1D array\n      return pt[0] + pt[1] * nx + pt[2] * nxy\n    }\n    const vx2mm = (xyz: number[]): vec3 => {\n      return this.vox2mm(xyz, this.back.matRAS)\n    }\n    // store seed vox as mm coordinates\n    const seedMM = vx2mm(seedXYZ)\n    const maxDistanceMM2 = maxDistanceMM ** 2\n    // function to check if new point to be checked is less than maxDistanceMM\n    function isWithinDistance(vx: number): boolean {\n      const xzyVox = vx2xyz(vx)\n      if (constrainXYZ >= 0 && xzyVox[constrainXYZ] !== seedXYZ[constrainXYZ]) {\n        return false\n      }\n      const xyzMM = vx2mm(xzyVox)\n      const dist2 = (xyzMM[0] - seedMM[0]) ** 2 + (xyzMM[1] - seedMM[1]) ** 2 + (xyzMM[2] - seedMM[2]) ** 2\n      return dist2 <= maxDistanceMM2\n    }\n    const seedVx = xyz2vx(seedXYZ)\n    const seedColor = img[seedVx]\n    if (seedColor === newColor) {\n      if (growSelectedCluster !== 0) {\n        log.debug('drawFloodFill selected voxel is not part of a drawing')\n      } else {\n        log.debug('drawFloodFill selected voxel is already desired color')\n      }\n      return\n    }\n    for (let i = 1; i < nxyz; i++) {\n      img[i] = 0\n      if (drawBitmap[i] === seedColor) {\n        // check if voxel index i is within maxDistanceMM from seed voxel\n        if (!isWithinDistance(i)) {\n          // move to next voxel if not within distance,\n          // no need to check voxel intensity for cluster assignment\n          continue\n        }\n        img[i] = 1\n      }\n    }\n    this.drawFloodFillCore(img, seedVx, neighbors)\n    // 8. (Optional) work out intensity of selected cluster\n    if (growSelectedCluster !== 0) {\n      const backImg = this.volumes[0].img2RAS()\n      let mx = backImg[seedVx]\n      let mn = mx\n      if (isFinite(forceMax) && isFinite(forceMin)) {\n        mx = forceMax\n        mn = forceMin\n      } else {\n        for (let i = 1; i < nxyz; i++) {\n          if (img[i] === 2) {\n            mx = Math.max(mx, backImg[i])\n            mn = Math.min(mn, backImg[i])\n          }\n        }\n        if (growSelectedCluster === Number.POSITIVE_INFINITY) {\n          mx = growSelectedCluster\n        }\n        if (growSelectedCluster === Number.NEGATIVE_INFINITY) {\n          mn = growSelectedCluster\n        }\n      }\n      log.debug('Intensity range of selected cluster :', mn, mx)\n      // second pass:\n      for (let i = 1; i < nxyz; i++) {\n        img[i] = 0\n        if (backImg[i] >= mn && backImg[i] <= mx) {\n          // check if voxel index i is within maxDistanceMM from seed voxel\n          if (!isWithinDistance(i)) {\n            // move to next voxel if not within distance,\n            // no need to check voxel intensity for cluster assignment\n            continue\n          }\n          img[i] = 1\n        }\n      }\n      this.drawFloodFillCore(img, seedVx, neighbors)\n      newColor = seedColor\n    }\n    // 8. Return\n    for (let i = 1; i < nxyz; i++) {\n      if (img[i] === 2) {\n        // if part of cluster\n        drawBitmap[i] = newColor\n      }\n    }\n    if (!this.clickToSegmentIsGrowing) {\n      this.drawBitmap = drawBitmap.slice()\n      if (!this.opts.clickToSegment) {\n        // only update the undo array if clickToSegment is not enabled.\n        // This avoids adding the same drawing twice, since the mouse up\n        // event will also add the drawing to the undo array.\n        this.drawAddUndoBitmap()\n      }\n      this.refreshDrawing(true, this.clickToSegmentIsGrowing)\n    } else {\n      this.clickToSegmentGrowingBitmap = drawBitmap\n      this.refreshDrawing(true, this.clickToSegmentIsGrowing)\n    }\n  }\n\n  // not included in public docs\n  // given series of line segments, connect first and last\n  // voxel and fill the interior of the line segments\n  drawPenFilled(): void {\n    const nPts = this.drawPenFillPts.length\n    if (nPts < 2) {\n      // can not fill single line\n      this.drawPenFillPts = []\n      return\n    }\n    // do fill in 2D, based on axial (0), coronal (1) or sagittal drawing (2\n    const axCorSag = this.drawPenAxCorSag\n    // axial is x(0)*y(1) horizontal*vertical\n    let h = 0\n    let v = 1\n    if (axCorSag === 1) {\n      v = 2\n    } // coronal is x(0)*z(0)\n    if (axCorSag === 2) {\n      // sagittal is y(1)*z(2)\n      h = 1\n      v = 2\n    }\n\n    if (!this.back?.dims) {\n      throw new Error('back.dims undefined')\n    }\n\n    const dims2D = [this.back.dims[h + 1], this.back.dims[v + 1]] // +1: dims indexed from 0!\n    // create bitmap of horizontal*vertical voxels:\n    const img2D = new Uint8Array(dims2D[0] * dims2D[1])\n    let pen = 1 // do not use this.opts.penValue, as \"erase\" is zero\n    function drawLine2D(ptA: number[], ptB: number[]): void {\n      const dx = Math.abs(ptA[0] - ptB[0])\n      const dy = Math.abs(ptA[1] - ptB[1])\n      img2D[ptA[0] + ptA[1] * dims2D[0]] = pen\n      img2D[ptB[0] + ptB[1] * dims2D[0]] = pen\n      let xs = -1\n      let ys = -1\n      if (ptB[0] > ptA[0]) {\n        xs = 1\n      }\n      if (ptB[1] > ptA[1]) {\n        ys = 1\n      }\n      let x1 = ptA[0]\n      let y1 = ptA[1]\n      const x2 = ptB[0]\n      const y2 = ptB[1]\n      if (dx >= dy) {\n        // Driving axis is X-axis\"\n        let p1 = 2 * dy - dx\n        while (x1 !== x2) {\n          x1 += xs\n          if (p1 >= 0) {\n            y1 += ys\n            p1 -= 2 * dx\n          }\n          p1 += 2 * dy\n          img2D[x1 + y1 * dims2D[0]] = pen\n        }\n      } else {\n        // Driving axis is Y-axis\"\n        let p1 = 2 * dx - dy\n        while (y1 !== y2) {\n          y1 += ys\n          if (p1 >= 0) {\n            x1 += xs\n            p1 -= 2 * dy\n          }\n          p1 += 2 * dx\n          img2D[x1 + y1 * dims2D[0]] = pen\n        }\n      }\n    }\n    const startPt = [this.drawPenFillPts[0][h], this.drawPenFillPts[0][v]]\n    let prevPt = startPt\n    for (let i = 1; i < nPts; i++) {\n      const pt = [this.drawPenFillPts[i][h], this.drawPenFillPts[i][v]]\n      drawLine2D(prevPt, pt)\n      prevPt = pt\n    }\n    drawLine2D(startPt, prevPt) // close drawing\n    // flood fill\n    const seeds: number[][] = []\n    function setSeed(pt: number[]): void {\n      if (pt[0] < 0 || pt[1] < 0 || pt[0] >= dims2D[0] || pt[1] >= dims2D[1]) {\n        return\n      }\n      const pxl = pt[0] + pt[1] * dims2D[0]\n      if (img2D[pxl] !== 0) {\n        return\n      } // not blank\n      seeds.push(pt)\n      img2D[pxl] = 2\n    }\n    // https://en.wikipedia.org/wiki/Flood_fill\n    // first seed all edges\n    // bottom row\n    for (let i = 0; i < dims2D[0]; i++) {\n      setSeed([i, 0])\n    }\n    // top row\n    for (let i = 0; i < dims2D[0]; i++) {\n      setSeed([i, dims2D[1] - 1])\n    }\n    // left column\n    for (let i = 0; i < dims2D[1]; i++) {\n      setSeed([0, i])\n    }\n    // right columns\n    for (let i = 0; i < dims2D[1]; i++) {\n      setSeed([dims2D[0] - 1, i])\n    }\n    // now retire first in first out\n    while (seeds.length > 0) {\n      // always remove one seed, plant 0..4 new ones\n      const seed = seeds.shift()!\n      setSeed([seed[0] - 1, seed[1]])\n      setSeed([seed[0] + 1, seed[1]])\n      setSeed([seed[0], seed[1] - 1])\n      setSeed([seed[0], seed[1] + 1])\n    }\n    // all voxels with value of zero have no path to edges\n    // insert surviving pixels from 2D bitmap into 3D bitmap\n    pen = this.opts.penValue\n    const slice = this.drawPenFillPts[0][3 - (h + v)]\n\n    if (!this.drawBitmap) {\n      throw new Error('drawBitmap undefined')\n    }\n\n    if (axCorSag === 0) {\n      // axial\n      const offset = slice * dims2D[0] * dims2D[1]\n      for (let i = 0; i < dims2D[0] * dims2D[1]; i++) {\n        if (img2D[i] !== 2) {\n          this.drawBitmap[i + offset] = pen\n        }\n      }\n    } else {\n      let xStride = 1 // coronal: horizontal LR pixels contiguous\n      const yStride = this.back.dims[1] * this.back.dims[2] // coronal: vertical is slice\n      let zOffset = slice * this.back.dims[1] // coronal: slice is number of columns\n      if (axCorSag === 2) {\n        // sagittal\n        xStride = this.back.dims[1]\n        zOffset = slice\n      }\n      let i = 0\n      for (let y = 0; y < dims2D[1]; y++) {\n        for (let x = 0; x < dims2D[0]; x++) {\n          if (img2D[i] !== 2) {\n            this.drawBitmap[x * xStride + y * yStride + zOffset] = pen\n          }\n          i++\n        }\n      }\n    }\n    // this.drawUndoBitmaps[this.currentDrawUndoBitmap]\n    if (!this.drawFillOverwrites && this.drawUndoBitmaps[this.currentDrawUndoBitmap].length > 0) {\n      const nv = this.drawBitmap.length\n      const bmp = decodeRLE(this.drawUndoBitmaps[this.currentDrawUndoBitmap], nv)\n      for (let i = 0; i < nv; i++) {\n        if (bmp[i] === 0) {\n          continue\n        }\n        this.drawBitmap[i] = bmp[i]\n      }\n    }\n    this.drawPenFillPts = []\n    this.drawAddUndoBitmap()\n    this.refreshDrawing(false)\n  }\n\n  /**\n   * close drawing: make sure you have saved any changes before calling this!\n   * @example niivue.closeDrawing();\n   * @see {@link https://niivue.github.io/niivue/features/draw.ui.html | live demo usage}\n   */\n  closeDrawing(): void {\n    this.drawClearAllUndoBitmaps()\n    this.rgbaTex(this.drawTexture, TEXTURE7_DRAW, [2, 2, 2, 2], true)\n    this.drawBitmap = null\n    this.clickToSegmentGrowingBitmap = null\n    this.drawScene()\n  }\n\n  /**\n   * copy drawing bitmap from CPU to GPU storage and redraw the screen\n   * @param isForceRedraw - refreshes scene immediately (default true)\n   * @example niivue.refreshDrawing();\n   * @see {@link https://niivue.github.io/niivue/features/cactus.html | live demo usage}\n   */\n  refreshDrawing(isForceRedraw = true, useClickToSegmentBitmap = false): void {\n    if (!this.back?.dims) {\n      throw new Error('back.dims undefined')\n    }\n    if (!this.drawBitmap) {\n      throw new Error('drawBitmap undefined')\n    }\n    const dims = this.back.dims.slice()\n    // let dims = this.volumes[0].hdr.dims.slice();\n    const vx = this.back.dims[1] * this.back.dims[2] * this.back.dims[3]\n    if (this.drawBitmap.length === 8) {\n      dims[1] = 2\n      dims[2] = 2\n      dims[3] = 2\n    } else if (vx !== this.drawBitmap.length) {\n      log.warn('Drawing bitmap must match the background image')\n    }\n    this.gl.activeTexture(TEXTURE7_DRAW)\n    this.gl.bindTexture(this.gl.TEXTURE_3D, this.drawTexture)\n    this.gl.texSubImage3D(\n      this.gl.TEXTURE_3D,\n      0,\n      0,\n      0,\n      0,\n      dims[1],\n      dims[2],\n      dims[3],\n      this.gl.RED,\n      this.gl.UNSIGNED_BYTE,\n      useClickToSegmentBitmap ? this.clickToSegmentGrowingBitmap : this.drawBitmap\n    )\n    if (isForceRedraw) {\n      this.drawScene()\n    }\n  }\n\n  // not included in public docs\n  // create 3D 1-component (red) uint8 texture on GPU\n  r8Tex(texID: WebGLTexture | null, activeID: number, dims: number[], isInit = false): WebGLTexture | null {\n    if (texID) {\n      this.gl.deleteTexture(texID)\n    }\n    texID = this.gl.createTexture()\n    this.gl.activeTexture(activeID)\n    this.gl.bindTexture(this.gl.TEXTURE_3D, texID)\n    this.gl.texParameteri(this.gl.TEXTURE_3D, this.gl.TEXTURE_MIN_FILTER, this.gl.NEAREST)\n    this.gl.texParameteri(this.gl.TEXTURE_3D, this.gl.TEXTURE_MAG_FILTER, this.gl.NEAREST)\n    this.gl.texParameteri(this.gl.TEXTURE_3D, this.gl.TEXTURE_WRAP_R, this.gl.CLAMP_TO_EDGE)\n    this.gl.texParameteri(this.gl.TEXTURE_3D, this.gl.TEXTURE_WRAP_S, this.gl.CLAMP_TO_EDGE)\n    this.gl.texParameteri(this.gl.TEXTURE_3D, this.gl.TEXTURE_WRAP_T, this.gl.CLAMP_TO_EDGE)\n    this.gl.pixelStorei(this.gl.UNPACK_ALIGNMENT, 1)\n    this.gl.texStorage3D(this.gl.TEXTURE_3D, 1, this.gl.R8, dims[1], dims[2], dims[3]) // output background dimensions\n    if (isInit) {\n      const img8 = new Uint8Array(dims[1] * dims[2] * dims[3])\n      this.gl.texSubImage3D(\n        this.gl.TEXTURE_3D,\n        0,\n        0,\n        0,\n        0,\n        dims[1],\n        dims[2],\n        dims[3],\n        this.gl.RED,\n        this.gl.UNSIGNED_BYTE,\n        img8\n      )\n    }\n    return texID\n  }\n\n  // not included in public docs\n  // create 3D 4-component (red,green,blue,alpha) uint8 texture on GPU\n  rgbaTex(texID: WebGLTexture | null, activeID: number, dims: number[], isInit = false): WebGLTexture | null {\n    if (texID) {\n      this.gl.deleteTexture(texID)\n    }\n    texID = this.gl.createTexture()\n    this.gl.activeTexture(activeID)\n    this.gl.bindTexture(this.gl.TEXTURE_3D, texID)\n    this.gl.texParameteri(this.gl.TEXTURE_3D, this.gl.TEXTURE_MIN_FILTER, this.gl.LINEAR)\n    this.gl.texParameteri(this.gl.TEXTURE_3D, this.gl.TEXTURE_MAG_FILTER, this.gl.LINEAR)\n    this.gl.texParameteri(this.gl.TEXTURE_3D, this.gl.TEXTURE_WRAP_R, this.gl.CLAMP_TO_EDGE)\n    this.gl.texParameteri(this.gl.TEXTURE_3D, this.gl.TEXTURE_WRAP_S, this.gl.CLAMP_TO_EDGE)\n    this.gl.texParameteri(this.gl.TEXTURE_3D, this.gl.TEXTURE_WRAP_T, this.gl.CLAMP_TO_EDGE)\n    this.gl.pixelStorei(this.gl.UNPACK_ALIGNMENT, 1)\n    this.gl.texStorage3D(this.gl.TEXTURE_3D, 1, this.gl.RGBA8, dims[1], dims[2], dims[3]) // output background dimensions\n    if (isInit) {\n      const img8 = new Uint8Array(dims[1] * dims[2] * dims[3] * 4)\n      this.gl.texSubImage3D(\n        this.gl.TEXTURE_3D,\n        0,\n        0,\n        0,\n        0,\n        dims[1],\n        dims[2],\n        dims[3],\n        this.gl.RGBA,\n        this.gl.UNSIGNED_BYTE,\n        img8\n      )\n    }\n    return texID\n  }\n\n  // not included in public docs\n  // remove cross origin if not from same domain. From https://webglfundamentals.org/webgl/lessons/webgl-cors-permission.html\n  requestCORSIfNotSameOrigin(img: HTMLImageElement, url: string): void {\n    if (new URL(url, window.location.href).origin !== window.location.origin) {\n      img.crossOrigin = ''\n    }\n  }\n\n  // not included in public docs\n  // creates 4-component (red,green,blue,alpha) uint8 texture on GPU\n  async loadPngAsTexture(pngUrl: string, textureNum: number): Promise<WebGLTexture | null> {\n    return new Promise((resolve, reject) => {\n      const img = new Image()\n      img.onload = (): void => {\n        if (!this.bmpShader) {\n          return\n        }\n        let pngTexture\n        if (textureNum === 4) {\n          if (this.bmpTexture !== null) {\n            this.gl.deleteTexture(this.bmpTexture)\n          }\n          this.bmpTexture = this.gl.createTexture()\n          pngTexture = this.bmpTexture\n          this.bmpTextureWH = img.width / img.height\n          this.gl.activeTexture(TEXTURE4_THUMBNAIL)\n          this.bmpShader.use(this.gl)\n          this.gl.uniform1i(this.bmpShader.uniforms.bmpTexture, 4)\n        } else if (textureNum === 5) {\n          this.gl.activeTexture(TEXTURE5_MATCAP)\n          if (this.matCapTexture !== null) {\n            this.gl.deleteTexture(this.matCapTexture)\n          }\n          this.matCapTexture = this.gl.createTexture()\n          pngTexture = this.matCapTexture\n        } else {\n          this.fontShader!.use(this.gl)\n          this.gl.activeTexture(TEXTURE3_FONT)\n          this.gl.uniform1i(this.fontShader!.uniforms.fontTexture, 3)\n          if (this.fontTexture !== null) {\n            this.gl.deleteTexture(this.fontTexture)\n          }\n          this.fontTexture = this.gl.createTexture()\n          pngTexture = this.fontTexture\n        }\n        this.gl.bindTexture(this.gl.TEXTURE_2D, pngTexture)\n        // Set the parameters so we can render any size image.\n        this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_WRAP_S, this.gl.CLAMP_TO_EDGE)\n        this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_WRAP_T, this.gl.CLAMP_TO_EDGE)\n        this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_MIN_FILTER, this.gl.LINEAR)\n        this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_MAG_FILTER, this.gl.LINEAR)\n        // Upload the image into the texture.\n        this.gl.texImage2D(this.gl.TEXTURE_2D, 0, this.gl.RGBA, this.gl.RGBA, this.gl.UNSIGNED_BYTE, img)\n        resolve(pngTexture)\n        if (textureNum !== 4) {\n          this.drawScene()\n        } // draw the font\n      }\n      img.onerror = reject\n      this.requestCORSIfNotSameOrigin(img, pngUrl)\n      img.src = pngUrl\n    })\n  }\n\n  // not included in public docs\n  // load font stored as PNG bitmap with texture unit 3\n  async loadFontTexture(fontUrl: string): Promise<WebGLTexture | null> {\n    return this.loadPngAsTexture(fontUrl, 3)\n  }\n\n  // not included in public docs\n  // load PNG bitmap with texture unit 4\n  async loadBmpTexture(bmpUrl: string): Promise<WebGLTexture | null> {\n    return this.loadPngAsTexture(bmpUrl, 4)\n  }\n\n  /**\n   * Load matcap for illumination model.\n   * @param name - name of matcap to load (\"Shiny\", \"Cortex\", \"Cream\")\n   * @example\n   * niivue.loadMatCapTexture(\"Cortex\");\n   * @see {@link https://niivue.github.io/niivue/features/shiny.volumes.html | live demo usage}\n   */\n  async loadMatCapTexture(bmpUrl: string): Promise<WebGLTexture | null> {\n    return this.loadPngAsTexture(bmpUrl, 5)\n  }\n\n  // not included in public docs\n  // load font bitmap and metrics\n  initFontMets(): void {\n    if (!this.fontMetrics) {\n      throw new Error('fontMetrics undefined')\n    }\n\n    this.fontMets = {\n      distanceRange: this.fontMetrics.atlas.distanceRange,\n      size: this.fontMetrics.atlas.size,\n      mets: {}\n    }\n    for (let id = 0; id < 256; id++) {\n      // clear ASCII codes 0..256\n      this.fontMets.mets[id] = {\n        xadv: 0,\n        uv_lbwh: [0, 0, 0, 0],\n        lbwh: [0, 0, 0, 0]\n      }\n    }\n    const scaleW = this.fontMetrics.atlas.width\n    const scaleH = this.fontMetrics.atlas.height\n    for (let i = 0; i < this.fontMetrics.glyphs.length; i++) {\n      const glyph = this.fontMetrics.glyphs[i]\n      const id = glyph.unicode\n      this.fontMets.mets[id].xadv = glyph.advance\n      if (glyph.planeBounds === undefined) {\n        continue\n      }\n      let l = glyph.atlasBounds.left / scaleW\n      let b = (scaleH - glyph.atlasBounds.top) / scaleH\n      let w = (glyph.atlasBounds.right - glyph.atlasBounds.left) / scaleW\n      let h = (glyph.atlasBounds.top - glyph.atlasBounds.bottom) / scaleH\n      this.fontMets.mets[id].uv_lbwh = [l, b, w, h]\n      l = glyph.planeBounds.left\n      b = glyph.planeBounds.bottom\n      w = glyph.planeBounds.right - glyph.planeBounds.left\n      h = glyph.planeBounds.top - glyph.planeBounds.bottom\n      this.fontMets.mets[id].lbwh = [l, b, w, h]\n    }\n  }\n\n  /**\n   * Load typeface for colorbars, measurements and orientation text.\n   * @param name - name of matcap to load (\"Roboto\", \"Garamond\", \"Ubuntu\")\n   * @example\n   * niivue.loadMatCapTexture(\"Cortex\");\n   * @see {@link https://niivue.github.io/niivue/features/selectfont.html | live demo usage}\n   */\n  async loadFont(fontSheetUrl = defaultFontPNG, metricsUrl = defaultFontMetrics): Promise<void> {\n    await this.loadFontTexture(fontSheetUrl)\n    // @ts-expect-error FIXME this doesn't look right - metricsUrl is a huge object\n    const response = await fetch(metricsUrl)\n    if (!response.ok) {\n      throw Error(response.statusText)\n    }\n\n    const jsonText = await response.text()\n    this.fontMetrics = JSON.parse(jsonText)\n\n    this.initFontMets()\n\n    this.fontShader!.use(this.gl)\n    this.drawScene()\n  }\n\n  // not included in public docs\n  async loadDefaultMatCap(): Promise<WebGLTexture | null> {\n    return this.loadMatCapTexture(defaultMatCap)\n  }\n\n  // not included in public docs\n  async loadDefaultFont(): Promise<void> {\n    await this.loadFontTexture(this.DEFAULT_FONT_GLYPH_SHEET)\n    this.fontMetrics = this.DEFAULT_FONT_METRICS\n    this.initFontMets()\n  }\n\n  // not included in public docs\n  async initText(): Promise<void> {\n    // font shader\n    // multi-channel signed distance font https://github.com/Chlumsky/msdfgen\n    this.fontShader = new Shader(this.gl, vertFontShader, fragFontShader)\n    this.fontShader.use(this.gl)\n\n    await this.loadDefaultFont()\n    await this.loadDefaultMatCap()\n    this.drawLoadingText(this.loadingText)\n  }\n\n  // not included in public docs\n  meshShaderNameToNumber(meshShaderName = 'Phong'): number | undefined {\n    const name = meshShaderName.toLowerCase()\n    for (let i = 0; i < this.meshShaders.length; i++) {\n      if (this.meshShaders[i].Name.toLowerCase() === name) {\n        return i\n      }\n    }\n  }\n\n  /**\n   * select new shader for triangulated meshes and connectomes. Note that this function requires the mesh is fully loaded: you may want use `await` with loadMeshes (as seen in live demo).\n   * @param id - id of mesh to change\n   * @param meshShaderNameOrNumber - identify shader for usage\n   * @example niivue.setMeshShader('toon');\n   * @see {@link https://niivue.github.io/niivue/features/meshes.html | live demo usage}\n   */\n  setMeshShader(id: number, meshShaderNameOrNumber = 2): void {\n    let shaderIndex: number | undefined = 0\n    if (typeof meshShaderNameOrNumber === 'number') {\n      shaderIndex = meshShaderNameOrNumber\n    } else {\n      shaderIndex = this.meshShaderNameToNumber(meshShaderNameOrNumber)\n    }\n\n    if (shaderIndex === undefined) {\n      throw new Error('shaderIndex undefined')\n    }\n\n    shaderIndex = Math.min(shaderIndex, this.meshShaders.length - 1)\n    shaderIndex = Math.max(shaderIndex, 0)\n    const index = this.getMeshIndexByID(id)\n    if (index >= this.meshes.length) {\n      log.debug('Unable to change shader until mesh is loaded (maybe you need async)')\n      return\n    }\n    this.meshes[index].meshShaderIndex = shaderIndex\n    this.updateGLVolume()\n    this.onMeshShaderChanged(index, shaderIndex)\n  }\n\n  /**\n   *\n   * @param fragmentShaderText - custom fragment shader.\n   * @param name - title for new shader.\n   * @returns created custom mesh shader\n   */\n  createCustomMeshShader(\n    fragmentShaderText: string,\n    name = 'Custom'\n    // vertexShaderText = \"\"\n  ): { Name: string; Frag: string; shader: Shader } {\n    if (!fragmentShaderText) {\n      throw new Error('Need fragment shader')\n    }\n\n    const num = this.meshShaderNameToNumber(name)!\n    if (num >= 0) {\n      // prior shader uses this name: delete it!\n      this.gl.deleteProgram(this.meshShaders[num].shader!.program)\n      this.meshShaders.splice(num, 1)\n    }\n\n    const shader = new Shader(this.gl, vertMeshShader, fragmentShaderText)\n    shader.use(this.gl)\n\n    return {\n      Name: name,\n      Frag: fragmentShaderText,\n      shader\n    }\n  }\n\n  /**\n   * Define a new GLSL shader program to influence mesh coloration\n   * @param fragmentShaderText - custom fragment shader.\n   * @param ame - title for new shader.\n   * @returns index of the new shader (for setMeshShader)\n   * @see {@link https://niivue.github.io/niivue/features/mesh.atlas.html | live demo usage}\n   */\n  setCustomMeshShader(fragmentShaderText = '', name = 'Custom'): number {\n    const m = this.createCustomMeshShader(fragmentShaderText, name)\n    this.meshShaders.push(m)\n\n    this.onCustomMeshShaderAdded(fragmentShaderText, name)\n    return this.meshShaders.length - 1\n  }\n\n  /**\n   * retrieve all currently loaded meshes\n   * @param sort - sort output alphabetically\n   * @returns list of available mesh shader names\n   * @example niivue.meshShaderNames();\n   * @see {@link https://niivue.github.io/niivue/features/meshes.html | live demo usage}\n   */\n  meshShaderNames(sort = true): string[] {\n    const cm = []\n    for (let i = 0; i < this.meshShaders.length; i++) {\n      cm.push(this.meshShaders[i].Name)\n    }\n    return sort === true ? cm.sort() : cm\n  }\n\n  // not included in public docs\n  initRenderShader(shader: Shader, gradientAmount = 0.0): void {\n    shader.use(this.gl)\n    this.gl.uniform1i(shader.uniforms.volume, 0)\n    this.gl.uniform1i(shader.uniforms.colormap, 1)\n    this.gl.uniform1i(shader.uniforms.overlay, 2)\n    this.gl.uniform1i(shader.uniforms.drawing, 7)\n    this.gl.uniform1fv(shader.uniforms.renderDrawAmbientOcclusion, [this.renderDrawAmbientOcclusion, 1.0])\n    this.gl.uniform1f(shader.uniforms.gradientAmount, gradientAmount)\n  }\n\n  // not included in public docs\n  async init(): Promise<this> {\n    // initial setup: only at the startup of the component\n    // print debug info (gpu vendor and renderer)\n    const rendererInfo = this.gl.getExtension('WEBGL_debug_renderer_info')\n    if (rendererInfo) {\n      const vendor = this.gl.getParameter(rendererInfo.UNMASKED_VENDOR_WEBGL)\n      const renderer = this.gl.getParameter(rendererInfo.UNMASKED_RENDERER_WEBGL)\n      log.info('renderer vendor: ', vendor)\n      log.info('renderer: ', renderer)\n    } else {\n      log.info('debug_renderer_info unavailable')\n    }\n    // firefox masks vendor and renderer for privacy\n    const glInfo = this.gl.getParameter(this.gl.RENDERER)\n    log.info('firefox renderer: ', glInfo) // Useful with firefox \"Intel(R) HD Graphics\" useless in Chrome and Safari \"WebKit WebGL\"\n    this.gl.clearDepth(0.0)\n    this.gl.enable(this.gl.CULL_FACE)\n    this.gl.cullFace(this.gl.FRONT)\n    this.gl.enable(this.gl.BLEND)\n    this.gl.blendFunc(this.gl.SRC_ALPHA, this.gl.ONE_MINUS_SRC_ALPHA)\n\n    // register volume and overlay textures\n    this.volumeTexture = this.rgbaTex(this.volumeTexture, TEXTURE0_BACK_VOL, [2, 2, 2, 2], true)\n    this.overlayTexture = this.rgbaTex(this.overlayTexture, TEXTURE2_OVERLAY_VOL, [2, 2, 2, 2], true)\n    this.drawTexture = this.r8Tex(this.drawTexture, TEXTURE7_DRAW, [2, 2, 2, 2], true)\n\n    const rectStrip = [\n      1,\n      1,\n      0, // RAI\n      1,\n      0,\n      0, // RPI\n      0,\n      1,\n      0, // LAI\n      0,\n      0,\n      0 // LPI\n    ]\n\n    const gl = this.gl\n\n    this.cuboidVertexBuffer = gl.createBuffer()!\n    gl.bindBuffer(gl.ARRAY_BUFFER, this.cuboidVertexBuffer)\n    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(rectStrip), gl.STATIC_DRAW)\n\n    // setup generic VAO style sheet:\n    this.genericVAO = gl.createVertexArray()! // 2D slices, fonts, lines\n    gl.bindVertexArray(this.genericVAO)\n    // gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.cuboidVertexBuffer); //triangle strip does not need indices\n    gl.bindBuffer(gl.ARRAY_BUFFER, this.cuboidVertexBuffer)\n    gl.enableVertexAttribArray(0)\n    gl.vertexAttribPointer(0, 3, gl.FLOAT, false, 0, 0)\n    gl.bindVertexArray(this.unusedVAO) // switch off to avoid tampering with settings\n    this.pickingMeshShader = new Shader(gl, vertMeshShader, fragMeshDepthShader)\n    this.pickingMeshShader.use(gl)\n    this.pickingImageShader = new Shader(gl, vertRenderShader, fragVolumePickingShader)\n    this.pickingImageShader.use(gl)\n    gl.uniform1i(this.pickingImageShader.uniforms.volume, 0)\n    gl.uniform1i(this.pickingImageShader.uniforms.colormap, 1)\n    gl.uniform1i(this.pickingImageShader.uniforms.overlay, 2)\n    gl.uniform1i(this.pickingImageShader.uniforms.drawing, 7)\n    // slice shader\n    // slice mm shader\n    this.sliceMMShader = new Shader(gl, vertSliceMMShader, fragSliceMMShader)\n    this.sliceMMShader.use(gl)\n    gl.uniform1i(this.sliceMMShader.uniforms.volume, 0)\n    gl.uniform1i(this.sliceMMShader.uniforms.colormap, 1)\n    gl.uniform1i(this.sliceMMShader.uniforms.overlay, 2)\n    gl.uniform1i(this.sliceMMShader.uniforms.drawing, 7)\n    gl.uniform1f(this.sliceMMShader.uniforms.drawOpacity, this.drawOpacity)\n    // fragSliceV1Shader\n    this.sliceV1Shader = new Shader(gl, vertSliceMMShader, fragSliceV1Shader)\n    this.sliceV1Shader.use(gl)\n    gl.uniform1i(this.sliceV1Shader.uniforms.volume, 0)\n    gl.uniform1i(this.sliceV1Shader.uniforms.colormap, 1)\n    gl.uniform1i(this.sliceV1Shader.uniforms.overlay, 2)\n    gl.uniform1i(this.sliceV1Shader.uniforms.drawing, 7)\n    gl.uniform1f(this.sliceV1Shader.uniforms.drawOpacity, this.drawOpacity)\n    // orient cube\n    this.orientCubeShader = new Shader(gl, vertOrientCubeShader, fragOrientCubeShader)\n    this.orientCubeShaderVAO = gl.createVertexArray()\n    gl.bindVertexArray(this.orientCubeShaderVAO)\n    // Create a buffer\n    const positionBuffer = gl.createBuffer()\n    gl.enableVertexAttribArray(0)\n    gl.enableVertexAttribArray(1)\n    gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer)\n    gl.bufferData(gl.ARRAY_BUFFER, orientCube, gl.STATIC_DRAW)\n    // XYZ position: (three floats)\n    gl.vertexAttribPointer(0, 3, gl.FLOAT, false, 24, 0)\n    // RGB color: (also three floats)\n    gl.enableVertexAttribArray(1)\n    gl.vertexAttribPointer(1, 3, gl.FLOAT, false, 24, 12)\n    gl.bindVertexArray(this.unusedVAO)\n    // rect shader (crosshair): horizontal and vertical lines only\n    this.rectShader = new Shader(gl, vertRectShader, fragRectShader)\n    this.rectShader.use(gl)\n    this.rectOutlineShader = new Shader(gl, vertRectShader, fragRectOutlineShader)\n    this.rectOutlineShader.use(gl)\n    // line shader: diagonal lines\n    this.lineShader = new Shader(gl, vertLineShader, fragRectShader)\n    this.lineShader.use(gl)\n    // 3D line shader\n    this.line3DShader = new Shader(gl, vertLine3DShader, fragRectShader)\n    this.line3DShader.use(gl)\n    // circle shader\n    this.circleShader = new Shader(gl, vertCircleShader, fragCircleShader)\n    this.circleShader.use(gl)\n    // render shader (3D)\n    this.renderVolumeShader = new Shader(gl, vertRenderShader, fragRenderShader)\n    this.initRenderShader(this.renderVolumeShader)\n    this.renderSliceShader = new Shader(gl, vertRenderShader, fragRenderSliceShader)\n    this.initRenderShader(this.renderSliceShader)\n    this.renderGradientShader = new Shader(gl, vertRenderShader, fragRenderGradientShader)\n    this.initRenderShader(this.renderGradientShader, 0.3)\n    gl.uniform1i(this.renderGradientShader.uniforms.matCap, 5)\n    gl.uniform1i(this.renderGradientShader.uniforms.gradient, 6)\n    this.renderShader = this.renderVolumeShader\n    // colorbar shader\n    this.colorbarShader = new Shader(gl, vertColorbarShader, fragColorbarShader)\n    this.colorbarShader.use(gl)\n    gl.uniform1i(this.colorbarShader.uniforms.colormap, 1)\n    this.blurShader = new Shader(gl, blurVertShader, blurFragShader)\n    this.sobelShader = new Shader(gl, blurVertShader, sobelFragShader)\n\n    this.growCutShader = new Shader(gl, vertGrowCutShader, fragGrowCutShader)\n\n    // pass through shaders\n    this.passThroughShader = new Shader(gl, vertPassThroughShader, fragPassThroughShader)\n\n    // orientation shaders\n    this.orientShaderAtlasU = new Shader(gl, vertOrientShader, fragOrientShaderU.concat(fragOrientShaderAtlas))\n    this.orientShaderAtlasI = new Shader(gl, vertOrientShader, fragOrientShaderI.concat(fragOrientShaderAtlas))\n\n    this.orientShaderU = new Shader(gl, vertOrientShader, fragOrientShaderU.concat(fragOrientShader))\n    this.orientShaderI = new Shader(gl, vertOrientShader, fragOrientShaderI.concat(fragOrientShader))\n    this.orientShaderF = new Shader(gl, vertOrientShader, fragOrientShaderF.concat(fragOrientShader))\n    this.orientShaderRGBU = new Shader(gl, vertOrientShader, fragOrientShaderU.concat(fragRGBOrientShader))\n    // 3D crosshair cylinder\n    this.surfaceShader = new Shader(gl, vertSurfaceShader, fragSurfaceShader)\n    this.surfaceShader.use(gl)\n    // tractography fibers\n    this.fiberShader = new Shader(gl, vertFiberShader, fragFiberShader)\n    this.pickingImageShader.use(gl)\n    // compile all mesh shaders\n    // compile all mesh shaders\n    for (let i = 0; i < this.meshShaders.length; i++) {\n      const m = this.meshShaders[i]\n      if (m.Name === 'Flat') {\n        m.shader = new Shader(gl, vertFlatMeshShader, fragFlatMeshShader)\n      } else {\n        m.shader = new Shader(gl, vertMeshShader, m.Frag)\n      }\n      m.shader.use(gl)\n      m.shader.isMatcap = m.Name === 'Matcap'\n      if (m.shader.isMatcap) {\n        gl.uniform1i(m.shader.uniforms.matCap, 5)\n      }\n    }\n    this.bmpShader = new Shader(gl, vertBmpShader, fragBmpShader)\n    await this.initText()\n    if (this.opts.thumbnail.length > 0) {\n      await this.loadBmpTexture(this.opts.thumbnail)\n      this.thumbnailVisible = true\n    }\n    this.updateGLVolume()\n    this.initialized = true\n    this.resizeListener()\n    this.drawScene()\n    return this\n  }\n\n  gradientGL(hdr: NiftiHeader): void {\n    const gl = this.gl\n    const faceStrip = [0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0]\n    const vao2 = gl.createVertexArray()\n    gl.bindVertexArray(vao2)\n    const vbo2 = gl.createBuffer()\n    gl.bindBuffer(gl.ARRAY_BUFFER, vbo2)\n    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(faceStrip), gl.STATIC_DRAW)\n    gl.enableVertexAttribArray(0)\n    gl.vertexAttribPointer(0, 3, gl.FLOAT, false, 0, 0)\n    const fb = gl.createFramebuffer()\n    gl.bindFramebuffer(gl.FRAMEBUFFER, fb)\n    gl.disable(gl.CULL_FACE)\n    gl.viewport(0, 0, hdr.dims[1], hdr.dims[2])\n    gl.disable(gl.BLEND)\n    const tempTex3D = this.rgbaTex(null, TEXTURE8_GRADIENT_TEMP, hdr.dims)\n    const blurShader = this.blurShader!\n    blurShader.use(gl)\n\n    gl.activeTexture(TEXTURE0_BACK_VOL)\n    gl.bindTexture(gl.TEXTURE_3D, this.volumeTexture)\n    const blurRadius = 0.7\n    gl.uniform1i(blurShader.uniforms.intensityVol, 0)\n    gl.uniform1f(blurShader.uniforms.dX, blurRadius / hdr.dims[1])\n    gl.uniform1f(blurShader.uniforms.dY, blurRadius / hdr.dims[2])\n    gl.uniform1f(blurShader.uniforms.dZ, blurRadius / hdr.dims[3])\n    gl.bindVertexArray(vao2)\n    for (let i = 0; i < hdr.dims[3] - 1; i++) {\n      const coordZ = (1 / hdr.dims[3]) * (i + 0.5)\n      gl.uniform1f(blurShader.uniforms.coordZ, coordZ)\n      gl.framebufferTextureLayer(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, tempTex3D, 0, i)\n      gl.clear(gl.DEPTH_BUFFER_BIT)\n      gl.drawArrays(gl.TRIANGLE_STRIP, 0, faceStrip.length / 3)\n    }\n    const sobelShader = this.sobelShader!\n    sobelShader.use(gl)\n    gl.activeTexture(TEXTURE8_GRADIENT_TEMP)\n    gl.bindTexture(gl.TEXTURE_3D, tempTex3D) // input texture\n    gl.uniform1i(sobelShader.uniforms.intensityVol, 8) // TEXTURE8_GRADIENT_TEMP\n    const sobelRadius = 0.7\n    gl.uniform1f(sobelShader.uniforms.dX, sobelRadius / hdr.dims[1])\n    gl.uniform1f(sobelShader.uniforms.dY, sobelRadius / hdr.dims[2])\n    gl.uniform1f(sobelShader.uniforms.dZ, sobelRadius / hdr.dims[3])\n    gl.uniform1f(sobelShader.uniforms.coordZ, 0.5)\n    gl.bindVertexArray(vao2)\n    gl.activeTexture(TEXTURE0_BACK_VOL)\n    if (this.gradientTexture !== null) {\n      gl.deleteTexture(this.gradientTexture)\n    }\n    this.gradientTexture = this.rgbaTex(this.gradientTexture, TEXTURE6_GRADIENT, hdr.dims)\n    for (let i = 0; i < hdr.dims[3] - 1; i++) {\n      const coordZ = (1 / hdr.dims[3]) * (i + 0.5)\n      gl.uniform1f(sobelShader.uniforms.coordZ, coordZ)\n      gl.framebufferTextureLayer(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, this.gradientTexture, 0, i)\n      gl.clear(gl.DEPTH_BUFFER_BIT)\n      gl.drawArrays(gl.TRIANGLE_STRIP, 0, faceStrip.length / 3)\n    }\n    gl.deleteFramebuffer(fb)\n    gl.deleteTexture(tempTex3D)\n    gl.deleteBuffer(vbo2)\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null)\n  }\n\n  /**\n   * update the webGL 2.0 scene after making changes to the array of volumes. It's always good to call this method after altering one or more volumes manually (outside of Niivue setter methods)\n   * @example\n   * niivue = new Niivue()\n   * niivue.updateGLVolume()\n   * @see {@link https://niivue.github.io/niivue/features/colormaps.html | live demo usage}\n   */\n  updateGLVolume(): void {\n    // load volume or change contrast\n    let visibleLayers = 0\n    const numLayers = this.volumes.length\n    // loop through loading volumes in this.volume\n    this.refreshColormaps()\n    for (let i = 0; i < numLayers; i++) {\n      // avoid trying to refresh a volume that isn't ready\n      if (!this.volumes[i].toRAS) {\n        continue\n      }\n      this.refreshLayers(this.volumes[i], visibleLayers)\n      visibleLayers++\n    }\n    this.furthestVertexFromOrigin = 0.0\n    if (numLayers > 0) {\n      this.furthestVertexFromOrigin = this.volumeObject3D!.furthestVertexFromOrigin!\n    }\n    if (this.meshes) {\n      for (let i = 0; i < this.meshes.length; i++) {\n        this.furthestVertexFromOrigin = Math.max(this.furthestVertexFromOrigin, this.meshes[i].furthestVertexFromOrigin)\n      }\n    }\n\n    if (this.onVolumeUpdated) {\n      this.onVolumeUpdated()\n    }\n    this.drawScene()\n  }\n\n  /**\n   * basic statistics for selected voxel-based image\n   * @param options - an object containing the following properties:\n   *   - layer: selects image to describe\n   *   - masks: optional binary images to filter voxels\n   *   - drawingIsMask: a boolean indicating if the drawing is used as a mask\n   *   - roiIsMask: a boolean indicating if the ROI is used as a mask\n   *   - startVox: the starting voxel coordinates\n   *   - endVox: the ending voxel coordinates\n   * @returns numeric values to describe image or regions of images\n   * @example\n   * niivue.getDescriptives({\n   *   layer: 0,\n   *   masks: [],\n   *   drawingIsMask: true, // drawingIsMask and roiIsMask are mutually exclusive\n   *   roiIsMask: false,\n   *   startVox: [10, 20, 30], // ignored if roiIsMask is false\n   *   endVox: [40, 50, 60] // ignored if roiIsMask is false\n   * });\n   * @see {@link https://niivue.github.io/niivue/features/draw2.html | live demo usage}\n   */\n  getDescriptives(options: {\n    layer?: number\n    masks?: number[]\n    drawingIsMask?: boolean\n    roiIsMask?: boolean\n    startVox?: number[]\n    endVox?: number[]\n  }): Descriptive {\n    const {\n      layer = 0,\n      masks = [],\n      drawingIsMask = false,\n      roiIsMask = false,\n      startVox = [0, 0, 0],\n      endVox = [0, 0, 0]\n    } = options\n\n    // Rest of the code remains the same\n    let area = null // used if roiIsMask since ROI is in 2D slice\n    const hdr = this.volumes[layer].hdr!\n    const pixDimsRAS = this.volumes[layer].pixDimsRAS!\n    let slope = hdr.scl_slope\n    if (isNaN(slope)) {\n      slope = 1\n    }\n    let inter = hdr.scl_inter\n    if (isNaN(inter)) {\n      inter = 1\n    }\n    const imgRaw = this.volumes[layer].img!\n    const nv = imgRaw.length // number of voxels\n    // create mask\n    const img = new Float32Array(nv)\n    for (let i = 0; i < nv; i++) {\n      img[i] = imgRaw[i] * slope + inter\n    } // assume all voxels survive\n    const mask = new Uint8Array(nv)\n    for (let i = 0; i < nv; i++) {\n      mask[i] = 1\n    } // assume all voxels survive\n    if (masks.length > 0) {\n      for (let m = 0; m < masks.length; m++) {\n        const imgMask = this.volumes[masks[m]].img!\n        if (imgMask.length !== nv) {\n          log.debug('Mask resolution does not match image. Skipping masking layer ' + masks[m])\n          continue\n        }\n        for (let i = 0; i < nv; i++) {\n          if (imgMask[i] === 0 || isNaN(imgMask[i])) {\n            mask[i] = 0\n          }\n        }\n      }\n    } else if (masks.length < 1 && drawingIsMask) {\n      for (let i = 0; i < nv; i++) {\n        if (this.drawBitmap![i] === 0 || isNaN(this.drawBitmap![i])) {\n          mask[i] = 0\n        }\n      }\n    } else if (masks.length < 1 && roiIsMask) {\n      // fill mask with zeros\n      mask.fill(0)\n      console.log('startVox', startVox)\n      console.log('endVox', endVox)\n\n      // identify the constant dimension (the plane where the ellipse is drawn)\n      let constantDim = -1\n      if (startVox[0] === endVox[0]) {\n        constantDim = 0 // x is constant\n      } else if (startVox[1] === endVox[1]) {\n        constantDim = 1 // y is constant\n      } else if (startVox[2] === endVox[2]) {\n        constantDim = 2 // z is constant\n      } else {\n        console.error('Error: No constant dimension found.')\n        return\n      }\n\n      // get the varying dimensions\n      const dims = [0, 1, 2]\n      const varDims = dims.filter((dim) => dim !== constantDim)\n\n      // compute the center of the ellipse in voxel coordinates\n      const centerVox = []\n      centerVox[constantDim] = startVox[constantDim]\n      centerVox[varDims[0]] = (startVox[varDims[0]] + endVox[varDims[0]]) / 2\n      centerVox[varDims[1]] = (startVox[varDims[1]] + endVox[varDims[1]]) / 2\n\n      // compute the radii along each varying dimension\n      const radiusX = Math.abs(endVox[varDims[0]] - startVox[varDims[0]]) / 2\n      const radiusY = Math.abs(endVox[varDims[1]] - startVox[varDims[1]]) / 2\n\n      // dimensions of the image\n      const xdim = hdr.dims[1]\n      const ydim = hdr.dims[2]\n      // const zdim = hdr.dims[3]\n\n      // define the ranges for the varying dimensions\n      const minVarDim0 = Math.max(0, Math.floor(centerVox[varDims[0]] - radiusX))\n      const maxVarDim0 = Math.min(hdr.dims[varDims[0] + 1] - 1, Math.ceil(centerVox[varDims[0]] + radiusX))\n\n      const minVarDim1 = Math.max(0, Math.floor(centerVox[varDims[1]] - radiusY))\n      const maxVarDim1 = Math.min(hdr.dims[varDims[1] + 1] - 1, Math.ceil(centerVox[varDims[1]] + radiusY))\n\n      // the constant dimension value\n      const constDimVal = centerVox[constantDim]\n      if (constDimVal < 0 || constDimVal >= hdr.dims[constantDim + 1]) {\n        console.error('Error: Constant dimension value is out of bounds.')\n        return\n      }\n\n      // iterate over the varying dimensions and apply the elliptical mask\n      for (let i = minVarDim0; i <= maxVarDim0; i++) {\n        for (let j = minVarDim1; j <= maxVarDim1; j++) {\n          // set the voxel coordinates\n          const voxel = []\n          voxel[constantDim] = constDimVal // Fixed dimension\n          voxel[varDims[0]] = i\n          voxel[varDims[1]] = j\n          // calculate the normalized distances from the center\n          const di = (voxel[varDims[0]] - centerVox[varDims[0]]) / radiusX\n          const dj = (voxel[varDims[1]] - centerVox[varDims[1]]) / radiusY\n          // calculate the squared distance in ellipse space\n          const distSq = di * di + dj * dj\n          // check if the voxel is within the ellipse\n          if (distSq <= 1) {\n            // calculate the index in the mask array\n            const x = voxel[0]\n            const y = voxel[1]\n            const z = voxel[2]\n            const index = z * xdim * ydim + y * xdim + x\n            mask[index] = 1\n          }\n        }\n      }\n      // calculate the area based on the number of voxels in the mask\n      const voxelArea = pixDimsRAS[varDims[0] + 1] * pixDimsRAS[varDims[1] + 1] // adjusted for 1-indexing\n      const numMaskedVoxels = mask.reduce((count, value) => count + (value === 1 ? 1 : 0), 0)\n      area = numMaskedVoxels * voxelArea\n\n      // perhaps better to calculate the area using the ellipse area formula\n      const radiusX_mm = radiusX * pixDimsRAS[varDims[0] + 1]\n      const radiusY_mm = radiusY * pixDimsRAS[varDims[1] + 1]\n      const areaEllipse = Math.PI * radiusX_mm * radiusY_mm\n      area = areaEllipse\n      // for debuging: show mask -- loop over drawing and set drawing to 1 if mask is 1\n      // this.setDrawingEnabled(true)\n      // this.drawOpacity = 0.3\n      // for (let i = 0; i < nv; i++) {\n      //   if (mask[i] === 1) {\n      //     this.drawBitmap![i] = 1\n      //   } else {\n      //     this.drawBitmap![i] = 0\n      //   }\n      // }\n      // this.refreshDrawing(false)\n      // this.setDrawingEnabled(false)\n    }\n    // Welfords method\n    // https://www.embeddedrelated.com/showarticle/785.php\n    // https://www.johndcook.com/blog/2008/09/26/comparing-three-methods-of-computing-standard-deviation/\n    let k = 0\n    let M = 0\n    let S = 0\n    let mx = Number.NEGATIVE_INFINITY\n    let mn = Number.POSITIVE_INFINITY\n    let kNot0 = 0\n    let MNot0 = 0\n    let SNot0 = 0\n\n    for (let i = 0; i < nv; i++) {\n      if (mask[i] < 1) {\n        continue\n      }\n      const x = img[i]\n      k++\n      let Mnext = M + (x - M) / k\n      S = S + (x - M) * (x - Mnext)\n      M = Mnext\n      if (x === 0) {\n        continue\n      }\n      kNot0++\n      Mnext = MNot0 + (x - MNot0) / kNot0\n      SNot0 = SNot0 + (x - MNot0) * (x - Mnext)\n      MNot0 = Mnext\n\n      mn = Math.min(x, mx)\n      mx = Math.max(x, mx)\n    }\n    const stdev = Math.sqrt(S / (k - 1))\n    const stdevNot0 = Math.sqrt(SNot0 / (kNot0 - 1))\n    const mnNot0 = mn\n    const mxNot0 = mx\n    if (k !== kNot0) {\n      // some voxels are equal to zero\n      mn = Math.min(0, mx)\n      mx = Math.max(0, mx)\n    }\n\n    return {\n      mean: M,\n      stdev,\n      nvox: k,\n      volumeMM3: k * hdr.pixDims[1] * hdr.pixDims[2] * hdr.pixDims[3],\n      // volume also in milliliters\n      volumeML: k * hdr.pixDims[1] * hdr.pixDims[2] * hdr.pixDims[3] * 0.001,\n      min: mn,\n      max: mx,\n      meanNot0: MNot0,\n      stdevNot0,\n      nvoxNot0: kNot0,\n      minNot0: mnNot0,\n      maxNot0: mxNot0,\n      cal_min: this.volumes[layer].cal_min!,\n      cal_max: this.volumes[layer].cal_max!,\n      robust_min: this.volumes[layer].robust_min!,\n      robust_max: this.volumes[layer].robust_max!,\n      area\n    }\n  }\n\n  // not included in public docs\n  // apply slow computations when image properties have changed\n  refreshLayers(overlayItem: NVImage, layer: number): void {\n    this.refreshColormaps()\n    if (this.volumes.length < 1) {\n      return\n    } // e.g. only meshes\n    const hdr = overlayItem.hdr\n    let img = overlayItem.img\n    if (overlayItem.frame4D > 0 && overlayItem.frame4D < overlayItem.nFrame4D!) {\n      img = overlayItem.img!.slice(\n        overlayItem.frame4D * overlayItem.nVox3D!,\n        (overlayItem.frame4D + 1) * overlayItem.nVox3D!\n      )\n    }\n    const opacity = overlayItem.opacity\n    if (layer > 1 && opacity === 0) {\n      return\n    } // skip completely transparent layers\n    let outTexture = null\n\n    if (!this.back) {\n      throw new Error('back undefined')\n    }\n\n    this.gl.bindVertexArray(this.unusedVAO)\n    if (this.crosshairs3D) {\n      this.crosshairs3D.mm![0] = NaN\n    } // force crosshairs3D redraw\n    let mtx = mat4.clone(overlayItem.toRAS!)\n    if (layer === 0) {\n      this.volumeObject3D = overlayItem.toNiivueObject3D(this.VOLUME_ID, this.gl)\n      mat4.invert(mtx, mtx)\n\n      this.back.matRAS = overlayItem.matRAS\n      this.back.dims = overlayItem.dimsRAS\n      this.back.pixDims = overlayItem.pixDimsRAS\n      outTexture = this.rgbaTex(this.volumeTexture, TEXTURE0_BACK_VOL, overlayItem.dimsRAS!) // this.back.dims)\n\n      const { volScale, vox } = this.sliceScale(true) // slice scale determined by this.back --> the base image layer\n\n      this.volScale = volScale\n      this.vox = vox\n      this.volumeObject3D.scale = volScale\n\n      if (!this.renderShader) {\n        throw new Error('renderShader undefined')\n      }\n\n      this.renderShader.use(this.gl)\n      this.gl.uniform3fv(this.renderShader.uniforms.texVox, vox)\n      this.gl.uniform3fv(this.renderShader.uniforms.volScale, volScale)\n      // add shader to object\n      const pickingShader = this.pickingImageShader!\n      pickingShader.use(this.gl)\n      this.gl.uniform1i(pickingShader.uniforms.volume, 0)\n      this.gl.uniform1i(pickingShader.uniforms.colormap, 1)\n      this.gl.uniform1i(pickingShader.uniforms.overlay, 2)\n      this.gl.uniform3fv(pickingShader.uniforms.volScale, volScale)\n      log.debug(this.volumeObject3D)\n    } else {\n      if (this.back?.dims === undefined) {\n        log.error('Fatal error: Unable to render overlay: background dimensions not defined!')\n      }\n      const f000 = this.mm2frac(overlayItem.mm000!, 0, true) // origin in output space\n      let f100 = this.mm2frac(overlayItem.mm100!, 0, true)\n      let f010 = this.mm2frac(overlayItem.mm010!, 0, true)\n      let f001 = this.mm2frac(overlayItem.mm001!, 0, true)\n      f100 = vec3.subtract(f100, f100, f000) // direction of i dimension from origin\n      f010 = vec3.subtract(f010, f010, f000) // direction of j dimension from origin\n      f001 = vec3.subtract(f001, f001, f000) // direction of k dimension from origin\n      mtx = mat4.fromValues(\n        f100[0],\n        f010[0],\n        f001[0],\n        f000[0],\n\n        f100[1],\n        f010[1],\n        f001[1],\n        f000[1],\n\n        f100[2],\n        f010[2],\n        f001[2],\n        f000[2],\n        0,\n        0,\n        0,\n        1\n      )\n      mat4.invert(mtx, mtx)\n      if (layer === 1) {\n        outTexture = this.rgbaTex(this.overlayTexture, TEXTURE2_OVERLAY_VOL, this.back!.dims!)\n        this.overlayTexture = outTexture\n        this.overlayTextureID = outTexture\n      } else {\n        outTexture = this.overlayTextureID\n      }\n    }\n    const fb = this.gl.createFramebuffer()\n    this.gl.bindFramebuffer(this.gl.FRAMEBUFFER, fb)\n    this.gl.disable(this.gl.CULL_FACE)\n    this.gl.viewport(0, 0, this.back.dims![1], this.back.dims![2]) // output in background dimensions\n    this.gl.disable(this.gl.BLEND)\n    const tempTex3D = this.gl.createTexture()\n    this.gl.activeTexture(TEXTURE9_ORIENT) // Temporary 3D Texture TEXTURE9_ORIENT\n    this.gl.bindTexture(this.gl.TEXTURE_3D, tempTex3D)\n    this.gl.texParameteri(this.gl.TEXTURE_3D, this.gl.TEXTURE_MIN_FILTER, this.gl.NEAREST)\n    this.gl.texParameteri(this.gl.TEXTURE_3D, this.gl.TEXTURE_MAG_FILTER, this.gl.NEAREST)\n    this.gl.texParameteri(this.gl.TEXTURE_3D, this.gl.TEXTURE_WRAP_R, this.gl.CLAMP_TO_EDGE)\n    this.gl.texParameteri(this.gl.TEXTURE_3D, this.gl.TEXTURE_WRAP_S, this.gl.CLAMP_TO_EDGE)\n    this.gl.texParameteri(this.gl.TEXTURE_3D, this.gl.TEXTURE_WRAP_T, this.gl.CLAMP_TO_EDGE)\n    this.gl.pixelStorei(this.gl.UNPACK_ALIGNMENT, 1)\n    // https://webgl2fundamentals.org/webgl/lessons/webgl-data-textures.html\n    // https://www.khronos.org/registry/OpenGL-Refpages/es3.0/html/glTexStorage3D.xhtml\n    let orientShader = this.orientShaderU!\n    if (!hdr) {\n      throw new Error('hdr undefined')\n    }\n    if (!img) {\n      throw new Error('img undefined')\n    }\n    if (hdr.datatypeCode === NiiDataType.DT_UINT8) {\n      // raw input data\n      if (hdr.intent_code === NiiIntentCode.NIFTI_INTENT_LABEL) {\n        orientShader = this.orientShaderAtlasU!\n      }\n      this.gl.texStorage3D(this.gl.TEXTURE_3D, 1, this.gl.R8UI, hdr.dims[1], hdr.dims[2], hdr.dims[3])\n      this.gl.texSubImage3D(\n        this.gl.TEXTURE_3D,\n        0,\n        0,\n        0,\n        0,\n        hdr.dims[1],\n        hdr.dims[2],\n        hdr.dims[3],\n        this.gl.RED_INTEGER,\n        this.gl.UNSIGNED_BYTE,\n        img\n      )\n    } else if (hdr.datatypeCode === NiiDataType.DT_INT16) {\n      orientShader = this.orientShaderI!\n      if (hdr.intent_code === NiiIntentCode.NIFTI_INTENT_LABEL) {\n        orientShader = this.orientShaderAtlasI!\n      }\n      this.gl.texStorage3D(this.gl.TEXTURE_3D, 1, this.gl.R16I, hdr.dims[1], hdr.dims[2], hdr.dims[3])\n      this.gl.texSubImage3D(\n        this.gl.TEXTURE_3D,\n        0,\n        0,\n        0,\n        0,\n        hdr.dims[1],\n        hdr.dims[2],\n        hdr.dims[3],\n        this.gl.RED_INTEGER,\n        this.gl.SHORT,\n        img\n      )\n    } else if (hdr.datatypeCode === NiiDataType.DT_FLOAT32) {\n      this.gl.texStorage3D(this.gl.TEXTURE_3D, 1, this.gl.R32F, hdr.dims[1], hdr.dims[2], hdr.dims[3])\n      this.gl.texSubImage3D(\n        this.gl.TEXTURE_3D,\n        0,\n        0,\n        0,\n        0,\n        hdr.dims[1],\n        hdr.dims[2],\n        hdr.dims[3],\n        this.gl.RED,\n        this.gl.FLOAT,\n        img\n      )\n      orientShader = this.orientShaderF!\n    } else if (hdr.datatypeCode === NiiDataType.DT_FLOAT64) {\n      let img32f = new Float32Array()\n      img32f = Float32Array.from(img)\n      this.gl.texStorage3D(this.gl.TEXTURE_3D, 1, this.gl.R32F, hdr.dims[1], hdr.dims[2], hdr.dims[3])\n      this.gl.texSubImage3D(\n        this.gl.TEXTURE_3D,\n        0,\n        0,\n        0,\n        0,\n        hdr.dims[1],\n        hdr.dims[2],\n        hdr.dims[3],\n        this.gl.RED,\n        this.gl.FLOAT,\n        img32f\n      )\n      orientShader = this.orientShaderF!\n    } else if (hdr.datatypeCode === NiiDataType.DT_RGB24) {\n      orientShader = this.orientShaderRGBU!\n      orientShader.use(this.gl)\n      // TODO was false instead of 0\n      this.gl.uniform1i(orientShader.uniforms.hasAlpha, 0)\n      this.gl.texStorage3D(this.gl.TEXTURE_3D, 1, this.gl.RGB8UI, hdr.dims[1], hdr.dims[2], hdr.dims[3])\n      this.gl.texSubImage3D(\n        this.gl.TEXTURE_3D,\n        0,\n        0,\n        0,\n        0,\n        hdr.dims[1],\n        hdr.dims[2],\n        hdr.dims[3],\n        this.gl.RGB_INTEGER,\n        this.gl.UNSIGNED_BYTE,\n        img\n      )\n    } else if (hdr.datatypeCode === NiiDataType.DT_UINT16) {\n      if (hdr.intent_code === NiiIntentCode.NIFTI_INTENT_LABEL) {\n        orientShader = this.orientShaderAtlasU!\n      }\n      this.gl.texStorage3D(this.gl.TEXTURE_3D, 1, this.gl.R16UI, hdr.dims[1], hdr.dims[2], hdr.dims[3])\n      this.gl.texSubImage3D(\n        this.gl.TEXTURE_3D,\n        0,\n        0,\n        0,\n        0,\n        hdr.dims[1],\n        hdr.dims[2],\n        hdr.dims[3],\n        this.gl.RED_INTEGER,\n        this.gl.UNSIGNED_SHORT,\n        img\n      )\n    } else if (hdr.datatypeCode === NiiDataType.DT_RGBA32) {\n      orientShader = this.orientShaderRGBU!\n      orientShader.use(this.gl)\n      this.gl.uniform1i(orientShader.uniforms.hasAlpha, 1)\n      this.gl.texStorage3D(this.gl.TEXTURE_3D, 1, this.gl.RGBA8UI, hdr.dims[1], hdr.dims[2], hdr.dims[3])\n      this.gl.texSubImage3D(\n        this.gl.TEXTURE_3D,\n        0,\n        0,\n        0,\n        0,\n        hdr.dims[1],\n        hdr.dims[2],\n        hdr.dims[3],\n        this.gl.RGBA_INTEGER,\n        this.gl.UNSIGNED_BYTE,\n        img\n      )\n    }\n    if (overlayItem.global_min === undefined) {\n      // only once, first time volume is loaded\n      // this.calMinMax(overlayItem, imgRaw);\n      overlayItem.calMinMax()\n    }\n    // blend texture\n    let blendTexture = null\n    this.gl.bindVertexArray(this.genericVAO)\n\n    const isUseCopyTexSubImage3D = false\n    if (isUseCopyTexSubImage3D) {\n      if (layer > 1) {\n        // we can not simultaneously read and write to the same texture.\n        // therefore, we must clone the overlay texture when we wish to add another layer\n        // copy previous overlay texture to blend texture\n        blendTexture = this.rgbaTex(blendTexture, TEXTURE10_BLEND, this.back.dims!, true)\n        this.gl.bindTexture(this.gl.TEXTURE_3D, blendTexture)\n        for (let i = 0; i < this.back.dims![3]; i++) {\n          // n.b. copyTexSubImage3D is a screenshot function: it copies FROM the framebuffer to the TEXTURE (usually we write to a framebuffer)\n          this.gl.framebufferTextureLayer(this.gl.FRAMEBUFFER, this.gl.COLOR_ATTACHMENT0, this.overlayTexture, 0, i) // read from existing overlay texture 2\n          this.gl.activeTexture(TEXTURE10_BLEND) // write to blend texture 5\n          this.gl.copyTexSubImage3D(this.gl.TEXTURE_3D, 0, 0, 0, i, 0, 0, this.back.dims![1], this.back.dims![2])\n        }\n      } else {\n        blendTexture = this.rgbaTex(blendTexture, TEXTURE10_BLEND, [2, 2, 2, 2], true)\n      }\n    } else {\n      if (layer > 1) {\n        if (!this.back.dims) {\n          throw new Error('back.dims undefined')\n        }\n        // use pass-through shader to copy previous color to temporary 2D texture\n        blendTexture = this.rgbaTex(blendTexture, TEXTURE10_BLEND, this.back.dims)\n        this.gl.bindTexture(this.gl.TEXTURE_3D, blendTexture)\n        const passShader = this.passThroughShader!\n        passShader.use(this.gl)\n        this.gl.uniform1i(passShader.uniforms.in3D, 2) // overlay volume\n        for (let i = 0; i < this.back.dims[3]; i++) {\n          // output slices\n          const coordZ = (1 / this.back.dims[3]) * (i + 0.5)\n          this.gl.uniform1f(passShader.uniforms.coordZ, coordZ)\n          this.gl.framebufferTextureLayer(this.gl.FRAMEBUFFER, this.gl.COLOR_ATTACHMENT0, blendTexture, 0, i)\n          // this.gl.clear(this.gl.DEPTH_BUFFER_BIT); //exhaustive, so not required\n          this.gl.drawArrays(this.gl.TRIANGLE_STRIP, 0, 4)\n        }\n      } else {\n        blendTexture = this.rgbaTex(blendTexture, TEXTURE10_BLEND, [2, 2, 2, 2])\n      }\n    }\n    orientShader!.use(this.gl)\n    this.gl.activeTexture(TEXTURE1_COLORMAPS)\n    // for label maps, we create an indexed colormap that is not limited to a gradient of 256 colors\n    let colormapLabelTexture = null\n    if (overlayItem.colormapLabel !== null && overlayItem.colormapLabel.lut.length > 7) {\n      const nLabel = overlayItem.colormapLabel.max! - overlayItem.colormapLabel.min! + 1\n      colormapLabelTexture = this.createColormapTexture(colormapLabelTexture, 1, nLabel)\n      this.gl.texSubImage2D(\n        this.gl.TEXTURE_2D,\n        0,\n        0,\n        0,\n        nLabel,\n        1,\n        this.gl.RGBA,\n        this.gl.UNSIGNED_BYTE,\n        overlayItem.colormapLabel.lut\n      )\n      this.gl.uniform1f(orientShader.uniforms.cal_min, overlayItem.colormapLabel.min! - 0.5)\n      this.gl.uniform1f(orientShader.uniforms.cal_max, overlayItem.colormapLabel.max! + 0.5)\n      // this.gl.bindTexture(this.gl.TEXTURE_2D, this.colormapTexture);\n      this.gl.bindTexture(this.gl.TEXTURE_2D, colormapLabelTexture)\n    } else {\n      this.gl.bindTexture(this.gl.TEXTURE_2D, this.colormapTexture)\n      this.gl.uniform1f(orientShader.uniforms.cal_min, overlayItem.cal_min!)\n      this.gl.uniform1f(orientShader.uniforms.cal_max, overlayItem.cal_max!)\n    }\n    this.gl.uniform1i(orientShader.uniforms.isAlphaThreshold, overlayItem.alphaThreshold!)\n    this.gl.uniform1i(orientShader.uniforms.isAdditiveBlend, this.opts.isAdditiveBlend ? 1 : 0)\n    // if unused colormapNegative https://github.com/niivue/niivue/issues/490\n    let mnNeg = Number.POSITIVE_INFINITY\n    let mxNeg = Number.NEGATIVE_INFINITY\n    if (overlayItem.colormapNegative.length > 0) {\n      // assume symmetrical\n      mnNeg = Math.min(-overlayItem.cal_min!, -overlayItem.cal_max!)\n      mxNeg = Math.max(-overlayItem.cal_min!, -overlayItem.cal_max!)\n      if (isFinite(overlayItem.cal_minNeg) && isFinite(overlayItem.cal_maxNeg)) {\n        // explicit range for negative colormap: allows asymmetric maps\n        mnNeg = Math.min(overlayItem.cal_minNeg, overlayItem.cal_maxNeg)\n        mxNeg = Math.max(overlayItem.cal_minNeg, overlayItem.cal_maxNeg)\n      }\n    }\n    if (!orientShader) {\n      throw new Error('orientShader undefined')\n    }\n    this.gl.uniform1f(orientShader.uniforms.layer ?? null, layer)\n    this.gl.uniform1f(orientShader.uniforms.cal_minNeg ?? null, mnNeg)\n    this.gl.uniform1f(orientShader.uniforms.cal_maxNeg ?? null, mxNeg)\n    this.gl.bindTexture(this.gl.TEXTURE_3D, tempTex3D)\n    this.gl.uniform1i(orientShader.uniforms.intensityVol ?? null, 9) // TEXTURE9_ORIENT\n    this.gl.uniform1i(orientShader.uniforms.blend3D ?? null, 10) // TEXTURE10_BLEND\n    this.gl.uniform1i(orientShader.uniforms.colormap ?? null, 1)\n    // this.gl.uniform1f(orientShader.uniforms[\"numLayers\"], numLayers);\n    this.gl.uniform1f(orientShader.uniforms.scl_inter ?? null, hdr.scl_inter)\n    this.gl.uniform1f(orientShader.uniforms.scl_slope ?? null, hdr.scl_slope)\n    this.gl.uniform1f(orientShader.uniforms.opacity ?? null, opacity)\n    this.gl.uniform1i(orientShader.uniforms.modulationVol ?? null, 7)\n    let modulateTexture = null\n    if (\n      overlayItem.modulationImage !== null &&\n      overlayItem.modulationImage >= 0 &&\n      overlayItem.modulationImage < this.volumes.length\n    ) {\n      log.debug('modulating', this.volumes)\n      const mhdr = this.volumes[overlayItem.modulationImage].hdr!\n      if (mhdr.dims[1] === hdr.dims[1] && mhdr.dims[2] === hdr.dims[2] && mhdr.dims[3] === hdr.dims[3]) {\n        if (overlayItem.modulateAlpha) {\n          this.gl.uniform1i(orientShader.uniforms.modulation, 2)\n          this.gl.uniform1f(orientShader.uniforms.opacity, 1.0)\n        } else {\n          this.gl.uniform1i(orientShader.uniforms.modulation, 1)\n        }\n        // r8Tex(texID, activeID, dims, isInit = false)\n        modulateTexture = this.r8Tex(modulateTexture, this.gl.TEXTURE7, hdr.dims, true)\n        this.gl.activeTexture(this.gl.TEXTURE7)\n        this.gl.bindTexture(this.gl.TEXTURE_3D, modulateTexture)\n        const vx = hdr.dims[1] * hdr.dims[2] * hdr.dims[3]\n        const modulateVolume = new Uint8Array(vx)\n        const mn = this.volumes[overlayItem.modulationImage].cal_min!\n        const scale = 1.0 / (this.volumes[overlayItem.modulationImage].cal_max! - mn)\n        const imgRaw = this.volumes[overlayItem.modulationImage].img!.buffer\n        let img: Uint8Array | Int16Array | Float32Array | Float64Array | Uint8Array | Uint16Array = new Uint8Array(\n          imgRaw\n        )\n        switch (mhdr.datatypeCode) {\n          case NiiDataType.DT_INT16:\n            img = new Int16Array(imgRaw)\n            break\n          case NiiDataType.DT_FLOAT32:\n            img = new Float32Array(imgRaw)\n            break\n          case NiiDataType.DT_FLOAT64:\n            img = new Float64Array(imgRaw)\n            break\n          case NiiDataType.DT_RGB24:\n            img = new Uint8Array(imgRaw)\n            break\n          case NiiDataType.DT_UINT16:\n            img = new Uint16Array(imgRaw)\n            break\n        }\n        log.debug(this.volumes[overlayItem.modulationImage])\n        const isColormapNegative = this.volumes[overlayItem.modulationImage].colormapNegative.length > 0\n        // negative thresholds might be asymmetric from positive ones\n        let mnNeg = this.volumes[overlayItem.modulationImage].cal_min\n        let mxNeg = this.volumes[overlayItem.modulationImage].cal_max\n        if (\n          isFinite(this.volumes[overlayItem.modulationImage].cal_minNeg) &&\n          isFinite(this.volumes[overlayItem.modulationImage].cal_maxNeg)\n        ) {\n          // explicit range for negative colormap: allows asymmetric maps\n          mnNeg = this.volumes[overlayItem.modulationImage].cal_minNeg\n          mxNeg = this.volumes[overlayItem.modulationImage].cal_minNeg\n        }\n        mnNeg = Math.abs(mnNeg!)\n        mxNeg = Math.abs(mxNeg!)\n        if (mnNeg > mxNeg) {\n          ;[mnNeg, mxNeg] = [mxNeg, mnNeg]\n        }\n        const scaleNeg = 1.0 / (mxNeg - mnNeg)\n        let mpow = Math.abs(overlayItem.modulateAlpha) // can convert bool, too\n        mpow = Math.max(mpow, 1.0)\n        // volOffset selects the correct frame\n        const volOffset = this.volumes[overlayItem.modulationImage].frame4D * vx\n        for (let i = 0; i < vx; i++) {\n          const vRaw = img[i + volOffset] * mhdr.scl_slope + mhdr.scl_inter\n          let v = (vRaw - mn) * scale\n          if (isColormapNegative && vRaw < 0.0) {\n            v = (Math.abs(vRaw) - mnNeg) * scaleNeg\n          }\n          v = Math.min(Math.max(v, 0.0), 1.0)\n          v = Math.pow(v, mpow) * 255.0\n          modulateVolume[i] = v\n        }\n        this.gl.texSubImage3D(\n          this.gl.TEXTURE_3D,\n          0,\n          0,\n          0,\n          0,\n          hdr.dims[1],\n          hdr.dims[2],\n          hdr.dims[3],\n          this.gl.RED,\n          this.gl.UNSIGNED_BYTE,\n          modulateVolume\n        )\n      } else {\n        log.debug('Modulation image dimensions do not match target')\n      }\n    } else {\n      this.gl.uniform1i(orientShader.uniforms.modulation, 0)\n    }\n    this.gl.uniformMatrix4fv(orientShader.uniforms.mtx, false, mtx)\n    if (!this.back.dims) {\n      throw new Error('back.dims undefined')\n    }\n    let outline = 0\n    if (hdr.intent_code === NiiIntentCode.NIFTI_INTENT_LABEL) {\n      outline = this.opts.atlasOutline\n    }\n    this.gl.uniform4fv(orientShader.uniforms.xyzaFrac, [\n      1.0 / this.back.dims[1],\n      1.0 / this.back.dims[2],\n      1.0 / this.back.dims[3],\n      outline\n    ])\n    log.debug('back dims: ', this.back.dims)\n    for (let i = 0; i < this.back.dims[3]; i++) {\n      // output slices\n      const coordZ = (1 / this.back.dims[3]) * (i + 0.5)\n      this.gl.uniform1f(orientShader.uniforms.coordZ, coordZ)\n      this.gl.framebufferTextureLayer(this.gl.FRAMEBUFFER, this.gl.COLOR_ATTACHMENT0, outTexture, 0, i)\n      // this.gl.clear(this.gl.DEPTH_BUFFER_BIT); //exhaustive, so not required\n      this.gl.drawArrays(this.gl.TRIANGLE_STRIP, 0, 4)\n    }\n    this.gl.bindVertexArray(this.unusedVAO)\n    this.gl.deleteTexture(tempTex3D)\n    this.gl.deleteTexture(modulateTexture)\n    this.gl.deleteTexture(blendTexture)\n    this.gl.viewport(0, 0, this.gl.canvas.width, this.gl.canvas.height)\n    this.gl.bindFramebuffer(this.gl.FRAMEBUFFER, null)\n\n    this.gl.deleteFramebuffer(fb)\n\n    if (layer === 0) {\n      this.volumeTexture = outTexture\n      if (this.gradientTextureAmount > 0.0) {\n        this.gradientGL(hdr)\n      } else {\n        if (this.gradientTexture !== null) {\n          this.gl.deleteTexture(this.gradientTexture)\n        }\n        this.gradientTexture = null\n      }\n    }\n    // set slice scale for render shader\n    if (!this.renderShader) {\n      throw new Error('renderShader undefined')\n    }\n    this.renderShader.use(this.gl)\n    const slicescl = this.sliceScale(true) // slice scale determined by this.back --> the base image layer\n    const vox = slicescl.vox\n    const volScale = slicescl.volScale\n    // @ts-expect-error FIXME assigning this.overlays to a number field\n    this.gl.uniform1f(this.renderShader.uniforms.overlays, this.overlays)\n    this.gl.uniform4fv(this.renderShader.uniforms.clipPlaneColor, this.opts.clipPlaneColor)\n    this.gl.uniform1f(this.renderShader.uniforms.clipThick, this.opts.clipThick)\n    this.gl.uniform3fv(this.renderShader!.uniforms.clipLo!, this.opts.clipVolumeLow)\n    this.gl.uniform3fv(this.renderShader!.uniforms.clipHi!, this.opts.clipVolumeHigh)\n    this.gl.uniform1f(this.renderShader.uniforms.backOpacity, this.volumes[0].opacity)\n    this.gl.uniform1f(this.renderShader.uniforms.renderOverlayBlend, this.opts.renderOverlayBlend)\n\n    this.gl.uniform4fv(this.renderShader.uniforms.clipPlane, this.scene.clipPlane)\n    this.gl.uniform3fv(this.renderShader.uniforms.texVox, vox)\n    this.gl.uniform3fv(this.renderShader.uniforms.volScale, volScale)\n\n    if (!this.pickingImageShader) {\n      throw new Error('pickingImageShader undefined')\n    }\n    this.pickingImageShader.use(this.gl)\n    this.gl.uniform1f(this.pickingImageShader.uniforms.overlays, this.overlays.length)\n    this.gl.uniform3fv(this.pickingImageShader.uniforms.texVox, vox)\n    this.gl.uniform3fv(this.pickingImageShader!.uniforms.clipLo!, this.opts.clipVolumeLow)\n    this.gl.uniform3fv(this.pickingImageShader!.uniforms.clipHi!, this.opts.clipVolumeHigh)\n    let shader = this.sliceMMShader\n    if (this.opts.isV1SliceShader) {\n      shader = this.sliceV1Shader\n    }\n    if (!shader) {\n      throw new Error('slice shader undefined')\n    }\n\n    shader.use(this.gl)\n\n    this.gl.uniform1f(shader.uniforms.overlays, this.overlays.length)\n    this.gl.uniform1f(shader.uniforms.drawOpacity, this.drawOpacity)\n    if (colormapLabelTexture !== null) {\n      this.gl.deleteTexture(colormapLabelTexture)\n      this.gl.activeTexture(TEXTURE1_COLORMAPS)\n      this.gl.bindTexture(this.gl.TEXTURE_2D, this.colormapTexture)\n    }\n    this.gl.uniform1i(shader.uniforms.drawing, 7)\n    this.gl.activeTexture(TEXTURE7_DRAW)\n    this.gl.bindTexture(this.gl.TEXTURE_3D, this.drawTexture)\n    this.updateInterpolation(layer)\n    //\n    // this.createEmptyDrawing(); //DO NOT DO THIS ON EVERY CALL TO REFRESH LAYERS!!!!\n    // this.createRandomDrawing(); //DO NOT DO THIS ON EVERY CALL TO REFRESH LAYERS!!!!\n  }\n\n  /**\n   * query all available color maps that can be applied to volumes\n   * @param sort - whether or not to sort the returned array\n   * @returns an array of colormap strings\n   * @example\n   * niivue = new Niivue()\n   * colormaps = niivue.colormaps()\n   * @see {@link https://niivue.github.io/niivue/features/colormaps.html | live demo usage}\n   */\n  colormaps(): string[] {\n    return cmapper.colormaps()\n  }\n\n  /**\n   * create a new colormap\n   * @param key - name of new colormap\n   * @param colormap - properties (Red, Green, Blue, Alpha and Indices)\n   * @see {@link https://niivue.github.io/niivue/features/colormaps.html | live demo usage}\n   */\n  addColormap(key: string, cmap: ColorMap): void {\n    cmapper.addColormap(key, cmap)\n  }\n\n  /**\n   * update the colormap of an image given its ID\n   * @param id - the ID of the NVImage\n   * @param colormap - the name of the colormap to use\n   * @example\n   * niivue.setColormap(niivue.volumes[0].id,, 'red')\n   * @see {@link https://niivue.github.io/niivue/features/colormaps.html | live demo usage}\n   */\n  setColormap(id: string, colormap: string): void {\n    const idx = this.getVolumeIndexByID(id)\n    this.volumes[idx].colormap = colormap\n    this.updateGLVolume()\n  }\n\n  // port of https://github.com/rordenlab/niimath/blob/master/src/bwlabel.c\n\n  // return voxel address given row A, column B, and slice C\n  idx(A: number, B: number, C: number, DIM: Uint32Array): number {\n    return C * DIM[0] * DIM[1] + B * DIM[0] + A\n  } // idx()\n\n  // determine if voxels below candidate voxel have already been assigned a label\n  check_previous_slice(\n    bw: Uint32Array,\n    il: Uint32Array,\n    r: number,\n    c: number,\n    sl: number,\n    dim: Uint32Array,\n    conn: number,\n    tt: Uint32Array\n  ): number {\n    // const nabo: number[] = [];\n    const nabo = new Uint32Array(27)\n    let nr_set = 0\n    if (!sl) {\n      return 0\n    }\n    const val = bw[this.idx(r, c, sl, dim)]\n    if (conn >= 6) {\n      const idx = this.idx(r, c, sl - 1, dim)\n      if (val === bw[idx]) {\n        nabo[nr_set++] = il[idx]\n      }\n    }\n    if (conn >= 18) {\n      if (r) {\n        const idx = this.idx(r - 1, c, sl - 1, dim)\n        if (val === bw[idx]) {\n          nabo[nr_set++] = il[idx]\n        }\n      }\n      if (c) {\n        const idx = this.idx(r, c - 1, sl - 1, dim)\n        if (val === bw[idx]) {\n          nabo[nr_set++] = il[idx]\n        }\n      }\n      if (r < dim[0] - 1) {\n        const idx = this.idx(r + 1, c, sl - 1, dim)\n        if (val === bw[idx]) {\n          nabo[nr_set++] = il[idx]\n        }\n      }\n      if (c < dim[1] - 1) {\n        const idx = this.idx(r, c + 1, sl - 1, dim)\n        if (val === bw[idx]) {\n          nabo[nr_set++] = il[idx]\n        }\n      }\n    }\n    if (conn === 26) {\n      if (r && c) {\n        const idx = this.idx(r - 1, c - 1, sl - 1, dim)\n        if (val === bw[idx]) {\n          nabo[nr_set++] = il[idx]\n        }\n      }\n      if (r < dim[0] - 1 && c) {\n        const idx = this.idx(r + 1, c - 1, sl - 1, dim)\n        if (val === bw[idx]) {\n          nabo[nr_set++] = il[idx]\n        }\n      }\n      if (r && c < dim[1] - 1) {\n        const idx = this.idx(r - 1, c + 1, sl - 1, dim)\n        if (val === bw[idx]) {\n          nabo[nr_set++] = il[idx]\n        }\n      }\n      if (r < dim[0] - 1 && c < dim[1] - 1) {\n        const idx = this.idx(r + 1, c + 1, sl - 1, dim)\n        if (val === bw[idx]) {\n          nabo[nr_set++] = il[idx]\n        }\n      }\n    }\n    if (nr_set) {\n      this.fill_tratab(tt, nabo, nr_set)\n      return nabo[0]\n    } else {\n      return 0\n    }\n  } // check_previous_slice()\n\n  // provisionally label all voxels in volume\n  do_initial_labelling(bw: Uint32Array, dim: Uint32Array, conn: number): [number, Uint32Array, Uint32Array] {\n    let label = 1\n    const kGrowArrayBy = 8192\n    let ttn = kGrowArrayBy\n    let tt = new Uint32Array(ttn).fill(0)\n    const il = new Uint32Array(dim[0] * dim[1] * dim[2]).fill(0)\n    const nabo = new Uint32Array(27)\n    for (let sl = 0; sl < dim[2]; sl++) {\n      for (let c = 0; c < dim[1]; c++) {\n        for (let r = 0; r < dim[0]; r++) {\n          let nr_set = 0\n          const val = bw[this.idx(r, c, sl, dim)]\n          if (val === 0) {\n            continue\n          }\n          nabo[0] = this.check_previous_slice(bw, il, r, c, sl, dim, conn, tt)\n          if (nabo[0]) {\n            nr_set += 1\n          }\n          if (conn >= 6) {\n            if (r) {\n              const idx = this.idx(r - 1, c, sl, dim)\n              if (val === bw[idx]) {\n                nabo[nr_set++] = il[idx]\n              }\n            }\n            if (c) {\n              const idx = this.idx(r, c - 1, sl, dim)\n              if (val === bw[idx]) {\n                nabo[nr_set++] = il[idx]\n              }\n            }\n          }\n          if (conn >= 18) {\n            if (c && r) {\n              const idx = this.idx(r - 1, c - 1, sl, dim)\n              if (val === bw[idx]) {\n                nabo[nr_set++] = il[idx]\n              }\n            }\n            if (c && r < dim[0] - 1) {\n              const idx = this.idx(r + 1, c - 1, sl, dim)\n              if (val === bw[idx]) {\n                nabo[nr_set++] = il[idx]\n              }\n            }\n          }\n          if (nr_set) {\n            il[this.idx(r, c, sl, dim)] = nabo[0]\n            this.fill_tratab(tt, nabo, nr_set)\n          } else {\n            il[this.idx(r, c, sl, dim)] = label\n            if (label >= ttn) {\n              ttn += kGrowArrayBy\n              const ext = new Uint32Array(ttn)\n              ext.set(tt)\n              tt = ext\n            }\n            tt[label - 1] = label\n            label++\n          }\n        }\n      }\n    }\n    for (let i = 0; i < label - 1; i++) {\n      let j = i\n      while (tt[j] !== j + 1) {\n        j = tt[j] - 1\n      }\n      tt[i] = j + 1\n    }\n    return [label - 1, tt, il]\n  } // do_initial_labelling()\n\n  // translation table unifies a region that has been assigned multiple classes\n  fill_tratab(tt: Uint32Array, nabo: Uint32Array, nr_set: number): void {\n    let cntr = 0\n    const tn = new Uint32Array(nr_set + 5).fill(0)\n    const INT_MAX = 2147483647\n    let ltn = INT_MAX\n    for (let i = 0; i < nr_set; i++) {\n      let j = nabo[i]\n      cntr = 0\n      while (tt[j - 1] !== j) {\n        j = tt[j - 1]\n        cntr++\n        if (cntr > 100) {\n          log.info('\\nOoh no!!')\n          break\n        }\n      }\n      tn[i] = j\n      ltn = Math.min(ltn, j)\n    }\n    for (let i = 0; i < nr_set; i++) {\n      tt[tn[i] - 1] = ltn\n    }\n  } // fill_tratab()\n\n  // remove any residual gaps so label numbers are dense rather than sparse\n  translate_labels(il: Uint32Array, dim: Uint32Array, tt: Uint32Array, ttn: number): [number, Uint32Array] {\n    const nvox = dim[0] * dim[1] * dim[2]\n    let ml = 0\n    const l = new Uint32Array(nvox).fill(0)\n    for (let i = 0; i < ttn; i++) {\n      ml = Math.max(ml, tt[i])\n    }\n    const fl = new Uint32Array(ml).fill(0)\n    let cl = 0\n    for (let i = 0; i < nvox; i++) {\n      if (il[i]) {\n        if (!fl[tt[il[i] - 1] - 1]) {\n          cl += 1\n          fl[tt[il[i] - 1] - 1] = cl\n        }\n        l[i] = fl[tt[il[i] - 1] - 1]\n      }\n    }\n    return [cl, l]\n  } // translate_labels()\n\n  // retain only the largest cluster for each region\n  largest_original_cluster_labels(bw: Uint32Array, cl: number, ls: Uint32Array): [number, Uint32Array] {\n    const nvox = bw.length\n    const ls2bw = new Uint32Array(cl + 1).fill(0)\n    const sumls = new Uint32Array(cl + 1).fill(0)\n    for (let i = 0; i < nvox; i++) {\n      const bwVal = bw[i]\n      const lsVal = ls[i]\n      ls2bw[lsVal] = bwVal\n      sumls[lsVal]++\n    }\n    let mxbw = 0\n    for (let i = 0; i < cl + 1; i++) {\n      const bwVal = ls2bw[i]\n      mxbw = Math.max(mxbw, bwVal)\n      // see if this is largest cluster of this bw-value\n      for (let j = 0; j < cl + 1; j++) {\n        if (j === i) {\n          continue\n        }\n        if (bwVal !== ls2bw[j]) {\n          continue\n        }\n        if (sumls[i] < sumls[j]) {\n          ls2bw[i] = 0\n        } else if (sumls[i] === sumls[j] && i < j) {\n          ls2bw[i] = 0\n        } // ties: arbitrary winner\n      }\n    }\n    const vxs = new Uint32Array(nvox).fill(0)\n    for (let i = 0; i < nvox; i++) {\n      vxs[i] = ls2bw[ls[i]]\n    }\n    return [mxbw, vxs]\n  }\n\n  // given a 3D image, return a clustered label map\n  // for an explanation and optimized C code see\n  // https://github.com/seung-lab/connected-components-3d\n  bwlabel(\n    img: Uint32Array,\n    dim: Uint32Array,\n    conn: number = 26,\n    binarize: boolean = false,\n    onlyLargestClusterPerClass: boolean = false\n  ): [number, Uint32Array] {\n    const start = Date.now()\n    const nvox = dim[0] * dim[1] * dim[2]\n    const bw = new Uint32Array(nvox).fill(0)\n    if (![6, 18, 26].includes(conn)) {\n      log.info('bwlabel: conn must be 6, 18 or 26.')\n      return [0, bw]\n    }\n    if (dim[0] < 2 || dim[1] < 2 || dim[2] < 1) {\n      log.info('bwlabel: img must be 2 or 3-dimensional')\n      return [0, bw]\n    }\n    if (binarize) {\n      for (let i = 0; i < nvox; i++) {\n        if (img[i] !== 0.0) {\n          bw[i] = 1\n        }\n      }\n    } else {\n      bw.set(img)\n    }\n    let [ttn, tt, il] = this.do_initial_labelling(bw, dim, conn)\n    if (tt === undefined) {\n      tt = new Uint32Array()\n    }\n    const [cl, ls] = this.translate_labels(il, dim, tt, ttn)\n    log.info(conn + ' neighbor clustering into ' + cl + ' regions in ' + (Date.now() - start) + 'ms')\n    if (onlyLargestClusterPerClass) {\n      const [nbw, bwMx] = this.largest_original_cluster_labels(bw, cl, ls)\n      return [nbw, bwMx]\n    }\n    return [cl, ls]\n  } // bwlabel()\n\n  async createConnectedLabelImage(\n    id: string,\n    conn: number = 26,\n    binarize: boolean = false,\n    onlyLargestClusterPerClass: boolean = false\n  ): Promise<NVImage> {\n    const idx = this.getVolumeIndexByID(id)\n    const dim = Uint32Array.from(this.volumes[idx].dims?.slice(1, 4) ?? [])\n    const img = Uint32Array.from(this.volumes[idx].img?.slice() ?? [])\n    const [mx, clusterImg] = this.bwlabel(img, dim!, conn, binarize, onlyLargestClusterPerClass)\n    const nii = this.volumes[idx].clone()\n    nii.opacity = 0.5\n    nii.colormap = 'random'\n    for (let i = 0; i < nii.img!.length; i++) {\n      nii.img![i] = clusterImg[i]!\n    }\n    nii.cal_min = 0\n    nii.cal_max = mx\n    return nii\n  }\n\n  // conform.py functions follow\n  // https://github.com/Deep-MI/FastSurfer/blob/4e76bed7b11fd7e6403ddac729059ad3842b56de/FastSurferCNN/data_loader/conform.py\n  // Licensed under the Apache License, Version 2.0 (the \"License\")\n\n  // Crop the intensity ranges to specific min and max values.\n\n  async scalecropUint8(\n    img32: Float32Array,\n    dst_min: number = 0,\n    dst_max: number = 255,\n    src_min: number,\n    scale: number\n  ): Promise<Uint8Array> {\n    const voxnum = img32.length\n    const img8 = new Uint8Array(voxnum)\n    for (let i = 0; i < voxnum; i++) {\n      let val = img32![i]\n      val = dst_min + scale * (val - src_min)\n      val = Math.max(val, dst_min)\n      val = Math.min(val, dst_max)\n      img8![i] = val\n    }\n    return img8\n  }\n\n  async scalecropFloat32(\n    img32: Float32Array,\n    dst_min: number = 0,\n    dst_max: number = 1,\n    src_min: number,\n    scale: number\n  ): Promise<Float32Array> {\n    const voxnum = img32.length\n    const img = new Float32Array(voxnum)\n    for (let i = 0; i < voxnum; i++) {\n      let val = img32![i]\n      val = dst_min + scale * (val - src_min)\n      val = Math.max(val, dst_min)\n      val = Math.min(val, dst_max)\n      img![i] = val\n    }\n    return img\n  }\n\n  // Get offset and scale of image intensities to robustly rescale to range dst_min..dst_max.\n  // Equivalent to how mri_convert conforms images.\n\n  getScale(\n    volume: NVImage,\n    dst_min: number = 0,\n    dst_max: number = 255,\n    f_low: number = 0.0,\n    f_high: number = 0.999\n  ): [number, number] {\n    let src_min = volume.global_min!\n    let src_max = volume.global_max!\n    if (volume.hdr!.datatypeCode === NiiDataType.DT_UINT8) {\n      // for compatibility with conform.py: uint8 is not transformed\n      return [src_min, 1.0]\n    }\n    if (!isFinite(f_low) || !isFinite(f_high)) {\n      if (isFinite(volume.cal_min!) && isFinite(volume.cal_max!) && volume.cal_max! > volume.cal_min!) {\n        src_min = volume.cal_min!\n        src_max = volume.cal_max!\n        const scale = (dst_max - dst_min) / (src_max - src_min)\n        log.info(' Robust Rescale:  min: ' + src_min + '  max: ' + src_max + ' scale: ' + scale)\n        console.log('Robust Rescale:  min: ' + src_min + '  max: ' + src_max + ' scale: ' + scale)\n        return [src_min, scale]\n      }\n    }\n    const img = volume.img!\n    const voxnum = volume.hdr!.dims![1] * volume.hdr!.dims![2] * volume.hdr!.dims![3]\n    if (volume.hdr!.scl_slope !== 1.0 || volume.hdr!.scl_inter !== 0.0) {\n      const srcimg = volume.img!\n      const img = new Float32Array(volume.img!.length)\n      for (let i = 0; i < voxnum; i++) {\n        img[i] = srcimg[i] * volume.hdr!.scl_slope + volume.hdr!.scl_inter\n      }\n    }\n    if (src_min < 0.0) {\n      log.warn('WARNING: Input image has value(s) below 0.0 !')\n    }\n    log.info(' Input:    min: ' + src_min + '  max: ' + src_max)\n    if (f_low === 0.0 && f_high === 1.0) {\n      return [src_min, 1.0]\n    }\n    // compute non-zeros and total vox num\n    let nz = 0\n    for (let i = 0; i < voxnum; i++) {\n      if (Math.abs(img![i]) >= 1e-15) {\n        nz++\n      }\n    }\n    // compute histogram\n    const histosize = 1000\n    const bin_size = (src_max - src_min) / histosize\n    const hist = new Array(histosize).fill(0)\n    for (let i = 0; i < voxnum; i++) {\n      const val = img[i]\n      let bin = Math.floor((val - src_min) / bin_size)\n      bin = Math.min(bin, histosize - 1)\n      hist[bin]++\n    }\n    // compute cumulative sum\n    const cs = new Array(histosize).fill(0)\n    cs[0] = hist[0]\n    for (let i = 1; i < histosize; i++) {\n      cs[i] = cs[i - 1] + hist[i]\n    }\n    // get lower limit\n    let nth = Math.floor(f_low * voxnum)\n    let idx = 0\n    while (idx < histosize) {\n      if (cs[idx] >= nth) {\n        break\n      }\n      idx++\n    }\n    const global_min = src_min\n    src_min = idx * bin_size + global_min\n    // get upper limit\n    // nth = Math.floor((1.0 - f_high2) * nz)\n    nth = voxnum - Math.floor((1.0 - f_high) * nz)\n    idx = 0\n    while (idx < histosize - 1) {\n      if (cs[idx + 1] >= nth) {\n        break\n      }\n      idx++\n    }\n    src_max = idx * bin_size + global_min\n    // scale\n    let scale = 1\n    if (src_min !== src_max) {\n      scale = (dst_max - dst_min) / (src_max - src_min)\n    }\n    log.info(' Rescale:  min: ' + src_min + '  max: ' + src_max + ' scale: ' + scale)\n    return [src_min, scale]\n  }\n\n  // Translation of nibabel mghformat.py (MIT License 2009-2019) and FastSurfer conform.py (Apache License)\n  // https://github.com/nipy/nibabel/blob/a2e5dee05cf374c22670ff9fd0d385ce366eb495/nibabel/freesurfer/mghformat.py#L30\n\n  conformVox2Vox(inDims: number[], inAffine: number[], outDim = 256, outMM = 1, toRAS = false): [mat4, mat4, mat4] {\n    const a = inAffine.flat()\n    const affine = mat4.fromValues(\n      a[0],\n      a[1],\n      a[2],\n      a[3],\n      a[4],\n      a[5],\n      a[6],\n      a[7],\n      a[8],\n      a[9],\n      a[10],\n      a[11],\n      a[12],\n      a[13],\n      a[14],\n      a[15]\n    )\n    const half = vec4.fromValues(inDims[1] / 2, inDims[2] / 2, inDims[3] / 2, 1)\n    const Pxyz_c4 = vec4.create()\n    const affineT = mat4.create()\n    mat4.transpose(affineT, affine)\n    vec4.transformMat4(Pxyz_c4, half, affineT)\n    const Pxyz_c = vec3.fromValues(Pxyz_c4[0], Pxyz_c4[1], Pxyz_c4[2])\n    // MGH format doesn't store the transform directly. Instead it's gleaned\n    // from the zooms ( delta ), direction cosines ( Mdc ), RAS centers (\n    const delta = vec3.fromValues(outMM, outMM, outMM)\n    let Mdc = mat4.fromValues(-1, 0, 0, 0, 0, 0, 1, 0, 0, -1, 0, 0, 0, 0, 0, 1)\n    if (toRAS) {\n      Mdc = mat4.fromValues(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1)\n    }\n    mat4.transpose(Mdc, Mdc)\n    const dims = vec4.fromValues(outDim, outDim, outDim, 1)\n    const MdcD = mat4.create()\n    mat4.scale(MdcD, Mdc, delta)\n    const vol_center = vec4.fromValues(dims[0], dims[1], dims[2], 1)\n    vec4.transformMat4(vol_center, vol_center, MdcD)\n    vec4.scale(vol_center, vol_center, 0.5)\n    const translate = vec3.create()\n    vec3.subtract(translate, Pxyz_c, vec3.fromValues(vol_center[0], vol_center[1], vol_center[2]))\n    const out_affine = mat4.create()\n    mat4.transpose(out_affine, MdcD)\n    out_affine[3] = translate[0]\n    out_affine[7] = translate[1]\n    out_affine[11] = translate[2]\n    const inv_out_affine = mat4.create()\n    mat4.invert(inv_out_affine, out_affine)\n    const vox2vox = mat4.create()\n    // compute vox2vox from src to trg\n    mat4.mul(vox2vox, affine, inv_out_affine)\n    // compute inverse\n    const inv_vox2vox = mat4.create()\n    mat4.invert(inv_vox2vox, vox2vox)\n    return [out_affine, vox2vox, inv_vox2vox]\n  }\n\n  // Create a binary byte array with a NIfTI format header as well as image data\n\n  async createNiftiArray(\n    dims = [256, 256, 256],\n    pixDims = [1, 1, 1],\n    affine = [1, 0, 0, -128, 0, 1, 0, -128, 0, 0, 1, -128, 0, 0, 0, 1],\n    datatypeCode = NiiDataType.DT_UINT8,\n    img = new Uint8Array()\n  ): Promise<Uint8Array> {\n    return await NVImage.createNiftiArray(dims, pixDims, affine, datatypeCode, img)\n  }\n\n  // Convert a binary byte array with a NIfTI image to NiiVue's internal NVImage object\n\n  async niftiArray2NVImage(bytes = new Uint8Array()): Promise<NVImage> {\n    return await NVImage.loadFromUrl({ url: bytes })\n  }\n\n  // Read a NIfTI file and convert as NiiVue internal NVImage: AddVolume this does not load image to GPU\n\n  async loadFromUrl(fnm: string): Promise<NVImage> {\n    return await NVImage.loadFromUrl({ url: fnm })\n  }\n\n  // Translation of FastSurfer conform.py (Apache License)\n  // Reslice an image to an isotropic 1mm with dimensions of 1x1x1mm\n  // The original volume is translated to be in the center of the new volume\n  // Interpolation is linear (default) or nearest neighbor\n  // asFloat32 determines if output is Float32 with range 0..255 or Uint8 with range 0..255\n\n  /**\n   * FreeSurfer-style conform reslices any image to a 256x256x256 volume with 1mm voxels\n   * @param volume - input volume to be re-oriented, intensity-scaled and resliced\n   * @param toRAS - reslice to row, column slices to right-anterior-superior not left-inferior-anterior (default false).\n   * @param isLinear - reslice with linear rather than nearest-neighbor interpolation (default true).\n   * @param asFloat32 - use Float32 datatype rather than Uint8 (default false).\n   * @param isRobustMinMax - clamp intensity with robust min max (~2%..98%) instead of FreeSurfer (0%..99.99%) (default false).\n   * @see {@link https://niivue.github.io/niivue/features/torso.html | live demo usage}\n   */\n  async conform(\n    volume: NVImage,\n    toRAS = false,\n    isLinear: boolean = true,\n    asFloat32 = false,\n    isRobustMinMax = false\n  ): Promise<NVImage> {\n    const outDim = 256\n    const outMM = 1\n    const obj = this.conformVox2Vox(volume.hdr!.dims!, volume.hdr!.affine.flat(), outDim, outMM, toRAS)\n    const out_affine = obj[0]\n    const inv_vox2vox = obj[2]\n    const out_nvox = outDim * outDim * outDim\n    const out_img = new Float32Array(out_nvox)\n    const in_img = new Float32Array(volume.img!)\n    const in_nvox = volume.hdr!.dims![1] * volume.hdr!.dims![2] * volume.hdr!.dims![3]\n    if (volume.hdr!.scl_slope !== 1.0 || volume.hdr!.scl_inter !== 0.0) {\n      for (let i = 0; i < in_nvox; i++) {\n        in_img[i] = in_img[i] * volume.hdr!.scl_slope + volume.hdr!.scl_inter\n      }\n    }\n    const dimX = volume.hdr!.dims![1]\n    const dimY = volume.hdr!.dims![2]\n    const dimZ = volume.hdr!.dims![3]\n    const dimXY = dimX * dimY\n    let i = -1\n    function voxidx(vx: number, vy: number, vz: number): number {\n      return vx + vy * dimX + vz * dimXY\n    }\n    const inv_vox2vox0 = inv_vox2vox[0]\n    const inv_vox2vox4 = inv_vox2vox[4]\n    const inv_vox2vox8 = inv_vox2vox[8]\n    if (isLinear) {\n      for (let z = 0; z < outDim; z++) {\n        for (let y = 0; y < outDim; y++) {\n          // loop hoisting\n          const ixYZ = y * inv_vox2vox[1] + z * inv_vox2vox[2] + inv_vox2vox[3]\n          const iyYZ = y * inv_vox2vox[5] + z * inv_vox2vox[6] + inv_vox2vox[7]\n          const izYZ = y * inv_vox2vox[9] + z * inv_vox2vox[10] + inv_vox2vox[11]\n          for (let x = 0; x < outDim; x++) {\n            const ix = x * inv_vox2vox0 + ixYZ\n            const iy = x * inv_vox2vox4 + iyYZ\n            const iz = x * inv_vox2vox8 + izYZ\n            const fx = Math.floor(ix)\n            const fy = Math.floor(iy)\n            const fz = Math.floor(iz)\n            i++\n            if (fx < 0 || fy < 0 || fz < 0) {\n              continue\n            }\n            // n.b. cx = fx + 1 unless fx is an integer\n            // no performance benefits noted changing ceil to + 1\n            const cx = Math.ceil(ix)\n            const cy = Math.ceil(iy)\n            const cz = Math.ceil(iz)\n            if (cx >= dimX || cy >= dimY || cz >= dimZ) {\n              continue\n            }\n            // residuals\n            const rcx = ix - fx\n            const rcy = iy - fy\n            const rcz = iz - fz\n            const rfx = 1 - rcx\n            const rfy = 1 - rcy\n            const rfz = 1 - rcz\n            const fff = voxidx(fx, fy, fz)\n            let vx = 0\n            vx += in_img[fff] * rfx * rfy * rfz\n            vx += in_img[fff + dimXY] * rfx * rfy * rcz\n            vx += in_img[fff + dimX] * rfx * rcy * rfz\n            vx += in_img[fff + dimX + dimXY] * rfx * rcy * rcz\n            vx += in_img[fff + 1] * rcx * rfy * rfz\n            vx += in_img[fff + 1 + dimXY] * rcx * rfy * rcz\n            vx += in_img[fff + 1 + dimX] * rcx * rcy * rfz\n            vx += in_img[fff + 1 + dimX + dimXY] * rcx * rcy * rcz\n            out_img[i] = vx\n          } // z\n        } // y\n      } // x\n    } else {\n      // nearest neighbor interpolation\n      for (let z = 0; z < outDim; z++) {\n        for (let y = 0; y < outDim; y++) {\n          // loop hoisting\n          const ixYZ = y * inv_vox2vox[1] + z * inv_vox2vox[2] + inv_vox2vox[3]\n          const iyYZ = y * inv_vox2vox[5] + z * inv_vox2vox[6] + inv_vox2vox[7]\n          const izYZ = y * inv_vox2vox[9] + z * inv_vox2vox[10] + inv_vox2vox[11]\n          for (let x = 0; x < outDim; x++) {\n            const ix = Math.round(x * inv_vox2vox0 + ixYZ)\n            const iy = Math.round(x * inv_vox2vox4 + iyYZ)\n            const iz = Math.round(x * inv_vox2vox8 + izYZ)\n            i++\n            if (ix < 0 || iy < 0 || iz < 0) {\n              continue\n            }\n            if (ix >= dimX || iy >= dimY || iz >= dimZ) {\n              continue\n            }\n            out_img[i] = in_img[voxidx(ix, iy, iz)]\n          } // z\n        } // y\n      } // x\n    } // if linear else nearest\n    // Unlike mri_convert -c, we first interpolate (float image), and then rescale\n    // to uchar. mri_convert is doing it the other way around. However, we compute\n    // the scale factor from the input to increase similarity.\n    const src_min = 0\n    const scale = 0\n    let f_low = 0\n    if (isRobustMinMax) {\n      f_low = NaN\n    }\n    let bytes = new Uint8Array()\n    if (asFloat32) {\n      const gs = await this.getScale(volume, 0, 1, f_low)\n      const out_img32 = await this.scalecropFloat32(out_img, 0, 1, gs[0], gs[1])\n      bytes = await this.createNiftiArray(\n        [outDim, outDim, outDim],\n        [outMM, outMM, outMM],\n        Array.from(out_affine),\n        NiiDataType.DT_FLOAT32,\n        new Uint8Array(out_img32.buffer)\n      )\n    } else {\n      const gs = await this.getScale(volume, 0, 255, f_low)\n      const out_img8 = await this.scalecropUint8(out_img, 0, 255, gs[0], gs[1])\n      bytes = await this.createNiftiArray(\n        [outDim, outDim, outDim],\n        [outMM, outMM, outMM],\n        Array.from(out_affine),\n        2,\n        out_img8\n      )\n    }\n    const nii = await this.niftiArray2NVImage(bytes)\n    return nii\n  }\n\n  /**\n   * darken crevices and brighten corners when 3D rendering drawings.\n   * @param amount - amount of ambient occlusion (default 0.4)\n   * @see {@link https://niivue.github.io/niivue/features/torso.html | live demo usage}\n   */\n  setRenderDrawAmbientOcclusion(ao: number): void {\n    if (!this.renderShader) {\n      throw new Error('renderShader undefined')\n    }\n\n    this.renderDrawAmbientOcclusion = ao\n    this.renderShader.use(this.gl)\n    this.gl.uniform1fv(this.renderShader.uniforms.renderDrawAmbientOcclusion, [this.renderDrawAmbientOcclusion, 1.0])\n    this.drawScene()\n  }\n\n  // compatibility alias for NiiVue < 0.35\n  setColorMap(id: string, colormap: string): void {\n    this.setColormap(id, colormap)\n  }\n\n  /**\n   * use given color map for negative voxels in image\n   * @param id - the ID of the NVImage\n   * @param colormapNegative - the name of the colormap to use\n   * @example\n   * niivue = new Niivue()\n   * niivue.setColormapNegative(niivue.volumes[1].id,\"winter\");\n   * @see {@link https://niivue.github.io/niivue/features/mosaics2.html | live demo usage}\n   */\n  setColormapNegative(id: string, colormapNegative: string): void {\n    const idx = this.getVolumeIndexByID(id)\n    this.volumes[idx].colormapNegative = colormapNegative\n    this.updateGLVolume()\n  }\n\n  /**\n   * modulate intensity of one image based on intensity of another\n   * @param idTarget - the ID of the NVImage to be biased\n   * @param idModulation - the ID of the NVImage that controls bias (empty string to disable modulation)\n   * @param modulateAlpha - does the modulation influence alpha transparency (values greater than 1).\n   * @example niivue.setModulationImage(niivue.volumes[0].id, niivue.volumes[1].id);\n   * @see {@link https://niivue.github.io/niivue/features/modulate.html | live demo scalar usage}\n   * @see {@link https://niivue.github.io/niivue/features/modulateAfni.html | live demo usage}\n   */\n  setModulationImage(idTarget: string, idModulation: string, modulateAlpha = 0): void {\n    // to set:\n    // nv1.setModulationImage(nv1.volumes[0].id, nv1.volumes[1].id);\n    // to clear:\n    // nv1.setModulationImage(nv1.volumes[0].id, '');\n    const idxTarget = this.getVolumeIndexByID(idTarget)\n    // idxModulation can be null or the index of the modulation image\n    let idxModulation: number | null = null\n    if (idModulation.length > 0) {\n      idxModulation = this.getVolumeIndexByID(idModulation)\n    }\n    this.volumes[idxTarget].modulationImage = idxModulation\n    this.volumes[idxTarget].modulateAlpha = modulateAlpha\n    this.updateGLVolume()\n  }\n\n  /**\n   * adjust screen gamma. Low values emphasize shadows but can appear flat, high gamma hides shadow details.\n   * @param gamma - selects luminance, default is 1\n   * @example niivue.setGamma(1.0);\n   * @see {@link https://niivue.github.io/niivue/features/colormaps.html | live demo usage}\n   */\n  setGamma(gamma = 1.0): void {\n    this.scene.gamma = gamma\n    cmapper.gamma = gamma\n    this.updateGLVolume()\n  }\n\n  /** Load all volumes for image opened with `limitFrames4D`, the user can also click the `...` on a 4D timeline to load deferred volumes\n   * @param id - the ID of the 4D NVImage\n   **/\n  async loadDeferred4DVolumes(id: string): Promise<void> {\n    const idx = this.getVolumeIndexByID(id)\n    const volume = this.volumes[idx]\n    if (volume.nTotalFrame4D! <= volume.nFrame4D!) {\n      return\n    }\n    // only load image data: do not change other settings like contrast\n    // check if volume has the property fileObject\n    let v\n    if (volume.fileObject) {\n      // if it does, load the image data from the fileObject\n      v = await NVImage.loadFromFile({ file: volume.fileObject })\n    } else {\n      v = await NVImage.loadFromUrl({ url: volume.url })\n    }\n    // if v is not undefined, then we have successfully loaded the image data\n    if (v) {\n      volume.img = v.img!.slice()\n      volume.nTotalFrame4D = v.nTotalFrame4D\n      volume.nFrame4D = v.nFrame4D\n      this.updateGLVolume()\n    }\n  }\n\n  /**\n   * show desired 3D volume from 4D time series\n   * @param id - the ID of the 4D NVImage\n   * @param frame4D - frame to display (indexed from zero)\n   * @example nv1.setFrame4D(nv1.volumes[0].id, 42);\n   * @see {@link https://niivue.github.io/niivue/features/timeseries.html | live demo usage}\n   */\n  setFrame4D(id: string, frame4D: number): void {\n    const idx = this.getVolumeIndexByID(id)\n    const volume = this.volumes[idx]\n    // don't allow indexing timepoints beyond the max number of time points.\n    if (frame4D > volume.nFrame4D! - 1) {\n      frame4D = volume.nFrame4D! - 1\n    }\n    // don't allow negative timepoints\n    if (frame4D < 0) {\n      frame4D = 0\n    }\n    if (frame4D === volume.frame4D) {\n      return\n    } // no change\n    volume.frame4D = frame4D\n    this.updateGLVolume()\n    this.onFrameChange(volume, frame4D)\n    this.createOnLocationChange()\n  }\n\n  /**\n   * determine active 3D volume from 4D time series\n   * @param id - the ID of the 4D NVImage\n   * @returns currently selected volume (indexed from 0)\n   * @example nv1.getFrame4D(nv1.volumes[0].id);\n   * @see {@link https://niivue.github.io/niivue/features/timeseries.html | live demo usage}\n   */\n  getFrame4D(id: string): number {\n    const idx = this.getVolumeIndexByID(id)\n    return this.volumes[idx].frame4D!\n  }\n\n  // not included in public docs\n  colormapFromKey(name: string): ColorMap {\n    return cmapper.colormapFromKey(name)\n  }\n\n  // not included in public docs\n  colormap(lutName = '', isInvert = false): Uint8ClampedArray {\n    return cmapper.colormap(lutName, isInvert)\n  }\n\n  // create TEXTURE1 a 2D bitmap with a nCol columns RGBA and nRow rows\n  // note a single volume can have two colormaps (positive and negative)\n  // https://github.com/niivue/niivue/blob/main/docs/development-notes/webgl.md\n  createColormapTexture(texture: WebGLTexture | null = null, nRow = 0, nCol = 256): WebGLTexture | null {\n    if (texture !== null) {\n      this.gl.deleteTexture(texture)\n    }\n    if (nRow < 1 || nCol < 1) {\n      return null\n    }\n    texture = this.gl.createTexture()\n    this.gl.activeTexture(TEXTURE1_COLORMAPS)\n    this.gl.bindTexture(this.gl.TEXTURE_2D, texture)\n    this.gl.texStorage2D(this.gl.TEXTURE_2D, 1, this.gl.RGBA8, nCol, nRow)\n    this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_MIN_FILTER, this.gl.LINEAR)\n    this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_MAG_FILTER, this.gl.LINEAR)\n    // this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_MIN_FILTER, this.gl.NEAREST);\n    // this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_MAG_FILTER, this.gl.NEAREST);\n    this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_WRAP_R, this.gl.CLAMP_TO_EDGE)\n    this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_WRAP_S, this.gl.CLAMP_TO_EDGE)\n    this.gl.pixelStorei(this.gl.UNPACK_ALIGNMENT, 1)\n    return texture\n  }\n\n  addColormapList(nm = '', mn = NaN, mx = NaN, alpha = false, neg = false, vis = true, inv = false): void {\n    // if (nm.length < 1) return;\n    // issue583 unused colormap: e.g. a volume without a negative colormap\n    if (nm.length < 1) {\n      vis = false\n    }\n    this.colormapLists.push({\n      name: nm,\n      min: mn,\n      max: mx,\n      alphaThreshold: alpha,\n      negative: neg,\n      visible: vis,\n      invert: inv\n    })\n  }\n\n  // not included in public docs\n  refreshColormaps(): this | undefined {\n    this.colormapLists = [] // one entry per colorbar: min, max, tic\n    if (this.volumes.length < 1 && this.meshes.length < 1) {\n      return\n    }\n    const nVol = this.volumes.length\n    if (nVol > 0) {\n      // add colorbars for volumes\n      for (let i = 0; i < nVol; i++) {\n        const volume = this.volumes[i]\n        const neg = negMinMax(volume.cal_min!, volume.cal_max!, volume.cal_minNeg, volume.cal_maxNeg)\n        // add negative colormaps BEFORE positive ones: we draw them in order from left to right\n        this.addColormapList(\n          volume.colormapNegative,\n          neg[0],\n          neg[1],\n          volume.alphaThreshold !== undefined,\n          true,\n          volume.colorbarVisible,\n          volume.colormapInvert\n        )\n        this.addColormapList(\n          volume.colormap,\n          volume.cal_min,\n          volume.cal_max,\n          volume.alphaThreshold !== undefined,\n          false,\n          volume.colorbarVisible,\n          volume.colormapInvert\n        )\n      }\n    }\n    const nmesh = this.meshes.length\n    if (nmesh > 0) {\n      // add colorbars for volumes\n      for (let i = 0; i < nmesh; i++) {\n        const mesh = this.meshes[i]\n        if (!mesh.colorbarVisible) {\n          continue\n        }\n        const nlayers = mesh.layers.length\n        if ('edgeColormap' in mesh && 'edges' in mesh && mesh.edges !== undefined) {\n          const neg = negMinMax(mesh.edgeMin!, mesh.edgeMax!, NaN, NaN)\n          this.addColormapList(mesh.edgeColormapNegative, neg[0], neg[1], false, true, true, mesh.colormapInvert)\n          //  alpha = false,\n          this.addColormapList(mesh.edgeColormap, mesh.edgeMin, mesh.edgeMax, false, false, true, mesh.colormapInvert)\n        }\n        if (nlayers < 1) {\n          continue\n        }\n        for (let j = 0; j < nlayers; j++) {\n          const layer = this.meshes[i].layers[j]\n          if (!layer.colorbarVisible) {\n            continue\n          }\n          if (layer.colormap.length < 1) {\n            continue\n          }\n          const neg = negMinMax(layer.cal_min, layer.cal_max, layer.cal_minNeg, layer.cal_maxNeg)\n          this.addColormapList(\n            layer.colormapNegative,\n            neg[0],\n            neg[1],\n            layer.alphaThreshold,\n            true, // neg\n            true, // vis\n            layer.colormapInvert\n          )\n          this.addColormapList(\n            layer.colormap,\n            layer.cal_min,\n            layer.cal_max,\n            layer.alphaThreshold,\n            false, // neg\n            true, // vis\n            layer.colormapInvert\n          )\n        }\n      }\n    }\n    const nMaps = this.colormapLists.length\n    if (nMaps < 1) {\n      return\n    }\n    this.colormapTexture = this.createColormapTexture(this.colormapTexture, nMaps + 1)\n    let luts: Uint8ClampedArray = new Uint8ClampedArray()\n    function addColormap(lut: number[]): void {\n      const c = new Uint8ClampedArray(luts.length + lut.length)\n      c.set(luts)\n      c.set(lut, luts.length)\n      luts = c\n    }\n    for (let i = 0; i < nMaps; i++) {\n      addColormap(Array.from(this.colormap(this.colormapLists[i].name, this.colormapLists[i].invert)))\n    }\n    addColormap(Array.from(this.drawLut.lut))\n    this.gl.texSubImage2D(this.gl.TEXTURE_2D, 0, 0, 0, 256, nMaps + 1, this.gl.RGBA, this.gl.UNSIGNED_BYTE, luts)\n    return this\n  }\n\n  // not included in public docs\n  sliceScale(forceVox = false): SliceScale {\n    let dimsMM = this.screenFieldOfViewMM(SLICE_TYPE.AXIAL)\n    if (forceVox) {\n      dimsMM = this.screenFieldOfViewVox(SLICE_TYPE.AXIAL)\n    }\n    const longestAxis = Math.max(dimsMM[0], Math.max(dimsMM[1], dimsMM[2]))\n    const volScale = [dimsMM[0] / longestAxis, dimsMM[1] / longestAxis, dimsMM[2] / longestAxis]\n    if (!this.back?.dims) {\n      throw new Error('back.dims undefined')\n    }\n    const vox = [this.back.dims[1], this.back.dims[2], this.back.dims[3]]\n    return { volScale, vox, longestAxis, dimsMM }\n  }\n\n  // return tile at canvas coordinate(x,y)\n  tileIndex(x: number, y: number): number {\n    for (let i = 0; i < this.screenSlices.length; i++) {\n      const ltwh = this.screenSlices[i].leftTopWidthHeight\n      if (x > ltwh[0] && y > ltwh[1] && x < ltwh[0] + ltwh[2] && y < ltwh[1] + ltwh[3]) {\n        return i\n      }\n    }\n    return -1 // mouse position not in rendering tile\n  }\n\n  // not included in public docs\n  // report if screen space coordinates correspond with a 3D rendering\n  inRenderTile(x: number, y: number): number {\n    const idx = this.tileIndex(x, y)\n    if (idx >= 0 && this.screenSlices[idx].axCorSag === SLICE_TYPE.RENDER) {\n      return idx\n    }\n    return -1 // mouse position not in rendering tile\n  }\n\n  // not included in public docs\n  // if clip plane is active, change depth of clip plane\n  // otherwise, set zoom factor for rendering size\n  sliceScroll3D(posChange = 0): void {\n    if (posChange === 0) {\n      return\n    }\n    // n.b. clip plane only influences voxel-based volumes, so zoom is only action for meshes\n    if (this.volumes.length > 0 && this.scene.clipPlaneDepthAziElev[0] < 1.8) {\n      // clipping mode: change clip plane depth\n      // if (this.scene.clipPlaneDepthAziElev[0] > 1.8) return;\n      const depthAziElev = this.scene.clipPlaneDepthAziElev.slice()\n      // bound clip sqrt(3) = 1.73\n      if (posChange > 0) {\n        depthAziElev[0] = Math.min(1.5, depthAziElev[0] + 0.025)\n      }\n      if (posChange < 0) {\n        depthAziElev[0] = Math.max(-1.5, depthAziElev[0] - 0.025)\n      } // Math.max(-1.7,\n      if (depthAziElev[0] !== this.scene.clipPlaneDepthAziElev[0]) {\n        this.scene.clipPlaneDepthAziElev = depthAziElev\n        return this.setClipPlane(this.scene.clipPlaneDepthAziElev)\n      }\n      return\n    }\n    if (posChange > 0) {\n      this.scene.volScaleMultiplier = Math.min(2.0, this.scene.volScaleMultiplier * 1.1)\n    }\n    if (posChange < 0) {\n      this.scene.volScaleMultiplier = Math.max(0.5, this.scene.volScaleMultiplier * 0.9)\n    }\n    this.drawScene()\n  }\n\n  // not included in public docs\n  // if a thumbnail is loaded: close thumbnail and release memory\n  deleteThumbnail(): void {\n    if (!this.bmpTexture) {\n      return\n    }\n    this.gl.deleteTexture(this.bmpTexture)\n    this.bmpTexture = null\n    this.thumbnailVisible = false\n  }\n\n  // not included in public docs\n  inGraphTile(x: number, y: number): boolean {\n    if (this.graph.opacity <= 0 || this.volumes.length < 1 || this.volumes[0].nFrame4D! < 1 || !this.graph.plotLTWH) {\n      return false\n    }\n    if (this.graph.plotLTWH[2] < 1 || this.graph.plotLTWH[3] < 1) {\n      return false\n    }\n    // this.graph.LTWH is tile\n    // this.graph.plotLTWH is body of plot\n    const pos = [(x - this.graph.LTWH[0]) / this.graph.LTWH[2], (y - this.graph.LTWH[1]) / this.graph.LTWH[3]]\n\n    return pos[0] > 0 && pos[1] > 0 && pos[0] <= 1 && pos[1] <= 1\n  }\n\n  // update drawBitmap if it differs from clickTosegmentBitmap\n  updateBitmapFromClickToSegment(): void {\n    if (this.clickToSegmentGrowingBitmap === null) {\n      return\n    }\n    if (this.drawBitmap === null) {\n      return\n    }\n    if (this.clickToSegmentGrowingBitmap.length !== this.drawBitmap.length) {\n      return\n    }\n    const nvx = this.drawBitmap.length\n    for (let i = 0; i < nvx; i++) {\n      this.drawBitmap[i] = this.clickToSegmentGrowingBitmap[i]\n    }\n  }\n\n  sumBitmap(img: Uint8Array): number {\n    let sum = 0\n    for (let i = 0; i < img.length; i++) {\n      sum += img[i]\n    }\n    return sum\n  }\n\n  // not included in public docs\n  // handle mouse click event on canvas\n  mouseClick(x: number, y: number, posChange = 0, isDelta = true): void {\n    x *= this.uiData.dpr!\n    y *= this.uiData.dpr!\n    // var posNow;\n    // var posFuture;\n    this.canvas!.focus()\n    if (this.thumbnailVisible) {\n      // we will simply hide the thmubnail\n      // use deleteThumbnail() to close the thumbnail and free resources\n      // this.gl.deleteTexture(this.bmpTexture);\n      // this.bmpTexture = null;\n      this.thumbnailVisible = false\n      // the thumbnail is now released, do something profound: actually load the images\n      Promise.all([this.loadVolumes(this.deferredVolumes), this.loadMeshes(this.deferredMeshes)]).catch((e) => {\n        throw e\n      })\n      return\n    }\n    if (this.inGraphTile(x, y)) {\n      if (!this.graph.plotLTWH) {\n        throw new Error('plotLTWH undefined')\n      }\n      const pos = [\n        (x - this.graph.plotLTWH[0]) / this.graph.plotLTWH[2],\n        (y - this.graph.plotLTWH[1]) / this.graph.plotLTWH[3]\n      ]\n\n      if (pos[0] > 0 && pos[1] > 0 && pos[0] <= 1 && pos[1] <= 1) {\n        const vol = Math.round(pos[0] * (this.volumes[0].nFrame4D! - 1))\n        // this.graph.selectedColumn = vol;\n        this.setFrame4D(this.volumes[0].id, vol)\n        return\n      }\n      if (pos[0] > 0.5 && pos[1] > 1.0) {\n        // load full 4D series if user clicks on lower right of plot tile\n        this.loadDeferred4DVolumes(this.volumes[0].id).catch((e) => {\n          throw e\n        })\n      }\n      return\n    }\n    if (this.inRenderTile(x, y) >= 0) {\n      this.sliceScroll3D(posChange)\n      this.drawScene() // TODO: twice?\n      return\n    }\n    if (this.screenSlices.length < 1 || this.gl.canvas.height < 1 || this.gl.canvas.width < 1) {\n      return\n    }\n    // mouse click X,Y in screen coordinates, origin at top left\n    // webGL clip space L,R,T,B = [-1, 1, 1, 1]\n    // n.b. webGL Y polarity reversed\n    // https://webglfundamentals.org/webgl/lessons/webgl-fundamentals.html\n    for (let i = 0; i < this.screenSlices.length; i++) {\n      const axCorSag = this.screenSlices[i].axCorSag\n      if (this.drawPenAxCorSag >= 0 && this.drawPenAxCorSag !== axCorSag) {\n        continue\n      } // if mouse is drawing on axial slice, ignore any entry to coronal slice\n      if (axCorSag > SLICE_TYPE.SAGITTAL) {\n        continue\n      }\n      let texFrac = this.screenXY2TextureFrac(x, y, i, false)\n      if (texFrac[0] < 0) {\n        continue\n      } // click not on slice i\n      // if (true) {\n      // user clicked on slice i\n      if (!isDelta) {\n        this.scene.crosshairPos[2 - axCorSag] = posChange\n        this.drawScene()\n        return\n      }\n      // scrolling... not mouse\n      if (posChange !== 0) {\n        let posNeg = 1\n        if (posChange < 0) {\n          posNeg = -1\n        }\n        const xyz = [0, 0, 0]\n        xyz[2 - axCorSag] = posNeg\n        this.moveCrosshairInVox(xyz[0], xyz[1], xyz[2])\n        this.drawScene()\n        this.createOnLocationChange(axCorSag)\n        return\n      }\n      if (this.opts.isForceMouseClickToVoxelCenters) {\n        this.scene.crosshairPos = vec3.clone(this.vox2frac(this.frac2vox(texFrac)))\n      } else {\n        this.scene.crosshairPos = vec3.clone(texFrac)\n      }\n      if (this.opts.drawingEnabled) {\n        // drawing done in voxels\n        let pt = this.frac2vox(this.scene.crosshairPos) as [number, number, number]\n        // if click-to-segment enabled\n        if (this.opts.clickToSegment) {\n          texFrac = this.screenXY2TextureFrac(this.clickToSegmentXY[0], this.clickToSegmentXY[1], i, false)\n          pt = this.frac2vox(texFrac) as [number, number, number]\n          let diff = 0\n          let threshold = this.opts.clickToSegmentPercent + diff\n          if (this.uiData.mousedown) {\n            // get percent difference between current x, y, and clickToSegmentXY\n            const xDiff = (this.clickToSegmentXY[0] - x) / this.gl.canvas.width\n            const yDiff = (this.clickToSegmentXY[1] - y) / this.gl.canvas.height\n            diff = Math.max(Math.abs(xDiff), Math.abs(yDiff))\n            threshold = this.opts.clickToSegmentPercent + diff\n          }\n          // get voxel value of pt\n          let voxelIntensity = this.back.getValue(pt[0], pt[1], pt[2])\n          // if clickToSegmentAutoIntensity, then calculate if we need to flood fill\n          // in a bright or dark region based on the intensity of the clicked voxel,\n          // and where it falls in the range of cal_min and cal_max.\n          // !important! If this option is true, then it will ignore the boolean value of\n          // clickToSegmentBright supplied by the user\n          if (this.opts.clickToSegmentAutoIntensity) {\n            if (threshold !== 0) {\n              if (voxelIntensity === 0) {\n                voxelIntensity = 0.01\n              }\n              this.opts.clickToSegmentIntensityMax = voxelIntensity * (1 + threshold)\n              this.opts.clickToSegmentIntensityMin = voxelIntensity * (1 - threshold)\n            }\n            // if voxel intensity is greater than the midpoint of cal_min and cal_max,\n            // then flood fill in a bright region\n            if (voxelIntensity > (this.back.cal_min + this.back.cal_max) * 0.5) {\n              this.opts.clickToSegmentBright = true\n            } else {\n              // else flood fill in a dark region\n              this.opts.clickToSegmentBright = false\n            }\n          }\n          // set brightOrDark now, if clickToSegmentAutoBrightOrDark is false,\n          // then brightOrDark will be set to the value of clickToSegmentBright supplied by the user\n          const brightOrDark = this.opts.clickToSegmentBright ? Number.POSITIVE_INFINITY : Number.NEGATIVE_INFINITY\n          this.drawPenAxCorSag = axCorSag\n          if (this.drawPenAxCorSag === SLICE_TYPE.AXIAL) {\n            // get voxel penSize for the current slice, but what if pixDims are not isotropic?\n            // we will use the smallest pixDim for the current slice\n            const pixDims = [this.back.pixDimsRAS[0], this.back.pixDimsRAS[1]]\n            const minPixDim = Math.min(...pixDims)\n            this.opts.penSize = Math.ceil(this.opts.clickToSegmentRadius / minPixDim)\n          } else if (this.drawPenAxCorSag === SLICE_TYPE.CORONAL) {\n            const pixDims = [this.back.pixDimsRAS[0], this.back.pixDimsRAS[2]]\n            const minPixDim = Math.min(...pixDims)\n            this.opts.penSize = Math.ceil(this.opts.clickToSegmentRadius / minPixDim)\n          } else if (this.drawPenAxCorSag === SLICE_TYPE.SAGITTAL) {\n            const pixDims = [this.back.pixDimsRAS[1], this.back.pixDimsRAS[2]]\n            const minPixDim = Math.min(...pixDims)\n            this.opts.penSize = Math.ceil(this.opts.clickToSegmentRadius / minPixDim)\n          }\n          // draw the point at the cursor using the penSize to set the\n          // seed for the flood fill\n          this.drawPt(pt[0], pt[1], pt[2], this.opts.penValue)\n\n          if (diff !== 0) {\n            this.clickToSegmentIsGrowing = true\n            this.clickToSegmentGrowingBitmap = this.drawBitmap.slice()\n          } else {\n            this.clickToSegmentIsGrowing = false\n          }\n\n          // do flood fill\n          this.drawFloodFill(\n            [pt[0], pt[1], pt[2]],\n            0,\n            brightOrDark,\n            this.opts.clickToSegmentIntensityMin,\n            this.opts.clickToSegmentIntensityMax,\n            this.opts.floodFillNeighbors,\n            this.opts.clickToSegmentMaxDistanceMM,\n            this.opts.clickToSegmentIs2D\n          )\n          // draw the scene so we see the changes\n          this.drawScene()\n          this.createOnLocationChange(axCorSag)\n          if (this.clickToSegmentIsGrowing) {\n            // don't get descriptive stats if the user\n            // is still growing the segmented region\n            return\n          }\n          // get the volume of the segmented region if the user is not growing the region\n          const info = this.getDescriptives({\n            layer: 0,\n            masks: [],\n            drawingIsMask: true\n          })\n          this.onClickToSegment({ mL: info.volumeML, mm3: info.volumeMM3 })\n          return\n        }\n        if (!isFinite(this.opts.penValue) || this.opts.penValue < 0 || Object.is(this.opts.penValue, -0)) {\n          if (!isFinite(this.opts.penValue)) {\n            // NaN = grow based on cluster intensity , Number.POSITIVE_INFINITY  = grow based on cluster intensity or brighter , Number.NEGATIVE_INFINITY = grow based on cluster intensity or darker\n            this.drawFloodFill(pt, 0, this.opts.penValue, NaN, NaN, this.opts.floodFillNeighbors)\n          } else {\n            this.drawFloodFill(\n              pt,\n              Math.abs(this.opts.penValue),\n              this.opts.penValue,\n              NaN,\n              NaN,\n              this.opts.floodFillNeighbors\n            )\n          }\n          return\n        }\n        if (isNaN(this.drawPenLocation[0])) {\n          this.drawPenAxCorSag = axCorSag\n          this.drawPenFillPts = []\n          this.drawPt(...pt, this.opts.penValue)\n        } else {\n          if (\n            pt[0] === this.drawPenLocation[0] &&\n            pt[1] === this.drawPenLocation[1] &&\n            pt[2] === this.drawPenLocation[2]\n          ) {\n            return\n          }\n          this.drawPenLine(pt, this.drawPenLocation, this.opts.penValue)\n        }\n        this.drawPenLocation = pt\n        if (this.opts.isFilledPen) {\n          this.drawPenFillPts.push(pt)\n        }\n        this.refreshDrawing(false)\n      }\n      this.drawScene()\n      this.createOnLocationChange(axCorSag)\n      return\n      // } else {\n      //   //if click in slice i\n      //   // if x and y are null, likely due to a slider widget sending the posChange (no mouse info in that case)\n      //   if (x === null && y === null) {\n      //     this.scene.crosshairPos[2 - axCorSag] = posChange;\n      //     this.drawScene();\n      //     return;\n      //   }\n      // }\n    }\n  }\n\n  // not included in public docs\n  // draw 10cm ruler on a 2D tile\n  drawRuler(): void {\n    let fovMM: number[] = []\n    let ltwh: number[] = []\n    for (let i = 0; i < this.screenSlices.length; i++) {\n      if (this.screenSlices[i].axCorSag === SLICE_TYPE.RENDER) {\n        continue\n      }\n      // let ltwh = this.screenSlices[i].leftTopWidthHeight;\n      if (this.screenSlices[i].fovMM.length > 1) {\n        ltwh = this.screenSlices[i].leftTopWidthHeight\n        fovMM = this.screenSlices[i].fovMM\n        break\n      }\n    }\n    if (ltwh.length < 4) {\n      return\n    }\n    const frac10cm = 100.0 / fovMM[0]\n    const pix10cm = frac10cm * ltwh[2]\n    const pix1cm = Math.max(Math.round(pix10cm * 0.1), 2)\n    const pixLeft = Math.floor(ltwh[0] + 0.5 * ltwh[2] - 0.5 * pix10cm)\n    const thick = Number(this.opts.rulerWidth)\n    const pixTop = Math.floor(ltwh[1] + ltwh[3] - pix1cm) + 0.5 * thick\n    const startXYendXY = [pixLeft, pixTop, pixLeft + pix10cm, pixTop]\n    let outlineColor = [0, 0, 0, 1]\n    if (this.opts.rulerColor[0] + this.opts.rulerColor[1] + this.opts.rulerColor[2] < 0.8) {\n      outlineColor = [1, 1, 1, 1]\n    }\n    this.drawRuler10cm(startXYendXY, outlineColor, thick + 1)\n    this.drawRuler10cm(startXYendXY, this.opts.rulerColor, thick)\n  }\n\n  // not included in public docs\n  // draw 10cm ruler at desired coordinates\n  drawRuler10cm(startXYendXY: number[], rulerColor: number[], rulerWidth: number = 1): void {\n    if (!this.lineShader) {\n      throw new Error('lineShader undefined')\n    }\n    this.gl.bindVertexArray(this.genericVAO)\n    this.lineShader.use(this.gl)\n    this.gl.uniform4fv(this.lineShader.uniforms.lineColor, rulerColor)\n    this.gl.uniform2fv(this.lineShader.uniforms.canvasWidthHeight, [this.gl.canvas.width, this.gl.canvas.height])\n    // draw Line\n    this.gl.uniform1f(this.lineShader.uniforms.thickness, rulerWidth)\n    this.gl.uniform4fv(this.lineShader.uniforms.startXYendXY, startXYendXY)\n    this.gl.drawArrays(this.gl.TRIANGLE_STRIP, 0, 4)\n    // draw tick marks\n    // const w10cm = -0.1 * (startXYendXY[0] - startXYendXY[2])\n    const w1cm = -0.1 * (startXYendXY[0] - startXYendXY[2])\n    const b = startXYendXY[1] - Math.floor(0.5 * this.opts.rulerWidth)\n    const t = Math.floor(b - 0.35 * w1cm)\n    const t2 = Math.floor(b - 0.7 * w1cm)\n    for (let i = 0; i < 11; i++) {\n      let l = startXYendXY[0] + i * w1cm\n      l = Math.max(l, startXYendXY[0] + 0.5 * rulerWidth)\n      l = Math.min(l, startXYendXY[2] - 0.5 * rulerWidth)\n      const xyxy = [l, b, l, t]\n      if (i % 5 === 0) {\n        xyxy[3] = t2\n      }\n      this.gl.uniform4fv(this.lineShader.uniforms.startXYendXY, xyxy)\n      this.gl.drawArrays(this.gl.TRIANGLE_STRIP, 0, 4)\n    }\n    this.gl.bindVertexArray(this.unusedVAO) // set vertex attributes\n  }\n\n  // not included in public docs\n  // returns vec4: XYZi where XYZ is location in millimeters, and i tile index\n  screenXY2mm(x: number, y: number, forceSlice = -1): vec4 {\n    let texFrac: vec3\n    for (let s = 0; s < this.screenSlices.length; s++) {\n      let i = s\n      if (forceSlice >= 0) {\n        i = forceSlice\n      }\n      const axCorSag = this.screenSlices[i].axCorSag\n      if (axCorSag > SLICE_TYPE.SAGITTAL) {\n        continue\n      }\n\n      const ltwh = this.screenSlices[i].leftTopWidthHeight\n      if (x < ltwh[0] || y < ltwh[1] || x > ltwh[0] + ltwh[2] || y > ltwh[1] + ltwh[3]) {\n        continue\n      }\n      texFrac = this.screenXY2TextureFrac(x, y, i, false)\n      if (texFrac[0] < 0.0) {\n        continue\n      }\n      const mm = this.frac2mm(texFrac)\n\n      return vec4.fromValues(mm[0], mm[1], mm[2], i)\n    }\n    return vec4.fromValues(NaN, NaN, NaN, NaN)\n  }\n\n  // not included in public docs\n  dragForPanZoom(startXYendXY: number[]): void {\n    const endMM = this.screenXY2mm(startXYendXY[2], startXYendXY[3])\n    if (isNaN(endMM[0])) {\n      return\n    }\n    const startMM = this.screenXY2mm(startXYendXY[0], startXYendXY[1], endMM[3])\n    if (isNaN(startMM[0]) || isNaN(endMM[0]) || isNaN(endMM[3])) {\n      return\n    }\n    const v = vec4.create()\n    const zoom = this.uiData.pan2DxyzmmAtMouseDown[3]\n    vec4.sub(v, endMM, startMM)\n    this.scene.pan2Dxyzmm[0] = this.uiData.pan2DxyzmmAtMouseDown[0] + zoom * v[0]\n    this.scene.pan2Dxyzmm[1] = this.uiData.pan2DxyzmmAtMouseDown[1] + zoom * v[1]\n    this.scene.pan2Dxyzmm[2] = this.uiData.pan2DxyzmmAtMouseDown[2] + zoom * v[2]\n    this.canvas!.focus() // required after change for issue706\n  }\n\n  dragForCenterButton(startXYendXY: number[]): void {\n    this.dragForPanZoom(startXYendXY)\n  }\n\n  // for slicer3D vertical dragging adjusts zoom\n  dragForSlicer3D(startXYendXY: number[]): void {\n    let zoom = this.uiData.pan2DxyzmmAtMouseDown[3]\n    const y = startXYendXY[3] - startXYendXY[1]\n    const pixelScale = 0.01\n    zoom += y * pixelScale\n    zoom = Math.max(zoom, 0.1)\n    zoom = Math.min(zoom, 10.0)\n    const zoomChange = this.scene.pan2Dxyzmm[3] - zoom\n    if (this.opts.yoke3Dto2DZoom) {\n      this.scene.volScaleMultiplier = zoom\n    }\n    this.scene.pan2Dxyzmm[3] = zoom\n    const mm = this.frac2mm(this.scene.crosshairPos)\n    this.scene.pan2Dxyzmm[0] += zoomChange * mm[0]\n    this.scene.pan2Dxyzmm[1] += zoomChange * mm[1]\n    this.scene.pan2Dxyzmm[2] += zoomChange * mm[2]\n  }\n\n  // not included in public docs\n  // draw line between start/end points and text to report length\n  drawMeasurementTool(startXYendXY: number[]): void {\n    function extendTo(\n      x0: number,\n      y0: number,\n      x1: number,\n      y1: number,\n      distance: number\n    ): { origin: number[]; terminus: number[] } {\n      const x = x0 - x1\n      const y = y0 - y1\n      if (x === 0 && y === 0) {\n        return {\n          origin: [x1 + distance, y1],\n          terminus: [x1 + distance, y1]\n        }\n      }\n      const c = Math.sqrt(x * x + y * y)\n      const dX = (distance * x) / c\n      const dY = (distance * y) / c\n      return {\n        origin: [x0 + dX, y0 + dY], // next to start point\n        terminus: [x1 - dX, y1 - dY]\n      }\n      // return [x1 - dX, y1 - dY];  // next to end point\n    }\n\n    const gl = this.gl\n    gl.bindVertexArray(this.genericVAO)\n\n    gl.depthFunc(gl.ALWAYS)\n    gl.enable(gl.BLEND)\n    gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA)\n\n    if (!this.lineShader) {\n      throw new Error('lineShader undefined')\n    }\n\n    this.lineShader.use(this.gl)\n    gl.uniform4fv(this.lineShader.uniforms.lineColor, this.opts.rulerColor)\n    gl.uniform2fv(this.lineShader.uniforms.canvasWidthHeight, [gl.canvas.width, gl.canvas.height])\n    // draw Line\n    gl.uniform1f(this.lineShader.uniforms.thickness, this.opts.rulerWidth)\n    gl.uniform4fv(this.lineShader.uniforms.startXYendXY, startXYendXY)\n    gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4)\n    // draw startCap\n    const measureLineColor = this.opts.measureLineColor\n    measureLineColor[3] = 1.0 // opaque\n    gl.uniform4fv(this.lineShader.uniforms.lineColor, measureLineColor)\n    const w = this.opts.rulerWidth\n    gl.uniform1f(this.lineShader.uniforms.thickness, w * 2)\n    let sXYeXY = [startXYendXY[0], startXYendXY[1] - w, startXYendXY[0], startXYendXY[1] + w]\n    gl.uniform4fv(this.lineShader.uniforms.startXYendXY, sXYeXY)\n    gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4)\n    // end cap\n    sXYeXY = [startXYendXY[2], startXYendXY[3] - w, startXYendXY[2], startXYendXY[3] + w]\n    gl.uniform4fv(this.lineShader.uniforms.startXYendXY, sXYeXY)\n    gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4)\n    // distance between start and stop\n    let startXY = this.canvasPos2frac([startXYendXY[0], startXYendXY[1]])\n    let endXY = this.canvasPos2frac([startXYendXY[2], startXYendXY[3]])\n    if (startXY[0] >= 0 && endXY[0] >= 0) {\n      const startMm = this.frac2mm(startXY)\n      startXY = vec3.fromValues(startMm[0], startMm[1], startMm[2])\n      const endMm = this.frac2mm(endXY)\n      endXY = vec3.fromValues(endMm[0], endMm[1], endMm[2])\n      const v = vec3.create()\n      vec3.sub(v, startXY, endXY)\n      const lenMM = vec3.len(v)\n      let decimals = 2\n      if (lenMM > 9) {\n        decimals = 1\n      }\n      if (lenMM > 99) {\n        decimals = 0\n      }\n      let stringMM = lenMM.toFixed(decimals)\n      if (this.opts.showMeasureUnits) {\n        stringMM = `${stringMM} mm` // append mm for millimeters to show units\n      }\n      let textCoords = startXYendXY\n      const [x0, y0, x1, y1] = startXYendXY\n      const { origin, terminus } = extendTo(x0, y0, x1, y1, 30)\n      switch (this.opts.measureTextJustify) {\n        case 'start':\n          textCoords = [...origin, ...origin.map((point) => point + 1)]\n          break\n        case 'end':\n          textCoords = textCoords = [...terminus, ...terminus.map((point) => point + 1)]\n          break\n        default:\n          textCoords = startXYendXY\n          break\n      }\n      this.drawTextBetween(\n        textCoords,\n        stringMM,\n        this.opts.measureTextHeight / this.opts.textHeight,\n        this.opts.measureTextColor\n      )\n    }\n    gl.bindVertexArray(this.unusedVAO) // set vertex attributes\n  }\n\n  // not included in public docs\n  // draw a rectangle at specified location\n  // unless Alpha is > 0, default color is opts.crosshairColor\n  drawRect(leftTopWidthHeight: number[], lineColor = [1, 0, 0, -1]): void {\n    if (lineColor[3] < 0) {\n      lineColor = this.opts.crosshairColor\n    }\n    if (!this.rectShader) {\n      throw new Error('rectShader undefined')\n    }\n    if (!this.opts.selectionBoxIsOutline) {\n      this.rectShader.use(this.gl)\n      this.gl.enable(this.gl.BLEND)\n      this.gl.uniform4fv(this.rectShader.uniforms.lineColor, lineColor)\n      this.gl.uniform2fv(this.rectShader.uniforms.canvasWidthHeight, [this.gl.canvas.width, this.gl.canvas.height])\n      this.gl.uniform4f(\n        this.rectShader.uniforms.leftTopWidthHeight,\n        leftTopWidthHeight[0],\n        leftTopWidthHeight[1],\n        leftTopWidthHeight[2],\n        leftTopWidthHeight[3]\n      )\n      this.gl.bindVertexArray(this.genericVAO)\n      this.gl.drawArrays(this.gl.TRIANGLE_STRIP, 0, 4)\n      this.gl.bindVertexArray(this.unusedVAO) // switch off to avoid tampering with settings\n    } else {\n      this.drawCircle(leftTopWidthHeight, lineColor, 0.1)\n      // this.opts.selectionBoxIsOutline == true\n      this.rectOutlineShader.use(this.gl)\n      this.gl.enable(this.gl.BLEND)\n      // set thickness of line\n      this.gl.uniform1f(this.rectOutlineShader.uniforms.thickness, this.opts.selectionBoxLineThickness)\n      this.gl.uniform4fv(this.rectOutlineShader.uniforms.lineColor, lineColor)\n      this.gl.uniform2fv(this.rectOutlineShader.uniforms.canvasWidthHeight, [\n        this.gl.canvas.width,\n        this.gl.canvas.height\n      ])\n      this.gl.uniform4f(\n        this.rectOutlineShader.uniforms.leftTopWidthHeight,\n        leftTopWidthHeight[0],\n        leftTopWidthHeight[1],\n        leftTopWidthHeight[2],\n        leftTopWidthHeight[3]\n      )\n      this.gl.bindVertexArray(this.genericVAO)\n      this.gl.drawArrays(this.gl.TRIANGLE_STRIP, 0, 4)\n      this.gl.bindVertexArray(this.unusedVAO) // switch off to avoid tampering with settings\n    }\n  }\n\n  drawCircle(leftTopWidthHeight: number[], circleColor = this.opts.fontColor, fillPercent = 1.0): void {\n    if (!this.circleShader) {\n      throw new Error('circleShader undefined')\n    }\n    this.circleShader.use(this.gl)\n    this.gl.enable(this.gl.BLEND)\n    this.gl.uniform4fv(this.circleShader.uniforms.circleColor, circleColor)\n    this.gl.uniform2fv(this.circleShader.uniforms.canvasWidthHeight, [this.gl.canvas.width, this.gl.canvas.height])\n    this.gl.uniform4f(\n      this.circleShader.uniforms.leftTopWidthHeight,\n      leftTopWidthHeight[0],\n      leftTopWidthHeight[1],\n      leftTopWidthHeight[2],\n      leftTopWidthHeight[3]\n    )\n    this.gl.uniform1f(this.circleShader.uniforms.fillPercent, fillPercent)\n    this.gl.uniform4fv(this.circleShader.uniforms.circleColor, circleColor)\n    this.gl.bindVertexArray(this.genericVAO)\n    this.gl.drawArrays(this.gl.TRIANGLE_STRIP, 0, 4)\n    this.gl.bindVertexArray(this.unusedVAO) // switch off to avoid tampering with settings\n  }\n\n  // not included in public docs\n  // draw a rectangle at desired location\n  drawSelectionBox(leftTopWidthHeight: number[]): void {\n    if (this.opts.dragMode === DRAG_MODE.roiSelection) {\n      this.drawCircle(leftTopWidthHeight, this.opts.selectionBoxColor, 0.1)\n      return\n    }\n    // else draw a rectangle\n    this.drawRect(leftTopWidthHeight, this.opts.selectionBoxColor)\n  }\n\n  // not included in public docs\n  // return canvas pixels available for tiles (e.g without colorbar)\n  effectiveCanvasHeight(): number {\n    // available canvas height differs from actual height if bottom colorbar is shown\n    return this.gl.canvas.height - this.colorbarHeight\n  }\n\n  effectiveCanvasWidth(): number {\n    return this.gl.canvas.width - this.getLegendPanelWidth()\n  }\n\n  getAllLabels(): NVLabel3D[] {\n    const connectomes = this.meshes.filter((m) => m.type === MeshType.CONNECTOME)\n    const meshNodes = connectomes.flatMap((m) => m.nodes as NVConnectomeNode[])\n    const meshLabels = meshNodes.map((n) => n.label)\n    // filter our undefined labels\n    const definedMeshLabels = meshLabels.filter((l): l is NVLabel3D => l !== undefined)\n    const labels = [...this.document.labels, ...definedMeshLabels]\n    return labels\n  }\n\n  getConnectomeLabels(): NVLabel3D[] {\n    const connectomes = this.meshes.filter((m) => m.type === MeshType.CONNECTOME)\n    const meshNodes = connectomes.flatMap((m) => m.nodes as NVConnectomeNode[])\n    const meshLabels = meshNodes.map((n) => n.label)\n    // filter our undefined labels\n    const definedMeshLabels = meshLabels.filter((l): l is NVLabel3D => l !== undefined)\n    // get all of our non-anchored labels\n    const nonAnchoredLabels = this.document.labels.filter((l) => l.anchor == null || l.anchor === LabelAnchorPoint.NONE)\n    // get the unique set of unanchored labels\n    const nonAnchoredLabelSet = new Set(definedMeshLabels)\n    for (const label of nonAnchoredLabels) {\n      nonAnchoredLabelSet.add(label)\n    }\n\n    return Array.from(nonAnchoredLabelSet)\n  }\n\n  getBulletMarginWidth(): number {\n    let bulletMargin = 0\n    const labels = this.getConnectomeLabels()\n    if (labels.length === 0) {\n      return 0\n    }\n\n    const widestBulletScale =\n      labels.length === 1\n        ? labels[0].style.bulletScale\n        : labels.reduce((a, b) => (a.style.bulletScale! > b.style.bulletScale! ? a : b)).style.bulletScale\n    const tallestLabel =\n      labels.length === 1\n        ? labels[0]\n        : labels.reduce((a, b) => {\n            const aSize = this.opts.textHeight * this.gl.canvas.height * a.style.textScale\n            const bSize = this.opts.textHeight * this.gl.canvas.height * b.style.textScale\n            const taller = this.textHeight(aSize, a.text) > this.textHeight(bSize, b.text) ? a : b\n            return taller\n          })\n    const size = this.opts.textHeight * this.gl.canvas.height * tallestLabel.style.textScale\n    bulletMargin = this.textHeight(size, tallestLabel.text) * widestBulletScale!\n    bulletMargin += size\n    return bulletMargin\n  }\n\n  getLegendPanelWidth(): number {\n    const labels = this.getConnectomeLabels()\n    if (!this.opts.showLegend || labels.length === 0) {\n      return 0\n    }\n    const scale = 1.0 // we may want to make this adjustable in the future\n    const horizontalMargin = this.opts.textHeight * this.gl.canvas.height * scale\n    let width = 0\n\n    const longestLabel = labels.reduce((a, b) => {\n      const aSize = this.opts.textHeight * this.gl.canvas.height * a.style.textScale\n      const bSize = this.opts.textHeight * this.gl.canvas.height * b.style.textScale\n      const longer = this.textWidth(aSize, a.text) > this.textWidth(bSize, b.text) ? a : b\n      return longer\n    })\n\n    const longestTextSize = this.opts.textHeight * this.gl.canvas.height * longestLabel.style.textScale\n    const longestTextLength = this.textWidth(longestTextSize, longestLabel.text)\n\n    const bulletMargin = this.getBulletMarginWidth()\n\n    if (longestTextLength) {\n      width = bulletMargin + longestTextLength\n      width += horizontalMargin * 2\n    }\n    if (width >= this.gl.canvas.width) {\n      return 0\n    }\n    return width\n  }\n\n  getLegendPanelHeight(): number {\n    const labels = this.getConnectomeLabels()\n    let height = 0\n    const scale = 1.0 // we may want to make this adjustable in the future\n    const verticalMargin = this.opts.textHeight * this.gl.canvas.height * scale\n    for (const label of labels) {\n      const labelSize = this.opts.textHeight * this.gl.canvas.height * label.style.textScale\n      const textHeight = this.textHeight(labelSize, label.text)\n      height += textHeight\n    }\n\n    if (height) {\n      height += (verticalMargin / 2) * (labels.length + 1)\n    }\n    return height\n  }\n\n  // not included in public docs\n  // determine canvas pixels required for colorbar\n  reserveColorbarPanel(): number[] {\n    let txtHt = Math.max(this.opts.textHeight, 0.01)\n    txtHt = txtHt * Math.min(this.gl.canvas.height, this.gl.canvas.width)\n\n    const fullHt = 3 * txtHt\n    const leftTopWidthHeight = [0, this.gl.canvas.height - fullHt, this.gl.canvas.width, fullHt]\n    this.colorbarHeight = leftTopWidthHeight[3] + 1\n    return leftTopWidthHeight\n  }\n\n  // not included in public docs\n  // low level code to draw a single colorbar\n  drawColorbarCore(\n    layer = 0,\n    leftTopWidthHeight = [0, 0, 0, 0],\n    isNegativeColor = false,\n    min = 0,\n    max = 1,\n    isAlphaThreshold: boolean\n  ): void {\n    if (leftTopWidthHeight[2] <= 0 || leftTopWidthHeight[3] <= 0) {\n      return\n    }\n    let txtHt = Math.max(this.opts.textHeight, 0.01)\n    txtHt = txtHt * Math.min(this.gl.canvas.height, this.gl.canvas.width)\n    let margin = txtHt\n    const fullHt = 3 * txtHt\n    let barHt = txtHt\n    if (leftTopWidthHeight[3] < fullHt) {\n      // no space for text\n      if (leftTopWidthHeight[3] < 3) {\n        return\n      }\n      margin = 1\n      barHt = leftTopWidthHeight[3] - 2\n    }\n    this.gl.disable(this.gl.DEPTH_TEST)\n    this.colorbarHeight = leftTopWidthHeight[3] + 1\n    const barLTWH = [leftTopWidthHeight[0] + margin, leftTopWidthHeight[1], leftTopWidthHeight[2] - 2 * margin, barHt]\n    const rimLTWH = [barLTWH[0] - 1, barLTWH[1] - 1, barLTWH[2] + 2, barLTWH[3] + 2]\n    this.drawRect(rimLTWH, this.opts.crosshairColor)\n\n    if (!this.colorbarShader) {\n      throw new Error('colorbarShader undefined')\n    }\n\n    this.colorbarShader.use(this.gl)\n    this.gl.activeTexture(TEXTURE1_COLORMAPS)\n    this.gl.bindTexture(this.gl.TEXTURE_2D, this.colormapTexture)\n    this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_MIN_FILTER, this.gl.NEAREST)\n    this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_MAG_FILTER, this.gl.NEAREST)\n    const lx = layer\n    this.gl.uniform1f(this.colorbarShader.uniforms.layer, lx)\n    this.gl.uniform2fv(this.colorbarShader.uniforms.canvasWidthHeight, [this.gl.canvas.width, this.gl.canvas.height])\n    this.gl.disable(this.gl.CULL_FACE)\n    if (isNegativeColor) {\n      const flip = [barLTWH[0] + barLTWH[2], barLTWH[1], -barLTWH[2], barLTWH[3]]\n      this.gl.uniform4fv(this.colorbarShader.uniforms.leftTopWidthHeight, flip)\n    } else {\n      this.gl.uniform4fv(this.colorbarShader.uniforms.leftTopWidthHeight, barLTWH)\n    }\n    this.gl.bindVertexArray(this.genericVAO)\n    this.gl.drawArrays(this.gl.TRIANGLE_STRIP, 0, 4)\n    this.gl.bindVertexArray(this.unusedVAO) // switch off to avoid tampering with settings\n    this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_MIN_FILTER, this.gl.LINEAR)\n    this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_MAG_FILTER, this.gl.LINEAR)\n    let thresholdTic = 0.0 // only show threshold tickmark in alphaThreshold mode\n    if (isAlphaThreshold && max < 0.0 && isNegativeColor) {\n      thresholdTic = max\n      max = 0.0\n    } else if (isAlphaThreshold && min > 0.0) {\n      thresholdTic = min\n      min = 0.0\n    }\n    if (min === max || txtHt < 1) {\n      return\n    }\n    const range = Math.abs(max - min)\n    let [spacing, ticMin] = tickSpacing(min, max)\n    if (ticMin < min) {\n      ticMin += spacing\n    }\n    // determine font size\n    function humanize(x: number): string {\n      // drop trailing zeros from numerical string\n      return x.toFixed(6).replace(/\\.?0*$/, '')\n    }\n    let tic = ticMin\n    const ticLTWH = [0, barLTWH[1] + barLTWH[3] - txtHt * 0.5, 2, txtHt * 0.75]\n    const txtTop = ticLTWH[1] + ticLTWH[3]\n    const isNeg = 1\n    while (tic <= max) {\n      ticLTWH[0] = barLTWH[0] + ((tic - min) / range) * barLTWH[2]\n      this.drawRect(ticLTWH)\n      const str = humanize(isNeg * tic)\n      // if (fntSize > 0)\n      this.drawTextBelow([ticLTWH[0], txtTop], str)\n      // this.drawTextRight([plotLTWH[0], y], str, fntScale)\n      tic += spacing\n    }\n    if (thresholdTic !== 0) {\n      const tticLTWH = [\n        barLTWH[0] + ((thresholdTic - min) / range) * barLTWH[2],\n        barLTWH[1] - barLTWH[3] * 0.25,\n        2,\n        barLTWH[3] * 1.5\n      ]\n      this.drawRect(tticLTWH)\n    }\n  }\n\n  // not included in public docs\n  // high level code to draw colorbar(s)\n  drawColorbar(): void {\n    const maps = this.colormapLists\n    const nmaps = maps.length\n    if (nmaps < 1) {\n      return\n    }\n    let nVisible = 0 // not all colorbars may be visible\n    for (let i = 0; i < nmaps; i++) {\n      if (maps[i].visible) {\n        nVisible++\n      }\n    }\n    if (nVisible < 1) {\n      return\n    }\n    let leftTopWidthHeight = this.reserveColorbarPanel()\n    let txtHt = Math.max(this.opts.textHeight, 0.01)\n    txtHt = txtHt * Math.min(this.gl.canvas.height, this.gl.canvas.width)\n    const fullHt = 3 * txtHt\n    let wid = leftTopWidthHeight[2] / nVisible\n    if (leftTopWidthHeight[2] <= 0 || leftTopWidthHeight[3] <= 0) {\n      wid = this.gl.canvas.width / nVisible\n      leftTopWidthHeight = [0, this.gl.canvas.height - fullHt, wid, fullHt]\n    }\n    leftTopWidthHeight[2] = wid\n    for (let i = 0; i < nmaps; i++) {\n      if (!maps[i].visible) {\n        continue\n      }\n      this.drawColorbarCore(i, leftTopWidthHeight, maps[i].negative, maps[i].min, maps[i].max, maps[i].alphaThreshold)\n      leftTopWidthHeight[0] += wid\n    }\n  }\n\n  // not included in public docs\n  textWidth(scale: number, str: string): number {\n    if (!str) {\n      return 0\n    }\n\n    let w = 0\n    const bytes = new TextEncoder().encode(str)\n    for (let i = 0; i < str.length; i++) {\n      w += scale * this.fontMets!.mets[bytes[i]].xadv!\n    }\n    return w\n  }\n\n  textHeight(scale: number, str: string): number {\n    if (!str) {\n      return 0\n    }\n    const byteSet = new Set(Array.from(str))\n    const bytes = new TextEncoder().encode(Array.from(byteSet).join(''))\n\n    const tallest = Object.values(this.fontMets!.mets)\n      .filter((_, index) => bytes.includes(index))\n      .reduce((a, b) => (a.lbwh[3] > b.lbwh[3] ? a : b))\n    const height = tallest.lbwh[3]\n    return scale * height\n  }\n\n  // not included in public docs\n  drawChar(xy: number[], scale: number, char: number): number {\n    if (!this.fontShader) {\n      throw new Error('fontShader undefined')\n    }\n    // draw single character, never call directly: ALWAYS call from drawText()\n    const metrics = this.fontMets!.mets[char]!\n    const l = xy[0] + scale * metrics.lbwh[0]\n    const b = -(scale * metrics.lbwh[1])\n    const w = scale * metrics.lbwh[2]\n    const h = scale * metrics.lbwh[3]\n    const t = xy[1] + (b - h) + scale\n    this.gl.uniform4f(this.fontShader.uniforms.leftTopWidthHeight, l, t, w, h)\n    this.gl.uniform4fv(this.fontShader.uniforms.uvLeftTopWidthHeight!, metrics.uv_lbwh)\n    this.gl.drawArrays(this.gl.TRIANGLE_STRIP, 0, 4)\n    return scale * metrics.xadv\n  }\n\n  // not included in public docs\n  drawLoadingText(text: string): void {\n    if (!this.canvas) {\n      throw new Error('canvas undefined')\n    }\n    this.gl.viewport(0, 0, this.gl.canvas.width, this.gl.canvas.height)\n    this.gl.enable(this.gl.CULL_FACE)\n    this.gl.enable(this.gl.BLEND)\n    this.drawTextBelow([this.canvas.width / 2, this.canvas.height / 2], text, 3)\n  }\n\n  // not included in public docs\n  drawText(xy: number[], str: string, scale = 1, color: Float32List | null = null): void {\n    if (this.opts.textHeight <= 0) {\n      return\n    }\n    if (!this.fontShader) {\n      throw new Error('fontShader undefined')\n    }\n    this.fontShader.use(this.gl)\n    // let size = this.opts.textHeight * this.gl.canvas.height * scale;\n    const size = this.opts.textHeight * Math.min(this.gl.canvas.height, this.gl.canvas.width) * scale\n    this.gl.enable(this.gl.BLEND)\n    this.gl.uniform2f(this.fontShader.uniforms.canvasWidthHeight, this.gl.canvas.width, this.gl.canvas.height)\n    if (color === null) {\n      color = this.opts.fontColor\n    }\n    this.gl.uniform4fv(this.fontShader.uniforms.fontColor, color as Float32List)\n    let screenPxRange = (size / this.fontMets!.size) * this.fontMets!.distanceRange\n    screenPxRange = Math.max(screenPxRange, 1.0) // screenPxRange() must never be lower than 1\n    this.gl.uniform1f(this.fontShader.uniforms.screenPxRange, screenPxRange)\n    const bytes = new TextEncoder().encode(str)\n    this.gl.bindVertexArray(this.genericVAO)\n    for (let i = 0; i < str.length; i++) {\n      xy[0] += this.drawChar(xy, size, bytes[i])\n    }\n    this.gl.bindVertexArray(this.unusedVAO)\n  }\n\n  // not included in public docs\n  drawTextRight(xy: number[], str: string, scale = 1, color: number[] | null = null): void {\n    // to right of x, vertically centered on y\n    if (this.opts.textHeight <= 0) {\n      return\n    }\n    xy[1] -= 0.5 * this.opts.textHeight * this.gl.canvas.height\n    this.drawText(xy, str, scale, color)\n  }\n\n  // not included in public docs\n  drawTextLeft(xy: number[], str: string, scale = 1, color: number[] | null = null): void {\n    // to left of x, vertically centered on y\n    if (this.opts.textHeight <= 0) {\n      return\n    }\n    const size = this.opts.textHeight * this.gl.canvas.height * scale\n    xy[0] -= this.textWidth(size, str)\n    xy[1] -= 0.5 * size\n    this.drawText(xy, str, scale, color)\n  }\n\n  // not included in public docs\n  drawTextRightBelow(xy: number[], str: string, scale = 1, color: number[] | null = null): void {\n    // to right of x, vertically centered on y\n    if (this.opts.textHeight <= 0) {\n      return\n    }\n\n    this.drawText(xy, str, scale, color)\n  }\n\n  // not included in public docs\n  drawTextBetween(startXYendXY: number[], str: string, scale = 1, color: number[] | null = null): void {\n    // horizontally centered on x, below y\n    if (this.opts.textHeight <= 0) {\n      return\n    }\n    const xy = [(startXYendXY[0] + startXYendXY[2]) * 0.5, (startXYendXY[1] + startXYendXY[3]) * 0.5]\n    const size = this.opts.textHeight * this.gl.canvas.height * scale\n    const w = this.textWidth(size, str)\n    xy[0] -= 0.5 * w\n    xy[1] -= 0.5 * size\n    const LTWH = [xy[0] - 1, xy[1] - 1, w + 2, size + 2]\n    let clr = color\n    if (clr === null) {\n      clr = this.opts.crosshairColor\n    }\n    // if color is bright, make rect background dark and vice versa\n    if (clr && clr[0] + clr[1] + clr[2] > 0.8) {\n      clr = [0, 0, 0, 0.5]\n    } else {\n      clr = [1, 1, 1, 0.5]\n    }\n    this.drawRect(LTWH, clr) // background rect\n    this.drawText(xy, str, scale, color) // the text\n  }\n\n  // not included in public docs\n  drawTextBelow(xy: number[], str: string, scale = 1, color: number[] | null = null): void {\n    // horizontally centered on x, below y\n    if (this.opts.textHeight <= 0) {\n      return\n    }\n    if (!this.canvas) {\n      throw new Error('canvas undefined')\n    }\n    let size = this.opts.textHeight * this.gl.canvas.height * scale\n    let width = this.textWidth(size, str)\n    if (width > this.canvas.width) {\n      scale *= (this.canvas.width - 2) / width\n      size = this.opts.textHeight * this.gl.canvas.height * scale\n      width = this.textWidth(size, str)\n    }\n    xy[0] -= 0.5 * this.textWidth(size, str)\n    xy[0] = Math.max(xy[0], 1) // clamp left edge of canvas\n    xy[0] = Math.min(xy[0], this.canvas.width - width - 1) // clamp right edge of canvas\n    this.drawText(xy, str, scale, color)\n  }\n\n  // not included in public docs\n  updateInterpolation(layer: number, isForceLinear = false): void {\n    let interp: number = this.gl.LINEAR\n    if (!isForceLinear && this.opts.isNearestInterpolation) {\n      interp = this.gl.NEAREST\n    }\n    if (layer === 0) {\n      this.gl.activeTexture(TEXTURE0_BACK_VOL) // background\n    } else {\n      this.gl.activeTexture(TEXTURE2_OVERLAY_VOL) // overlay\n    }\n    this.gl.texParameteri(this.gl.TEXTURE_3D, this.gl.TEXTURE_MIN_FILTER, interp)\n    this.gl.texParameteri(this.gl.TEXTURE_3D, this.gl.TEXTURE_MAG_FILTER, interp)\n  }\n\n  // not included in public docs\n  setAtlasOutline(isOutline: number): void {\n    this.opts.atlasOutline = isOutline\n    this.updateGLVolume()\n    this.drawScene()\n  }\n\n  /**\n   * select between nearest and linear interpolation for voxel based images\n   * @param isNearest - whether nearest neighbor interpolation is used, else linear interpolation\n   * @example niivue.setInterpolation(true);\n   * @see {@link https://niivue.github.io/niivue/features/draw2.html | live demo usage}\n   */\n  setInterpolation(isNearest: boolean): void {\n    this.opts.isNearestInterpolation = isNearest\n    const numLayers = this.volumes.length\n    if (numLayers < 1) {\n      return\n    }\n    for (let i = 0; i < numLayers; i++) {\n      this.updateInterpolation(i)\n    }\n    this.drawScene()\n  }\n\n  // not included in public docs\n  calculateMvpMatrix2D(\n    leftTopWidthHeight: number[],\n    mn: vec3,\n    mx: vec3,\n    clipTolerance = Infinity,\n    clipDepth = 0,\n    azimuth = 0,\n    elevation = 0,\n    isRadiolgical: boolean\n  ): MvpMatrix2D {\n    const gl = this.gl\n    gl.viewport(\n      leftTopWidthHeight[0],\n      this.gl.canvas.height - (leftTopWidthHeight[1] + leftTopWidthHeight[3]), // lower numbers near bottom\n      leftTopWidthHeight[2],\n      leftTopWidthHeight[3]\n    )\n    let left = mn[0]\n    let right = mx[0]\n    let leftTopMM = [left, mn[1]]\n    let fovMM = [right - left, mx[1] - mn[1]]\n    if (isRadiolgical) {\n      leftTopMM = [mx[0], mn[1]]\n      fovMM = [mn[0] - mx[0], mx[1] - mn[1]]\n      left = -mx[0]\n      right = -mn[0]\n    }\n    const scale = 2 * Math.max(Math.abs(mn[2]), Math.abs(mx[2])) // 3rd dimension is near/far from camera\n    const projectionMatrix = mat4.create()\n    let near = 0.01\n    let far = scale * 8.0\n    if (clipTolerance !== Infinity) {\n      let r = isRadiolgical\n      if (elevation === 0 && (azimuth === 0 || azimuth === 180)) {\n        r = !r\n      }\n      let dx = scale * 1.8 - clipDepth\n      if (!r) {\n        dx = scale * 1.8 + clipDepth\n      }\n      near = dx - clipTolerance\n      far = dx + clipTolerance\n    }\n    mat4.ortho(projectionMatrix, left, right, mn[1], mx[1], near, far)\n    const modelMatrix = mat4.create()\n    modelMatrix[0] = -1 // mirror X coordinate\n    // push the model away from the camera so camera not inside model\n    const translateVec3 = vec3.fromValues(0, 0, -scale * 1.8) // to avoid clipping, >= SQRT(3)\n    mat4.translate(modelMatrix, modelMatrix, translateVec3)\n    // apply elevation\n    mat4.rotateX(modelMatrix, modelMatrix, deg2rad(270 - elevation))\n    // apply azimuth\n    mat4.rotateZ(modelMatrix, modelMatrix, deg2rad(azimuth - 180))\n    const iModelMatrix = mat4.create()\n    mat4.invert(iModelMatrix, modelMatrix)\n    const normalMatrix = mat4.create()\n    mat4.transpose(normalMatrix, iModelMatrix)\n    const modelViewProjectionMatrix = mat4.create()\n    mat4.multiply(modelViewProjectionMatrix, projectionMatrix, modelMatrix)\n\n    return {\n      modelViewProjectionMatrix,\n      modelMatrix,\n      normalMatrix,\n      leftTopMM,\n      fovMM\n    }\n  }\n\n  // not included in public docs\n  swizzleVec3MM(v3: vec3, axCorSag: SLICE_TYPE): vec3 {\n    // change order of vector components\n    if (axCorSag === SLICE_TYPE.CORONAL) {\n      // 2D coronal screenXYZ = nifti [i,k,j]\n      v3 = swizzleVec3(v3, [0, 2, 1])\n    } else if (axCorSag === SLICE_TYPE.SAGITTAL) {\n      // 2D sagittal screenXYZ = nifti [j,k,i]\n      v3 = swizzleVec3(v3, [1, 2, 0])\n    }\n    return v3\n  }\n\n  // not included in public docs\n  screenFieldOfViewVox(axCorSag = 0): vec3 {\n    const fov = vec3.clone(this.volumeObject3D!.fieldOfViewDeObliqueMM!)\n    return this.swizzleVec3MM(fov, axCorSag)\n  }\n\n  // not included in public docs\n  // determine height/width of image in millimeters\n  screenFieldOfViewMM(axCorSag = 0, forceSliceMM = false): vec3 {\n    // extent of volume/mesh (in millimeters) in screen space\n    if (!forceSliceMM && !this.opts.isSliceMM) {\n      // return voxel space\n      return this.screenFieldOfViewVox(axCorSag)\n    }\n    const extentsMin = this.volumeObject3D!.extentsMin\n    const extentsMax = this.volumeObject3D!.extentsMax\n    let mnMM = vec3.fromValues(extentsMin[0], extentsMin[1], extentsMin[2])\n    let mxMM = vec3.fromValues(extentsMax[0], extentsMax[1], extentsMax[2])\n\n    mnMM = this.swizzleVec3MM(mnMM, axCorSag)\n    mxMM = this.swizzleVec3MM(mxMM, axCorSag)\n    const fovMM = vec3.create()\n    vec3.subtract(fovMM, mxMM, mnMM)\n    return fovMM\n  }\n\n  // not included in public docs\n  screenFieldOfViewExtendedVox(axCorSag = 0): MM {\n    // extent of volume/mesh (in orthographic alignment for rectangular voxels) in screen space\n    // let fov = [frac2mmTexture[0], frac2mmTexture[5], frac2mmTexture[10]];\n    const extentsMinOrtho = this.volumes[0].extentsMinOrtho!\n    const extentsMaxOrtho = this.volumes[0].extentsMaxOrtho!\n    let mnMM = vec3.fromValues(extentsMinOrtho[0], extentsMinOrtho[1], extentsMinOrtho[2])\n    let mxMM = vec3.fromValues(extentsMaxOrtho[0], extentsMaxOrtho[1], extentsMaxOrtho[2])\n    const rotation = mat4.create() // identity matrix: 2D axial screenXYZ = nifti [i,j,k]\n    mnMM = this.swizzleVec3MM(mnMM, axCorSag)\n    mxMM = this.swizzleVec3MM(mxMM, axCorSag)\n    const fovMM = vec3.create()\n    vec3.subtract(fovMM, mxMM, mnMM)\n    return { mnMM, mxMM, rotation, fovMM }\n  }\n\n  // not included in public docs\n  screenFieldOfViewExtendedMM(axCorSag = 0): MM {\n    if (!this.volumeObject3D) {\n      throw new Error('volumeObject3D undefined')\n    }\n    // extent of volume/mesh (in millimeters) in screen space\n    // TODO align types\n    const eMin = this.volumeObject3D.extentsMin\n    const eMax = this.volumeObject3D.extentsMax\n    let mnMM = vec3.fromValues(eMin[0], eMin[1], eMin[2])\n    let mxMM = vec3.fromValues(eMax[0], eMax[1], eMax[2])\n    const rotation = mat4.create() // identity matrix: 2D axial screenXYZ = nifti [i,j,k]\n    mnMM = this.swizzleVec3MM(mnMM, axCorSag)\n    mxMM = this.swizzleVec3MM(mxMM, axCorSag)\n    const fovMM = vec3.create()\n    vec3.subtract(fovMM, mxMM, mnMM)\n    return { mnMM, mxMM, rotation, fovMM }\n  }\n\n  // not included in public docs\n  // show text labels for L/R, A/P, I/S dimensions\n  drawSliceOrientationText(\n    leftTopWidthHeight: number[],\n    axCorSag: SLICE_TYPE,\n    padLeftTop: number[] = [NaN, NaN]\n  ): void {\n    this.gl.viewport(0, 0, this.gl.canvas.width, this.gl.canvas.height)\n    let topText = 'S'\n    if (axCorSag === SLICE_TYPE.AXIAL) {\n      topText = 'A'\n    }\n    let leftText = this.opts.isRadiologicalConvention ? 'R' : 'L'\n    if (axCorSag === SLICE_TYPE.SAGITTAL) {\n      leftText = this.opts.sagittalNoseLeft ? 'A' : 'P'\n    }\n    if (this.opts.isCornerOrientationText) {\n      this.drawTextRightBelow([leftTopWidthHeight[0], leftTopWidthHeight[1]], leftText + topText)\n      return\n    }\n    let drawBelow = true\n    let drawRight = true\n    if (!isNaN(padLeftTop[0])) {\n      const ht = this.opts.textHeight * this.gl.canvas.height + 2\n      if (padLeftTop[1] > ht) {\n        this.drawTextBelow(\n          [leftTopWidthHeight[0] + leftTopWidthHeight[2] * 0.5, leftTopWidthHeight[1] + padLeftTop[1] - ht],\n          topText\n        )\n        drawBelow = false\n      }\n      const wid = this.textWidth(ht, leftText) + 2\n      if (padLeftTop[0] > wid) {\n        this.drawTextRight(\n          [leftTopWidthHeight[0] + padLeftTop[0] - wid, leftTopWidthHeight[1] + leftTopWidthHeight[3] * 0.5],\n          leftText\n        )\n        drawRight = false\n      }\n    }\n    if (drawBelow) {\n      this.drawTextBelow([leftTopWidthHeight[0] + leftTopWidthHeight[2] * 0.5, leftTopWidthHeight[1]], topText)\n    }\n    if (drawRight) {\n      this.drawTextRight([leftTopWidthHeight[0], leftTopWidthHeight[1] + leftTopWidthHeight[3] * 0.5], leftText)\n    }\n  }\n\n  // not included in public docs\n  xyMM2xyzMM(axCorSag: SLICE_TYPE, sliceFrac: number): number[] {\n    // given X and Y, find Z for a plane defined by 3 points (a,b,c)\n    // https://math.stackexchange.com/questions/851742/calculate-coordinate-of-any-point-on-triangle-in-3d-plane\n    let sliceDim = 2 // axial depth is NIfTI k dimension\n    if (axCorSag === SLICE_TYPE.CORONAL) {\n      sliceDim = 1\n    } // sagittal depth is NIfTI j dimension\n    if (axCorSag === SLICE_TYPE.SAGITTAL) {\n      sliceDim = 0\n    } // sagittal depth is NIfTI i dimension\n    let a: [number, number, number] | vec4 = [0, 0, 0]\n    let b: [number, number, number] | vec4 = [1, 1, 0]\n    let c: [number, number, number] | vec4 = [1, 0, 1]\n\n    a[sliceDim] = sliceFrac\n    b[sliceDim] = sliceFrac\n    c[sliceDim] = sliceFrac\n    a = this.frac2mm(a)\n    b = this.frac2mm(b)\n    c = this.frac2mm(c)\n    a = this.swizzleVec3MM(vec3.fromValues(a[0], a[1], a[2]), axCorSag)\n    b = this.swizzleVec3MM(vec3.fromValues(b[0], b[1], b[2]), axCorSag)\n    c = this.swizzleVec3MM(vec3.fromValues(c[0], c[1], c[2]), axCorSag)\n    const denom = (b[0] - a[0]) * (c[1] - a[1]) - (c[0] - a[0]) * (b[1] - a[1])\n    let yMult = (b[0] - a[0]) * (c[2] - a[2]) - (c[0] - a[0]) * (b[2] - a[2])\n    yMult /= denom\n    let xMult = (b[1] - a[1]) * (c[2] - a[2]) - (c[1] - a[1]) * (b[2] - a[2])\n    xMult /= denom\n    const AxyzMxy = [0, 0, 0, 0, 0]\n    AxyzMxy[0] = a[0]\n    AxyzMxy[1] = a[1]\n    AxyzMxy[2] = a[2]\n    AxyzMxy[3] = xMult\n    AxyzMxy[4] = yMult\n    return AxyzMxy\n  }\n\n  // not included in public docs\n  // draw 2D tile\n  draw2DMain(leftTopWidthHeight: number[], axCorSag: SLICE_TYPE, customMM = NaN): void {\n    let frac2mmTexture = this.volumes[0].frac2mm!.slice()\n    let screen = this.screenFieldOfViewExtendedMM(axCorSag)\n    let mesh2ortho = mat4.create()\n    if (!this.opts.isSliceMM) {\n      frac2mmTexture = this.volumes[0].frac2mmOrtho!.slice()\n      mesh2ortho = mat4.clone(this.volumes[0].mm2ortho!)\n      screen = this.screenFieldOfViewExtendedVox(axCorSag)\n    }\n    let isRadiolgical = this.opts.isRadiologicalConvention && axCorSag < SLICE_TYPE.SAGITTAL\n    if (customMM === Infinity || customMM === -Infinity) {\n      isRadiolgical = customMM !== Infinity\n      if (axCorSag === SLICE_TYPE.CORONAL) {\n        isRadiolgical = !isRadiolgical\n      }\n    } else if (this.opts.sagittalNoseLeft && axCorSag === SLICE_TYPE.SAGITTAL) {\n      isRadiolgical = !isRadiolgical\n    }\n    let elevation = 0\n    let azimuth = 0\n    if (axCorSag === SLICE_TYPE.SAGITTAL) {\n      azimuth = isRadiolgical ? 90 : -90\n    } else if (axCorSag === SLICE_TYPE.CORONAL) {\n      azimuth = isRadiolgical ? 180 : 0\n    } else {\n      azimuth = isRadiolgical ? 180 : 0\n      elevation = isRadiolgical ? -90 : 90\n    }\n    const gl = this.gl\n    let isStretchToScreen = false\n    if (leftTopWidthHeight[2] === 0 || leftTopWidthHeight[3] === 0) {\n      // only one tile: stretch tile to fill whole screen.\n      isStretchToScreen = true\n      const pixPerMMw = gl.canvas.width / screen.fovMM[0]\n      const pixPerMMh = gl.canvas.height / screen.fovMM[1]\n      const pixPerMMmin = Math.min(pixPerMMw, pixPerMMh)\n      const zoomW = pixPerMMw / pixPerMMmin\n      const zoomH = pixPerMMh / pixPerMMmin\n      screen.fovMM[0] *= zoomW\n      screen.fovMM[1] *= zoomH\n      let center = (screen.mnMM[0] + screen.mxMM[0]) * 0.5\n      screen.mnMM[0] = center - screen.fovMM[0] * 0.5\n      screen.mxMM[0] = center + screen.fovMM[0] * 0.5\n      center = (screen.mnMM[1] + screen.mxMM[1]) * 0.5\n      screen.mnMM[1] = center - screen.fovMM[1] * 0.5\n      screen.mxMM[1] = center + screen.fovMM[1] * 0.5\n      // screen.mnMM[0] *= zoomW;\n      // screen.mxMM[0] *= zoomW;\n      // screen.mnMM[1] *= zoomH;\n      // screen.mxMM[1] *= zoomH;\n      leftTopWidthHeight = [0, 0, gl.canvas.width, gl.canvas.height]\n    }\n    if (isNaN(customMM)) {\n      const pan = this.scene.pan2Dxyzmm\n      const panXY = this.swizzleVec3MM(vec3.fromValues(pan[0], pan[1], pan[2]), axCorSag)\n      const zoom = this.scene.pan2Dxyzmm[3]\n      screen.mnMM[0] -= panXY[0]\n      screen.mxMM[0] -= panXY[0]\n      screen.mnMM[1] -= panXY[1]\n      screen.mxMM[1] -= panXY[1]\n      screen.mnMM[0] /= zoom\n      screen.mxMM[0] /= zoom\n      screen.mnMM[1] /= zoom\n      screen.mxMM[1] /= zoom\n    }\n\n    let sliceDim = 2 // axial depth is NIfTI k dimension\n    if (axCorSag === SLICE_TYPE.CORONAL) {\n      sliceDim = 1\n    } // sagittal depth is NIfTI j dimension\n    if (axCorSag === SLICE_TYPE.SAGITTAL) {\n      sliceDim = 0\n    } // sagittal depth is NIfTI i dimension\n    let sliceFrac = this.scene.crosshairPos[sliceDim]\n    let mm = this.frac2mm(this.scene.crosshairPos)\n    if (!isNaN(customMM) && customMM !== Infinity && customMM !== -Infinity) {\n      mm = this.frac2mm([0.5, 0.5, 0.5])\n      mm[sliceDim] = customMM\n      const frac = this.mm2frac(mm)\n      sliceFrac = frac[sliceDim]\n    }\n    const sliceMM = mm[sliceDim]\n    gl.clear(gl.DEPTH_BUFFER_BIT)\n    let obj = this.calculateMvpMatrix2D(\n      leftTopWidthHeight,\n      screen.mnMM,\n      screen.mxMM,\n      Infinity,\n      0,\n      azimuth,\n      elevation,\n      isRadiolgical\n    )\n    if (customMM === Infinity || customMM === -Infinity) {\n      // draw rendering\n      const ltwh = leftTopWidthHeight.slice()\n      this.draw3D(\n        leftTopWidthHeight,\n        obj.modelViewProjectionMatrix,\n        obj.modelMatrix,\n        obj.normalMatrix,\n        azimuth,\n        elevation\n      )\n      const tile = this.screenSlices[this.screenSlices.length - 1]\n      // tile.AxyzMxy = this.xyMM2xyzMM(axCorSag, 0.5);\n      tile.leftTopWidthHeight = ltwh\n      tile.axCorSag = axCorSag\n      tile.sliceFrac = Infinity // use infinity to denote this is a rendering, not slice: not one depth\n      tile.AxyzMxy = this.xyMM2xyzMM(axCorSag, sliceFrac)\n      tile.leftTopMM = obj.leftTopMM\n      tile.fovMM = obj.fovMM\n      return\n    }\n    gl.enable(gl.DEPTH_TEST)\n    gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA)\n    // draw the slice\n    gl.disable(gl.BLEND)\n    gl.depthFunc(gl.GREATER)\n    gl.disable(gl.CULL_FACE) // show front and back faces\n\n    let shader = this.sliceMMShader\n    if (this.opts.isV1SliceShader) {\n      shader = this.sliceV1Shader\n    }\n    if (!shader) {\n      throw new Error('slice Shader undefined')\n    }\n    shader.use(this.gl)\n    gl.uniform1f(shader.uniforms.overlayOutlineWidth, this.overlayOutlineWidth)\n    gl.uniform1f(shader.uniforms.overlayAlphaShader, this.overlayAlphaShader)\n    gl.uniform1i(shader.uniforms.isAlphaClipDark, this.isAlphaClipDark ? 1 : 0)\n    gl.uniform1i(shader.uniforms.backgroundMasksOverlays, this.backgroundMasksOverlays)\n    gl.uniform1f(shader.uniforms.drawOpacity, this.drawOpacity)\n    gl.enable(gl.BLEND)\n    gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA)\n    gl.uniform1f(shader.uniforms.opacity, this.volumes[0].opacity)\n    gl.uniform1i(shader.uniforms.axCorSag, axCorSag)\n    gl.uniform1f(shader.uniforms.slice, sliceFrac)\n    gl.uniformMatrix4fv(\n      shader.uniforms.frac2mm,\n      false,\n      frac2mmTexture // this.volumes[0].frac2mm\n    )\n    gl.uniformMatrix4fv(shader.uniforms.mvpMtx, false, obj.modelViewProjectionMatrix.slice())\n    gl.bindVertexArray(this.genericVAO) // set vertex attributes\n    gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4)\n    gl.bindVertexArray(this.unusedVAO) // set vertex attributes\n    // record screenSlices to detect mouse click positions\n    this.screenSlices.push({\n      leftTopWidthHeight,\n      axCorSag,\n      sliceFrac,\n      AxyzMxy: this.xyMM2xyzMM(axCorSag, sliceFrac),\n      leftTopMM: obj.leftTopMM,\n      screen2frac: [],\n      fovMM: obj.fovMM\n    })\n    if (isNaN(customMM)) {\n      // draw crosshairs\n      this.drawCrosshairs3D(true, 1.0, obj.modelViewProjectionMatrix, true, this.opts.isSliceMM)\n    }\n    // TODO handle \"infinity\" for meshThicknessOn2D\n    if ((this.opts.meshThicknessOn2D as number) > 0.0) {\n      if (this.opts.meshThicknessOn2D !== Infinity) {\n        obj = this.calculateMvpMatrix2D(\n          leftTopWidthHeight,\n          screen.mnMM,\n          screen.mxMM,\n          this.opts.meshThicknessOn2D as number,\n          sliceMM,\n          azimuth,\n          elevation,\n          isRadiolgical\n        )\n      }\n      // we may need to transform mesh vertices to the orthogonal voxel space\n      const mx = mat4.clone(obj.modelViewProjectionMatrix)\n      mat4.multiply(mx, mx, mesh2ortho)\n      this.drawMesh3D(\n        true,\n        1,\n        mx, // obj.modelViewProjectionMatrix,\n        obj.modelMatrix,\n        obj.normalMatrix\n      )\n    }\n    if (isNaN(customMM)) {\n      // no crossbars for mosaic view\n      this.drawCrosshairs3D(false, 0.15, obj.modelViewProjectionMatrix, true, this.opts.isSliceMM)\n    }\n    if (isStretchToScreen) {\n      // issue1065\n      this.drawSliceOrientationText(leftTopWidthHeight, axCorSag)\n    }\n    this.readyForSync = true\n  }\n\n  draw2D(\n    leftTopWidthHeight: number[],\n    axCorSag: SLICE_TYPE,\n    customMM = NaN,\n    imageWidthHeight: number[] = [NaN, NaN]\n  ): void {\n    const padLeftTop = [NaN, NaN]\n    if (imageWidthHeight[0] === Infinity) {\n      const volScale = this.sliceScale().volScale\n      let scale = this.scaleSlice(volScale[0], volScale[1], [0, 0], [leftTopWidthHeight[2], leftTopWidthHeight[3]])\n      if (axCorSag === SLICE_TYPE.CORONAL) {\n        scale = this.scaleSlice(volScale[0], volScale[2], [0, 0], [leftTopWidthHeight[2], leftTopWidthHeight[3]])\n      }\n      if (axCorSag === SLICE_TYPE.SAGITTAL) {\n        scale = this.scaleSlice(volScale[1], volScale[2], [0, 0], [leftTopWidthHeight[2], leftTopWidthHeight[3]])\n      }\n      imageWidthHeight[0] = scale[2]\n      imageWidthHeight[1] = scale[3]\n    }\n    if (isNaN(imageWidthHeight[0])) {\n      this.draw2DMain(leftTopWidthHeight, axCorSag, customMM)\n    } else {\n      // inset as padded in tile\n      const ltwh = leftTopWidthHeight.slice()\n      padLeftTop[0] = Math.floor(0.5 * (ltwh[2] - imageWidthHeight[0]))\n      padLeftTop[1] = Math.floor(0.5 * (ltwh[3] - imageWidthHeight[1]))\n      ltwh[0] += padLeftTop[0]\n      ltwh[1] += padLeftTop[1]\n      ltwh[2] = imageWidthHeight[0]\n      ltwh[3] = imageWidthHeight[1]\n      this.draw2DMain(ltwh, axCorSag, customMM)\n    }\n    if (customMM === Infinity || customMM === -Infinity || axCorSag === SLICE_TYPE.RENDER) {\n      return\n    }\n    if (leftTopWidthHeight[2] !== 0 && leftTopWidthHeight[3] !== 0) {\n      // issue1065\n      this.drawSliceOrientationText(leftTopWidthHeight, axCorSag, padLeftTop)\n    }\n  }\n\n  // not included in public docs\n  // determine 3D model view projection matrix\n  calculateMvpMatrix(_unused: unknown, leftTopWidthHeight = [0, 0, 0, 0], azimuth: number, elevation: number): mat4[] {\n    if (leftTopWidthHeight[2] === 0 || leftTopWidthHeight[3] === 0) {\n      // use full canvas\n      leftTopWidthHeight = [0, 0, this.gl.canvas.width, this.gl.canvas.height]\n    }\n    const whratio = leftTopWidthHeight[2] / leftTopWidthHeight[3]\n    // let whratio = this.gl.canvas.clientWidth / this.gl.canvas.clientHeight;\n    // pivot from center of objects\n    // let scale = this.furthestVertexFromOrigin;\n    // let origin = [0,0,0];\n    let scale = this.furthestFromPivot\n    const origin = this.pivot3D\n    const projectionMatrix = mat4.create()\n    scale = (0.8 * scale) / this.scene.volScaleMultiplier // 2.0 WebGL viewport has range of 2.0 [-1,-1]...[1,1]\n    if (whratio < 1) {\n      // tall window: \"portrait\" mode, width constrains\n      mat4.ortho(projectionMatrix, -scale, scale, -scale / whratio, scale / whratio, scale * 0.01, scale * 8.0)\n    }\n    // Wide window: \"landscape\" mode, height constrains\n    else {\n      mat4.ortho(projectionMatrix, -scale * whratio, scale * whratio, -scale, scale, scale * 0.01, scale * 8.0)\n    }\n\n    const modelMatrix = mat4.create()\n    modelMatrix[0] = -1 // mirror X coordinate\n    // push the model away from the camera so camera not inside model\n    const translateVec3 = vec3.fromValues(0, 0, -scale * 1.8) // to avoid clipping, >= SQRT(3)\n    mat4.translate(modelMatrix, modelMatrix, translateVec3)\n    if (this.position) {\n      mat4.translate(modelMatrix, modelMatrix, this.position)\n    }\n    // apply elevation\n    mat4.rotateX(modelMatrix, modelMatrix, deg2rad(270 - elevation))\n    // apply azimuth\n    mat4.rotateZ(modelMatrix, modelMatrix, deg2rad(azimuth - 180))\n\n    mat4.translate(modelMatrix, modelMatrix, [-origin[0], -origin[1], -origin[2]])\n\n    //\n    const iModelMatrix = mat4.create()\n    mat4.invert(iModelMatrix, modelMatrix)\n    const normalMatrix = mat4.create()\n    mat4.transpose(normalMatrix, iModelMatrix)\n    const modelViewProjectionMatrix = mat4.create()\n    mat4.multiply(modelViewProjectionMatrix, projectionMatrix, modelMatrix)\n    return [modelViewProjectionMatrix, modelMatrix, normalMatrix]\n  }\n\n  // not included in public docs\n  calculateModelMatrix(azimuth: number, elevation: number): mat4 {\n    if (!this.back) {\n      throw new Error('back undefined')\n    }\n    const modelMatrix = mat4.create()\n    modelMatrix[0] = -1 // mirror X coordinate\n    // push the model away from the camera so camera not inside model\n    // apply elevation\n    mat4.rotateX(modelMatrix, modelMatrix, deg2rad(270 - elevation))\n    // apply azimuth\n    mat4.rotateZ(modelMatrix, modelMatrix, deg2rad(azimuth - 180))\n    if (this.back.obliqueRAS) {\n      const oblique = mat4.clone(this.back.obliqueRAS)\n      mat4.multiply(modelMatrix, modelMatrix, oblique)\n    }\n    return modelMatrix\n  }\n\n  // not included in public docs\n  // calculate the near-far direction from the camera's perspective\n  calculateRayDirection(azimuth: number, elevation: number): vec3 {\n    const modelMatrix = this.calculateModelMatrix(azimuth, elevation)\n    // from NIfTI spatial coordinates (X=right, Y=anterior, Z=superior) to WebGL (screen X=right,Y=up, Z=depth)\n    const projectionMatrix = mat4.fromValues(1, 0, 0, 0, 0, -1, 0, 0, 0, 0, -1, 0, 0, 0, 0, 1)\n    const mvpMatrix = mat4.create()\n    mat4.multiply(mvpMatrix, projectionMatrix, modelMatrix)\n    const inv = mat4.create()\n    mat4.invert(inv, mvpMatrix)\n    const rayDir4 = vec4.fromValues(0, 0, -1, 1)\n    vec4.transformMat4(rayDir4, rayDir4, inv)\n    const rayDir = vec3.fromValues(rayDir4[0], rayDir4[1], rayDir4[2])\n    vec3.normalize(rayDir, rayDir)\n    // defuzz, avoid divide by zero\n    const tiny = 0.00005\n    if (Math.abs(rayDir[0]) < tiny) {\n      rayDir[0] = tiny\n    }\n    if (Math.abs(rayDir[1]) < tiny) {\n      rayDir[1] = tiny\n    }\n    if (Math.abs(rayDir[2]) < tiny) {\n      rayDir[2] = tiny\n    }\n    return rayDir\n  }\n\n  // not included in public docs\n  sceneExtentsMinMax(isSliceMM = true): vec3[] {\n    let mn = vec3.fromValues(0, 0, 0)\n    let mx = vec3.fromValues(0, 0, 0)\n    if (this.volumes.length > 0) {\n      if (!this.volumeObject3D) {\n        throw new Error('volumeObject3D undefined')\n      }\n      mn = vec3.fromValues(\n        this.volumeObject3D.extentsMin[0],\n        this.volumeObject3D.extentsMin[1],\n        this.volumeObject3D.extentsMin[2]\n      )\n      mx = vec3.fromValues(\n        this.volumeObject3D.extentsMax[0],\n        this.volumeObject3D.extentsMax[1],\n        this.volumeObject3D.extentsMax[2]\n      )\n      if (!isSliceMM) {\n        mn = vec3.fromValues(\n          this.volumes[0].extentsMinOrtho![0],\n          this.volumes[0].extentsMinOrtho![1],\n          this.volumes[0].extentsMinOrtho![2]\n        )\n        mx = vec3.fromValues(\n          this.volumes[0].extentsMaxOrtho![0],\n          this.volumes[0].extentsMaxOrtho![1],\n          this.volumes[0].extentsMaxOrtho![2]\n        )\n      }\n    }\n    if (this.meshes.length > 0) {\n      if (this.volumes.length < 1) {\n        const minExtents = this.meshes[0].extentsMin as number[]\n        const maxExtents = this.meshes[0].extentsMax as number[]\n        mn = vec3.fromValues(minExtents[0], minExtents[1], minExtents[2])\n        mx = vec3.fromValues(maxExtents[0], maxExtents[1], maxExtents[2])\n      }\n      for (let i = 0; i < this.meshes.length; i++) {\n        const minExtents = this.meshes[i].extentsMin as number[]\n        const maxExtents = this.meshes[i].extentsMax as number[]\n        const vmn = vec3.fromValues(minExtents[0], minExtents[1], minExtents[2])\n        vec3.min(mn, mn, vmn)\n        const vmx = vec3.fromValues(maxExtents[0], maxExtents[1], maxExtents[2])\n        vec3.max(mx, mx, vmx)\n      }\n    }\n    const range = vec3.create()\n    vec3.subtract(range, mx, mn)\n    return [mn, mx, range]\n  }\n\n  // not included in public docs\n  setPivot3D(): void {\n    // compute extents of all volumes and meshes in scene\n    // pivot around center of these.\n    const [mn, mx] = this.sceneExtentsMinMax()\n    const pivot = vec3.create()\n    // pivot is half way between min and max:\n    vec3.add(pivot, mn, mx)\n    vec3.scale(pivot, pivot, 0.5)\n    this.pivot3D = [pivot[0], pivot[1], pivot[2]]\n    // find scale of scene\n    vec3.subtract(pivot, mx, mn)\n    this.extentsMin = mn\n    this.extentsMax = mx\n    this.furthestFromPivot = vec3.length(pivot) * 0.5 // pivot is half way between the extreme vertices\n  }\n\n  // not included in public docs\n  getMaxVols(): number {\n    if (this.volumes.length < 1) {\n      return 0\n    }\n    let maxVols = 0\n    for (let i = 0; i < this.volumes.length; i++) {\n      maxVols = Math.max(maxVols, this.volumes[i].nFrame4D!)\n    }\n    return maxVols\n  }\n\n  // not included in public docs\n  detectPartialllyLoaded4D(): boolean {\n    if (this.volumes.length < 1) {\n      return false\n    }\n    for (let i = 0; i < this.volumes.length; i++) {\n      if (this.volumes[i].nFrame4D! < this.volumes[i].hdr!.dims[4]) {\n        return true\n      }\n    }\n    return false\n  }\n\n  // not included in public docs\n  // draw graph for 4D NVImage: time across horizontal, intensity is vertical\n  drawGraph(): void {\n    if (this.getMaxVols() < 2) {\n      return\n    }\n    const graph = this.graph\n    let axialTop = 0\n    if (this.graph.autoSizeMultiplanar && this.opts.sliceType === SLICE_TYPE.MULTIPLANAR) {\n      for (let i = 0; i < this.screenSlices.length; i++) {\n        const axCorSag = this.screenSlices[i].axCorSag\n        if (axCorSag === SLICE_TYPE.AXIAL) {\n          axialTop = this.screenSlices[i].leftTopWidthHeight[1]\n        }\n        if (axCorSag !== SLICE_TYPE.SAGITTAL) {\n          continue\n        }\n        const ltwh = this.screenSlices[i].leftTopWidthHeight.slice()\n        if (ltwh[1] === axialTop) {\n          graph.LTWH[0] = ltwh[0] + ltwh[2]\n          graph.LTWH[1] = ltwh[1]\n        } else {\n          graph.LTWH[0] = ltwh[0]\n          graph.LTWH[1] = ltwh[1] + ltwh[3]\n        }\n        graph.LTWH[2] = ltwh[2]\n        graph.LTWH[3] = ltwh[2]\n      }\n    }\n    if (graph.opacity <= 0.0 || graph.LTWH[2] <= 5 || graph.LTWH[3] <= 5) {\n      return\n    }\n    if (Math.floor(graph.LTWH[0] + graph.LTWH[2]) > this.gl.canvas.width) {\n      return // issue 930\n    }\n    // issue1073 add \"floor\" for rounding errors (211.792+392.207 > 604)\n    if (Math.floor(graph.LTWH[1] + graph.LTWH[3]) > this.gl.canvas.height) {\n      return // issue 930\n    }\n    graph.backColor = [0.15, 0.15, 0.15, graph.opacity]\n    graph.lineColor = [1, 1, 1, 1]\n    if (this.opts.backColor[0] + this.opts.backColor[1] + this.opts.backColor[2] > 1.5) {\n      graph.backColor = [0.95, 0.95, 0.95, graph.opacity]\n      graph.lineColor = [0, 0, 0, 1]\n    }\n    graph.textColor = graph.lineColor.slice()\n    graph.lineThickness = 4\n    graph.lineAlpha = 1\n    graph.lines = []\n    const vols = []\n    if (graph.vols.length < 1) {\n      if (this.volumes[0] != null) {\n        vols.push(0)\n      }\n    } else {\n      for (let i = 0; i < graph.vols.length; i++) {\n        const j = graph.vols[i]\n        if (this.volumes[j] == null) {\n          continue\n        }\n        const n = this.volumes[j].nFrame4D!\n        if (n < 2) {\n          continue\n        }\n        vols.push(j)\n      }\n    }\n    if (vols.length < 1) {\n      return\n    }\n    const maxVols = this.volumes[vols[0]].nFrame4D!\n    this.graph.selectedColumn = this.volumes[vols[0]].frame4D\n    if (maxVols < 2) {\n      log.debug('Unable to generate a graph: Selected volume is 3D not 4D')\n      return\n    }\n    for (let i = 0; i < vols.length; i++) {\n      graph.lines[i] = []\n      const vox = this.frac2vox(this.scene.crosshairPos)\n      const v = this.volumes[vols[i]]\n      let n = v.nFrame4D\n      n = Math.min(n!, maxVols)\n      for (let j = 0; j < n; j++) {\n        const val = v.getValue(vox[0], vox[1], vox[2], j)\n        graph.lines[i].push(val)\n      }\n    }\n    graph.lineRGB = [\n      [1, 0, 0],\n      [0, 0.7, 0],\n      [0, 0, 1],\n      [1, 1, 0],\n      [1, 0, 1],\n      [0, 1, 1],\n      [1, 1, 1],\n      [0, 0, 0]\n    ]\n    // find min, max, range for all lines\n    let mn = graph.lines[0][0]\n    let mx = graph.lines[0][0]\n    for (let j = 0; j < graph.lines.length; j++) {\n      for (let i = 0; i < graph.lines[j].length; i++) {\n        const v = graph.lines[j][i]\n        mn = Math.min(v, mn)\n        mx = Math.max(v, mx)\n      }\n    }\n    const volMn = this.volumes[vols[0]].cal_min\n    const volMx = this.volumes[vols[0]].cal_max\n    if (graph.isRangeCalMinMax && volMn < volMx && isFinite(volMn) && isFinite(volMx)) {\n      mn = volMn\n      mx = volMx\n    }\n\n    if (graph.normalizeValues && mx > mn) {\n      const range = mx - mn\n      for (let j = 0; j < graph.lines.length; j++) {\n        for (let i = 0; i < graph.lines[j].length; i++) {\n          const v = graph.lines[j][i]\n          graph.lines[j][i] = (v - mn) / range\n        }\n      }\n      mn = 0\n      mx = 1\n    }\n    if (mn >= mx) {\n      mx = mn + 1.0\n    }\n    this.drawRect(graph.LTWH, graph.backColor)\n    const [spacing, ticMin, ticMax] = tickSpacing(mn, mx)\n    const digits = Math.max(0, -1 * Math.floor(Math.log(spacing) / Math.log(10)))\n    mn = Math.min(ticMin, mn)\n    mx = Math.max(ticMax, mx)\n    // determine font size\n    function humanize(x: number): string {\n      // drop trailing zeros from numerical string\n      return x.toFixed(6).replace(/\\.?0*$/, '')\n    }\n    const minWH = Math.min(graph.LTWH[2], graph.LTWH[3])\n    // n.b. dpr encodes retina displays\n    const fntScale = 0.07 * (minWH / (this.fontMets!.size * this.uiData.dpr!))\n    let fntSize = this.opts.textHeight * this.gl.canvas.height * fntScale\n    if (fntSize < 16) {\n      fntSize = 0\n    }\n    let maxTextWid = 0\n    let lineH = ticMin\n    // determine widest label in vertical axis\n    if (fntSize > 0) {\n      while (lineH <= mx) {\n        const str = lineH.toFixed(digits)\n        const w = this.textWidth(fntSize, str)\n        maxTextWid = Math.max(w, maxTextWid)\n        lineH += spacing\n      }\n    }\n    const margin = 0.05\n    // frame is the entire region including labels, plot is the inner lines\n    const frameWid = Math.abs(graph.LTWH[2])\n    const frameHt = Math.abs(graph.LTWH[3])\n    // plot is region where lines are drawn\n    const plotLTWH = [\n      graph.LTWH[0] + margin * frameWid + maxTextWid,\n      graph.LTWH[1] + margin * frameHt,\n      graph.LTWH[2] - maxTextWid - 2 * margin * frameWid,\n      graph.LTWH[3] - fntSize - 2 * margin * frameHt\n    ]\n    this.graph.LTWH = graph.LTWH\n    this.graph.plotLTWH = plotLTWH\n    this.drawRect(plotLTWH, this.opts.backColor) // this.opts.backColor\n    // draw horizontal lines\n    const rangeH = mx - mn\n    const scaleH = plotLTWH[3] / rangeH\n    const scaleW = plotLTWH[2] / (graph.lines[0].length - 1)\n    const plotBottom = plotLTWH[1] + plotLTWH[3]\n    // draw thin horizontal lines\n    lineH = ticMin + 0.5 * spacing\n    const thinColor = graph.lineColor.slice()\n    thinColor[3] = 0.25 * graph.lineColor[3]\n    while (lineH <= mx) {\n      const y = plotBottom - (lineH - mn) * scaleH\n      this.drawLine([plotLTWH[0], y, plotLTWH[0] + plotLTWH[2], y], 0.5 * graph.lineThickness, thinColor)\n      lineH += spacing\n    }\n    lineH = ticMin\n    // draw thick horizontal lines\n    const halfThick = 0.5 * graph.lineThickness\n    while (lineH <= mx) {\n      const y = plotBottom - (lineH - mn) * scaleH\n      this.drawLine(\n        [plotLTWH[0] - halfThick, y, plotLTWH[0] + plotLTWH[2] + graph.lineThickness, y],\n        graph.lineThickness,\n        graph.lineColor\n      )\n      const str = lineH.toFixed(digits)\n      if (fntSize > 0) {\n        this.drawTextLeft([plotLTWH[0] - 6, y], str, fntScale, graph.textColor)\n      }\n      // this.drawTextRight([plotLTWH[0], y], str, fntScale)\n      lineH += spacing\n    }\n    // draw vertical lines\n    let stride = 1 // e.g. how frequent are vertical lines\n    while (graph.lines[0].length / stride > 20) {\n      stride *= 5\n    }\n    for (let i = 0; i < graph.lines[0].length; i += stride) {\n      const x = i * scaleW + plotLTWH[0]\n      let thick = graph.lineThickness\n      if (i % 2 === 1) {\n        thick *= 0.5\n        this.drawLine([x, plotLTWH[1], x, plotLTWH[1] + plotLTWH[3]], thick, thinColor)\n      } else {\n        const str = humanize(i)\n        if (fntSize > 0) {\n          this.drawTextBelow([x, 2 + plotLTWH[1] + plotLTWH[3]], str, fntScale, graph.textColor)\n        }\n        this.drawLine([x, plotLTWH[1], x, plotLTWH[1] + plotLTWH[3]], thick, graph.lineColor)\n      }\n    }\n    // graph the lines for intensity across time\n    for (let j = 0; j < graph.lines.length; j++) {\n      let lineRGBA = [1, 0, 0, graph.lineAlpha]\n      if (j < graph.lineRGB.length) {\n        lineRGBA = [graph.lineRGB[j][0], graph.lineRGB[j][1], graph.lineRGB[j][2], graph.lineAlpha]\n      }\n      for (let i = 1; i < graph.lines[j].length; i++) {\n        const x0 = (i - 1) * scaleW //\n        const x1 = i * scaleW\n        const y0 = (graph.lines[j][i - 1] - mn) * scaleH\n        const y1 = (graph.lines[j][i] - mn) * scaleH\n        // let LTWH = [plotLTWH[0]+x0, plotLTWH[1]+plotLTWH[3]-y0, plotLTWH[0]+x1, -(y1-y0)];\n        const LTWH = [\n          plotLTWH[0] + x0,\n          plotLTWH[1] + plotLTWH[3] - y0,\n          plotLTWH[0] + x1,\n          plotLTWH[1] + plotLTWH[3] - y1\n        ]\n        this.drawLine(LTWH, graph.lineThickness, lineRGBA)\n      }\n    }\n    // draw vertical line indicating selected volume\n    if (graph.selectedColumn! >= 0 && graph.selectedColumn! < graph.lines[0].length) {\n      const x = graph.selectedColumn! * scaleW + plotLTWH[0]\n      this.drawLine([x, plotLTWH[1], x, plotLTWH[1] + plotLTWH[3]], graph.lineThickness, [\n        graph.lineRGB[3][0],\n        graph.lineRGB[3][1],\n        graph.lineRGB[3][2],\n        1\n      ])\n    }\n    if (this.detectPartialllyLoaded4D()) {\n      this.drawTextBelow(\n        [plotLTWH[0] + plotLTWH[2], plotLTWH[1] + plotLTWH[3] + fntSize * 0.5],\n        '...',\n        fntScale,\n        graph.textColor\n      )\n    }\n  }\n\n  // not included in public docs\n  depthPicker(leftTopWidthHeight: number[], mvpMatrix: mat4): void {\n    // use color of screen pixel to infer X,Y,Z coordinates\n    if (!this.uiData.mouseDepthPicker) {\n      return\n    }\n    // start PICKING: picking shader and reading values is slow\n    this.uiData.mouseDepthPicker = false\n    const gl = this.gl\n    const pixelX = (this.mousePos[0] * leftTopWidthHeight[2]) / leftTopWidthHeight[2]\n    const pixelY = gl.canvas.height - (this.mousePos[1] * leftTopWidthHeight[3]) / leftTopWidthHeight[3] - 1\n    const rgbaPixel = new Uint8Array(4)\n    gl.readPixels(\n      pixelX, // x\n      pixelY, // y\n      1, // width\n      1, // height\n      gl.RGBA, // format\n      gl.UNSIGNED_BYTE, // type\n      rgbaPixel\n    ) // typed array to hold result\n    this.selectedObjectId = rgbaPixel[3]\n    if (this.selectedObjectId === this.VOLUME_ID) {\n      this.scene.crosshairPos = new Float32Array(rgbaPixel.slice(0, 3)).map((x) => x / 255.0)\n      return\n    }\n    const depthZ = unpackFloatFromVec4i(rgbaPixel)\n    if (depthZ > 1.0) {\n      return\n    }\n    const fracX = (this.mousePos[0] - leftTopWidthHeight[0]) / leftTopWidthHeight[2]\n    const fracY = (gl.canvas.height - this.mousePos[1] - leftTopWidthHeight[1]) / leftTopWidthHeight[3]\n    // todo: check when top is not zero: leftTopWidthHeight[1]\n    const mm = unProject(fracX, fracY, depthZ, mvpMatrix)\n    // n.b. true as renderings are ALWAYS in MM world space. not fractional\n    const frac = this.mm2frac(mm, 0, true)\n    if (frac[0] < 0 || frac[0] > 1 || frac[1] < 0 || frac[1] > 1 || frac[2] < 0 || frac[2] > 1) {\n      return\n    }\n    this.scene.crosshairPos = this.mm2frac(mm, 0, true)\n  }\n\n  // not included in public docs\n  // display 3D volume rendering of NVImage\n  drawImage3D(mvpMatrix: mat4, azimuth: number, elevation: number): void {\n    if (this.volumes.length === 0) {\n      return\n    }\n    const gl = this.gl\n    const rayDir = this.calculateRayDirection(azimuth, elevation)\n    const object3D = this.volumeObject3D\n    if (object3D) {\n      gl.enable(gl.BLEND)\n      gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA)\n      gl.enable(gl.CULL_FACE)\n      gl.cullFace(gl.FRONT) // TH switch since we L/R flipped in calculateMvpMatrix\n      let shader = this.renderShader!\n      if (this.uiData.mouseDepthPicker) {\n        shader = this.pickingImageShader!\n      }\n      shader.use(this.gl)\n      // next lines optional: these textures should be bound by default\n      // these lines can cause warnings, e.g. if drawTexture not used or created\n      // gl.activeTexture(TEXTURE0_BACK_VOL)\n      // gl.bindTexture(gl.TEXTURE_3D, this.volumeTexture)\n      // gl.activeTexture(TEXTURE1_COLORMAPS)\n      // gl.bindTexture(gl.TEXTURE_2D, this.colormapTexture)\n      // gl.activeTexture(TEXTURE2_OVERLAY_VOL)\n      // gl.bindTexture(gl.TEXTURE_3D, this.overlayTexture)\n      // gl.activeTexture(TEXTURE7_DRAW)\n      // gl.bindTexture(gl.TEXTURE_3D, this.drawTexture)\n      gl.uniform1i(shader.uniforms.backgroundMasksOverlays, this.backgroundMasksOverlays)\n      if (this.gradientTextureAmount > 0.0) {\n        gl.activeTexture(TEXTURE6_GRADIENT)\n        gl.bindTexture(gl.TEXTURE_3D, this.gradientTexture)\n        const modelMatrix = this.calculateModelMatrix(azimuth, elevation)\n        const iModelMatrix = mat4.create()\n        mat4.invert(iModelMatrix, modelMatrix)\n        const normalMatrix = mat4.create()\n        mat4.transpose(normalMatrix, iModelMatrix)\n        gl.uniformMatrix4fv(shader.uniforms.normMtx, false, normalMatrix)\n      }\n      if (this.drawBitmap && this.drawBitmap.length > 8) {\n        gl.uniform2f(shader.uniforms.renderDrawAmbientOcclusionXY, this.renderDrawAmbientOcclusion, this.drawOpacity)\n      } else {\n        gl.uniform2f(shader.uniforms.renderDrawAmbientOcclusionXY, this.renderDrawAmbientOcclusion, 0.0)\n      }\n      gl.uniformMatrix4fv(shader.uniforms.mvpMtx, false, mvpMatrix)\n      gl.uniformMatrix4fv(shader.uniforms.matRAS, false, this.back!.matRAS!)\n      gl.uniform3fv(shader.uniforms.rayDir, rayDir)\n\n      if (this.gradientTextureAmount < 0.0) {\n        // use slice shader\n        gl.uniform4fv(shader.uniforms.clipPlane, [\n          this.scene.crosshairPos[0],\n          this.scene.crosshairPos[1],\n          this.scene.crosshairPos[2],\n          30\n        ])\n      } else {\n        gl.uniform4fv(shader.uniforms.clipPlane, this.scene.clipPlane)\n      }\n      gl.uniform1f(shader.uniforms.drawOpacity, 1.0)\n\n      gl.bindVertexArray(object3D.vao)\n      gl.drawElements(object3D.mode, object3D.indexCount, gl.UNSIGNED_SHORT, 0)\n      gl.bindVertexArray(this.unusedVAO)\n    }\n  }\n\n  // not included in public docs\n  // draw cube that shows L/R, A/P, I/S directions\n  drawOrientationCube(leftTopWidthHeight: number[], azimuth = 0, elevation = 0): void {\n    if (!this.opts.isOrientCube) {\n      return\n    }\n    const sz = 0.05 * Math.min(leftTopWidthHeight[2], leftTopWidthHeight[3])\n    if (sz < 5) {\n      return\n    }\n    const gl = this.gl\n    gl.enable(gl.CULL_FACE)\n    gl.cullFace(gl.BACK)\n    this.orientCubeShader!.use(this.gl)\n    gl.bindVertexArray(this.orientCubeShaderVAO)\n    const modelMatrix = mat4.create()\n    const projectionMatrix = mat4.create()\n    // ortho(out, left, right, bottom, top, near, far)\n    mat4.ortho(projectionMatrix, 0, gl.canvas.width, 0, gl.canvas.height, -10 * sz, 10 * sz)\n    let translateUpForColorbar = 0\n    if (leftTopWidthHeight[1] === 0) {\n      translateUpForColorbar = gl.canvas.height - this.effectiveCanvasHeight()\n    }\n    mat4.translate(modelMatrix, modelMatrix, [\n      1.8 * sz + leftTopWidthHeight[0],\n      translateUpForColorbar + 1.8 * sz + leftTopWidthHeight[1],\n      0\n    ])\n    mat4.scale(modelMatrix, modelMatrix, [sz, sz, sz])\n    // apply elevation\n    mat4.rotateX(modelMatrix, modelMatrix, deg2rad(270 - elevation))\n    // apply azimuth\n    mat4.rotateZ(modelMatrix, modelMatrix, deg2rad(-azimuth))\n    const modelViewProjectionMatrix = mat4.create()\n    mat4.multiply(modelViewProjectionMatrix, projectionMatrix, modelMatrix)\n    gl.uniformMatrix4fv(this.orientCubeShader!.uniforms.u_matrix, false, modelViewProjectionMatrix)\n    gl.drawArrays(gl.TRIANGLE_STRIP, 0, 168)\n    gl.bindVertexArray(this.unusedVAO)\n    this.gl.disable(this.gl.CULL_FACE)\n  }\n\n  // not included in public docs\n  // fills data returned with the onLocationChanvge() callback\n  createOnLocationChange(axCorSag = NaN): void {\n    // first: provide a string representation\n    const [_mn, _mx, range] = this.sceneExtentsMinMax(true)\n    const fov = Math.max(Math.max(range[0], range[1]), range[2])\n    function dynamicDecimals(flt: number): number {\n      return Math.max(0.0, -Math.ceil(Math.log10(Math.abs(flt))))\n    }\n    // dynamic decimal places: fov>100->0, fov>10->1, fov>1->2\n    let deci = dynamicDecimals(fov * 0.001)\n    const mm = this.frac2mm(this.scene.crosshairPos, 0, true)\n    function flt2str(flt: number, decimals = 0): number {\n      return parseFloat(flt.toFixed(decimals))\n    }\n    let str = flt2str(mm[0], deci) + '×' + flt2str(mm[1], deci) + '×' + flt2str(mm[2], deci)\n    if (this.volumes.length > 0 && this.volumes[0].nFrame4D! > 0) {\n      str += '×' + flt2str(this.volumes[0].frame4D)\n    }\n    // voxel based layer intensity\n    if (this.volumes.length > 0) {\n      let valStr = ' = '\n      for (let i = 0; i < this.volumes.length; i++) {\n        const vox = this.volumes[i].mm2vox(mm as number[])\n        let flt = this.volumes[i].getValue(vox[0], vox[1], vox[2], this.volumes[i].frame4D)\n        deci = 3\n        if (this.volumes[i].colormapLabel !== null) {\n          const v = Math.round(flt)\n          if (v >= 0 && v < this.volumes[i].colormapLabel!.labels!.length) {\n            valStr += this.volumes[i].colormapLabel!.labels![v]\n          } else {\n            valStr += 'undefined(' + flt2str(flt, deci) + ')'\n          }\n        } else {\n          valStr += flt2str(flt, deci)\n        }\n        if (this.volumes[i].imaginary) {\n          flt = this.volumes[i].getValue(vox[0], vox[1], vox[2], this.volumes[i].frame4D, true)\n          if (flt >= 0) {\n            valStr += '+'\n          }\n          valStr += flt2str(flt, deci)\n        }\n        valStr += '   '\n      }\n      str += valStr\n      // drawingBitmap\n      const dims = this.back!.dimsRAS!\n      const nv = dims[1] * dims[2] * dims[3]\n      if (this.drawBitmap && this.drawBitmap.length === nv) {\n        const vox = this.frac2vox(this.scene.crosshairPos)\n        const vx = vox[0] + vox[1] * dims[1] + vox[2] * dims[1] * dims[2]\n        // str += this.drawBitmap[vx].toString();\n        str += ' ' + this.drawLut.labels![this.drawBitmap[vx]]\n      }\n    }\n\n    // const msg = {\n    //   mm: this.frac2mm(this.scene.crosshairPos, 0, true),\n    //   axCorSag,\n    //   vox: this.frac2vox(this.scene.crosshairPos),\n    //   frac: this.scene.crosshairPos,\n    //   xy: [this.mousePos[0], this.mousePos[1]],\n    //   values: this.volumes.map((v) => {\n    //     const mm = this.frac2mm(this.scene.crosshairPos, 0, true)\n    //     const vox = v.mm2vox(mm as number[]) // e.mm2vox\n    //     const val = v.getValue(vox[0], vox[1], vox[2], v.frame4D)\n    //     return { name: v.name, value: val, id: v.id, mm, vox }\n    //   }),\n    //   string: str\n    // }\n\n    // make msg object of type NVLocation\n    const msg: NiiVueLocation = {\n      mm: this.frac2mm(this.scene.crosshairPos, 0, true),\n      axCorSag,\n      vox: this.frac2vox(this.scene.crosshairPos),\n      frac: this.scene.crosshairPos,\n      xy: [this.mousePos[0], this.mousePos[1]],\n      values: this.volumes.map((v) => {\n        const mm = this.frac2mm(this.scene.crosshairPos, 0, true)\n        const vox = v.mm2vox(mm as number[]) // e.mm2vox\n        const val = v.getValue(vox[0], vox[1], vox[2], v.frame4D)\n        return {\n          name: v.name,\n          value: val,\n          id: v.id,\n          mm,\n          vox\n        } as NiiVueLocationValue\n      }),\n      string: str\n    }\n\n    this.onLocationChange(msg)\n  }\n\n  /**\n   * Add a 3D Label\n   * @param text - text of the label\n   * @param style - label style\n   * @param point - 3D point on the model\n   */\n  addLabel(\n    text: string,\n    style: NVLabel3DStyle,\n    points?: number[] | number[][],\n    anchor?: LabelAnchorPoint,\n    onClick?: (label: NVLabel3D) => void\n  ): NVLabel3D {\n    const defaultStyle = {\n      textColor: this.opts.legendTextColor,\n      textScale: 1.0,\n      textAlignment: LabelTextAlignment.LEFT,\n      lineWidth: 0.0,\n      lineColor: this.opts.legendTextColor,\n      lineTerminator: LabelLineTerminator.NONE,\n      bulletScale: 0.0,\n      bulletColor: this.opts.legendTextColor\n    }\n    const labelStyle = style ? { ...defaultStyle, ...style } : { ...defaultStyle }\n    const label = new NVLabel3D(text, { ...labelStyle }, points, anchor, onClick)\n    this.document.labels.push(label)\n    return label\n  }\n\n  // not included in public docs\n  calculateScreenPoint(point: [number, number, number], mvpMatrix: mat4, leftTopWidthHeight: number[]): vec4 {\n    const screenPoint = vec4.create()\n    // Multiply the 3D point by the model-view-projection matrix\n    vec4.transformMat4(screenPoint, [...point, 1.0], mvpMatrix)\n    // Convert the 4D point to 2D screen coordinates\n    if (screenPoint[3] !== 0.0) {\n      screenPoint[0] = (screenPoint[0] / screenPoint[3] + 1.0) * 0.5 * leftTopWidthHeight[2]\n      screenPoint[1] = (1.0 - screenPoint[1] / screenPoint[3]) * 0.5 * leftTopWidthHeight[3]\n      screenPoint[2] /= screenPoint[3]\n\n      screenPoint[0] += leftTopWidthHeight[0]\n      screenPoint[1] += leftTopWidthHeight[1]\n    }\n    return screenPoint\n  }\n\n  getLabelAtPoint(screenPoint: [number, number]): NVLabel3D | null {\n    const scale = 1.0\n    const size = this.opts.textHeight * Math.min(this.gl.canvas.height, this.gl.canvas.width) * scale\n    const verticalMargin = this.opts.textHeight * this.gl.canvas.height * scale\n\n    // get all non-connectome labels\n    for (const label of this.document.labels) {\n      if (label.anchor == null || label.anchor === LabelAnchorPoint.NONE) {\n        continue\n      }\n\n      const labelSize = this.opts.textHeight * this.gl.canvas.height * label.style.textScale\n      const textHeight = this.textHeight(labelSize, label.text)\n      const textWidth = this.textWidth(labelSize, label.text)\n\n      if (label.anchor & LabelAnchorFlag.LEFT) {\n        if (screenPoint[0] > textWidth) {\n          continue\n        }\n      }\n\n      if (label.anchor & LabelAnchorFlag.CENTER) {\n        if (screenPoint[0] < (this.gl.canvas.width - textWidth) / 2) {\n          continue\n        }\n\n        if (screenPoint[0] > (this.gl.canvas.width + textWidth) / 2) {\n          continue\n        }\n      }\n\n      if (label.anchor & LabelAnchorFlag.RIGHT) {\n        if (screenPoint[0] < this.gl.canvas.width - textWidth) {\n          continue\n        }\n      }\n\n      if (label.anchor & LabelAnchorFlag.TOP) {\n        if (screenPoint[1] < verticalMargin / 2) {\n          continue\n        }\n\n        if (screenPoint[1] > textHeight + verticalMargin / 2) {\n          continue\n        }\n      }\n\n      if (label.anchor & LabelAnchorFlag.MIDDLE) {\n        if (screenPoint[1] < (this.gl.canvas.height - textHeight - verticalMargin) / 2) {\n          continue\n        }\n\n        if (screenPoint[1] > (this.gl.canvas.height + textHeight - verticalMargin / 2) / 2) {\n          continue\n        }\n      }\n\n      if (label.anchor & LabelAnchorFlag.BOTTOM) {\n        if (screenPoint[1] < this.gl.canvas.height - textHeight - verticalMargin) {\n          continue\n        }\n\n        if (screenPoint[1] > this.gl.canvas.height - verticalMargin / 2) {\n          continue\n        }\n      }\n\n      // label passed all tests\n      return label\n    }\n    log.debug('screenPoint', screenPoint)\n    const panelHeight = this.getLegendPanelHeight()\n    const panelWidth = this.getLegendPanelWidth()\n    const left = this.gl.canvas.width - panelWidth\n    let top = (this.canvas!.height - panelHeight) / 2\n    log.debug('panelrect', left, top, left + panelWidth, top + panelHeight)\n    if (\n      screenPoint[0] < left ||\n      screenPoint[1] < top ||\n      screenPoint[0] > left + panelWidth ||\n      screenPoint[1] > top + panelHeight\n    ) {\n      return null\n    }\n\n    const labels = this.getConnectomeLabels()\n    for (const label of labels) {\n      const labelSize = this.opts.textHeight * this.gl.canvas.height * label.style.textScale\n      const textHeight = this.textHeight(labelSize, label.text)\n      if (screenPoint[1] >= top && screenPoint[1] <= top + textHeight + size / 2) {\n        return label\n      }\n      top += textHeight\n      top += size / 2\n    }\n    return null\n  }\n\n  drawLabelLine(label: NVLabel3D, pos: vec2, mvpMatrix: mat4, leftTopWidthHeight: number[], secondPass = false): void {\n    const points =\n      Array.isArray(label.points) && Array.isArray(label.points[0])\n        ? (label.points as Array<[number, number, number]>)\n        : ([label.points] as Array<[number, number, number]>)\n    for (const point of points) {\n      const screenPoint = this.calculateScreenPoint(point, mvpMatrix, leftTopWidthHeight)\n      if (!secondPass) {\n        // draw line\n        this.draw3DLine(\n          pos,\n          [screenPoint[0], screenPoint[1], screenPoint[2]],\n          label.style.lineWidth,\n          label.style.lineColor\n        )\n      } else {\n        this.drawDottedLine([...pos, screenPoint[0], screenPoint[1]], label.style.lineWidth, label.style.lineColor)\n      }\n    }\n  }\n\n  // not included in public docs\n  draw3DLabel(\n    label: NVLabel3D,\n    pos: vec2,\n    mvpMatrix?: mat4,\n    leftTopWidthHeight?: number[],\n    bulletMargin?: number,\n    legendWidth?: number,\n    secondPass?: boolean\n  ): void {\n    const text = label.text\n    const left = pos[0]\n    const top = pos[1]\n\n    // const scale = label.style.textScale;\n    const size = this.opts.textHeight * Math.min(this.gl.canvas.height, this.gl.canvas.width) * 1.0\n\n    const textHeight = this.textHeight(label.style.textScale, text) * size\n\n    if (label.style.lineWidth > 0.0 && Array.isArray(label.points)) {\n      this.drawLabelLine(label, [left, top + textHeight], mvpMatrix, leftTopWidthHeight, secondPass)\n    }\n\n    if (label.style.bulletScale) {\n      const bulletSize = label.style.bulletScale * textHeight\n      const diff = textHeight - bulletSize\n      const rectTop = top + diff / 2 + bulletSize / 2\n      const rectLeft = left + (bulletMargin - bulletSize) / 2\n\n      this.drawCircle([rectLeft, rectTop, bulletSize, bulletSize], label.style.bulletColor)\n    }\n\n    let textLeft = left\n\n    if (legendWidth) {\n      if (label.style.textAlignment !== LabelTextAlignment.LEFT) {\n        const textWidth = this.textWidth(label.style.textScale, label.text) * size\n        if (label.style.textAlignment === LabelTextAlignment.RIGHT) {\n          textLeft = left + legendWidth - size * 1.5 - textWidth\n        } else {\n          const remaining = legendWidth - (bulletMargin || size)\n          textLeft += (remaining - textWidth) / 2\n        }\n      } else {\n        // textLeft += size / 2;\n        textLeft += bulletMargin\n      }\n    }\n\n    this.drawText([textLeft, top], text, label.style.textScale, label.style.textColor)\n  }\n\n  // not included in public docs\n  draw3DLabels(mvpMatrix: mat4, leftTopWidthHeight: number[], secondPass = false): void {\n    const labels = this.getConnectomeLabels()\n    if (!this.opts.showLegend || labels.length === 0) {\n      return\n    }\n\n    if (!this.canvas) {\n      throw new Error('canvas undefined')\n    }\n\n    const gl = this.gl\n    gl.disable(gl.CULL_FACE)\n    gl.viewport(0, 0, this.canvas.width, this.canvas.height)\n\n    const scale = 1.0\n    const size = this.opts.textHeight * Math.min(this.gl.canvas.height, this.gl.canvas.width) * scale\n\n    const bulletMargin = this.getBulletMarginWidth()\n    const panelHeight = this.getLegendPanelHeight()\n    const panelWidth = this.getLegendPanelWidth()\n    const left = gl.canvas.width - panelWidth\n    let top = (this.canvas.height - panelHeight) / 2\n    this.drawRect([gl.canvas.width - panelWidth, top, panelWidth - size, panelHeight], this.opts.legendBackgroundColor)\n    const blend = gl.getParameter(gl.BLEND)\n    const depthFunc = gl.getParameter(gl.DEPTH_FUNC)\n\n    if (!secondPass) {\n      gl.disable(gl.BLEND)\n      gl.depthFunc(gl.GREATER)\n    }\n\n    for (const label of labels) {\n      this.draw3DLabel(label, [left, top], mvpMatrix, leftTopWidthHeight, bulletMargin, panelWidth, secondPass)\n\n      const labelSize = this.opts.textHeight * this.gl.canvas.height * label.style.textScale\n      const textHeight = this.textHeight(labelSize, label.text)\n\n      top += textHeight // Math.max(textHeight, bulletHeight);\n      top += size / 2\n    }\n\n    // connectome labels\n\n    if (!secondPass) {\n      gl.depthFunc(depthFunc)\n      if (blend) {\n        gl.enable(gl.BLEND)\n      }\n    }\n  }\n\n  drawAnchoredLabels(): void {\n    const size = this.opts.textHeight * Math.min(this.gl.canvas.height, this.gl.canvas.width) * 1.0\n    const anchoredLabels = this.document.labels.filter((l) => l.anchor != null && l.anchor !== LabelAnchorPoint.NONE)\n    for (const label of anchoredLabels) {\n      const text = label.text\n      const textHeight = this.textHeight(label.style.textScale, text) * size\n      const textWidth = this.textWidth(label.style.textScale, text) * size\n      let left: number\n      let top: number\n\n      const scale = 1.0 // we may want to make this adjustable in the future\n      const verticalMargin = this.opts.textHeight * this.gl.canvas.height * scale\n      const rectHeightDiff = verticalMargin\n      let rectWidthDiff = verticalMargin / 4\n      let rectHorizontalOffset = 0\n      let rectVerticalOffset = 0\n\n      if (label.anchor & LabelAnchorFlag.LEFT) {\n        left = 0\n      }\n\n      if (label.anchor & LabelAnchorFlag.RIGHT) {\n        left = this.canvas.width - textWidth\n        rectHorizontalOffset -= verticalMargin / 4\n      }\n\n      if (label.anchor & LabelAnchorFlag.CENTER) {\n        left = (this.canvas.width - textWidth) / 2\n        rectHorizontalOffset -= verticalMargin / 4\n        rectWidthDiff += verticalMargin / 4\n      }\n\n      if (label.anchor & LabelAnchorFlag.TOP) {\n        top = 0\n      }\n\n      if (label.anchor & LabelAnchorFlag.MIDDLE) {\n        top = (this.canvas.height - textHeight - verticalMargin) / 2\n        rectVerticalOffset -= verticalMargin / 4\n      }\n\n      if (label.anchor & LabelAnchorFlag.BOTTOM) {\n        top = this.canvas.height - textHeight - verticalMargin\n        rectVerticalOffset -= verticalMargin / 4\n      }\n      this.drawRect(\n        [left + rectHorizontalOffset, top + rectVerticalOffset, textWidth + rectWidthDiff, textHeight + rectHeightDiff],\n        label.style.backgroundColor\n      )\n      this.draw3DLabel(label, [left, top])\n    }\n  }\n\n  // not included in public docs\n  draw3D(\n    leftTopWidthHeight = [0, 0, 0, 0],\n    mvpMatrix: mat4 | null = null,\n    modelMatrix: mat4 | null = null,\n    normalMatrix: mat4 | null = null,\n    azimuth: number | null = null,\n    elevation = 0\n  ): string | undefined {\n    const isMosaic = azimuth !== null\n    this.setPivot3D()\n    if (!isMosaic) {\n      azimuth = this.scene.renderAzimuth\n      elevation = this.scene.renderElevation\n    }\n    const gl = this.gl\n    if (mvpMatrix === null) {\n      ;[mvpMatrix, modelMatrix, normalMatrix] = this.calculateMvpMatrix(null, leftTopWidthHeight, azimuth!, elevation)\n    }\n\n    let relativeLTWH = [...leftTopWidthHeight]\n    if (leftTopWidthHeight[2] === 0 || leftTopWidthHeight[3] === 0) {\n      // use full canvas\n      leftTopWidthHeight = [0, 0, gl.canvas.width, gl.canvas.height]\n      relativeLTWH = [...leftTopWidthHeight]\n      this.screenSlices.push({\n        leftTopWidthHeight,\n        axCorSag: SLICE_TYPE.RENDER,\n        sliceFrac: 0,\n        AxyzMxy: [],\n        leftTopMM: [],\n        fovMM: [isRadiological(modelMatrix!), 0]\n      })\n    } else {\n      this.screenSlices.push({\n        leftTopWidthHeight: leftTopWidthHeight.slice(),\n        axCorSag: SLICE_TYPE.RENDER,\n        sliceFrac: 0,\n        AxyzMxy: [],\n        leftTopMM: [],\n        fovMM: [isRadiological(modelMatrix!), 0]\n      })\n      leftTopWidthHeight[1] = gl.canvas.height - leftTopWidthHeight[3] - leftTopWidthHeight[1]\n    }\n    gl.enable(gl.DEPTH_TEST)\n    gl.depthFunc(gl.ALWAYS)\n    gl.depthMask(true)\n    gl.clearDepth(0.0)\n    this.draw3DLabels(mvpMatrix, relativeLTWH, false)\n\n    gl.viewport(leftTopWidthHeight[0], leftTopWidthHeight[1], leftTopWidthHeight[2], leftTopWidthHeight[3])\n\n    if (this.volumes.length > 0) {\n      this.updateInterpolation(0, true) // force background interpolation\n      this.updateInterpolation(1, true) // force overlay interpolation\n      this.drawImage3D(mvpMatrix, azimuth!, elevation)\n    }\n    this.updateInterpolation(0) // use default background interpolation for 2D slices\n    this.updateInterpolation(1) // use default overlay interpolation for 2D slices\n    if (!isMosaic) {\n      this.drawCrosshairs3D(true, 1.0, mvpMatrix)\n    }\n    this.drawMesh3D(true, 1.0, mvpMatrix, modelMatrix!, normalMatrix!)\n    if (this.uiData.mouseDepthPicker) {\n      this.depthPicker(leftTopWidthHeight, mvpMatrix)\n      this.createOnLocationChange()\n      // redraw with render shader\n      this.draw3D(leftTopWidthHeight, mvpMatrix, modelMatrix, normalMatrix, azimuth, elevation)\n      return\n    }\n    if (this.opts.meshXRay > 0.0) {\n      this.drawMesh3D(false, this.opts.meshXRay, mvpMatrix, modelMatrix!, normalMatrix!)\n    }\n\n    //\n    this.draw3DLabels(mvpMatrix, relativeLTWH, false)\n\n    gl.viewport(leftTopWidthHeight[0], leftTopWidthHeight[1], leftTopWidthHeight[2], leftTopWidthHeight[3])\n    //\n    if (!isMosaic) {\n      this.drawCrosshairs3D(false, 0.15, mvpMatrix)\n    }\n    gl.viewport(0, 0, gl.canvas.width, gl.canvas.height)\n    this.drawOrientationCube(leftTopWidthHeight, azimuth!, elevation)\n    const posString =\n      'azimuth: ' + this.scene.renderAzimuth.toFixed(0) + ' elevation: ' + this.scene.renderElevation.toFixed(0)\n    // this.drawGraph();\n    // bus.$emit('crosshair-pos-change', posString);\n    this.readyForSync = true\n    this.sync()\n    this.draw3DLabels(mvpMatrix, relativeLTWH, true)\n\n    return posString\n  }\n\n  // not included in public docs\n  // create 3D rendering of NVMesh on canvas\n  drawMesh3D(isDepthTest = true, alpha = 1.0, m?: mat4, modelMtx?: mat4, normMtx?: mat4): void {\n    if (this.meshes.length < 1) {\n      return\n    }\n    const gl = this.gl\n    // let m, modelMtx, normMtx;\n    if (!m) {\n      // FIXME this was calculateMvpMatrix(object3d, azimuth, elevation) -- i.e. elevation got assigned to azimuth etc.\n      ;[m, modelMtx, normMtx] = this.calculateMvpMatrix(\n        this.volumeObject3D,\n        undefined,\n        this.scene.renderAzimuth,\n        this.scene.renderElevation\n      )\n    }\n    gl.enable(gl.DEPTH_TEST)\n    gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA)\n\n    gl.disable(gl.BLEND)\n    gl.depthFunc(gl.GREATER)\n    gl.disable(gl.CULL_FACE)\n    if (isDepthTest) {\n      gl.disable(gl.BLEND)\n      gl.depthFunc(gl.GREATER)\n    } else {\n      gl.enable(gl.BLEND)\n      gl.depthFunc(gl.ALWAYS)\n      gl.enable(gl.CULL_FACE) // issue700\n    }\n    gl.cullFace(gl.BACK) // CR: issue700\n    // show front and back face for mesh clipping https://niivue.github.io/niivue/features/worldspace2.html\n    // if (this.opts.meshThicknessOn2D !== Infinity) gl.disable(gl.CULL_FACE);\n    // else gl.enable(gl.CULL_FACE); //issue700: only show front faces\n    // gl.frontFace(gl.CCW); //issue700: we now require CCW\n    // Draw the mesh\n    let shader: Shader = this.meshShaders[0].shader!\n    // this.meshShaderIndex\n    let hasFibers = false\n    for (let i = 0; i < this.meshes.length; i++) {\n      if (this.meshes[i].visible === false) {\n        continue\n      }\n      shader = this.meshShaders[this.meshes[i].meshShaderIndex].shader!\n      if (this.uiData.mouseDepthPicker) {\n        shader = this.pickingMeshShader!\n      }\n      shader.use(this.gl) // set Shader\n      // set shader uniforms\n      gl.uniformMatrix4fv(shader.uniforms.mvpMtx, false, m)\n      // gl.uniformMatrix4fv(shader.uniforms[\"modelMtx\"], false, modelMtx);\n      // gl.uniformMatrix4fv(shader.uniforms[\"normMtx\"], false, normMtx);\n      // gl.uniform1f(shader.uniforms[\"opacity\"], alpha);\n      gl.uniformMatrix4fv(shader.uniforms.normMtx, false, normMtx!)\n      gl.uniform1f(shader.uniforms.opacity, alpha)\n      if (this.meshes[i].indexCount! < 3) {\n        continue\n      }\n\n      if (this.meshes[i].offsetPt0 && (this.meshes[i].fiberSides < 3 || this.meshes[i].fiberRadius <= 0)) {\n        // if fibers has less than 3 sides, render as line not cylinder mesh\n        hasFibers = true\n        continue\n      }\n      if (shader.isMatcap) {\n        gl.activeTexture(TEXTURE5_MATCAP)\n        gl.bindTexture(gl.TEXTURE_2D, this.matCapTexture)\n      }\n      gl.bindVertexArray(this.meshes[i].vao)\n      gl.drawElements(gl.TRIANGLES, this.meshes[i].indexCount!, gl.UNSIGNED_INT, 0)\n      gl.bindVertexArray(this.unusedVAO)\n    }\n    // draw fibers\n    if (!hasFibers) {\n      gl.enable(gl.BLEND)\n      gl.depthFunc(gl.ALWAYS)\n      return\n    }\n    shader = this.fiberShader!\n    shader.use(this.gl)\n    gl.uniformMatrix4fv(shader.uniforms.mvpMtx, false, m)\n    gl.uniform1f(shader.uniforms.opacity, alpha)\n    for (let i = 0; i < this.meshes.length; i++) {\n      if (this.meshes[i].indexCount! < 3) {\n        continue\n      }\n      if (!this.meshes[i].offsetPt0) {\n        continue\n      }\n      if (this.meshes[i].fiberSides >= 3 && this.meshes[i].fiberRadius > 0) {\n        continue // rendered as mesh cylinder, not line strip\n      }\n      gl.bindVertexArray(this.meshes[i].vaoFiber)\n      gl.drawElements(gl.LINE_STRIP, this.meshes[i].indexCount!, gl.UNSIGNED_INT, 0)\n      gl.bindVertexArray(this.unusedVAO)\n    }\n    gl.enable(gl.BLEND)\n    gl.depthFunc(gl.ALWAYS)\n    this.readyForSync = true\n  }\n\n  // not included in public docs\n  drawCrosshairs3D(\n    isDepthTest = true,\n    alpha = 1.0,\n    mvpMtx: mat4 | null = null,\n    is2DView = false,\n    isSliceMM = true\n  ): void {\n    if (!this.opts.show3Dcrosshair && !is2DView) {\n      return\n    }\n    if (this.opts.crosshairWidth <= 0.0 && is2DView) {\n      return\n    }\n    const gl = this.gl\n    const mm = this.frac2mm(this.scene.crosshairPos, 0, isSliceMM)\n    let radius = 1\n    const [mn, mx, range] = this.sceneExtentsMinMax(isSliceMM)\n    if (this.volumes.length > 0) {\n      if (!this.back) {\n        throw new Error('back undefined')\n      }\n      radius = 0.5 * Math.min(Math.min(this.back.pixDims![1], this.back.pixDims![2]), this.back.pixDims![3])\n    } else if (range[0] < 50 || range[0] > 1000) {\n      radius = range[0] * 0.02\n    } // 2% of first dimension\n    radius *= this.opts.crosshairWidth\n    if (this.opts?.crosshairWidthUnit === 'percent') {\n      radius = range[0] * this.opts.crosshairWidth * 0.5 * 0.01\n    }\n    if (this.opts?.crosshairWidthUnit === 'mm') {\n      radius = this.opts.crosshairWidth * 0.5\n    }\n    // generate our crosshairs for the base volume\n    if (\n      this.crosshairs3D === null ||\n      this.crosshairs3D.mm![0] !== mm[0] ||\n      this.crosshairs3D.mm![1] !== mm[1] ||\n      this.crosshairs3D.mm![2] !== mm[2]\n    ) {\n      if (this.crosshairs3D !== null) {\n        gl.deleteBuffer(this.crosshairs3D.indexBuffer) // TODO: handle in nvimage.js: create once, update with bufferSubData\n        gl.deleteBuffer(this.crosshairs3D.vertexBuffer) // TODO: handle in nvimage.js: create once, update with bufferSubData\n      }\n      this.crosshairs3D = NiivueObject3D.generateCrosshairs(this.gl, 1, mm, mn, mx, radius, 20, this.opts.crosshairGap)\n      this.crosshairs3D.mm = mm\n      // this.crosshairs3D.radius = radius\n    }\n\n    if (!this.surfaceShader) {\n      throw new Error('surfaceShader undefined')\n    }\n    const crosshairsShader = this.surfaceShader\n    crosshairsShader.use(this.gl)\n    if (mvpMtx == null) {\n      // FIXME see above - I added the undefined, parameters were misaligned\n      ;[mvpMtx] = this.calculateMvpMatrix(\n        this.crosshairs3D,\n        undefined,\n        this.scene.renderAzimuth,\n        this.scene.renderElevation\n      )\n    }\n    gl.uniformMatrix4fv(crosshairsShader.uniforms.mvpMtx, false, mvpMtx)\n    gl.disable(gl.CULL_FACE)\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.crosshairs3D.indexBuffer)\n    gl.enable(gl.DEPTH_TEST)\n    const color = [...this.opts.crosshairColor]\n    if (isDepthTest) {\n      gl.disable(gl.BLEND)\n      // gl.depthFunc(gl.LESS); //pass if LESS than incoming value\n      gl.depthFunc(gl.GREATER)\n    } else {\n      gl.enable(gl.BLEND)\n      gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA)\n      gl.depthFunc(gl.ALWAYS)\n    }\n    color[3] = alpha\n    gl.uniform4fv(crosshairsShader.uniforms.surfaceColor, color)\n    gl.bindVertexArray(this.crosshairs3D.vao)\n    gl.drawElements(\n      gl.TRIANGLES,\n      this.crosshairs3D.indexCount,\n      gl.UNSIGNED_INT, // gl.UNSIGNED_SHORT,\n      0\n    )\n    gl.bindVertexArray(this.unusedVAO) // https://stackoverflow.com/questions/43904396/are-we-not-allowed-to-bind-gl-array-buffer-and-vertex-attrib-array-to-0-in-webgl\n  }\n\n  // not included in public docs\n  mm2frac(mm: vec3 | vec4, volIdx = 0, isForceSliceMM = false): vec3 {\n    // given mm, return volume fraction\n    if (this.volumes.length < 1) {\n      const frac = vec3.fromValues(0.1, 0.5, 0.5)\n      const [mn, _mx, range] = this.sceneExtentsMinMax()\n      frac[0] = (mm[0] - mn[0]) / range[0]\n      frac[1] = (mm[1] - mn[1]) / range[1]\n      frac[2] = (mm[2] - mn[2]) / range[2]\n      // FIXME this makes no sense, frac is an array\n      // @ts-expect-error -- not sure what should happen here\n      if (!isFinite(frac)) {\n        if (!isFinite(frac[0])) {\n          frac[0] = 0.5\n        }\n        if (!isFinite(frac[1])) {\n          frac[1] = 0.5\n        }\n        if (!isFinite(frac[2])) {\n          frac[2] = 0.5\n        }\n        if (this.meshes.length < 1) {\n          log.error('mm2frac() not finite: objects not (yet) loaded.')\n        }\n      }\n      return frac\n    }\n    return this.volumes[volIdx].convertMM2Frac(mm, isForceSliceMM || this.opts.isSliceMM)\n  }\n\n  // not included in public docs\n  vox2frac(vox: vec3, volIdx = 0): vec3 {\n    return this.volumes[volIdx].convertVox2Frac(vox)\n  }\n\n  // not included in public docs\n  frac2vox(frac: vec3, volIdx = 0): vec3 {\n    // convert from normalized texture space XYZ= [0..1, 0..1 ,0..1] to 0-index voxel space [0..dim[1]-1, 0..dim[2]-1, 0..dim[3]-1]\n    // consider dimension with 3 voxels, the voxel centers are at 0.25, 0.5, 0.75 corresponding to 0,1,2\n    if (this.volumes.length <= volIdx) {\n      return [0, 0, 0]\n    }\n\n    return this.volumes[volIdx].convertFrac2Vox(frac)\n  }\n\n  /**\n   * move crosshair a fixed number of voxels (not mm)\n   * @param x - translate left (-) or right (+)\n   * @param y - translate posterior (-) or +anterior (+)\n   * @param z - translate inferior (-) or superior (+)\n   * @example niivue.moveCrosshairInVox(1, 0, 0)\n   * @see {@link https://niivue.github.io/niivue/features/draw2.html | live demo usage}\n   */\n  moveCrosshairInVox(x: number, y: number, z: number): void {\n    const vox = this.frac2vox(this.scene.crosshairPos)\n    vox[0] += x\n    vox[1] += y\n    vox[2] += z\n    vox[0] = clamp(vox[0], 0, this.volumes[0].dimsRAS![1] - 1)\n    vox[1] = clamp(vox[1], 0, this.volumes[0].dimsRAS![2] - 1)\n    vox[2] = clamp(vox[2], 0, this.volumes[0].dimsRAS![3] - 1)\n    this.scene.crosshairPos = this.vox2frac(vox)\n    this.createOnLocationChange()\n    this.drawScene()\n  }\n\n  // not included in public docs\n  frac2mm(frac: vec3, volIdx = 0, isForceSliceMM = false): vec4 {\n    const pos = vec4.fromValues(frac[0], frac[1], frac[2], 1)\n    if (this.volumes.length > 0) {\n      return this.volumes[volIdx].convertFrac2MM(frac, isForceSliceMM || this.opts.isSliceMM)\n    } else {\n      const [mn, mx] = this.sceneExtentsMinMax()\n      const lerp = (x: number, y: number, a: number): number => x * (1 - a) + y * a\n      pos[0] = lerp(mn[0], mx[0], frac[0])\n      pos[1] = lerp(mn[1], mx[1], frac[1])\n      pos[2] = lerp(mn[2], mx[2], frac[2])\n    }\n    return pos\n  }\n\n  // not included in public docs\n  screenXY2TextureFrac(x: number, y: number, i: number, restrict0to1 = true): vec3 {\n    const texFrac = vec3.fromValues(-1, -1, -1) // texture 0..1 so -1 is out of bounds\n    const axCorSag = this.screenSlices[i].axCorSag\n    if (axCorSag > SLICE_TYPE.SAGITTAL) {\n      return texFrac\n    }\n    const ltwh = this.screenSlices[i].leftTopWidthHeight.slice()\n    let isMirror = false\n    if (ltwh[2] < 0) {\n      isMirror = true\n      ltwh[0] += ltwh[2]\n      ltwh[2] = -ltwh[2]\n    }\n    let fracX = (x - ltwh[0]) / ltwh[2]\n    if (isMirror) {\n      fracX = 1.0 - fracX\n    }\n    const fracY = 1.0 - (y - ltwh[1]) / ltwh[3]\n    if (fracX < 0.0 || fracX > 1.0 || fracY < 0.0 || fracY > 1.0) {\n      return texFrac\n    }\n    if (this.screenSlices[i].AxyzMxy.length < 4) {\n      return texFrac\n    }\n    let xyzMM = vec3.fromValues(0, 0, 0)\n    xyzMM[0] = this.screenSlices[i].leftTopMM[0] + fracX * this.screenSlices[i].fovMM[0]\n    xyzMM[1] = this.screenSlices[i].leftTopMM[1] + fracY * this.screenSlices[i].fovMM[1]\n    // let xyz = vec3.fromValues(30, 30, 0);\n    const v = this.screenSlices[i].AxyzMxy\n    xyzMM[2] = v[2] + v[4] * (xyzMM[1] - v[1]) - v[3] * (xyzMM[0] - v[0])\n    if (axCorSag === SLICE_TYPE.CORONAL) {\n      xyzMM = swizzleVec3(xyzMM, [0, 2, 1])\n    } // screen RSA to NIfTI RAS\n    if (axCorSag === SLICE_TYPE.SAGITTAL) {\n      xyzMM = swizzleVec3(xyzMM, [2, 0, 1])\n    } // screen ASR to NIfTI RAS\n    const xyz = this.mm2frac(xyzMM)\n    if (restrict0to1) {\n      if (xyz[0] < 0 || xyz[0] > 1 || xyz[1] < 0 || xyz[1] > 1 || xyz[2] < 0 || xyz[2] > 1) {\n        return texFrac\n      }\n    }\n    return xyz\n  }\n\n  // not included in public docs\n  canvasPos2frac(canvasPos: number[]): vec3 {\n    for (let i = 0; i < this.screenSlices.length; i++) {\n      const texFrac = this.screenXY2TextureFrac(canvasPos[0], canvasPos[1], i)\n      if (texFrac[0] >= 0) {\n        return texFrac\n      }\n    }\n    return [-1, -1, -1] // texture 0..1 so -1 is out of bounds\n  }\n\n  // not included in public docs\n  // note: we also have a \"sliceScale\" method, which could be confusing\n  scaleSlice(\n    w: number,\n    h: number,\n    padPixelsWH: [number, number] = [0, 0],\n    canvasWH: [number, number] = [0, 0]\n  ): number[] {\n    // const canvasW = this.effectiveCanvasWidth() - padPixelsWH[0]\n    // const canvasH = this.effectiveCanvasHeight() - padPixelsWH[1]\n    const canvasW = canvasWH[0] === 0 ? this.effectiveCanvasWidth() - padPixelsWH[0] : canvasWH[0] - padPixelsWH[0]\n    const canvasH = canvasWH[1] === 0 ? this.effectiveCanvasHeight() - padPixelsWH[1] : canvasWH[1] - padPixelsWH[1]\n    let scalePix = canvasW / w\n    if (h * scalePix > canvasH) {\n      scalePix = canvasH / h\n    }\n    // canvas space is 0,0...w,h with origin at upper left\n    const wPix = w * scalePix\n    const hPix = h * scalePix\n    const leftTopWidthHeight = [(canvasW - wPix) * 0.5, (canvasH - hPix) * 0.5, wPix, hPix, scalePix]\n    return leftTopWidthHeight\n  }\n\n  // not included in public docs\n  // display 2D image to defer loading of (slow) 3D data\n  drawThumbnail(): void {\n    if (!this.bmpShader) {\n      throw new Error('bmpShader undefined')\n    }\n    this.bmpShader.use(this.gl)\n    this.gl.uniform2f(this.bmpShader.uniforms.canvasWidthHeight, this.gl.canvas.width, this.gl.canvas.height)\n    let h = this.gl.canvas.height\n    let w = this.gl.canvas.height * this.bmpTextureWH\n    if (w > this.gl.canvas.width) {\n      // constrained by width\n      h = this.gl.canvas.width / this.bmpTextureWH\n      w = this.gl.canvas.width\n    }\n    this.gl.uniform4f(this.bmpShader.uniforms.leftTopWidthHeight, 0, 0, w, h)\n    this.gl.bindVertexArray(this.genericVAO)\n    this.gl.drawArrays(this.gl.TRIANGLE_STRIP, 0, 4)\n    this.gl.bindVertexArray(this.unusedVAO) // switch off to avoid tampering with settings\n  }\n\n  // not included in public docs\n  // draw line (can be diagonal)\n  // unless Alpha is > 0, default color is opts.crosshairColor\n  drawLine(startXYendXY: number[], thickness = 1, lineColor = [1, 0, 0, -1]): void {\n    this.gl.bindVertexArray(this.genericVAO)\n    if (!this.lineShader) {\n      throw new Error('lineShader undefined')\n    }\n    this.lineShader.use(this.gl)\n    if (lineColor[3] < 0) {\n      lineColor = this.opts.crosshairColor\n    }\n    this.gl.uniform4fv(this.lineShader.uniforms.lineColor, lineColor)\n    this.gl.uniform2fv(this.lineShader.uniforms.canvasWidthHeight, [this.gl.canvas.width, this.gl.canvas.height])\n    // draw Line\n    this.gl.uniform1f(this.lineShader.uniforms.thickness, thickness)\n    this.gl.uniform4fv(this.lineShader.uniforms.startXYendXY, startXYendXY)\n    this.gl.drawArrays(this.gl.TRIANGLE_STRIP, 0, 4)\n    this.gl.bindVertexArray(this.unusedVAO) // set vertex attributes\n  }\n\n  // not included in public docs\n  // draw line (can be diagonal)\n  // unless Alpha is > 0, default color is opts.crosshairColor\n  draw3DLine(startXY: vec2, endXYZ: vec3, thickness = 1, lineColor = [1, 0, 0, -1]): void {\n    this.gl.bindVertexArray(this.genericVAO)\n    if (!this.line3DShader) {\n      throw new Error('line3DShader undefined')\n    }\n    this.line3DShader.use(this.gl)\n    if (lineColor[3] < 0) {\n      lineColor = this.opts.crosshairColor\n    }\n    this.gl.uniform4fv(this.line3DShader.uniforms.lineColor, lineColor)\n    this.gl.uniform2fv(this.line3DShader.uniforms.canvasWidthHeight, [this.gl.canvas.width, this.gl.canvas.height])\n    // draw Line\n    this.gl.uniform1f(this.line3DShader.uniforms.thickness, thickness)\n    this.gl.uniform2fv(this.line3DShader.uniforms.startXY, startXY)\n    this.gl.uniform3fv(this.line3DShader.uniforms.endXYZ, endXYZ)\n    this.gl.drawArrays(this.gl.TRIANGLE_STRIP, 0, 4)\n    this.gl.bindVertexArray(this.unusedVAO) // set vertex attributes\n  }\n\n  drawDottedLine(startXYendXY: number[], thickness = 1, lineColor = [1, 0, 0, -1]): void {\n    this.gl.bindVertexArray(this.genericVAO)\n    if (!this.lineShader) {\n      throw new Error('lineShader undefined')\n    }\n    this.lineShader.use(this.gl)\n    const dottedLineColor = lineColor[3] < 0 ? [...this.opts.crosshairColor] : [...lineColor]\n\n    dottedLineColor[3] = 0.3\n\n    // get vector\n    const segment = vec2.fromValues(startXYendXY[2] - startXYendXY[0], startXYendXY[3] - startXYendXY[1])\n    const totalLength = vec2.length(segment)\n    vec2.normalize(segment, segment)\n    const scale = 1.0\n    const size = this.opts.textHeight * Math.min(this.gl.canvas.height, this.gl.canvas.width) * scale\n    vec2.scale(segment, segment, size / 2)\n    const segmentLength = vec2.length(segment)\n    let segmentCount = Math.floor(totalLength / segmentLength)\n\n    if (totalLength % segmentLength) {\n      segmentCount++\n    }\n\n    const currentSegmentXY = [startXYendXY[0], startXYendXY[1]]\n\n    this.gl.uniform4fv(this.lineShader.uniforms.lineColor, dottedLineColor)\n    this.gl.uniform2fv(this.lineShader.uniforms.canvasWidthHeight, [this.gl.canvas.width, this.gl.canvas.height])\n    this.gl.uniform1f(this.lineShader.uniforms.thickness, thickness)\n\n    // draw all segments except for the last one\n    for (let i = 0; i < segmentCount - 1; i++) {\n      if (i % 2) {\n        currentSegmentXY[0] += segment[0]\n        currentSegmentXY[1] += segment[1]\n        continue\n      }\n\n      const segmentStartXYendXY = [\n        currentSegmentXY[0],\n        currentSegmentXY[1],\n        currentSegmentXY[0] + segment[0],\n        currentSegmentXY[1] + segment[1]\n      ]\n\n      // draw Line\n\n      this.gl.uniform4fv(this.lineShader.uniforms.startXYendXY, segmentStartXYendXY)\n      this.gl.drawArrays(this.gl.TRIANGLE_STRIP, 0, 4)\n      // this.gl.bindVertexArray(this.unusedVAO); //set vertex attributes\n      currentSegmentXY[0] += segment[0]\n      currentSegmentXY[1] += segment[1]\n    }\n\n    // this.gl.uniform4fv(this.lineShader.uniforms.lineColor, lineColor);\n    // this.gl.uniform2fv(this.lineShader.uniforms.canvasWidthHeight, [\n    //   this.gl.canvas.width,\n    //   this.gl.canvas.height,\n    // ]);\n    // //draw Line\n    // this.gl.uniform1f(this.lineShader.uniforms.thickness, thickness);\n    // this.gl.uniform4fv(this.lineShader.uniforms.startXYendXY, startXYendXY);\n    // this.gl.drawArrays(this.gl.TRIANGLE_STRIP, 0, 4);\n    this.gl.bindVertexArray(this.unusedVAO) // set vertex attributes\n  }\n\n  // not included in public docs\n  drawGraphLine(LTRB: number[], color = [1, 0, 0, 0.5], thickness = 2): void {\n    this.drawLine(LTRB, thickness, color)\n  }\n\n  // not included in public docs\n  drawCrossLinesMM(sliceIndex: number, axCorSag: SLICE_TYPE, axiMM: number[], corMM: number[], sagMM: number[]): void {\n    if (sliceIndex < 0 || this.screenSlices.length <= sliceIndex) {\n      return\n    }\n    const tile = this.screenSlices[sliceIndex]\n    let sliceFrac = tile.sliceFrac\n    const isRender = sliceFrac === Infinity\n    if (isRender) {\n      log.warn('Rendering approximate cross lines in world view mode')\n    }\n    if (sliceFrac === Infinity) {\n      sliceFrac = 0.5\n    }\n    let linesH = corMM.slice()\n    let linesV = sagMM.slice()\n    const thick = Math.max(1, this.opts.crosshairWidth)\n    if (axCorSag === SLICE_TYPE.CORONAL) {\n      linesH = axiMM.slice()\n    }\n    if (axCorSag === SLICE_TYPE.SAGITTAL) {\n      linesH = axiMM.slice()\n      linesV = corMM.slice()\n    }\n    function mm2screen(mm: vec2): vec2 {\n      const screenXY = vec2.fromValues(0, 0)\n      screenXY[0] =\n        tile.leftTopWidthHeight[0] + ((mm[0] - tile.leftTopMM[0]) / tile.fovMM[0]) * tile.leftTopWidthHeight[2]\n      screenXY[1] =\n        tile.leftTopWidthHeight[1] +\n        tile.leftTopWidthHeight[3] -\n        ((mm[1] - tile.leftTopMM[1]) / tile.fovMM[1]) * tile.leftTopWidthHeight[3]\n      return screenXY\n    }\n\n    if (linesH.length > 0 && axCorSag === 0) {\n      const fracZ = sliceFrac\n      const dimV = 1\n      for (let i = 0; i < linesH.length; i++) {\n        const mmV = this.frac2mm([0.5, 0.5, 0.5])\n        mmV[dimV] = linesH[i]\n        let fracY: vec3 | number = this.mm2frac(mmV)\n        fracY = fracY[dimV]\n        let left: vec4 | vec3 | vec2 = this.frac2mm([0.0, fracY, fracZ])\n        left = swizzleVec3(left as vec3, [0, 1, 2])\n        let right: vec4 | vec3 | vec2 = this.frac2mm([1.0, fracY, fracZ])\n        right = swizzleVec3(right as vec3, [0, 1, 2])\n        left = mm2screen(left as vec2)\n        right = mm2screen(right as vec2)\n        this.drawLine([left[0], left[1], right[0], right[1]], thick)\n      }\n    }\n    if (linesH.length > 0 && axCorSag === 1) {\n      const fracH = sliceFrac\n      const dimV = 2\n      for (let i = 0; i < linesH.length; i++) {\n        const mmV = this.frac2mm([0.5, 0.5, 0.5])\n        mmV[dimV] = linesH[i]\n        let fracV: vec3 | number = this.mm2frac(mmV)\n        fracV = fracV[dimV]\n        let left: vec4 | vec3 | vec2 = this.frac2mm([0.0, fracH, fracV])\n        left = swizzleVec3(left as vec3, [0, 2, 1])\n        let right: vec4 | vec3 | vec2 = this.frac2mm([1.0, fracH, fracV])\n        right = swizzleVec3(right as vec3, [0, 2, 1])\n        left = mm2screen(left as vec2)\n        right = mm2screen(right as vec2)\n        this.drawLine([left[0], left[1], right[0], right[1]], thick)\n      }\n    }\n    if (linesH.length > 0 && axCorSag === 2) {\n      const fracX = sliceFrac\n      const dimV = 2\n      for (let i = 0; i < linesH.length; i++) {\n        const mmV = this.frac2mm([0.5, 0.5, 0.5])\n        mmV[dimV] = linesH[i]\n        let fracZ: vec3 | number = this.mm2frac(mmV)\n        fracZ = fracZ[dimV]\n        let left: vec4 | vec3 | vec2 = this.frac2mm([fracX, 0, fracZ])\n        left = swizzleVec3(left as vec3, [1, 2, 0])\n        let right: vec4 | vec3 | vec2 = this.frac2mm([fracX, 1, fracZ])\n        right = swizzleVec3(right as vec3, [1, 2, 0])\n        left = mm2screen(left as vec2)\n        right = mm2screen(right as vec2)\n        this.drawLine([left[0], left[1], right[0], right[1]], thick)\n      }\n    }\n    if (linesV.length > 0 && axCorSag === 0) {\n      const fracZ = sliceFrac\n      const dimH = 0\n      for (let i = 0; i < linesV.length; i++) {\n        const mm = this.frac2mm([0.5, 0.5, 0.5])\n        mm[dimH] = linesV[i]\n        let frac: vec3 | number = this.mm2frac(mm)\n        frac = frac[dimH]\n        let left: vec4 | vec3 | vec2 = this.frac2mm([frac, 0, fracZ])\n        left = swizzleVec3(left as vec3, [0, 1, 2])\n        let right: vec4 | vec3 | vec2 = this.frac2mm([frac, 1, fracZ])\n        right = swizzleVec3(right as vec3, [0, 1, 2])\n        left = mm2screen(left as vec2)\n        right = mm2screen(right as vec2)\n        this.drawLine([left[0], left[1], right[0], right[1]], thick)\n      }\n    }\n    if (linesV.length > 0 && axCorSag === 1) {\n      const fracY = sliceFrac\n      const dimH = 0\n      for (let i = 0; i < linesV.length; i++) {\n        const mm = this.frac2mm([0.5, 0.5, 0.5])\n        mm[dimH] = linesV[i]\n        let frac: vec3 | number = this.mm2frac(mm)\n        frac = frac[dimH]\n        let left: vec4 | vec3 | vec2 = this.frac2mm([frac, fracY, 0])\n        left = swizzleVec3(left as vec3, [0, 2, 1])\n        let right: vec4 | vec3 | vec2 = this.frac2mm([frac, fracY, 1])\n        right = swizzleVec3(right as vec3, [0, 2, 1])\n        left = mm2screen(left as vec2)\n        right = mm2screen(right as vec2)\n        this.drawLine([left[0], left[1], right[0], right[1]], thick)\n      }\n    }\n    if (linesV.length > 0 && axCorSag === 2) {\n      const fracX = sliceFrac\n      const dimH = 1\n      for (let i = 0; i < linesV.length; i++) {\n        const mm = this.frac2mm([0.5, 0.5, 0.5])\n        mm[dimH] = linesV[i]\n        let frac: vec3 | number = this.mm2frac(mm)\n        frac = frac[dimH]\n        let left: vec4 | vec3 | vec2 = this.frac2mm([fracX, frac as number, 0])\n        left = swizzleVec3(left as vec3, [1, 2, 0])\n        let right: vec4 | vec3 | vec2 = this.frac2mm([fracX, frac as number, 1])\n        right = swizzleVec3(right as vec3, [1, 2, 0])\n        left = mm2screen(left as vec2)\n        right = mm2screen(right as vec2)\n        this.drawLine([left[0], left[1], right[0], right[1]], thick)\n      }\n    }\n  }\n\n  // not included in public docs\n  drawCrossLines(sliceIndex: number, axCorSag: SLICE_TYPE, axiMM: number[], corMM: number[], sagMM: number[]): void {\n    if (sliceIndex < 0 || this.screenSlices.length <= sliceIndex) {\n      return\n    }\n    if (this.opts.isSliceMM) {\n      return this.drawCrossLinesMM(sliceIndex, axCorSag, axiMM, corMM, sagMM)\n    }\n    if (this.screenSlices[sliceIndex].sliceFrac === Infinity) {\n      // render views always world space\n      return this.drawCrossLinesMM(sliceIndex, axCorSag, axiMM, corMM, sagMM)\n    }\n    const tile = this.screenSlices[sliceIndex]\n    let linesH = corMM.slice()\n    let linesV = sagMM.slice()\n\n    if (axCorSag === SLICE_TYPE.CORONAL) {\n      linesH = axiMM.slice()\n    }\n    if (axCorSag === SLICE_TYPE.SAGITTAL) {\n      linesH = axiMM.slice()\n      linesV = corMM.slice()\n    }\n    if (linesH.length > 0) {\n      // draw horizontal lines\n      const LTWH = tile.leftTopWidthHeight.slice()\n      let sliceDim = 2 // vertical axis is Zmm\n      if (axCorSag === SLICE_TYPE.AXIAL) {\n        sliceDim = 1\n      } // vertical axis is Ymm\n      const mm = this.frac2mm([0.5, 0.5, 0.5])\n      for (let i = 0; i < linesH.length; i++) {\n        mm[sliceDim] = linesH[i]\n        const frac = this.mm2frac(mm)\n        this.drawRect([LTWH[0], LTWH[1] + LTWH[3] - frac[sliceDim] * LTWH[3], LTWH[2], 1])\n      }\n    }\n    if (linesV.length > 0) {\n      // draw vertical lines\n      const LTWH = tile.leftTopWidthHeight.slice()\n      const isRadiolgical = tile.fovMM[0] < 0\n      let sliceDim = 0 // vertical lines on axial/coronal are L/R axis\n      if (axCorSag === SLICE_TYPE.SAGITTAL) {\n        sliceDim = 1\n      } // vertical lines on sagittal are A/P\n      const mm = this.frac2mm([0.5, 0.5, 0.5])\n      for (let i = 0; i < linesV.length; i++) {\n        mm[sliceDim] = linesV[i]\n        const frac = this.mm2frac(mm)\n        if (isRadiolgical) {\n          this.drawRect([LTWH[0] + (LTWH[2] - frac[sliceDim] * LTWH[2]), LTWH[1], 1, LTWH[3]])\n        } else {\n          this.drawRect([LTWH[0] + frac[sliceDim] * LTWH[2], LTWH[1], 1, LTWH[3]])\n        }\n      }\n    }\n  }\n\n  /**\n   * display a lightbox or montage view\n   * @param mosaicStr - specifies orientation (A,C,S) and location of slices.\n   * @example niivue.setSliceMosaicString(\"A -10 0 20\");\n   * @see {@link https://niivue.github.io/niivue/features/mosaics.html | live demo usage}\n   */\n  drawMosaic(mosaicStr: string): void {\n    if (this.volumes.length === 0) {\n      log.debug('Unable to draw mosaic until voxel-based image is loaded')\n      return\n    }\n    this.screenSlices = []\n    // render always in world space\n    const fovRenderMM = this.screenFieldOfViewMM(SLICE_TYPE.AXIAL, true)\n    // 2d slices might be in world space or voxel space\n    const fovSliceMM = this.screenFieldOfViewMM(SLICE_TYPE.AXIAL)\n    // fovRender and fovSlice will only be different if scans are oblique and shown in voxel space\n    // let mosaicStr = 'A -52 -12 C 8 ; S 28 48 66'\n\n    mosaicStr = mosaicStr.replaceAll(';', ' ;').trim()\n    const axiMM = []\n    const corMM = []\n    const sagMM = []\n    const items = mosaicStr.split(/\\s+/)\n    let scale = 1.0 // e.g. if 1.0 1mm per pixel\n    const labelSize = this.opts.textHeight\n    // let isCrossLinesUsed = false;\n    let marginLeft = 0\n    let marginTop = 0\n    for (let pass = 0; pass < 2; pass++) {\n      // two pass: first calculate dimensions to determine scale, second draw items\n      let isRender = false\n      let isCrossLines = false\n      isRender = false\n      let rowHt = 0\n      let left = 0\n      let top = 0\n      let mxRowWid = 0\n      let isLabel = false\n      let axCorSag = SLICE_TYPE.AXIAL\n      for (let i = 0; i < items.length; i++) {\n        const item = items[i]\n        if (item.includes('X')) {\n          isCrossLines = true\n          continue\n        }\n        if (item.includes('L')) {\n          isLabel = !item.includes('-')\n          continue\n        }\n        if (item.includes('V') || item.includes('H')) {\n          i++ // skip numeric value for vertical/horizontal overlap\n          continue\n        }\n        if (item.includes('A')) {\n          axCorSag = SLICE_TYPE.AXIAL\n        }\n        if (item.includes('C')) {\n          axCorSag = SLICE_TYPE.CORONAL\n        }\n        if (item.includes('S')) {\n          axCorSag = SLICE_TYPE.SAGITTAL\n        }\n        if (item.includes('R')) {\n          isRender = true\n        }\n        if (item.includes(';')) {\n          // EOLN\n          top += rowHt\n          mxRowWid = Math.max(mxRowWid, left)\n          rowHt = 0\n          left = 0\n        }\n        const sliceMM = parseFloat(item)\n        if (isNaN(sliceMM)) {\n          continue\n        }\n        let w = 0\n        let h = 0\n        let fov = fovSliceMM\n        if (isRender) {\n          fov = fovRenderMM\n        }\n        // draw the slice\n        if (axCorSag === SLICE_TYPE.SAGITTAL) {\n          w = fov[1]\n        } else {\n          w = fov[0]\n        }\n        if (axCorSag === SLICE_TYPE.AXIAL) {\n          h = fov[1]\n        } else {\n          h = fov[2]\n        }\n        if (pass === 0) {\n          // 1st pass: record slice locations in world space\n          if (!isRender) {\n            if (axCorSag === SLICE_TYPE.AXIAL) {\n              axiMM.push(sliceMM)\n            }\n            if (axCorSag === SLICE_TYPE.CORONAL) {\n              corMM.push(sliceMM)\n            }\n            if (axCorSag === SLICE_TYPE.SAGITTAL) {\n              sagMM.push(sliceMM)\n            }\n          }\n        } else {\n          // 2nd pass draw\n          const ltwh = [marginLeft + scale * left, marginTop + scale * top, scale * w, scale * h]\n          this.opts.textHeight = isLabel ? labelSize : 0\n          if (isRender) {\n            let inf = sliceMM < 0 ? -Infinity : Infinity\n            if (Object.is(sliceMM, -0)) {\n              inf = -Infinity\n            } // catch negative zero\n            this.draw2D(ltwh, axCorSag, inf)\n          } else {\n            this.draw2D(ltwh, axCorSag, sliceMM)\n          }\n          if (isCrossLines) {\n            this.drawCrossLines(this.screenSlices.length - 1, axCorSag, axiMM, corMM, sagMM)\n            // isCrossLinesUsed = true;\n          }\n          isRender = false\n          isCrossLines = false\n        }\n        left += w\n        rowHt = Math.max(rowHt, h)\n      }\n      top += rowHt\n      mxRowWid = Math.max(mxRowWid, left)\n      if (mxRowWid <= 0 || top <= 0) {\n        break\n      }\n      const scaleW = this.gl.canvas.width / mxRowWid\n      const scaleH = this.effectiveCanvasHeight() / top\n      scale = Math.min(scaleW, scaleH)\n      if (this.opts.centerMosaic) {\n        marginLeft = Math.floor(0.5 * (this.gl.canvas.width - mxRowWid * scale))\n        marginTop = Math.floor(0.5 * (this.effectiveCanvasHeight() - top * scale))\n      }\n    }\n    this.opts.textHeight = labelSize\n  }\n\n  // not included in public docs\n  drawSceneCore(): string | void {\n    if (!this.initialized) {\n      return // do not do anything until we are initialized (init will call drawScene).\n    }\n    this.colorbarHeight = 0\n    this.gl.clearColor(this.opts.backColor[0], this.opts.backColor[1], this.opts.backColor[2], this.opts.backColor[3])\n    this.gl.clear(this.gl.COLOR_BUFFER_BIT | this.gl.DEPTH_BUFFER_BIT)\n    // this.gl.clear(this.gl.COLOR_BUFFER_BIT);\n    if (this.bmpTexture && this.thumbnailVisible) {\n      // draw the thumbnail image and exit\n      this.drawThumbnail()\n      return\n    }\n    let posString = ''\n    if (this.volumes.length === 0 || typeof this.volumes[0].dims === 'undefined') {\n      if (this.meshes.length > 0) {\n        this.screenSlices = [] // empty array\n        // this.opts.sliceType = SLICE_TYPE.RENDER // only meshes loaded: we must use 3D render mode\n        this.draw3D() // meshes loaded but no volume\n        if (this.opts.isColorbar) {\n          this.drawColorbar()\n        }\n        return\n      }\n      this.drawLoadingText(this.loadingText)\n      return\n    }\n    if (this.back === null) {\n      return\n    }\n    if (\n      this.uiData.isDragging &&\n      this.scene.clipPlaneDepthAziElev[0] < 1.8 &&\n      this.inRenderTile(this.uiData.dragStart[0], this.uiData.dragStart[1]) >= 0\n    ) {\n      // user dragging over a 3D rendering\n      const x = this.uiData.dragStart[0] - this.uiData.dragEnd[0]\n      const y = this.uiData.dragStart[1] - this.uiData.dragEnd[1]\n      const depthAziElev = this.uiData.dragClipPlaneStartDepthAziElev.slice()\n      depthAziElev[1] -= x\n      depthAziElev[1] = depthAziElev[1] % 360\n      depthAziElev[2] += y\n      if (\n        depthAziElev[1] !== this.scene.clipPlaneDepthAziElev[1] ||\n        depthAziElev[2] !== this.scene.clipPlaneDepthAziElev[2]\n      ) {\n        this.scene.clipPlaneDepthAziElev = depthAziElev\n        return this.setClipPlane(this.scene.clipPlaneDepthAziElev)\n      }\n    }\n    if (this.sliceMosaicString.length < 1 && this.opts.sliceType === SLICE_TYPE.RENDER) {\n      if (this.opts.isColorbar) {\n        this.reserveColorbarPanel()\n      }\n      this.screenSlices = [] // empty array\n      this.draw3D()\n      if (this.opts.isColorbar) {\n        this.drawColorbar()\n      }\n      return\n    }\n    if (this.opts.isColorbar) {\n      this.reserveColorbarPanel()\n    }\n    const maxVols = this.getMaxVols()\n    const isDrawGraph =\n      this.opts.sliceType === SLICE_TYPE.MULTIPLANAR &&\n      maxVols > 1 &&\n      this.graph.autoSizeMultiplanar &&\n      this.graph.opacity > 0\n\n    if (this.sliceMosaicString.length > 0) {\n      this.drawMosaic(this.sliceMosaicString)\n    } else {\n      // issue56 is use mm else use voxel\n      const heroImageWH = [0, 0]\n      let isHeroImage = false\n      this.gl.viewport(0, 0, this.gl.canvas.width, this.gl.canvas.height)\n      this.screenSlices = [] // empty array\n      if (this.opts.sliceType === SLICE_TYPE.AXIAL) {\n        this.draw2D([0, 0, 0, 0], 0)\n      } else if (this.opts.sliceType === SLICE_TYPE.CORONAL) {\n        this.draw2D([0, 0, 0, 0], 1)\n      } else if (this.opts.sliceType === SLICE_TYPE.SAGITTAL) {\n        this.draw2D([0, 0, 0, 0], 2)\n      } else {\n        // sliceTypeMultiplanar\n        let isShowRender = false\n        // this.opts.multiplanarForceRender is deprecated but was boolean.\n        // We now need to check if it is true. If so, then the user may not know\n        // about the new multiplanarShowRender option, so we need to show the render.\n        if (this.opts.multiplanarForceRender) {\n          isShowRender = true\n          // warn the user that the option is deprecated\n          // log.warn(\n          //   'multiplanarForceRender is deprecated. Use multiplanarShowRender instead. Possible values are: \"always\", \"auto\", \"never\".'\n          // )\n          if (this.opts.multiplanarForceRender) {\n            this.opts.multiplanarShowRender = SHOW_RENDER.ALWAYS\n          } else {\n            this.opts.multiplanarShowRender = SHOW_RENDER.AUTO\n          }\n          // purge the deprecated option so it doesn't get used in saved scenes and documents\n          delete this.opts.multiplanarForceRender\n        } else {\n          //  check the now preferred multiplanarShowRender option.\n          // if the value is always, then show the render.\n          if (this.opts.multiplanarShowRender === SHOW_RENDER.ALWAYS) {\n            isShowRender = true\n            // warn the user that we are using the new option\n            // log.warn(\n            //   'multiplanarShowRender is set to always and multiplanarForceRender (deprecated) is false. We are assuming you prefer the non-deprecated option: multiplanarShowRender.'\n            // )\n          }\n        }\n        const isDrawPenDown = isFinite(this.drawPenLocation[0]) && this.opts.drawingEnabled\n\n        const { volScale } = this.sliceScale()\n        const actualScale = volScale.slice()\n        if (this.opts.multiplanarEqualSize) {\n          volScale[0] = 1\n          volScale[1] = 1\n          volScale[2] = 1\n        }\n        if (typeof this.opts.multiplanarPadPixels !== 'number') {\n          log.debug('multiplanarPadPixels must be numeric')\n        }\n        // pad is \"outer padding\" minimum distance between tiles\n        const pad = parseFloat(`${this.opts.multiplanarPadPixels}`)\n        // inner pad is padding inside a tile. Note that a display with 1 row of tiles has no outer pad, but does have inner pad\n        let innerPad = this.opts.tileMargin\n        if (innerPad < 0) {\n          innerPad =\n            2 *\n            (2 +\n              Math.ceil(Math.max(this.opts.textHeight, 0.01) * Math.min(this.gl.canvas.height, this.gl.canvas.width)))\n        }\n        function padPixelsWH(cols: number, rows: number): [number, number] {\n          return [(cols - 1) * pad + cols * innerPad, (rows - 1) * pad + rows * innerPad]\n        }\n        let canvasWH: [number, number] = [this.effectiveCanvasWidth(), this.effectiveCanvasHeight()]\n        if (this.opts.heroImageFraction > 0 && this.opts.heroImageFraction < 1) {\n          isShowRender = false\n          isHeroImage = true\n          if (canvasWH[0] > canvasWH[1] && this.opts.multiplanarLayout !== MULTIPLANAR_TYPE.ROW) {\n            // landscape canvas: hero image on LEFT\n            heroImageWH[0] = canvasWH[0] * this.opts.heroImageFraction\n          } else {\n            // portrait canvas: hero image on top\n            heroImageWH[1] = canvasWH[1] * this.opts.heroImageFraction\n          }\n          canvasWH = [canvasWH[0] - heroImageWH[0], canvasWH[1] - heroImageWH[1]]\n        }\n        // size for 2 rows, 2 columns\n        const ltwh2x2 = this.scaleSlice(\n          volScale[0] + volScale[1],\n          volScale[1] + volScale[2],\n          padPixelsWH(2, 2),\n          canvasWH\n        )\n        const mx = Math.max(Math.max(volScale[1], volScale[2]), volScale[0])\n        // size for 3 columns and 1 row\n        const ltwh3x1 = this.scaleSlice(\n          volScale[0] + volScale[0] + volScale[1],\n          Math.max(volScale[1], volScale[2]),\n          padPixelsWH(3, 1),\n          canvasWH\n        )\n        // size for 4 columns and 1 row\n        const ltwh4x1 = this.scaleSlice(\n          volScale[0] + volScale[0] + volScale[1] + mx,\n          Math.max(volScale[1], volScale[2]),\n          padPixelsWH(4, 1),\n          canvasWH\n        )\n        // size for 1 column * 3 rows\n        const ltwh1x3 = this.scaleSlice(mx, volScale[1] + volScale[2] + volScale[2], padPixelsWH(1, 3), canvasWH)\n        // size for 1 column * 4 rows\n        const ltwh1x4 = this.scaleSlice(mx, volScale[1] + volScale[2] + volScale[2] + mx, padPixelsWH(1, 4), canvasWH)\n        let isDraw3D = !isDrawPenDown && (maxVols < 2 || !isDrawGraph)\n        let isDrawColumn = false\n        let isDrawGrid = false\n        let isDrawRow = false\n        if (this.opts.multiplanarLayout === MULTIPLANAR_TYPE.COLUMN) {\n          isDrawColumn = true\n        } else if (this.opts.multiplanarLayout === MULTIPLANAR_TYPE.GRID) {\n          isDrawGrid = true\n        } else if (this.opts.multiplanarLayout === MULTIPLANAR_TYPE.ROW) {\n          isDrawRow = true\n        } else {\n          // auto select layout based on canvas size\n          if (ltwh1x3[4] > ltwh3x1[4] && ltwh1x3[4] > ltwh2x2[4]) {\n            isDrawColumn = true\n          } else if (ltwh3x1[4] > ltwh2x2[4]) {\n            isDrawRow = true\n          } else {\n            isDrawGrid = true\n          }\n        }\n        let ltwh = ltwh2x2\n        if (isDrawColumn) {\n          ltwh = ltwh1x3\n          if (\n            !isHeroImage &&\n            (isShowRender || (this.opts.multiplanarShowRender === SHOW_RENDER.AUTO && ltwh1x4[4] >= ltwh1x3[4]))\n          ) {\n            ltwh = ltwh1x4\n          } else {\n            isDraw3D = false\n          }\n        } else if (isDrawRow) {\n          ltwh = ltwh3x1\n          if (\n            !isHeroImage &&\n            (isShowRender || (this.opts.multiplanarShowRender === SHOW_RENDER.AUTO && ltwh4x1[4] >= ltwh3x1[4]))\n          ) {\n            ltwh = ltwh4x1\n          } else {\n            isDraw3D = false\n          }\n        }\n        if (isHeroImage) {\n          // issue1082 draw hero image\n          const heroW = heroImageWH[0] === 0 ? this.effectiveCanvasWidth() : heroImageWH[0]\n          const heroH = heroImageWH[1] === 0 ? this.effectiveCanvasHeight() : heroImageWH[1]\n          //\n          if (\n            this.opts?.heroSliceType === SLICE_TYPE.AXIAL ||\n            this.opts?.heroSliceType === SLICE_TYPE.CORONAL ||\n            this.opts?.heroSliceType === SLICE_TYPE.SAGITTAL\n          ) {\n            this.draw2D([0, 0, heroW, heroH], this.opts.heroSliceType, NaN, [Infinity, Infinity])\n          } else {\n            // let canvasWH: [number, number] = [this.effectiveCanvasWidth(), this.effectiveCanvasHeight()]\n            const ltwh2 = ltwh.slice()\n            const canvasW = this.effectiveCanvasWidth()\n            // console.log(`L ${ltwh[0]} T ${ltwh[1]} W ${heroW} H ${heroH} canvas ${canvasW}`)\n            if (heroW === canvasW) {\n              ltwh2[0] = 0\n            }\n            // console.log(`isWide ${heroW > heroH} L ${ltwh[0]} -> ${ltwh2[0]}`)\n            // this.draw3D([heroLTWH[0], heroLTWH[1], heroW, heroH])\n            this.draw3D([ltwh2[0], 0, heroW, heroH])\n          }\n          // this.draw3D([0, 0, heroW, heroH])\n          ltwh[0] += heroImageWH[0]\n          ltwh[1] += heroImageWH[1]\n          isDraw3D = false\n        }\n        const sX = volScale[0] * ltwh[4] + innerPad\n        const sY = volScale[1] * ltwh[4] + innerPad\n        const sZ = volScale[2] * ltwh[4] + innerPad\n        const actualX = actualScale[0] * ltwh[4]\n        const actualY = actualScale[1] * ltwh[4]\n        const actualZ = actualScale[2] * ltwh[4]\n        if (isDrawColumn) {\n          // draw axial\n          this.draw2D([ltwh[0], ltwh[1], sX, sY], 0, NaN, [actualX, actualY])\n          // draw coronal\n          this.draw2D([ltwh[0], ltwh[1] + sY + pad, sX, sZ], 1, NaN, [actualX, actualZ])\n          // draw sagittal\n          this.draw2D([ltwh[0], ltwh[1] + sY + pad + sZ + pad, sY, sZ], 2, NaN, [actualY, actualZ])\n          if (isDraw3D) {\n            const sMx = mx * ltwh[4]\n            this.draw3D([ltwh[0], ltwh[1] + sY + sZ + sZ + pad * 3, sMx, sMx])\n          }\n        } else if (isDrawRow) {\n          // draw axial\n          this.draw2D([ltwh[0], ltwh[1], sX, sY], 0, NaN, [actualX, actualY])\n          // draw coronal\n          this.draw2D([ltwh[0] + sX + pad, ltwh[1], sX, sZ], 1, NaN, [actualX, actualZ])\n          // draw sagittal\n          this.draw2D([ltwh[0] + sX + sX + pad * 2, ltwh[1], sY, sZ], 2, NaN, [actualY, actualZ])\n          if (isDraw3D) {\n            const sMx = mx * ltwh[4]\n            this.draw3D([ltwh[0] + sX + sX + sY + pad * 3, ltwh[1], sMx, sMx])\n          }\n        } else if (isDrawGrid) {\n          // did the user turn off 3D render view in multiplanar?\n          if (!isShowRender) {\n            isDraw3D = false\n          }\n          // however, check if the user asked for auto\n          if (this.opts.multiplanarShowRender === SHOW_RENDER.AUTO) {\n            isDraw3D = true\n          }\n          // however, hero image is a rendering\n          if (isHeroImage) {\n            isDraw3D = false\n          }\n          // draw axial\n          this.draw2D([ltwh[0], ltwh[1] + sZ + pad, sX, sY], 0, NaN, [actualX, actualY])\n          // draw coronal\n          this.draw2D([ltwh[0], ltwh[1], sX, sZ], 1, NaN, [actualX, actualZ])\n          // draw sagittal\n          this.draw2D([ltwh[0] + sX + pad, ltwh[1], sY, sZ], 2, NaN, [actualY, actualZ])\n          if (isDraw3D) {\n            this.draw3D([ltwh[0] + sX + pad, ltwh[1] + sZ + pad, sY, sY])\n          }\n        }\n      }\n    }\n    if (this.opts.isRuler) {\n      this.drawRuler()\n    }\n    if (this.opts.isColorbar) {\n      this.drawColorbar()\n    }\n    if (isDrawGraph) {\n      this.drawGraph()\n    }\n    if (this.uiData.isDragging) {\n      if (this.uiData.mouseButtonCenterDown) {\n        this.dragForCenterButton([\n          this.uiData.dragStart[0],\n          this.uiData.dragStart[1],\n          this.uiData.dragEnd[0],\n          this.uiData.dragEnd[1]\n        ])\n        return\n      }\n      if (this.opts.dragMode === DRAG_MODE.slicer3D) {\n        this.dragForSlicer3D([\n          this.uiData.dragStart[0],\n          this.uiData.dragStart[1],\n          this.uiData.dragEnd[0],\n          this.uiData.dragEnd[1]\n        ])\n        return\n      }\n      if (this.opts.dragMode === DRAG_MODE.pan) {\n        this.dragForPanZoom([\n          this.uiData.dragStart[0],\n          this.uiData.dragStart[1],\n          this.uiData.dragEnd[0],\n          this.uiData.dragEnd[1]\n        ])\n        return\n      }\n      if (this.inRenderTile(this.uiData.dragStart[0], this.uiData.dragStart[1]) >= 0) {\n        return\n      }\n      if (this.opts.dragMode === DRAG_MODE.measurement) {\n        // if (this.opts.isDragShowsMeasurementTool) {\n        this.drawMeasurementTool([\n          this.uiData.dragStart[0],\n          this.uiData.dragStart[1],\n          this.uiData.dragEnd[0],\n          this.uiData.dragEnd[1]\n        ])\n        return\n      }\n      const width = Math.abs(this.uiData.dragStart[0] - this.uiData.dragEnd[0])\n      const height = Math.abs(this.uiData.dragStart[1] - this.uiData.dragEnd[1])\n      this.drawSelectionBox([\n        Math.min(this.uiData.dragStart[0], this.uiData.dragEnd[0]),\n        Math.min(this.uiData.dragStart[1], this.uiData.dragEnd[1]),\n        width,\n        height\n      ])\n      return\n    }\n\n    // draw circle at mouse position if clickToSegment is enabled\n    if (this.opts.clickToSegment) {\n      const x = this.mousePos[0]\n      const y = this.mousePos[1]\n      // check if hovering over the 3D render tile\n      if (this.inRenderTile(x, y) >= 0) {\n        // exit early since we do not want to draw the cursor here!\n        return\n      }\n      // determine the tile the mouse is hovering in\n      const tileIdx = this.tileIndex(x, y)\n      // if a valid tile index, draw the circle\n      if (tileIdx > -1) {\n        // get fov in mm for this plane presented in the tile\n        const fovMM = this.screenSlices[tileIdx].fovMM\n        // get the left, top, width, height of the tile in pixels\n        const ltwh = this.screenSlices[tileIdx].leftTopWidthHeight\n        // calculate the pixel to mm scale so we can draw the circle\n        // in pixels (so it is highres) but with the radius specified in mm\n        const pixPerMM = ltwh[2] / fovMM[0]\n        // get the crosshair color, but replace the alpha because we want it to be transparent\n        // no matter what. We want to see the image data underneath the circle.\n        const color = this.opts.crosshairColor\n        const segmentCursorColor = [color[0], color[1], color[2], 0.4]\n        const radius = this.opts.clickToSegmentRadius * pixPerMM\n        this.drawCircle([x - radius, y - radius, radius * 2, radius * 2], segmentCursorColor, 1)\n      }\n    }\n\n    const pos = this.frac2mm([this.scene.crosshairPos[0], this.scene.crosshairPos[1], this.scene.crosshairPos[2]])\n\n    posString = pos[0].toFixed(2) + '×' + pos[1].toFixed(2) + '×' + pos[2].toFixed(2)\n    this.readyForSync = true // by the time we get here, all volumes should be loaded and ready to be drawn. We let other niivue instances know that we can now reliably sync draw calls (images are loaded)\n    this.sync()\n    this.drawAnchoredLabels()\n    return posString\n  }\n\n  // not included in public docs\n  // called to refresh canvas\n  drawScene(): string | void {\n    if (this.isBusy) {\n      // limit concurrent draw calls (chrome v FireFox)\n      this.needsRefresh = true\n      return\n    }\n    this.isBusy = false\n    this.needsRefresh = false\n    let posString = this.drawSceneCore()\n    // Chrome and Safari get much more bogged down by concurrent draw calls than Safari\n    // https://stackoverflow.com/questions/51710067/webgl-async-operations\n    // glFinish operation and the documentation for it says: \"does not return until the effects of all previously called GL commands are complete.\"\n    // await this.gl.finish();\n    if (this._gl !== null) {\n      this.gl.finish()\n    }\n    if (this.needsRefresh) {\n      posString = this.drawScene()\n    }\n    return posString\n  }\n\n  get gl(): WebGL2RenderingContext {\n    if (!this._gl) {\n      throw new Error(\"unable to get WebGL context. Maybe the browser doesn't support WebGL2.\")\n    }\n    return this._gl\n  }\n\n  set gl(gl: WebGL2RenderingContext | null) {\n    this._gl = gl\n  }\n}\n","{\n  \"name\": \"@niivue/niivue\",\n  \"version\": \"0.48.1\",\n  \"description\": \"minimal webgl2 nifti image viewer\",\n  \"types\": \"./build/index.d.ts\",\n  \"main\": \"./build/index.js\",\n  \"type\": \"module\",\n  \"unpkg\": \"./dist/index.min.js\",\n  \"module\": \"./build/index.js\",\n  \"exports\": {\n    \".\": {\n      \"import\": \"./build/index.js\"\n    },\n    \"./min\": {\n      \"import\": \"./build/index.min.js\"\n    }\n  },\n  \"scripts\": {\n    \"dev\": \"vite\",\n    \"build:umd\": \"vite build --config vite.config.js --base=./ && vite build --config vite.config_inject.js --base=./\",\n    \"build\": \"tsup --config tsup.config.ts && npm run build:forTests && npm run build:min && npm run build:umd\",\n    \"build:forTests\": \"tsup --config tsup.config.tests.ts && npm run build:mindemos\",\n    \"build:min\": \"node bundle.js\",\n    \"build:mindemos\": \"node bundleForDemos.js\",\n    \"demo\": \"npm run build:forTests && rm -rf demos/dist && cp -r dist demos/dist && npx http-server demos/ --cors\",\n    \"demo-win\": \"npm run build && npx http-server demos/\",\n    \"test\": \"npm run build:forTests && npm run test:unit && jest --maxWorkers=1\",\n    \"test-win\": \"npm run build-win && jest\",\n    \"test-playwright\": \"npx playwright test --grep-invert \\\"niivue demo file:\\\"\",\n    \"test-demos\": \"npx playwright test playwright/e2e/test.demos.spec.ts\",\n    \"docs\": \"typedoc\",\n    \"test:unit\": \"vitest --run --coverage\",\n    \"serve-docs\": \"npx http-server devdocs\",\n    \"pub\": \"npm run build && npm publish --access public\",\n    \"lint\": \"eslint .\",\n    \"lint:ts\": \"tsc --noEmit\",\n    \"lint:fix\": \"eslint --fix .\",\n    \"lint:debug\": \"DEBUG=eslint:cli-engine eslint .\",\n    \"pretest-playwright\": \"npm run build:forTests && node preplaywrighttest.cjs && tsc --incremental -p playwright/e2e/tsconfig.json\",\n    \"pretest-demos\": \"npm run build:forTests && node preplaywrighttest.cjs && tsc --incremental -p playwright/e2e/tsconfig.json\"\n  },\n  \"files\": [\n    \"src\",\n    \"build\",\n    \"dist\"\n  ],\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/niivue/niivue.git\"\n  },\n  \"keywords\": [\n    \"niivue\",\n    \"webgl2\",\n    \"nifti\",\n    \"image\",\n    \"viewer\"\n  ],\n  \"author\": \"niivue authors\",\n  \"license\": \"BSD-2-Clause\",\n  \"bugs\": {\n    \"url\": \"https://github.com/niivue/niivue/issues\"\n  },\n  \"homepage\": \"https://github.com/niivue/niivue#readme\",\n  \"dependencies\": {\n    \"@lukeed/uuid\": \"^2.0.1\",\n    \"@ungap/structured-clone\": \"^1.2.0\",\n    \"array-equal\": \"^1.0.2\",\n    \"daikon\": \"^1.2.46\",\n    \"fflate\": \"^0.8.2\",\n    \"gl-matrix\": \"^3.4.3\",\n    \"nifti-reader-js\": \"^0.6.8\",\n    \"rxjs\": \"^7.8.1\"\n  },\n  \"devDependencies\": {\n    \"@playwright/test\": \"^1.45.2\",\n    \"@rollup/plugin-commonjs\": \"^26.0.1\",\n    \"@types/array-equal\": \"^1.0.2\",\n    \"@types/node\": \"^20.14.11\",\n    \"@types/ungap__structured-clone\": \"^1.2.0\",\n    \"@typescript-eslint/eslint-plugin\": \"^7.16.1\",\n    \"@typescript-eslint/parser\": \"^7.16.1\",\n    \"@vitest/coverage-v8\": \"^2.0.3\",\n    \"eslint\": \"^8.57.0\",\n    \"eslint-config-prettier\": \"^9.1.0\",\n    \"eslint-config-standard\": \"^17.1.0\",\n    \"eslint-plugin-prettier\": \"^5.2.1\",\n    \"eslint-plugin-tsdoc\": \"^0.3.0\",\n    \"express\": \"^4.19.2\",\n    \"happy-dom\": \"^15.11.6\",\n    \"http-server\": \"^14.1.1\",\n    \"prettier\": \"^3.3.3\",\n    \"regenerator-runtime\": \"^0.14.1\",\n    \"terser\": \"^5.31.3\",\n    \"tsup\": \"^8.1.2\",\n    \"typedoc\": \"^0.26.4\",\n    \"typescript\": \"^5.5.3\",\n    \"vite\": \"^5.3.4\",\n    \"vitest\": \"^2.0.3\"\n  },\n  \"optionalDependencies\": {\n    \"@rollup/rollup-linux-x64-gnu\": \"^4.18.1\"\n  }\n}\n","interface LogLevelMap {\n  [key: string]: number\n}\nclass Log {\n  level: string\n  name: string\n  constructor({ name = 'niivue', level = 'info' } = {}) {\n    this.name = `${name}`\n    this.level = level\n  }\n\n  // map 'debug' 'info' 'warn' 'error' 'fatal' 'silent' to numbers\n  // for comparison\n  static levels: LogLevelMap = {\n    debug: 0,\n    info: 1,\n    warn: 2,\n    error: 3,\n    fatal: 4,\n    silent: Infinity\n  }\n\n  debug(...args: unknown[]): void {\n    if (Log.levels[this.level] > Log.levels.debug) {\n      return\n    }\n    // eslint-disable-next-line\n    console.debug(`${this.name}-debug`, ...args)\n  }\n\n  info(...args: unknown[]): void {\n    if (Log.levels[this.level] > Log.levels.info) {\n      return\n    }\n    // eslint-disable-next-line\n    console.info(`${this.name}-info`, ...args)\n  }\n\n  warn(...args: unknown[]): void {\n    if (Log.levels[this.level] > Log.levels.warn) {\n      return\n    }\n    // eslint-disable-next-line\n    console.warn(`${this.name}-warn`, ...args)\n  }\n\n  error(...args: unknown[]): void {\n    if (Log.levels[this.level] > Log.levels.error) {\n      return\n    }\n    // eslint-disable-next-line\n    console.error(`${this.name}-error`, ...args)\n  }\n\n  fatal(...args: unknown[]): void {\n    if (Log.levels[this.level] > Log.levels.fatal) {\n      return\n    }\n    // eslint-disable-next-line\n    console.error(`${this.name}-fatal`, ...args)\n  }\n\n  setLogLevel(level: string): void {\n    this.level = level\n  }\n\n  setName(name: string): void {\n    this.name = name\n  }\n}\n\n// make a log instance and export it\nconst log = new Log({ name: 'niivue', level: 'info' })\nexport { log }\n","import { log } from './logger.js'\n// shader.js is taken from github user Twinklebear: https://github.com/Twinklebear/webgl-util\n\n// Compile and link the shaders vert and frag. vert and frag should contain\n// the shader source code for the vertex and fragment shaders respectively\n// Returns the compiled and linked program, or null if compilation or linking failed\nexport const compileShader = function (gl: WebGL2RenderingContext, vert: string, frag: string): WebGLProgram {\n  const vs = gl.createShader(gl.VERTEX_SHADER)\n  gl.shaderSource(vs, vert)\n  gl.compileShader(vs)\n  const fs = gl.createShader(gl.FRAGMENT_SHADER)\n  gl.shaderSource(fs, frag)\n  gl.compileShader(fs)\n  const program = gl.createProgram()\n  gl.attachShader(program, vs)\n  gl.attachShader(program, fs)\n  gl.linkProgram(program)\n  if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {\n    // issue1128 report shader errors to console\n    console.log(gl.getProgramInfoLog(program))\n    if (!gl.getShaderParameter(vs, gl.COMPILE_STATUS)) {\n      console.log('Vertex shader compilation error:', gl.getShaderInfoLog(vs))\n    }\n    if (!gl.getShaderParameter(fs, gl.COMPILE_STATUS)) {\n      console.log('Fragment shader compilation error:', gl.getShaderInfoLog(fs))\n    }\n    log.error(gl.getProgramInfoLog(program))\n    throw new Error('Shader failed to link, see console for log')\n  }\n  return program\n}\n\nexport const getGLExtension = function (gl: WebGL2RenderingContext, ext: string): boolean {\n  if (!gl.getExtension(ext)) {\n    log.error('Missing ' + ext + ' WebGL extension')\n    return false\n  }\n  return true\n}\n\nexport class Shader {\n  program: WebGLProgram\n  uniforms: Record<string, WebGLUniformLocation | null> = {}\n  isMatcap?: boolean\n\n  constructor(gl: WebGL2RenderingContext, vertexSrc: string, fragmentSrc: string) {\n    this.program = compileShader(gl, vertexSrc, fragmentSrc)\n\n    const regexUniform = /uniform[^;]+[ ](\\w+);/g\n    const matchUniformName = /uniform[^;]+[ ](\\w+);/\n\n    const vertexUnifs = vertexSrc.match(regexUniform)\n    const fragUnifs = fragmentSrc.match(regexUniform)\n\n    if (vertexUnifs) {\n      vertexUnifs.forEach((unif) => {\n        const m = unif.match(matchUniformName)\n        this.uniforms[m![1]] = -1 // TODO can we guarantee this?\n      })\n    }\n    if (fragUnifs) {\n      fragUnifs.forEach((unif) => {\n        const m = unif.match(matchUniformName)\n        this.uniforms[m![1]] = -1 // TODO can we guarantee this?\n      })\n    }\n\n    for (const unif in this.uniforms) {\n      this.uniforms[unif] = gl.getUniformLocation(this.program, unif)!\n    }\n  }\n\n  use(gl: WebGL2RenderingContext): void {\n    gl.useProgram(this.program)\n  }\n}\n","export const vertRenderShader = `#version 300 es\n#line 4\nlayout(location=0) in vec3 pos;\nlayout(location=1) in vec3 texCoords;\nuniform mat4 mvpMtx;\nout vec3 vColor;\nvoid main(void) {\n\tgl_Position = mvpMtx * vec4(pos, 1.0);\n\tvColor = texCoords;\n}`\n\nconst kDrawFunc = `\n\tvec4 drawColor(float scalar, float drawOpacity) {\n\t\tfloat nlayer = float(textureSize(colormap, 0).y);\n\t\tfloat layer = (nlayer - 0.5) / nlayer;\n\t\tvec4 dcolor = texture(colormap, vec2((scalar * 255.0)/256.0 + 0.5/256.0, layer)).rgba;\n\t\tdcolor.a *= drawOpacity;\n\t\treturn dcolor;\n}`\n\nconst kRenderFunc =\n  `vec3 GetBackPosition(vec3 startPositionTex) {\n\tvec3 startPosition = startPositionTex * volScale;\n\tvec3 invR = 1.0 / rayDir;\n\tvec3 tbot = invR * (vec3(0.0)-startPosition);\n\tvec3 ttop = invR * (volScale-startPosition);\n\tvec3 tmax = max(ttop, tbot);\n\tvec2 t = min(tmax.xx, tmax.yz);\n\tvec3 endPosition = startPosition + (rayDir * min(t.x, t.y));\n\t//convert world position back to texture position:\n\tendPosition = endPosition / volScale;\n\treturn endPosition;\n}\n\nvec4 applyClip (vec3 dir, inout vec4 samplePos, inout float len, inout bool isClip) {\n\tfloat cdot = dot(dir,clipPlane.xyz);\n\tisClip = false;\n\tif  ((clipPlane.a > 1.0) || (cdot == 0.0)) return samplePos;\n\tbool frontface = (cdot > 0.0);\n\tfloat dis = (-clipPlane.a - dot(clipPlane.xyz, samplePos.xyz-0.5)) / cdot;\n\tfloat thick = clipThick;\n\tif (thick <= 0.0) thick = 2.0;\n\tfloat  disBackFace = (-(clipPlane.a-thick) - dot(clipPlane.xyz, samplePos.xyz-0.5)) / cdot;\n\tif (((frontface) && (dis >= len)) || ((!frontface) && (dis <= 0.0))) {\n\t\tsamplePos.a = len + 1.0;\n\t\treturn samplePos;\n\t}\n\tif (frontface) {\n\t\tdis = max(0.0, dis);\n\t\tsamplePos = vec4(samplePos.xyz+dir * dis, dis);\n\t\tif (dis > 0.0) isClip = true;\n\t\tlen = min(disBackFace, len);\n\t}\n\tif (!frontface) {\n\t\tlen = min(dis, len);\n\t\tdisBackFace = max(0.0, disBackFace);\n\t\tif (len == dis) isClip = true;\n\t\tsamplePos = vec4(samplePos.xyz+dir * disBackFace, disBackFace);\n\t}\n\treturn samplePos;\n}\n\nvoid clipVolume(inout vec3 startPos, inout vec3 backPos, int dim, float frac, bool isLo) {\n\tvec3 dir = backPos - startPos;\n\tfloat len = length(dir);\n\tdir = normalize(dir);\n\t// Discard if both startPos and backPos are outside the clipping plane\n\tif (isLo && startPos[dim] < frac && backPos[dim] < frac) {\n\t\tdiscard;\n\t}\n\tif (!isLo && startPos[dim] > frac && backPos[dim] > frac) {\n\t\tdiscard;\n\t}\n\tvec4 plane = vec4(0.0, 0.0, 0.0, 0.5 - frac);\n\tplane[dim] = 1.0;\n\tfloat cdot = dot(dir, plane.xyz);\n\tfloat dis = (-plane.w - dot(plane.xyz, startPos - vec3(0.5))) / cdot;\n\t// Adjust startPos or backPos based on the intersection with the plane\n\tbool isFrontFace = (cdot > 0.0);\n\tif (!isLo)\n\t\tisFrontFace = !isFrontFace;\n\tif (dis > 0.0) {\n\t\tif (isFrontFace) {\n\t\t\t\tif (dis <= len) {\n\t\t\t\t\tstartPos = startPos + dir * dis;\n\t\t\t\t}\n\t\t} else {\n\t\t\tif (dis < len) {\n\t\t\t\tbackPos = startPos + dir * dis;\n\t\t\t}\n\t\t}\n\t}\n}\n\nvoid clipVolumeStart (inout vec3 startPos, inout vec3 backPos) {\n\t// vec3 clipLo = vec3(0.1, 0.2, 0.4);\n\t// vec3 clipHi = vec3(0.8, 0.7, 0.7);\n\tfor (int i = 0; i < 3; i++) {\n\t\tif (clipLo[i] > 0.0)\n\t\t\tclipVolume(startPos, backPos, i, clipLo[i], true);\n\t}\n\tfor (int i = 0; i < 3; i++) {\n\t\tif (clipHi[i] < 1.0)\n\t\t\tclipVolume(startPos, backPos, i, clipHi[i], false);\n\t}\n}\n\nfloat frac2ndc(vec3 frac) {\n//https://stackoverflow.com/questions/7777913/how-to-render-depth-linearly-in-modern-opengl-with-gl-fragcoord-z-in-fragment-sh\n\tvec4 pos = vec4(frac.xyz, 1.0); //fraction\n\tvec4 dim = vec4(vec3(textureSize(volume, 0)), 1.0);\n\tpos = pos * dim;\n\tvec4 shim = vec4(-0.5, -0.5, -0.5, 0.0);\n\tpos += shim;\n\tvec4 mm = transpose(matRAS) * pos;\n\tfloat z_ndc = (mvpMtx * vec4(mm.xyz, 1.0)).z;\n\treturn (z_ndc + 1.0) / 2.0;\n}` + kDrawFunc\n\nconst kRenderInit = `void main() {\n\tif (fColor.x > 2.0) {\n\t\tfColor = vec4(1.0, 0.0, 0.0, 0.5);\n\t\treturn;\n\t}\n\tfColor = vec4(0.0,0.0,0.0,0.0);\n\tvec4 clipPlaneColorX = clipPlaneColor;\n\t//if (clipPlaneColor.a < 0.0)\n\t//\tclipPlaneColorX.a = - 1.0;\n\tbool isColorPlaneInVolume = false;\n\tif (clipPlaneColorX.a < 0.0) {\n\t\tisColorPlaneInVolume = true;\n\t\tclipPlaneColorX.a = 0.0;\n\t}\n\t//fColor = vec4(vColor.rgb, 1.0); return;\n\tvec3 start = vColor;\n\tgl_FragDepth = 0.0;\n\tvec3 backPosition = GetBackPosition(start);\n\t// fColor = vec4(backPosition, 1.0); return;\n\tvec3 dir = normalize(backPosition - start);\n\tclipVolumeStart(start, backPosition);\n\tdir = normalize(dir);\n\tfloat len = length(backPosition - start);\n\tfloat lenVox = length((texVox * start) - (texVox * backPosition));\n\tif ((lenVox < 0.5) || (len > 3.0)) { //length limit for parallel rays\n\t\treturn;\n\t}\n\tfloat sliceSize = len / lenVox; //e.g. if ray length is 1.0 and traverses 50 voxels, each voxel is 0.02 in unit cube\n\tfloat stepSize = sliceSize; //quality: larger step is faster traversal, but fewer samples\n\tfloat opacityCorrection = stepSize/sliceSize;\n\tvec4 deltaDir = vec4(dir.xyz * stepSize, stepSize);\n\tvec4 samplePos = vec4(start.xyz, 0.0); //ray position\n\tfloat lenNoClip = len;\n\tbool isClip = false;\n\tvec4 clipPos = applyClip(dir, samplePos, len, isClip);\n\t//if ((clipPos.a != samplePos.a) && (len < 3.0)) {\n\t//start: OPTIONAL fast pass: rapid traversal until first hit\n\tfloat stepSizeFast = sliceSize * 1.9;\n\tvec4 deltaDirFast = vec4(dir.xyz * stepSizeFast, stepSizeFast);\n\twhile (samplePos.a <= len) {\n\t\tfloat val = texture(volume, samplePos.xyz).a;\n\t\tif (val > 0.01)\n\t\t\tbreak;\n\t\tsamplePos += deltaDirFast; //advance ray position\n\t}\n\tfloat drawOpacityA = renderDrawAmbientOcclusionXY.y;\n\tif ((samplePos.a >= len) && (((overlays < 1.0) && (drawOpacityA <= 0.0) ) || (backgroundMasksOverlays > 0)))  {\n\t\tif (isClip)\n\t\t\tfColor += clipPlaneColorX;\n\t\treturn;\n\t}\n\tfColor = vec4(1.0, 1.0, 1.0, 1.0);\n\t//gl_FragDepth = frac2ndc(samplePos.xyz); //crude due to fast pass resolution\n\tsamplePos -= deltaDirFast;\n\tif (samplePos.a < 0.0)\n\t\tvec4 samplePos = vec4(start.xyz, 0.0); //ray position\n\t//end: fast pass\n\tvec4 colAcc = vec4(0.0,0.0,0.0,0.0);\n\tvec4 firstHit = vec4(0.0,0.0,0.0,2.0 * lenNoClip);\n\tconst float earlyTermination = 0.95;\n\tfloat backNearest = len; //assume no hit\n\tfloat ran = fract(sin(gl_FragCoord.x * 12.9898 + gl_FragCoord.y * 78.233) * 43758.5453);\n\tsamplePos += deltaDir * ran; //jitter ray\n`\n\nconst kRenderTail = `\n\tif (firstHit.a < len)\n\t\tgl_FragDepth = frac2ndc(firstHit.xyz);\n\tcolAcc.a = (colAcc.a / earlyTermination) * backOpacity;\n\tfColor = colAcc;\n\t//if (isClip) //CR\n\tif ((isColorPlaneInVolume) && (clipPos.a != samplePos.a) && (abs(firstHit.a - clipPos.a) < deltaDir.a))\n\t\tfColor.rgb = mix(fColor.rgb, clipPlaneColorX.rgb, abs(clipPlaneColor.a));\n\t\t//fColor.rgb = mix(fColor.rgb, clipPlaneColorX.rgb, clipPlaneColorX.a * 0.65);\n\tfloat renderDrawAmbientOcclusionX = renderDrawAmbientOcclusionXY.x;\n\tfloat drawOpacity = renderDrawAmbientOcclusionXY.y;\n\tif ((overlays < 1.0) && (drawOpacity <= 0.0))\n\t\treturn;\n\t//overlay pass\n\tlen = lenNoClip;\n\tsamplePos = vec4(start.xyz, 0.0); //ray position\n\t//start: OPTIONAL fast pass: rapid traversal until first hit\n\tstepSizeFast = sliceSize * 1.0;\n\tdeltaDirFast = vec4(dir.xyz * stepSizeFast, stepSizeFast);\n\twhile (samplePos.a <= len) {\n\t\tfloat val = texture(overlay, samplePos.xyz).a;\n\t\tif (drawOpacity > 0.0)\n\t\t\tval = max(val, texture(drawing, samplePos.xyz).r);\n\t\tif (val > 0.001)\n\t\t\tbreak;\n\t\tsamplePos += deltaDirFast; //advance ray position\n\t}\n\tif (samplePos.a >= len) {\n\t\tif (isClip && (fColor.a == 0.0))\n\t\t\t\tfColor += clipPlaneColorX;\n\t\t\treturn;\n\t}\n\tsamplePos -= deltaDirFast;\n\tif (samplePos.a < 0.0)\n\t\tvec4 samplePos = vec4(start.xyz, 0.0); //ray position\n\t//end: fast pass\n\tfloat overFarthest = len;\n\tcolAcc = vec4(0.0, 0.0, 0.0, 0.0);\n\n\tsamplePos += deltaDir * ran; //jitter ray\n\tvec4 overFirstHit = vec4(0.0,0.0,0.0,2.0 * len);\n\tif (backgroundMasksOverlays > 0)\n\t\tsamplePos = firstHit;\n\tbool firstDraw = true;\n\twhile (samplePos.a <= len) {\n\t\tvec4 colorSample = texture(overlay, samplePos.xyz);\n\t\tif ((colorSample.a < 0.01) && (drawOpacity > 0.0)) {\n\t\t\tfloat val = texture(drawing, samplePos.xyz).r;\n\t\t\tvec4 draw = drawColor(val, drawOpacity);\n\t\t\tif ((draw.a > 0.0) && (firstDraw)) {\n\t\t\t\tfirstDraw = false;\n\t\t\t\tfloat sum = 0.0;\n\t\t\t\tconst float mn = 1.0 / 256.0;\n\t\t\t\tconst float sampleRadius = 1.1;\n\t\t\t\tfloat dx = sliceSize * sampleRadius;\n\t\t\t\tvec3 center = samplePos.xyz;\n\t\t\t\t//six neighbors that share a face\n\t\t\t\tsum += min(texture(drawing, center.xyz + cross(vec3(0.0,0.0,+dx), dir)).r, mn);\n\t\t\t\tsum += min(texture(drawing, center.xyz + cross(vec3(0.0,0.0,-dx), dir)).r, mn);\n\t\t\t\tsum += min(texture(drawing, center.xyz + cross(vec3(0.0,+dx,0.0), dir)).r, mn);\n\t\t\t\tsum += min(texture(drawing, center.xyz + cross(vec3(0.0,-dx,0.0), dir)).r, mn);\n\t\t\t\tsum += min(texture(drawing, center.xyz + cross(vec3(+dx,0.0,0.0), dir)).r, mn);\n\t\t\t\tsum += min(texture(drawing, center.xyz + cross(vec3(-dx,0.0,0.0), dir)).r, mn);\n\t\t\t\t//float proportion = (sum / mn) / 6.0;\n\t\t\t\t\n\t\t\t\t//12 neighbors that share an edge\n\t\t\t\tdx = sliceSize * sampleRadius * sqrt(2.0) * 0.5;\n\t\t\t\tsum += min(texture(drawing, center.xyz + cross(vec3(0.0,+dx,+dx), dir)).r, mn);\n\t\t\t\tsum += min(texture(drawing, center.xyz + cross(vec3(+dx,0.0,+dx), dir)).r, mn);\n\t\t\t\tsum += min(texture(drawing, center.xyz + cross(vec3(+dx,+dx,0.0), dir)).r, mn);\n\t\t\t\tsum += min(texture(drawing, center.xyz + cross(vec3(0.0,-dx,-dx), dir)).r, mn);\n\t\t\t\tsum += min(texture(drawing, center.xyz + cross(vec3(-dx,0.0,-dx), dir)).r, mn);\n\t\t\t\tsum += min(texture(drawing, center.xyz + cross(vec3(-dx,-dx,0.0), dir)).r, mn);\n\n\t\t\t\tsum += min(texture(drawing, center.xyz + cross(vec3(0.0,+dx,-dx), dir)).r, mn);\n\t\t\t\tsum += min(texture(drawing, center.xyz + cross(vec3(+dx,0.0,-dx), dir)).r, mn);\n\t\t\t\tsum += min(texture(drawing, center.xyz + cross(vec3(+dx,-dx,0.0), dir)).r, mn);\n\t\t\t\t\n\t\t\t\tsum += min(texture(drawing, center.xyz + cross(vec3(0.0,-dx,+dx), dir)).r, mn);\n\t\t\t\tsum += min(texture(drawing, center.xyz + cross(vec3(-dx,0.0,+dx), dir)).r, mn);\n\t\t\t\tsum += min(texture(drawing, center.xyz + cross(vec3(-dx,+dx,0.0), dir)).r, mn);\n\t\t\t\tfloat proportion = (sum / mn) / 18.0; //proportion of six neighbors is non-zero\n\t\t\t\t\n\t\t\t\t//a high proportion of hits means crevice\n\t\t\t\t//since the AO term adds shadows that darken most voxels, it will result in dark surfaces\n\t\t\t\t//the term brighten adds a little illumination to balance this\n\t\t\t\t// without brighten, only the most extreme ridges will not be darker\n\t\t\t\tconst float brighten = 1.2;\n\t\t\t\tvec3 ao = draw.rgb * (1.0 - proportion) * brighten;\n\t\t\t\tdraw.rgb = mix (draw.rgb, ao , renderDrawAmbientOcclusionX);\n\t\t\t}\n\t\t\tcolorSample = draw;\n\t\t}\n\t\tsamplePos += deltaDir; //advance ray position\n\t\tif (colorSample.a >= 0.01) {\n\t\t\tif (overFirstHit.a > len)\n\t\t\t\toverFirstHit = samplePos;\n\t\t\tcolorSample.a *= renderOverlayBlend;\n\t\t\tcolorSample.a = 1.0-pow((1.0 - colorSample.a), opacityCorrection);\n\t\t\tcolorSample.rgb *= colorSample.a;\n\t\t\tcolAcc= (1.0 - colAcc.a) * colorSample + colAcc;\n\t\t\toverFarthest = samplePos.a;\n\t\t\tif ( colAcc.a > earlyTermination )\n\t\t\t\tbreak;\n\t\t}\n\t}\n\t//if (samplePos.a >= len) {\n\tif (colAcc.a <= 0.0) {\n\t\tif (isClip && (fColor.a == 0.0))\n\t\t\tfColor += clipPlaneColorX;\n\t\treturn;\n\t}\n\tif (overFirstHit.a < firstHit.a)\n\t\tgl_FragDepth = frac2ndc(overFirstHit.xyz);\n\tfloat overMix = colAcc.a;\n\tfloat overlayDepth = 0.3;\n\tif (fColor.a <= 0.0)\n\t\toverMix = 1.0;\n\telse if (((overFarthest) > backNearest)) {\n\t\tfloat dx = (overFarthest - backNearest)/1.73;\n\t\tdx = fColor.a * pow(dx, overlayDepth);\n\t\toverMix *= 1.0 - dx;\n\t}\n\tfColor.rgb = mix(fColor.rgb, colAcc.rgb, overMix);\n\tfColor.a = max(fColor.a, colAcc.a);\n}` // kRenderTail\n\n// https://github.com/niivue/niivue/issues/679\nexport const fragRenderSliceShader =\n  `#version 300 es\n#line 215\nprecision highp int;\nprecision highp float;\nuniform vec3 rayDir;\nuniform vec3 texVox;\nuniform int backgroundMasksOverlays;\nuniform vec3 volScale;\nuniform vec4 clipPlane;\nuniform highp sampler3D volume, overlay;\nuniform float overlays;\nuniform float clipThick;\nuniform vec3 clipLo;\nuniform vec3 clipHi;\nuniform float backOpacity;\nuniform mat4 mvpMtx;\nuniform mat4 matRAS;\nuniform vec4 clipPlaneColor;\nuniform float renderOverlayBlend;\nuniform highp sampler3D drawing;\nuniform highp sampler2D colormap;\nuniform vec2 renderDrawAmbientOcclusionXY;\nin vec3 vColor;\nout vec4 fColor;\n` +\n  kRenderFunc +\n  `\n\tvoid main() {\n\tvec3 start = vColor;\n\tgl_FragDepth = 0.0;\n\tvec3 backPosition = GetBackPosition(start);\n\tvec3 dir = normalize(backPosition - start);\n\tclipVolumeStart(start, backPosition);\n\tfloat len = length(backPosition - start);\n\tfloat lenVox = length((texVox * start) - (texVox * backPosition));\n\tif ((lenVox < 0.5) || (len > 3.0)) { //length limit for parallel rays\n\t\tfColor = vec4(0.0,0.0,0.0,0.0);\n\t\treturn;\n\t}\n\tfloat sliceSize = len / lenVox; //e.g. if ray length is 1.0 and traverses 50 voxels, each voxel is 0.02 in unit cube\n\tfloat stepSize = sliceSize; //quality: larger step is faster traversal, but fewer samples\n\tfloat opacityCorrection = stepSize/sliceSize;\n\tvec4 deltaDir = vec4(dir.xyz * stepSize, stepSize);\n\tvec4 samplePos = vec4(start.xyz, 0.0); //ray position\n\tvec4 colAcc = vec4(0.0,0.0,0.0,0.0);\n\tvec4 firstHit = vec4(0.0,0.0,0.0,2.0 * len);\n\tconst float earlyTermination = 0.95;\n\tfloat backNearest = len; //assume no hit\n\tfloat dis = len;\n\t//check if axial plane is closest\n\tvec4 aClip = vec4(0.0, 0.0, 1.0, (1.0- clipPlane.z) - 0.5);\n\tfloat adis = (-aClip.a - dot(aClip.xyz, samplePos.xyz-0.5)) / dot(dir,aClip.xyz);\n\tif (adis > 0.0)\n\t\tdis = min(adis, dis);\n\t//check of coronal plane is closest\n\tvec4 cClip = vec4(0.0, 1.0, 0.0, (1.0- clipPlane.y) - 0.5);\n\tfloat cdis = (-cClip.a - dot(cClip.xyz, samplePos.xyz-0.5)) / dot(dir,cClip.xyz);\n\tif (cdis > 0.0)\n\t\tdis = min(cdis, dis);\n\t//check if coronal slice is closest\n\tvec4 sClip = vec4(1.0, 0.0, 0.0, (1.0- clipPlane.x) - 0.5);\n\tfloat sdis = (-sClip.a - dot(sClip.xyz, samplePos.xyz-0.5)) / dot(dir,sClip.xyz);\n\tif (sdis > 0.0)\n\t\tdis = min(sdis, dis);\n\tif ((dis > 0.0) && (dis < len)) {\n\t\tsamplePos = vec4(samplePos.xyz+dir * dis, dis);\n\t\tcolAcc = texture(volume, samplePos.xyz);\n\t\tcolAcc.a = earlyTermination;\n\t\tfirstHit = samplePos;\n\t\tbackNearest = min(backNearest, samplePos.a);\n\t}\n\t//the following are only used by overlays\n\tvec4 clipPlaneColorX = clipPlaneColor;\n\tbool isColorPlaneInVolume = false;\n\tfloat lenNoClip = len;\n\tbool isClip = false;\n\tvec4 clipPos = applyClip(dir, samplePos, len, isClip);\n\tfloat stepSizeFast = sliceSize * 1.9;\n\tvec4 deltaDirFast = vec4(dir.xyz * stepSizeFast, stepSizeFast);\n\tif (samplePos.a < 0.0)\n\t\tvec4 samplePos = vec4(start.xyz, 0.0); //ray position\n\tfloat ran = fract(sin(gl_FragCoord.x * 12.9898 + gl_FragCoord.y * 78.233) * 43758.5453);\n\tsamplePos += deltaDir * ran; //jitter ray\n` +\n  kRenderTail\n\nexport const fragRenderShader =\n  `#version 300 es\n#line 215\nprecision highp int;\nprecision highp float;\nuniform vec3 rayDir;\nuniform vec3 texVox;\nuniform int backgroundMasksOverlays;\nuniform vec3 volScale;\nuniform vec4 clipPlane;\nuniform highp sampler3D volume, overlay;\nuniform float overlays;\nuniform float clipThick;\nuniform vec3 clipLo;\nuniform vec3 clipHi;\nuniform float backOpacity;\nuniform mat4 mvpMtx;\nuniform mat4 matRAS;\nuniform vec4 clipPlaneColor;\nuniform float renderOverlayBlend;\nuniform highp sampler3D drawing;\nuniform highp sampler2D colormap;\nuniform vec2 renderDrawAmbientOcclusionXY;\nin vec3 vColor;\nout vec4 fColor;\n` +\n  kRenderFunc +\n  kRenderInit +\n  `while (samplePos.a <= len) {\n\t\tvec4 colorSample = texture(volume, samplePos.xyz);\n\t\tsamplePos += deltaDir; //advance ray position\n\t\tif (colorSample.a >= 0.01) {\n\t\t\tif (firstHit.a > lenNoClip)\n\t\t\t\tfirstHit = samplePos;\n\t\t\tbackNearest = min(backNearest, samplePos.a);\n\t\t\tcolorSample.a = 1.0-pow((1.0 - colorSample.a), opacityCorrection);\n\t\t\tcolorSample.rgb *= colorSample.a;\n\t\t\tcolAcc= (1.0 - colAcc.a) * colorSample + colAcc;\n\t\t\tif ( colAcc.a > earlyTermination )\n\t\t\t\tbreak;\n\t\t}\n\t}\n` +\n  kRenderTail\n\nexport const fragRenderGradientShader =\n  `#version 300 es\n#line 215\nprecision highp int;\nprecision highp float;\nuniform vec3 rayDir;\nuniform vec3 texVox;\nuniform int backgroundMasksOverlays;\nuniform vec3 volScale;\nuniform vec4 clipPlane;\nuniform highp sampler3D volume, overlay;\nuniform float overlays;\nuniform float clipThick;\nuniform vec3 clipLo;\nuniform vec3 clipHi;\nuniform float backOpacity;\nuniform mat4 mvpMtx;\nuniform mat4 normMtx;\nuniform mat4 matRAS;\nuniform vec4 clipPlaneColor;\nuniform float renderOverlayBlend;\nuniform highp sampler3D drawing, gradient;\nuniform highp sampler2D colormap;\nuniform highp sampler2D matCap;\nuniform vec2 renderDrawAmbientOcclusionXY;\nuniform float gradientAmount;\nin vec3 vColor;\nout vec4 fColor;\n` +\n  kRenderFunc +\n  kRenderInit +\n  `\n\tfloat startPos = samplePos.a;\n\tfloat clipClose = clipPos.a + 3.0 * deltaDir.a; //do not apply gradients near clip plane\n\tfloat brighten = 2.0; //modulating makes average intensity darker 0.5 * 0.5 = 0.25\n\t//vec4 prevGrad = vec4(0.0);\n\twhile (samplePos.a <= len) {\n\t\tvec4 colorSample = texture(volume, samplePos.xyz);\n\t\tif (colorSample.a >= 0.0) {\n\t\t\tvec4 grad = texture(gradient, samplePos.xyz);\n\t\t\tgrad.rgb = normalize(grad.rgb*2.0 - 1.0);\n\t\t\t//if (grad.a < prevGrad.a)\n\t\t\t//\tgrad.rgb = prevGrad.rgb;\n\t\t\t//prevGrad = grad;\n\t\t\tvec3 n = mat3(normMtx) * grad.rgb;\n\t\t\tn.y = - n.y;\n\t\t\tvec4 mc = vec4(texture(matCap, n.xy * 0.5 + 0.5).rgb, 1.0) * brighten;\n\t\t\tmc = mix(vec4(1.0), mc, gradientAmount);\n\t\t\tif (samplePos.a > clipClose)\n\t\t\t\tcolorSample.rgb *= mc.rgb;\n\t\t\tif (firstHit.a > lenNoClip)\n\t\t\t\tfirstHit = samplePos;\n\t\t\tbackNearest = min(backNearest, samplePos.a);\n\t\t\tcolorSample.a = 1.0-pow((1.0 - colorSample.a), opacityCorrection);\n\t\t\tcolorSample.rgb *= colorSample.a;\n\t\t\tcolAcc= (1.0 - colAcc.a) * colorSample + colAcc;\n\t\t\tif ( colAcc.a > earlyTermination )\n\t\t\t\tbreak;\n\t\t}\n\t\tsamplePos += deltaDir; //advance ray position\n\t}\n` +\n  kRenderTail\n\nexport const vertSliceMMShader = `#version 300 es\n#line 392\nlayout(location=0) in vec3 pos;\nuniform int axCorSag;\nuniform mat4 mvpMtx;\nuniform mat4 frac2mm;\nuniform float slice;\nout vec3 texPos;\nvoid main(void) {\n\ttexPos = vec3(pos.x, pos.y, slice);\n\tif (axCorSag > 1)\n\t\ttexPos = vec3(slice, pos.x, pos.y);\n\telse if (axCorSag > 0)\n\t\ttexPos = vec3(pos.x, slice, pos.y);\n\tvec4 mm = frac2mm * vec4(texPos, 1.0);\n\tgl_Position = mvpMtx * mm;\n}`\n\nexport const kFragSliceHead =\n  `#version 300 es\n#line 411\nprecision highp int;\nprecision highp float;\nuniform highp sampler3D volume, overlay;\nuniform int backgroundMasksOverlays;\nuniform float overlayOutlineWidth;\nuniform float overlayAlphaShader;\nuniform int axCorSag;\nuniform float overlays;\nuniform float opacity;\nuniform float drawOpacity;\nuniform bool isAlphaClipDark;\nuniform highp sampler3D drawing;\nuniform highp sampler2D colormap;\nin vec3 texPos;\nout vec4 color;` +\n  kDrawFunc +\n  `void main() {\n\t//color = vec4(1.0, 0.0, 1.0, 1.0);return;\n\tvec4 background = texture(volume, texPos);\n\tcolor = vec4(background.rgb, opacity);\n\tif ((isAlphaClipDark) && (background.a == 0.0)) color.a = 0.0; //FSLeyes clipping range\n\tvec4 ocolor = vec4(0.0);\n\tfloat overlayAlpha = overlayAlphaShader;\n\tif (overlays > 0.0) {\n\t\tocolor = texture(overlay, texPos);\n\t\t//dFdx for \"boxing\" issue 435 has aliasing on some implementations (coarse vs fine)\n\t\t//however, this only identifies 50% of the edges due to aliasing effects\n\t\t// http://www.aclockworkberry.com/shader-derivative-functions/\n\t\t// https://bgolus.medium.com/distinctive-derivative-differences-cce38d36797b\n\t\t//if ((ocolor.a >= 1.0) && ((dFdx(ocolor.a) != 0.0) || (dFdy(ocolor.a) != 0.0)  ))\n\t\t//\tocolor.rbg = vec3(0.0, 0.0, 0.0);\n\t\tbool isOutlineBelowNotAboveThreshold = true;\n\t\tif (isOutlineBelowNotAboveThreshold) {\n\t\t\tif ((overlayOutlineWidth > 0.0) && (ocolor.a < 1.0)) { //check voxel neighbors for edge\n\t\t\t\tvec3 vx = (overlayOutlineWidth ) / vec3(textureSize(overlay, 0));\n\t\t\t\t//6 voxel neighbors that share a face\n\t\t\t\tvec3 vxR = vec3(texPos.x+vx.x, texPos.y, texPos.z);\n\t\t\t\tvec3 vxL = vec3(texPos.x-vx.x, texPos.y, texPos.z);\n\t\t\t\tvec3 vxA = vec3(texPos.x, texPos.y+vx.y, texPos.z);\n\t\t\t\tvec3 vxP = vec3(texPos.x, texPos.y-vx.y, texPos.z);\n\t\t\t\tvec3 vxS = vec3(texPos.x, texPos.y, texPos.z+vx.z);\n\t\t\t\tvec3 vxI = vec3(texPos.x, texPos.y, texPos.z-vx.z);\n\t\t\t\tfloat a = 0.0;\n\t\t\t\tif (axCorSag != 2) {\n\t\t\t\t\ta = max(a, texture(overlay, vxR).a);\n\t\t\t\t\ta = max(a, texture(overlay, vxL).a);\n\t\t\t\t}\n\t\t\t\tif (axCorSag != 1) {\n\t\t\t\t\ta = max(a, texture(overlay, vxA).a);\n\t\t\t\t\ta = max(a, texture(overlay, vxP).a);\n\t\t\t\t}\n\t\t\t\tif (axCorSag != 0) {\n\t\t\t\t\ta = max(a, texture(overlay, vxS).a);\n\t\t\t\t\ta = max(a, texture(overlay, vxI).a);\n\t\t\t\t}\n\t\t\t\tbool isCheckCorners = true;\n\t\t\t\tif (isCheckCorners) {\n\t\t\t\t\t//12 voxel neighbors that share an edge\n\t\t\t\t\tvec3 vxRA = vec3(texPos.x+vx.x, texPos.y+vx.y, texPos.z);\n\t\t\t\t\tvec3 vxLA = vec3(texPos.x-vx.x, texPos.y+vx.y, texPos.z);\n\t\t\t\t\tvec3 vxRP = vec3(texPos.x+vx.x, texPos.y-vx.y, texPos.z);\n\t\t\t\t\tvec3 vxLP = vec3(texPos.x-vx.x, texPos.y-vx.y, texPos.z);\n\t\t\t\t\tvec3 vxRS = vec3(texPos.x+vx.x, texPos.y, texPos.z+vx.z);\n\t\t\t\t\tvec3 vxLS = vec3(texPos.x-vx.x, texPos.y, texPos.z+vx.z);\n\t\t\t\t\tvec3 vxRI = vec3(texPos.x+vx.x, texPos.y, texPos.z-vx.z);\n\t\t\t\t\tvec3 vxLI = vec3(texPos.x-vx.x, texPos.y, texPos.z-vx.z);\n\t\t\t\t\tvec3 vxAS = vec3(texPos.x, texPos.y+vx.y, texPos.z+vx.z);\n\t\t\t\t\tvec3 vxPS = vec3(texPos.x, texPos.y-vx.y, texPos.z+vx.z);\n\t\t\t\t\tvec3 vxAI = vec3(texPos.x, texPos.y+vx.y, texPos.z-vx.z);\n\t\t\t\t\tvec3 vxPI = vec3(texPos.x, texPos.y-vx.y, texPos.z-vx.z);\n\n\t\t\t\t\tif (axCorSag == 0) { //axial corners\n\t\t\t\t\t\ta = max(a, texture(overlay, vxRA).a);\n\t\t\t\t\t\ta = max(a, texture(overlay, vxLA).a);\n\t\t\t\t\t\ta = max(a, texture(overlay, vxRP).a);\n\t\t\t\t\t\ta = max(a, texture(overlay, vxLP).a);\n\t\t\t\t\t}\n\t\t\t\t\tif (axCorSag == 1) { //coronal corners\n\t\t\t\t\t\ta = max(a, texture(overlay, vxRS).a);\n\t\t\t\t\t\ta = max(a, texture(overlay, vxLS).a);\n\t\t\t\t\t\ta = max(a, texture(overlay, vxRI).a);\n\t\t\t\t\t\ta = max(a, texture(overlay, vxLI).a);\n\t\t\t\t\t}\n\t\t\t\t\tif (axCorSag == 2) { //sagittal corners\n\t\t\t\t\t\ta = max(a, texture(overlay, vxAS).a);\n\t\t\t\t\t\ta = max(a, texture(overlay, vxPS).a);\n\t\t\t\t\t\ta = max(a, texture(overlay, vxAI).a);\n\t\t\t\t\t\ta = max(a, texture(overlay, vxPI).a);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (a >= 1.0) {\n\t\t\t\t\tocolor = vec4(0.0, 0.0, 0.0, 1.0);\n\t\t\t\t\toverlayAlpha = 1.0;\n\t\t\t\t}\n\t\t\t}\n\n\t\t} else {\n\t\t\tif ((overlayOutlineWidth > 0.0) && (ocolor.a >= 1.0)) { //check voxel neighbors for edge\n\t\t\t\tvec3 vx = (overlayOutlineWidth ) / vec3(textureSize(overlay, 0));\n\t\t\t\tvec3 vxR = vec3(texPos.x+vx.x, texPos.y, texPos.z);\n\t\t\t\tvec3 vxL = vec3(texPos.x-vx.x, texPos.y, texPos.z);\n\t\t\t\tvec3 vxA = vec3(texPos.x, texPos.y+vx.y, texPos.z);\n\t\t\t\tvec3 vxP = vec3(texPos.x, texPos.y-vx.y, texPos.z);\n\t\t\t\tvec3 vxS = vec3(texPos.x, texPos.y, texPos.z+vx.z);\n\t\t\t\tvec3 vxI = vec3(texPos.x, texPos.y, texPos.z-vx.z);\n\t\t\t\tfloat a = 1.0;\n\t\t\t\tif (axCorSag != 2) {\n\t\t\t\t\ta = min(a, texture(overlay, vxR).a);\n\t\t\t\t\ta = min(a, texture(overlay, vxL).a);\n\t\t\t\t}\n\t\t\t\tif (axCorSag != 1) {\n\t\t\t\t\ta = min(a, texture(overlay, vxA).a);\n\t\t\t\t\ta = min(a, texture(overlay, vxP).a);\n\t\t\t\t}\n\t\t\t\tif (axCorSag != 0) {\n\t\t\t\t\ta = min(a, texture(overlay, vxS).a);\n\t\t\t\t\ta = min(a, texture(overlay, vxI).a);\n\t\t\t\t}\n\t\t\t\tif (a < 1.0) {\n\t\t\t\t\tocolor = vec4(0.0, 0.0, 0.0, 1.0);\n\t\t\t\t\toverlayAlpha = 1.0;\n\t\t\t\t}\n\t\t\t}\n\t\t} //outline above threshold\n\t}\n\n`\nexport const kFragSliceTail = `\tocolor.a *= overlayAlpha;\n\tvec4 dcolor = drawColor(texture(drawing, texPos).r, drawOpacity);\n\tif (dcolor.a > 0.0) {\n\t\tcolor.rgb = mix(color.rgb, dcolor.rgb, dcolor.a);\n\t\tcolor.a = max(drawOpacity, color.a);\n\t}\n\tif ((backgroundMasksOverlays > 0) && (background.a == 0.0))\n\t\treturn;\n\tfloat a = color.a + ocolor.a * (1.0 - color.a); // premultiplied alpha\n\tif (a == 0.0) return;\n\tcolor.rgb = mix(color.rgb, ocolor.rgb, ocolor.a / a);\n\tcolor.a = a;\n}`\n\nexport const fragSliceMMShader = kFragSliceHead + kFragSliceTail\n\nexport const fragSliceV1Shader =\n  kFragSliceHead +\n  `\tif (ocolor.a > 0.0) {\n\t\t//https://gamedev.stackexchange.com/questions/102889/is-it-possible-to-convert-vec4-to-int-in-glsl-using-opengl-es\n\t\tuint alpha = uint(ocolor.a * 255.0);\n\t\tvec3 xyzFlip = vec3(float((uint(1) & alpha) > uint(0)), float((uint(2) & alpha) > uint(0)), float((uint(4) & alpha) > uint(0)));\n\t\t//convert from 0 and 1 to -1 and 1\n\t\txyzFlip = (xyzFlip * 2.0) - 1.0;\n\t\t//https://math.stackexchange.com/questions/1905533/find-perpendicular-distance-from-point-to-line-in-3d\n\t\t//v1 principle direction of tensor for this voxel\n\t\tvec3 v1 = ocolor.rgb;\n\t\t//flips encode polarity to convert from 0..1 to -1..1 (27 bits vs 24 bit precision)\n\t\tv1 = normalize( v1 * xyzFlip);\n\t\tvec3 vxl = fract(texPos * vec3(textureSize(volume, 0))) - 0.5;\n\t\t//vxl coordinates now -0.5..+0.5 so 0,0,0 is origin\n\t\tvxl.x = -vxl.x;\n\t\tfloat t = dot(vxl,v1);\n\t\tvec3 P = t * v1;\n\t\tfloat dx = length(P-vxl);\n\t\tocolor.a = 1.0 - smoothstep(0.2,0.25, dx);\n\t\t//if modulation was applied, use that to scale alpha not color:\n\t\tocolor.a *= length(ocolor.rgb);\n\t\tocolor.rgb = normalize(ocolor.rgb);\n\t\t//compute distance one half voxel closer to viewer:\n\t\tfloat pan = 0.5;\n\t\tif (axCorSag == 0)\n\t\t\tvxl.z -= pan;\n\t\tif (axCorSag == 1)\n\t\t\tvxl.y -= pan;\n\t\tif (axCorSag == 2)\n\t\t\tvxl.x += pan;\n\t\tt = dot(vxl,v1);\n\t\tP = t * v1;\n\t\tfloat dx2 = length(P-vxl);\n\t\tocolor.rgb += (dx2-dx-(0.5 * pan)) * 1.0;\n\t}\n` +\n  kFragSliceTail\n\nexport const fragRectShader = `#version 300 es\n#line 480\nprecision highp int;\nprecision highp float;\nuniform vec4 lineColor;\nout vec4 color;\nvoid main() {\n\tcolor = lineColor;\n}`\n\nexport const fragRectOutlineShader = `#version 300 es\n#line 723\nprecision highp int;\nprecision highp float;\n\nuniform vec4 lineColor;\nuniform vec4 leftTopWidthHeight;\nuniform float thickness; // line thickness in pixels\nuniform vec2 canvasWidthHeight;\n\nout vec4 color;\n\nvoid main() {\n    // fragment position in screen coordinates\n    vec2 fragCoord = gl_FragCoord.xy;\n\n    // canvas height\n    float canvasHeight = canvasWidthHeight.y;\n\n    // 'top' and 'bottom' to match gl_FragCoord.y coordinate system\n    float top = canvasHeight - leftTopWidthHeight.y;\n    float bottom = top - leftTopWidthHeight.w;\n\n    // left and right edges\n    float left = leftTopWidthHeight.x;\n    float right = left + leftTopWidthHeight.z;\n\n    bool withinLeft = fragCoord.x >= left && fragCoord.x <= left + thickness;\n    bool withinRight = fragCoord.x <= right && fragCoord.x >= right - thickness;\n    bool withinTop = fragCoord.y <= top && fragCoord.y >= top - thickness;\n    bool withinBottom = fragCoord.y >= bottom && fragCoord.y <= bottom + thickness;\n\n    bool isOutline = withinLeft || withinRight || withinTop || withinBottom;\n\n    if (isOutline) {\n        color = lineColor;\n    } else {\n        discard; \n    }\n}`\n\nexport const vertColorbarShader = `#version 300 es\n#line 490\nlayout(location=0) in vec3 pos;\nuniform vec2 canvasWidthHeight;\nuniform vec4 leftTopWidthHeight;\nout vec2 vColor;\nvoid main(void) {\n\t//convert pixel x,y space 1..canvasWidth,1..canvasHeight to WebGL 1..-1,-1..1\n\tvec2 frac;\n\tfrac.x = (leftTopWidthHeight.x + (pos.x * leftTopWidthHeight.z)) / canvasWidthHeight.x; //0..1\n\tfrac.y = 1.0 - ((leftTopWidthHeight.y + ((1.0 - pos.y) * leftTopWidthHeight.w)) / canvasWidthHeight.y); //1..0\n\tfrac = (frac * 2.0) - 1.0;\n\tgl_Position = vec4(frac, 0.0, 1.0);\n\tvColor = pos.xy;\n}`\n\nexport const fragColorbarShader = `#version 300 es\n#line 506\nprecision highp int;\nprecision highp float;\nuniform highp sampler2D colormap;\nuniform float layer;\nin vec2 vColor;\nout vec4 color;\nvoid main() {\n\tfloat nlayer = float(textureSize(colormap, 0).y);\n\tfloat fmap = (0.5 + layer) / nlayer;\n\tcolor = vec4(texture(colormap, vec2(vColor.x, fmap)).rgb, 1.0);\n}`\n\nexport const vertRectShader = `#version 300 es\n#line 520\nlayout(location=0) in vec3 pos;\nuniform vec2 canvasWidthHeight;\nuniform vec4 leftTopWidthHeight;\nvoid main(void) {\n\t//convert pixel x,y space 1..canvasWidth,1..canvasHeight to WebGL 1..-1,-1..1\n\tvec2 frac;\n\tfrac.x = (leftTopWidthHeight.x + (pos.x * leftTopWidthHeight.z)) / canvasWidthHeight.x; //0..1\n\tfrac.y = 1.0 - ((leftTopWidthHeight.y + ((1.0 - pos.y) * leftTopWidthHeight.w)) / canvasWidthHeight.y); //1..0\n\tfrac = (frac * 2.0) - 1.0;\n\tgl_Position = vec4(frac, 0.0, 1.0);\n}`\n\nexport const vertLineShader = `#version 300 es\n#line 534\nlayout(location=0) in vec3 pos;\nuniform vec2 canvasWidthHeight;\nuniform float thickness;\nuniform vec4 startXYendXY;\nvoid main(void) {\n\tvec2 posXY = mix(startXYendXY.xy, startXYendXY.zw, pos.x);\n\tvec2 dir = normalize(startXYendXY.xy - startXYendXY.zw);\n\tposXY += vec2(-dir.y, dir.x) * thickness * (pos.y - 0.5);\n\tposXY.x = (posXY.x) / canvasWidthHeight.x; //0..1\n\tposXY.y = 1.0 - (posXY.y / canvasWidthHeight.y); //1..0\n\tgl_Position = vec4((posXY * 2.0) - 1.0, 0.0, 1.0);\n}`\n\nexport const vertLine3DShader = `#version 300 es\n#line 534\nlayout(location=0) in vec3 pos;\nuniform vec2 canvasWidthHeight;\nuniform float thickness;\nuniform vec2 startXY;\nuniform vec3 endXYZ; // transformed XYZ point\nvoid main(void) {\t\n\tvec2 posXY = mix(startXY.xy, endXYZ.xy, pos.x);\n\tvec2 startDiff = endXYZ.xy - startXY.xy;\n\tfloat startDistance = length(startDiff);\n\tvec2 diff = endXYZ.xy - posXY;\n\tfloat currentDistance = length(diff);\n\tvec2 dir = normalize(startXY.xy - endXYZ.xy);\n\tposXY += vec2(-dir.y, dir.x) * thickness * (pos.y - 0.5);\n\tposXY.x = (posXY.x) / canvasWidthHeight.x; //0..1\n\tposXY.y = 1.0 - (posXY.y / canvasWidthHeight.y); //1..0\t\n\tfloat z = endXYZ.z * ( 1.0 - abs(currentDistance/startDistance)); \n\tgl_Position = vec4((posXY * 2.0) - 1.0, z, 1.0);\n}`\n\nexport const vertBmpShader = `#version 300 es\n#line 549\nlayout(location=0) in vec3 pos;\nuniform vec2 canvasWidthHeight;\nuniform vec4 leftTopWidthHeight;\nout vec2 vUV;\nvoid main(void) {\n\t//convert pixel x,y space 1..canvasWidth,1..canvasHeight to WebGL 1..-1,-1..1\n\tvec2 frac;\n\tfrac.x = (leftTopWidthHeight.x + (pos.x * leftTopWidthHeight.z)) / canvasWidthHeight.x; //0..1\n\tfrac.y = 1.0 - ((leftTopWidthHeight.y + ((1.0 - pos.y) * leftTopWidthHeight.w)) / canvasWidthHeight.y); //1..0\n\tfrac = (frac * 2.0) - 1.0;\n\tgl_Position = vec4(frac, 0.0, 1.0);\n\tvUV = vec2(pos.x, 1.0 - pos.y);\n}`\n\nexport const fragBmpShader = `#version 300 es\n#line 565\nprecision highp int;\nprecision highp float;\nuniform highp sampler2D bmpTexture;\nin vec2 vUV;\nout vec4 color;\nvoid main() {\n\tcolor = texture(bmpTexture, vUV);\n}`\n\nexport const vertFontShader = `#version 300 es\n#line 576\nlayout(location=0) in vec3 pos;\nuniform vec2 canvasWidthHeight;\nuniform vec4 leftTopWidthHeight;\nuniform vec4 uvLeftTopWidthHeight;\nout vec2 vUV;\nvoid main(void) {\n\t//convert pixel x,y space 1..canvasWidth,1..canvasHeight to WebGL 1..-1,-1..1\n\tvec2 frac;\n\tfrac.x = (leftTopWidthHeight.x + (pos.x * leftTopWidthHeight.z)) / canvasWidthHeight.x; //0..1\n\tfrac.y = 1.0 - ((leftTopWidthHeight.y + ((1.0 - pos.y) * leftTopWidthHeight.w)) / canvasWidthHeight.y); //1..0\n\tfrac = (frac * 2.0) - 1.0;\n\tgl_Position = vec4(frac, 0.0, 1.0);\n\tvUV = vec2(uvLeftTopWidthHeight.x + (pos.x * uvLeftTopWidthHeight.z), uvLeftTopWidthHeight.y  + ((1.0 - pos.y) * uvLeftTopWidthHeight.w) );\n}`\n\nexport const fragFontShader = `#version 300 es\n#line 593\nprecision highp int;\nprecision highp float;\nuniform highp sampler2D fontTexture;\nuniform vec4 fontColor;\nuniform float screenPxRange;\nin vec2 vUV;\nout vec4 color;\nfloat median(float r, float g, float b) {\n\treturn max(min(r, g), min(max(r, g), b));\n}\nvoid main() {\n\tvec3 msd = texture(fontTexture, vUV).rgb;\n\tfloat sd = median(msd.r, msd.g, msd.b);\n\tfloat screenPxDistance = screenPxRange*(sd - 0.5);\n\tfloat opacity = clamp(screenPxDistance + 0.5, 0.0, 1.0);\n\tcolor = vec4(fontColor.rgb , fontColor.a * opacity);\n}`\n\nexport const vertCircleShader = `#version 300 es\nlayout(location=0) in vec3 pos;\nuniform vec2 canvasWidthHeight;\nuniform vec4 leftTopWidthHeight;\nuniform vec4 uvLeftTopWidthHeight;\nout vec2 vUV;\nvoid main(void) {\n\t//convert pixel x,y space 1..canvasWidth,1..canvasHeight to WebGL 1..-1,-1..1\n\tvec2 frac;\n\tfrac.x = (leftTopWidthHeight.x + (pos.x * leftTopWidthHeight.z)) / canvasWidthHeight.x; //0..1\n\tfrac.y = 1.0 - ((leftTopWidthHeight.y + ((1.0 - pos.y) * leftTopWidthHeight.w)) / canvasWidthHeight.y); //1..0\n\tfrac = (frac * 2.0) - 1.0;\n\tgl_Position = vec4(frac, 0.0, 1.0);\n\tvUV = pos.xy;\n}`\n\nexport const fragCircleShader = `#version 300 es\nprecision highp int;\nprecision highp float;\nuniform vec4 circleColor;\nuniform float fillPercent;\nin vec2 vUV;\nout vec4 color;\nvoid main() {\n\t/* Check if the pixel is inside the circle\n\t\t and color it with a gradient. Otherwise, color it \n\t\t transparent   */\n\tfloat distance = length(vUV-vec2(0.5,0.5));\n\tif ( distance < 0.5 && distance >= (1.0 - fillPercent) / 2.0){\n\t\t\tcolor = vec4(circleColor.r,circleColor.g,circleColor.b,circleColor.a) ;\t\t\t\n\t}else{\n\t\t\tcolor = vec4(0.0,0.0,0.0,0.0);\n\t}\n}\n`\n\nexport const vertOrientShader = `#version 300 es\n#line 613\nprecision highp int;\nprecision highp float;\nin vec3 vPos;\nout vec2 TexCoord;\nvoid main() {\n\tTexCoord = vPos.xy;\n\tgl_Position = vec4( (vPos.xy-vec2(0.5,0.5)) * 2.0, 0.0, 1.0);\n}`\n\nexport const fragOrientShaderU = `#version 300 es\nuniform highp usampler3D intensityVol;\n`\n\nexport const fragOrientShaderI = `#version 300 es\nuniform highp isampler3D intensityVol;\n`\n\nexport const fragOrientShaderF = `#version 300 es\nuniform highp sampler3D intensityVol;\n`\n\nexport const fragOrientShaderAtlas = `#line 636\nprecision highp int;\nprecision highp float;\nin vec2 TexCoord;\nout vec4 FragColor;\nuniform float coordZ;\nuniform float layer;\nuniform highp sampler2D colormap;\nuniform lowp sampler3D blend3D;\nuniform float opacity;\nuniform vec4 xyzaFrac;\nuniform mat4 mtx;\nvoid main(void) {\n\tvec4 vx = vec4(TexCoord.x, TexCoord.y, coordZ, 1.0) * mtx;\n\tuint idx = uint(texture(intensityVol, vx.xyz).r);\n\tFragColor = vec4(0.0, 0.0, 0.0, 0.0);\n\tif (idx == uint(0))\n\t\treturn;\n\t//idx = ((idx - uint(1)) % uint(100))+uint(1);\n\tfloat textureWidth = float(textureSize(colormap, 0).x);\n\tfloat fx = (float(idx)+0.5) / textureWidth;\n\tfloat nlayer = float(textureSize(colormap, 0).y);\n\tfloat y = ((2.0 * layer) + 1.5)/nlayer;\n\tFragColor = texture(colormap, vec2(fx, y)).rgba;\n\tfloat alpha = FragColor.a;\n\tFragColor.a *= opacity;\n\tif (xyzaFrac.a > 0.0) { //outline\n\t\tvx = vec4(TexCoord.x+xyzaFrac.x, TexCoord.y, coordZ, 1.0) * mtx;\n\t\tuint R = uint(texture(intensityVol, vx.xyz).r);\n\t\tvx = vec4(TexCoord.x-xyzaFrac.x, TexCoord.y, coordZ, 1.0) * mtx;\n\t\tuint L = uint(texture(intensityVol, vx.xyz).r);\n\t\tvx = vec4(TexCoord.x, TexCoord.y+xyzaFrac.y, coordZ, 1.0) * mtx;\n\t\tuint A = uint(texture(intensityVol, vx.xyz).r);\n\t\tvx = vec4(TexCoord.x, TexCoord.y-xyzaFrac.y, coordZ, 1.0) * mtx;\n\t\tuint P = uint(texture(intensityVol, vx.xyz).r);\n\t\tvx = vec4(TexCoord.x, TexCoord.y, coordZ+xyzaFrac.z, 1.0) * mtx;\n\t\tuint S = uint(texture(intensityVol, vx.xyz).r);\n\t\tvx = vec4(TexCoord.x, TexCoord.y, coordZ-xyzaFrac.z, 1.0) * mtx;\n\t\tuint I = uint(texture(intensityVol, vx.xyz).r);\n\t\tif ((idx != R) || (idx != L) || (idx != A) || (idx != P) || (idx != S) || (idx != I))\n\t\t\tFragColor.a = alpha * xyzaFrac.a;\n\t}\n}`\n\nexport const fragOrientShader = `#line 691\nprecision highp int;\nprecision highp float;\nin vec2 TexCoord;\nout vec4 FragColor;\nuniform float coordZ;\nuniform float layer;\nuniform float scl_slope;\nuniform float scl_inter;\nuniform float cal_max;\nuniform float cal_min;\nuniform float cal_maxNeg;\nuniform float cal_minNeg;\nuniform bool isAlphaThreshold;\nuniform bool isAdditiveBlend;\nuniform highp sampler2D colormap;\nuniform lowp sampler3D blend3D;\nuniform int modulation;\nuniform highp sampler3D modulationVol;\nuniform float opacity;\nuniform mat4 mtx;\nvoid main(void) {\n\tvec4 vx = vec4(TexCoord.xy, coordZ, 1.0) * mtx;\n\tif ((vx.x < 0.0) || (vx.x > 1.0) || (vx.y < 0.0) || (vx.y > 1.0) || (vx.z < 0.0) || (vx.z > 1.0)) {\n\t\t//set transparent if out of range\n\t\t//https://webglfundamentals.org/webgl/webgl-3d-textures-repeat-clamp.html\n\t\tFragColor = texture(blend3D, vec3(TexCoord.xy, coordZ));\n\t\treturn;\n\t}\n\tfloat f = (scl_slope * float(texture(intensityVol, vx.xyz).r)) + scl_inter;\n\tfloat mn = cal_min;\n\tfloat mx = cal_max;\n\tif (isAlphaThreshold)\n\t\tmn = 0.0;\n\tfloat r = max(0.00001, abs(mx - mn));\n\tmn = min(mn, mx);\n\tfloat txl = mix(0.0, 1.0, (f - mn) / r);\n\t//https://stackoverflow.com/questions/5879403/opengl-texture-coordinates-in-pixel-space\n\tfloat nlayer = float(textureSize(colormap, 0).y);\n\t//each volume has two color maps:\n\t// (layer*2) = negative and (layer * 2) + 1 = postive\n\tfloat y = ((2.0 * layer) + 1.5)/nlayer;\n\tFragColor = texture(colormap, vec2(txl, y)).rgba;\n\t//negative colors\n\tmn = cal_minNeg;\n\tmx = cal_maxNeg;\n\tif (isAlphaThreshold)\n\t\tmx = 0.0;\n\t//if ((!isnan(cal_minNeg)) && ( f < mx)) {\n\tif ((cal_minNeg < cal_maxNeg) && ( f < mx)) {\n\t\tr = max(0.00001, abs(mx - mn));\n\t\tmn = min(mn, mx);\n\t\ttxl = 1.0 - mix(0.0, 1.0, (f - mn) / r);\n\t\ty = ((2.0 * layer) + 0.5)/nlayer;\n\t\tFragColor = texture(colormap, vec2(txl, y));\n\t}\n\tif (layer > 0.7)\n\t\tFragColor.a = step(0.00001, FragColor.a);\n\t//if (modulation > 10)\n\t//\tFragColor.a *= texture(modulationVol, vx.xyz).r;\n\t//\tFragColor.rgb *= texture(modulationVol, vx.xyz).r;\n\tif (isAlphaThreshold) {\n\t\tif ((cal_minNeg != cal_maxNeg) && ( f < 0.0) && (f > cal_maxNeg))\n\t\t\tFragColor.a = pow(-f / -cal_maxNeg, 2.0);\n\t\telse if ((f > 0.0) && (cal_min > 0.0))\n\t\t\tFragColor.a *= pow(f / cal_min, 2.0); //issue435:  A = (V/X)**2\n\t\t//FragColor.g = 0.0;\n\t}\n\tif (modulation == 1) {\n\t\tFragColor.rgb *= texture(modulationVol, vx.xyz).r;\n\t} else if (modulation == 2) {\n\t\tFragColor.a = texture(modulationVol, vx.xyz).r;\n\t}\n\tFragColor.a *= opacity;\n\tif (layer < 1.0) return;\n\tvec4 prevColor = texture(blend3D, vec3(TexCoord.xy, coordZ));\n\t// https://en.wikipedia.org/wiki/Alpha_compositing\n\tfloat aout = FragColor.a + (1.0 - FragColor.a) * prevColor.a;\n\tif (aout <= 0.0) return;\n\tif (isAdditiveBlend)\n\t\tFragColor.rgb = ((FragColor.rgb * FragColor.a) + (prevColor.rgb * prevColor.a)) / aout;\n\telse\n\t\tFragColor.rgb = ((FragColor.rgb * FragColor.a) + (prevColor.rgb * prevColor.a * (1.0 - FragColor.a))) / aout;\n\tFragColor.a = aout;\n}`\n\nexport const fragRGBOrientShader = `#line 773\nprecision highp int;\nprecision highp float;\nin vec2 TexCoord;\nout vec4 FragColor;\nuniform float coordZ;\nuniform float layer;\nuniform float scl_slope;\nuniform float scl_inter;\nuniform float cal_max;\nuniform float cal_min;\nuniform highp sampler2D colormap;\nuniform lowp sampler3D blend3D;\nuniform float opacity;\nuniform mat4 mtx;\nuniform bool hasAlpha;\nuniform int modulation;\nuniform highp sampler3D modulationVol;\nvoid main(void) {\n\tvec4 vx = vec4(TexCoord.xy, coordZ, 1.0) * mtx;\n\tuvec4 aColor = texture(intensityVol, vx.xyz);\n\tFragColor = vec4(float(aColor.r) / 255.0, float(aColor.g) / 255.0, float(aColor.b) / 255.0, float(aColor.a) / 255.0);\n\tif (modulation == 1)\n\t\tFragColor.rgb *= texture(modulationVol, vx.xyz).r;\n\tif (!hasAlpha) {\n\t\tFragColor.a = (FragColor.r * 0.21 + FragColor.g * 0.72 + FragColor.b * 0.07);\n\t\t//next line: we could binarize alpha, but see rendering of visible human\n\t\t//FragColor.a = step(0.01, FragColor.a);\n\t}\n\tif (modulation == 2)\n\t\tFragColor.a = texture(modulationVol, vx.xyz).r;\n\tFragColor.a *= opacity;\n}`\n\nexport const vertGrowCutShader = `#version 300 es\n#line 808\nprecision highp int;\nprecision highp float;\nin vec3 vPos;\nout vec2 TexCoord;\nvoid main() {\n\tTexCoord = vPos.xy;\n\tgl_Position = vec4((vPos.x - 0.5) * 2.0, (vPos.y - 0.5) * 2.0, 0.0, 1.0);\n}`\n\n// https://github.com/pieper/step/blob/master/src/growcut.js\n// Steve Pieper 2022: Apache License 2.0\nexport const fragGrowCutShader = `#version 300 es\n#line 829\n\tprecision highp float;\n\tprecision highp int;\n\tprecision highp isampler3D;\n\tlayout(location = 0) out int label;\n\tlayout(location = 1) out int strength;\n\tin vec2 TexCoord;\n\tuniform int finalPass;\n\tuniform float coordZ;\n\tuniform lowp sampler3D in3D;\n\tuniform highp isampler3D backTex; // background\n\tuniform highp isampler3D labelTex; // label\n\tuniform highp isampler3D strengthTex; // strength\nvoid main(void) {\n\tvec3 interpolatedTextureCoordinate = vec3(TexCoord.xy, coordZ);\n\tivec3 size = textureSize(backTex, 0);\n\tivec3 texelIndex = ivec3(floor(interpolatedTextureCoordinate * vec3(size)));\n\tint background = texelFetch(backTex, texelIndex, 0).r;\n\tlabel = texelFetch(labelTex, texelIndex, 0).r;\n\tstrength = texelFetch(strengthTex, texelIndex, 0).r;\n\tfor (int k = -1; k <= 1; k++) {\n\t\tfor (int j = -1; j <= 1; j++) {\n\t\t\tfor (int i = -1; i <= 1; i++) {\n\t\t\t\tif (i != 0 && j != 0 && k != 0) {\n\t\t\t\t\tivec3 neighborIndex = texelIndex + ivec3(i,j,k);\n\t\t\t\t\tint neighborBackground = texelFetch(backTex, neighborIndex, 0).r;\n\t\t\t\t\tint neighborStrength = texelFetch(strengthTex, neighborIndex, 0).r;\n\t\t\t\t\tint strengthCost = abs(neighborBackground - background);\n\t\t\t\t\tint takeoverStrength = neighborStrength - strengthCost;\n\t\t\t\t\tif (takeoverStrength > strength) {\n\t\t\t\t\t\tstrength = takeoverStrength;\n\t\t\t\t\t\tlabel = texelFetch(labelTex, neighborIndex, 0).r;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tif (finalPass < 1)\n\t\treturn;\n\tint ok = 1;\n\tivec4 labelCount = ivec4(0,0,0,0);\n\tfor (int k = -1; k <= 1; k++)\n\t\tfor (int j = -1; j <= 1; j++)\n\t\t\tfor (int i = -1; i <= 1; i++) {\n\t\t\t\tivec3 neighborIndex = texelIndex + ivec3(i,j,k);\n\t\t\t\tint ilabel = texelFetch(labelTex, neighborIndex, 0).r;\n\t\t\t\tif ((ilabel < 0) || (ilabel > 3))\n\t\t\t\t\tok = 0;\n\t\t\t\telse\n\t\t\t\t\tlabelCount[ilabel]++;\n\t\t\t}\n\tif (ok != 1) {\n\t\treturn;\n\t}\n\tint maxIdx = 0;\n\tfor (int i = 1; i < 4; i++) {\n\t\tif (labelCount[i] > labelCount[maxIdx])\n\t\t\tmaxIdx = i;\n\t}\n\tlabel = maxIdx;\n}`\n\nexport const vertSurfaceShader = `#version 300 es\nlayout(location=0) in vec3 pos;\nuniform mat4 mvpMtx;\nvoid main(void) {\n\tgl_Position = mvpMtx * vec4(pos, 1.0);\n}`\n\nexport const fragSurfaceShader = `#version 300 es\nprecision highp int;\nprecision highp float;\nuniform vec4 surfaceColor;\nout vec4 color;\nvoid main() {\n\tcolor = surfaceColor;\n}`\n\nexport const vertFiberShader = `#version 300 es\nlayout(location=0) in vec3 pos;\nlayout(location=1) in vec4 clr;\nout vec4 vClr;\nuniform mat4 mvpMtx;\nvoid main(void) {\n\tgl_Position = mvpMtx * vec4(pos, 1.0);\n\tvClr = clr;\n}`\n\nexport const fragFiberShader = `#version 300 es\nprecision highp int;\nprecision highp float;\nin vec4 vClr;\nout vec4 color;\nuniform float opacity;\nvoid main() {\n\tcolor = vec4(vClr.rgb, opacity);\n}`\n\nexport const vertMeshShader = `#version 300 es\nlayout(location=0) in vec3 pos;\nlayout(location=1) in vec4 norm;\nlayout(location=2) in vec4 clr;\nuniform mat4 mvpMtx;\n//uniform mat4 modelMtx;\nuniform mat4 normMtx;\nout vec4 vClr;\nout vec3 vN;\nout vec4 vP;\nout vec4 vPc;\nvoid main(void) {\n\tvec3 lightPosition = vec3(0.0, 0.0, -10.0);\n\tvP = vec4(pos, 1.0);\n\tvPc = mvpMtx * vec4(pos, 1.0);\n\tgl_Position = vPc;\n\tvN = normalize((normMtx * vec4(norm.xyz,1.0)).xyz);\n\t//vV = -vec3(modelMtx*vec4(pos,1.0));\n\tvClr = clr;\n}`\n\n// report depth for fragment\n// https://github.com/rii-mango/Papaya/blob/782a19341af77a510d674c777b6da46afb8c65f1/src/js/viewer/screensurface.js#L89\nexport const fragMeshDepthShader = `#version 300 es\nprecision highp int;\nprecision highp float;\nuniform float opacity;\nout vec4 color;\nvec4 packFloatToVec4i(const float value) {\n\tconst vec4 bitSh = vec4(256.0*256.0*256.0, 256.0*256.0, 256.0, 1.0);\n\tconst vec4 bitMsk = vec4(0.0, 1.0/256.0, 1.0/256.0, 1.0/256.0);\n\tvec4 res = fract(value * bitSh);\n\tres -= res.xxyz * bitMsk;\n\treturn res;\n}\nvoid main() {\n\tcolor = packFloatToVec4i(gl_FragCoord.z);\n}`\n\n// ToonShader https://prideout.net/blog/old/blog/index.html@tag=toon-shader.html\nexport const fragMeshToonShader = `#version 300 es\nprecision highp int;\nprecision highp float;\nuniform float opacity;\nin vec4 vClr;\nin vec3 vN;\nout vec4 color;\nfloat stepmix(float edge0, float edge1, float E, float x){\n\tfloat T = clamp(0.5 * (x - edge0 + E) / E, 0.0, 1.0);\n\treturn mix(edge0, edge1, T);\n}\nvoid main() {\n\tvec3 r = vec3(0.0, 0.0, 1.0);\n\tfloat ambient = 0.3;\n\tfloat diffuse = 0.6;\n\tfloat specular = 0.5;\n\tfloat shininess = 50.0;\n\tvec3 n = normalize(vN);\n\tvec3 lightPosition = vec3(0.0, 10.0, -5.0);\n\tvec3 l = normalize(lightPosition);\n\tfloat df = max(0.0, dot(n, l));\n\tfloat sf = pow(max(dot(reflect(l, n), r), 0.0), shininess);\n\tconst float A = 0.1;\n\tconst float B = 0.3;\n\tconst float C = 0.6;\n\tconst float D = 1.0;\n\tfloat E = fwidth(df);\n\tif (df > A - E && df < A + E) df = stepmix(A, B, E, df);\n\telse if (df > B - E && df < B + E) df = stepmix(B, C, E, df);\n\telse if (df > C - E && df < C + E) df = stepmix(C, D, E, df);\n\telse if (df < A) df = 0.0;\n\telse if (df < B) df = B;\n\telse if (df < C) df = C;\n\telse df = D;\n\tE = fwidth(sf);\n\tif (sf > 0.5 - E && sf < 0.5 + E)\n\t\tsf = smoothstep(0.5 - E, 0.5 + E, sf);\n\telse\n\t\tsf = step(0.5, sf);\n\tvec3 a = vClr.rgb * ambient;\n\tvec3 d = max(df, 0.0) * vClr.rgb * diffuse;\n\tcolor.rgb = a + d + (specular * sf);\n\tcolor.a = opacity;\n}`\n\n// outline\nexport const fragMeshOutlineShader = `#version 300 es\nprecision highp int;\nprecision highp float;\nuniform float opacity;\nin vec4 vClr;\nin vec3 vN;\nout vec4 color;\nvoid main() {\n\tvec3 r = vec3(0.0, 0.0, 1.0); //rayDir: for orthographic projections moving in Z direction (no need for normal matrix)\n\tfloat ambient = 0.3;\n\tfloat diffuse = 0.6;\n\tfloat specular = 0.25;\n\tfloat shininess = 10.0;\n\tfloat PenWidth = 0.6;\n\tvec3 n = normalize(vN);\n\tvec3 lightPosition = vec3(0.0, 10.0, -5.0);\n\tvec3 l = normalize(lightPosition);\n\tfloat lightNormDot = dot(n, l);\n\tfloat view = abs(dot(n,r)); //with respect to viewer\n\tif (PenWidth < view) discard;\n\tvec3 a = vClr.rgb * ambient;\n\tvec3 d = max(lightNormDot, 0.0) * vClr.rgb * diffuse;\n\tfloat s = specular * pow(max(dot(reflect(l, n), r), 0.0), shininess);\n\tcolor.rgb = a + d + s;\n\tcolor.a = opacity;\n}`\n\n// Phong headlight shader for edge enhancement, opposite of fresnel rim lighting\nexport const fragMeshEdgeShader = `#version 300 es\nprecision highp int;\nprecision highp float;\nuniform float opacity;\nin vec4 vClr;\nin vec3 vN;\nout vec4 color;\nvoid main() {\n\tvec3 r = vec3(0.0, 0.0, 1.0); //rayDir: for orthographic projections moving in Z direction (no need for normal matrix)\n\tfloat diffuse = 1.0;\n\tfloat specular = 0.2;\n\tfloat shininess = 10.0;\n\tvec3 n = normalize(vN);\n\tvec3 lightPosition = vec3(0.0, 0.0, -5.0);\n\tvec3 l = normalize(lightPosition);\n\tfloat lightNormDot = max(dot(n, l), 0.0);\n\tvec3 d = lightNormDot * vClr.rgb * diffuse;\n\tfloat s = specular * pow(max(dot(reflect(l, n), r), 0.0), shininess);\n\tcolor = vec4(d + s, opacity);\n}`\n\nexport const fragMeshDiffuseEdgeShader = `#version 300 es\nprecision highp int;\nprecision highp float;\nuniform float opacity;\nin vec4 vClr;\nin vec3 vN;\nout vec4 color;\nvoid main() {\n\tfloat diffuse = 1.4;\n\tvec3 l = vec3(0.0, 0.0, -1.0);\n\tfloat lightNormDot = max(dot(normalize(vN), l), 0.0);\n\tcolor = vec4(lightNormDot * vClr.rgb * diffuse, opacity);\n}`\n\nexport const fragMeshSpecularEdgeShader = `#version 300 es\nprecision highp int;\nprecision highp float;\nuniform float opacity;\nin vec4 vClr;\nin vec3 vN;\nout vec4 color;\nvoid main() {\n\tfloat specularRGB = 0.7;\n\tfloat specularWhite = 0.3;\n\tfloat shininess = 10.0;\n\tfloat diffuse = 1.0;\n\tvec3 r = vec3(0.0, 0.0, 1.0); //rayDir: for orthographic projections moving in Z direction (no need for normal matrix)\n\tvec3 n = normalize(vN);\n\tvec3 l = vec3(0.0, 0.0, -1.0);\n\tfloat lightNormDot = max(dot(n, l), 0.0);\n\tvec3 d3 = lightNormDot * vClr.rgb * diffuse;\n\tfloat s = pow(max(dot(reflect(l, n), r), 0.0), shininess);\n\tvec3 s3 = specularRGB * s * vClr.rgb;\n\ts *= specularWhite;\n\tcolor = vec4(d3 + s3 + s, opacity);\n}`\n\n// https://thorium.rocks/media/curves/curvaceous.html\nexport const fragMeshShaderCrevice = `#version 300 es\nprecision highp int;\nprecision highp float;\nuniform float opacity;\nin vec4 vClr;\nin vec3 vN;\nin vec4 vPc;\nout vec4 color;\nvoid main() {\n\tvec3 n = normalize(vN);\n\t// Compute curvature\n\tvec3 dx = dFdx(n);\n\tvec3 dy = dFdy(n);\n\tvec3 xneg = n - dx;\n\tvec3 xpos = n + dx;\n\tvec3 yneg = n - dy;\n\tvec3 ypos = n + dy;\n\tfloat depth = length(vPc.xyz);\n\tfloat curv = (cross(xneg, xpos).y - cross(yneg, ypos).x) / depth;\n\t//at this stage 0.5 for flat, with valleys dark and ridges bright\n\tcurv = 1.0 - (curv + 0.5);\n\t//clamp\n\tcurv =  min(max(curv, 0.0), 1.0);\n\t// easing function\n\tcurv = pow(curv, 0.5);\n\t//modulate ambient and diffuse with curvature\n\tvec3 r = vec3(0.0, 0.0, 1.0); //rayDir: for orthographic projections moving in Z direction (no need for normal matrix)\n\tfloat ambient = 0.6;\n\tfloat diffuse = 0.6;\n\tfloat specular = 0.2;\n\tfloat shininess = 10.0;\n\tvec3 lightPosition = vec3(0.0, 10.0, -2.0);\n\tvec3 l = normalize(lightPosition);\n\tfloat lightNormDot = dot(n, l);\n\tvec3 a = vClr.rgb * ambient * curv;\n\tvec3 d = max(lightNormDot, 0.0) * vClr.rgb * diffuse;\n\tfloat s = specular * pow(max(dot(reflect(l, n), r), 0.0), shininess);\n\tcolor = vec4(a + d + s, opacity);\n}`\n// Phong: default\nexport const fragMeshShader = `#version 300 es\nprecision highp int;\nprecision highp float;\nuniform float opacity;\nin vec4 vClr;\nin vec3 vN;\nout vec4 color;\nvoid main() {\n\tvec3 r = vec3(0.0, 0.0, 1.0); //rayDir: for orthographic projections moving in Z direction (no need for normal matrix)\n\tfloat ambient = 0.35;\n\tfloat diffuse = 0.5;\n\tfloat specular = 0.2;\n\tfloat shininess = 10.0;\n\tvec3 n = normalize(vN);\n\tvec3 lightPosition = vec3(0.0, 10.0, -5.0);\n\tvec3 l = normalize(lightPosition);\n\tfloat lightNormDot = dot(n, l);\n\tvec3 a = vClr.rgb * ambient;\n\tvec3 d = max(lightNormDot, 0.0) * vClr.rgb * diffuse;\n\tfloat s = specular * pow(max(dot(reflect(l, n), r), 0.0), shininess);\n\tcolor = vec4(a + d + s, opacity);\n}`\n\n// Matcap: modulate mesh color with spherical matcap image\nexport const fragMeshMatcapShader = `#version 300 es\nprecision highp int;\nprecision highp float;\nuniform float opacity;\nin vec4 vClr;\nin vec3 vN;\nuniform sampler2D matCap;\nout vec4 color;\nvoid main() {\n\tvec3 n = normalize(vN);\n\tvec2 uv = n.xy * 0.5 + 0.5;\n\tuv.y = 1.0 - uv.y;\n\tvec3 clr = texture(matCap,uv.xy).rgb * vClr.rgb;\n\tcolor = vec4(clr, opacity);\n}`\n\n// matte: same as phong without specular and a bit more diffuse\nexport const fragMeshMatteShader = `#version 300 es\nprecision highp int;\nprecision highp float;\nuniform float opacity;\nin vec4 vClr;\nin vec3 vN;\nout vec4 color;\nvoid main() {\n\tfloat ambient = 0.35;\n\tfloat diffuse = 0.6;\n\tvec3 n = normalize(vN);\n\tvec3 lightPosition = vec3(0.0, 10.0, -5.0);\n\tvec3 l = normalize(lightPosition);\n\tfloat lightNormDot = dot(n, l);\n\tvec3 a = vClr.rgb * ambient;\n\tvec3 d = max(lightNormDot, 0.0) * vClr.rgb * diffuse;\n\tcolor = vec4(a + d, opacity);\n}`\n\n// Hemispheric\nexport const fragMeshHemiShader = `#version 300 es\nprecision highp int;\nprecision highp float;\nuniform float opacity;\nin vec4 vClr;\nin vec3 vN;\nout vec4 color;\nvoid main() {\n\tvec3 r = vec3(0.0, 0.0, 1.0); //rayDir: for orthographic projections moving in Z direction (no need for normal matrix)\n\tfloat ambient = 0.35;\n\tfloat diffuse = 0.5;\n\tfloat specular = 0.2;\n\tfloat shininess = 10.0;\n\tvec3 n = normalize(vN);\n\tvec3 lightPosition = vec3(0.0, 10.0, -5.0);\n\tvec3 l = normalize(lightPosition);\n\tfloat lightNormDot = dot(n, l);\n\tvec3 up = vec3(0.0, 1.0, 0.0);\n\tfloat ax = dot(n, up) * 0.5 + 0.5;  //Shreiner et al. (2013) OpenGL Programming Guide, 8th Ed., p 388. ISBN-10: 0321773039\n\tvec3 upClr = vec3(1.0, 1.0, 0.95);\n\tvec3 downClr = vec3(0.4, 0.4, 0.6);\n\tvec3 a = vClr.rgb * ambient;\n\ta *= mix(downClr, upClr, ax);\n\tvec3 d = max(lightNormDot, 0.0) * vClr.rgb * diffuse;\n\tfloat s = specular * pow(max(dot(reflect(l, n), r), 0.0), shininess);\n\tcolor = vec4(a + d + s, opacity);\n}`\n\nexport const fragMeshShaderSHBlue = `#version 300 es\nprecision highp int;\nprecision highp float;\nuniform float opacity;\nin vec4 vClr;\nin vec3 vN;\nout vec4 color;\n//Spherical harmonics constants\nconst float C1 = 0.429043;\nconst float C2 = 0.511664;\nconst float C3 = 0.743125;\nconst float C4 = 0.886227;\nconst float C5 = 0.247708;\n//Spherical harmonics coefficients\n// Ramamoorthi, R., and P. Hanrahan. 2001b. \"An Efficient Representation for Irradiance Environment Maps.\" In Proceedings of SIGGRAPH 2001, pp. 497–500.\n// https://github.com/eskimoblood/processingSketches/blob/master/data/shader/shinyvert.glsl\n// https://github.com/eskimoblood/processingSketches/blob/master/data/shader/shinyvert.glsl\n// Constants for Eucalyptus Grove lighting\nconst vec3 L00  = vec3( 0.3783264,  0.4260425,  0.4504587);\nconst vec3 L1m1 = vec3( 0.2887813,  0.3586803,  0.4147053);\nconst vec3 L10  = vec3( 0.0379030,  0.0295216,  0.0098567);\nconst vec3 L11  = vec3(-0.1033028, -0.1031690, -0.0884924);\nconst vec3 L2m2 = vec3(-0.0621750, -0.0554432, -0.0396779);\nconst vec3 L2m1 = vec3( 0.0077820, -0.0148312, -0.0471301);\nconst vec3 L20  = vec3(-0.0935561, -0.1254260, -0.1525629);\nconst vec3 L21  = vec3(-0.0572703, -0.0502192, -0.0363410);\nconst vec3 L22  = vec3( 0.0203348, -0.0044201, -0.0452180);\nvec3 SH(vec3 vNormal) {\n\tvNormal = vec3(vNormal.x,vNormal.z,vNormal.y);\n\tvec3 diffuseColor = C1 * L22 * (vNormal.x * vNormal.x - vNormal.y * vNormal.y) +\n\tC3 * L20 * vNormal.z * vNormal.z +\n\tC4 * L00 -\n\tC5 * L20 +\n\t2.0 * C1 * L2m2 * vNormal.x * vNormal.y +\n\t2.0 * C1 * L21  * vNormal.x * vNormal.z +\n\t2.0 * C1 * L2m1 * vNormal.y * vNormal.z +\n\t2.0 * C2 * L11  * vNormal.x +\n\t2.0 * C2 * L1m1 * vNormal.y +\n\t2.0 * C2 * L10  * vNormal.z;\n\treturn diffuseColor;\n}\nvoid main() {\n\tvec3 r = vec3(0.0, 0.0, 1.0); //rayDir: for orthographic projections moving in Z direction (no need for normal matrix)\n\tfloat ambient = 0.3;\n\tfloat diffuse = 0.6;\n\tfloat specular = 0.1;\n\tfloat shininess = 10.0;\n\tvec3 n = normalize(vN);\n\tvec3 lightPosition = vec3(0.0, 10.0, -5.0);\n\tvec3 l = normalize(lightPosition);\n\tfloat s = specular * pow(max(dot(reflect(l, n), r), 0.0), shininess);\n\tvec3 a = vClr.rgb * ambient;\n\tvec3 d = vClr.rgb * diffuse * SH(-reflect(n, vec3(l.x, l.y, -l.z)) );\n\tcolor = vec4(a + d + s, opacity);\n}`\n\nexport const vertFlatMeshShader = `#version 300 es\nlayout(location=0) in vec3 pos;\nlayout(location=1) in vec4 norm;\nlayout(location=2) in vec4 clr;\nuniform mat4 mvpMtx;\n//uniform mat4 modelMtx;\nuniform mat4 normMtx;\nout vec4 vClr;\nflat out vec3 vN;\nvoid main(void) {\n\tgl_Position = mvpMtx * vec4(pos, 1.0);\n\tvN = normalize((normMtx * vec4(norm.xyz,1.0)).xyz);\n\t//vV = -vec3(modelMtx*vec4(pos,1.0));\n\tvClr = clr;\n}`\n\nexport const fragFlatMeshShader = `#version 300 es\nprecision highp int;\nprecision highp float;\nuniform float opacity;\nin vec4 vClr;\nflat in vec3 vN;\nout vec4 color;\nvoid main() {\n\tvec3 r = vec3(0.0, 0.0, 1.0); //rayDir: for orthographic projections moving in Z direction (no need for normal matrix)\n\tfloat ambient = 0.35;\n\tfloat diffuse = 0.5;\n\tfloat specular = 0.2;\n\tfloat shininess = 10.0;\n\tvec3 n = normalize(vN);\n\tvec3 lightPosition = vec3(0.0, 10.0, -5.0);\n\tvec3 l = normalize(lightPosition);\n\tfloat lightNormDot = dot(n, l);\n\tvec3 a = vClr.rgb * ambient;\n\tvec3 d = max(lightNormDot, 0.0) * vClr.rgb * diffuse;\n\tfloat s = specular * pow(max(dot(reflect(l, n), r), 0.0), shininess);\n\tcolor = vec4(a + d + s, opacity);\n}`\n\nexport const fragVolumePickingShader =\n  `#version 300 es\n#line 1260\n//precision highp int;\nprecision highp float;\nuniform vec3 rayDir;\nuniform vec3 volScale;\nuniform vec3 texVox;\nuniform vec4 clipPlane;\nuniform highp sampler3D volume, overlay;\nuniform float overlays;\nuniform float clipThick;\nuniform vec3 clipLo;\nuniform vec3 clipHi;\nuniform mat4 matRAS;\nuniform mat4 mvpMtx;\nuniform float drawOpacity, renderOverlayBlend;\nuniform highp sampler3D drawing;\nuniform highp sampler2D colormap;\nuniform int backgroundMasksOverlays;\nin vec3 vColor;\nout vec4 fColor;\n` +\n  kRenderFunc +\n  `\nvoid main() {\n\tint id = 254;\n\tvec3 start = vColor;\n\tgl_FragDepth = 0.0;\n\tfColor = vec4(0.0, 0.0, 0.0, 0.0); //assume no hit: ID = 0\n\tfloat fid = float(id & 255)/ 255.0;\n\tvec3 backPosition = GetBackPosition(start);\n\tvec3 dir = normalize(backPosition - start);\n\tclipVolumeStart(start, backPosition);\n\tfloat len = length(backPosition - start);\n\tfloat lenVox = length((texVox * start) - (texVox * backPosition));\n\tif ((lenVox < 0.5) || (len > 3.0)) return;//discard; //length limit for parallel rays\n\tfloat sliceSize = len / lenVox; //e.g. if ray length is 1.0 and traverses 50 voxels, each voxel is 0.02 in unit cube\n\tfloat stepSize = sliceSize; //quality: larger step is faster traversal, but fewer samples\n\tfloat opacityCorrection = stepSize/sliceSize;\n\tdir = normalize(dir);\n\tvec4 samplePos = vec4(start.xyz, 0.0); //ray position\n\tfloat lenNoClip = len;\n\tbool isClip = false;\n\tvec4 clipPos = applyClip(dir, samplePos, len, isClip);\n\tif (isClip) fColor = vec4(samplePos.xyz, 253.0 / 255.0); //assume no hit: ID = 0\n\t//start: OPTIONAL fast pass: rapid traversal until first hit\n\tfloat stepSizeFast = sliceSize * 1.9;\n\tvec4 deltaDirFast = vec4(dir.xyz * stepSizeFast, stepSizeFast);\n\twhile (samplePos.a <= len) {\n\t\tfloat val = texture(volume, samplePos.xyz).a;\n\t\tif (val > 0.01) {\n\t\t\tfColor = vec4(samplePos.rgb, fid);\n\t\t\tgl_FragDepth = frac2ndc(samplePos.xyz);\n\t\t\tbreak;\n\t\t}\n\t\tsamplePos += deltaDirFast; //advance ray position\n\t}\n\t//end: fast pass\n\tif ((overlays < 1.0) || (backgroundMasksOverlays > 0)) {\n\t\treturn; //background hit, no overlays\n\t}\n\t//overlay pass\n\tlen = min(lenNoClip, samplePos.a); //only find overlay closer than background\n\tsamplePos = vec4(start.xyz, 0.0); //ray position\n\twhile (samplePos.a <= len) {\n\t\tfloat val = texture(overlay, samplePos.xyz).a;\n\t\tif (val > 0.01) {\n\t\t\tfColor = vec4(samplePos.rgb, fid);\n\t\t\tgl_FragDepth = frac2ndc(samplePos.xyz);\n\t\t\treturn;\n\t\t}\n\t\tsamplePos += deltaDirFast; //advance ray position\n\t}\n\t//if (fColor.a == 0.0) discard; //no hit in either background or overlays\n\t//you only get here if there is a hit with the background that is closer than any overlay\n}`\n\nexport const vertOrientCubeShader = `#version 300 es\n// an attribute is an input (in) to a vertex shader.\n// It will receive data from a buffer\nlayout(location=0)  in vec3 a_position;\nlayout(location=1)  in vec3 a_color;\n// A matrix to transform the positions by\nuniform mat4 u_matrix;\nout vec3 vColor;\n// all shaders have a main function\nvoid main() {\n\t// Multiply the position by the matrix.\n\tvec4 pos = vec4(a_position, 1.0);\n\tgl_Position = u_matrix * vec4(pos);\n\tvColor = a_color;\n}\n`\n\nexport const fragOrientCubeShader = `#version 300 es\nprecision highp float;\nuniform vec4 u_color;\nin vec3 vColor;\nout vec4 outColor;\nvoid main() {\n\toutColor = vec4(vColor, 1.0);\n}`\n\nexport const vertPassThroughShader = `#version 300 es\n#line 1359\nprecision highp int;\nprecision highp float;\nin vec3 vPos;\nout vec2 TexCoord;\nvoid main() {\n\tTexCoord = vPos.xy;\n\tvec2 viewCoord = (vPos.xy - 0.5) * 2.0;\n\tgl_Position = vec4((vPos.xy - 0.5) * 2.0, 0.0, 1.0);\n}`\n\nexport const fragPassThroughShader = `#version 300 es\nprecision highp int;\nprecision highp float;\nin vec2 TexCoord;\nout vec4 FragColor;\nuniform float coordZ;\nuniform lowp sampler3D in3D;\nvoid main(void) {\n FragColor = texture(in3D, vec3(TexCoord.xy, coordZ));\n}`\n\nexport const blurVertShader = `#version 300 es\n#line 286\nprecision highp int;\nprecision highp float;\nin vec3 vPos;\nout vec2 TexCoord;\nvoid main() {\n    TexCoord = vPos.xy;\n    gl_Position = vec4( (vPos.xy-vec2(0.5,0.5))* 2.0, 0.0, 1.0);\n}`\n\nexport const blurFragShader = `#version 300 es\n#line 298\nprecision highp int;\nprecision highp float;\nin vec2 TexCoord;\nout vec4 FragColor;\nuniform float coordZ;\nuniform float dX;\nuniform float dY;\nuniform float dZ;\nuniform highp sampler3D intensityVol;\nvoid main(void) {\n vec3 vx = vec3(TexCoord.xy, coordZ);\n vec4 samp = texture(intensityVol,vx+vec3(+dX,+dY,+dZ));\n samp += texture(intensityVol,vx+vec3(+dX,+dY,-dZ));\n samp += texture(intensityVol,vx+vec3(+dX,-dY,+dZ));\n samp += texture(intensityVol,vx+vec3(+dX,-dY,-dZ));\n samp += texture(intensityVol,vx+vec3(-dX,+dY,+dZ));\n samp += texture(intensityVol,vx+vec3(-dX,+dY,-dZ));\n samp += texture(intensityVol,vx+vec3(-dX,-dY,+dZ));\n samp += texture(intensityVol,vx+vec3(-dX,-dY,-dZ));\n FragColor = samp*0.125;\n}`\n\nexport const sobelFragShader = `#version 300 es\n#line 323\nprecision highp int;\nprecision highp float;\nin vec2 TexCoord;\nout vec4 FragColor;\nuniform float coordZ;\nuniform float dX;\nuniform float dY;\nuniform float dZ;\nuniform highp sampler3D intensityVol;\nvoid main(void) {\n  vec3 vx = vec3(TexCoord.xy, coordZ);\n  //Neighboring voxels 'T'op/'B'ottom, 'A'nterior/'P'osterior, 'R'ight/'L'eft\n  float TAR = texture(intensityVol,vx+vec3(+dX,+dY,+dZ)).r;\n  float TAL = texture(intensityVol,vx+vec3(+dX,+dY,-dZ)).r;\n  float TPR = texture(intensityVol,vx+vec3(+dX,-dY,+dZ)).r;\n  float TPL = texture(intensityVol,vx+vec3(+dX,-dY,-dZ)).r;\n  float BAR = texture(intensityVol,vx+vec3(-dX,+dY,+dZ)).r;\n  float BAL = texture(intensityVol,vx+vec3(-dX,+dY,-dZ)).r;\n  float BPR = texture(intensityVol,vx+vec3(-dX,-dY,+dZ)).r;\n  float BPL = texture(intensityVol,vx+vec3(-dX,-dY,-dZ)).r;\n  vec4 gradientSample = vec4 (0.0, 0.0, 0.0, 0.0);\n  gradientSample.r =   BAR+BAL+BPR+BPL -TAR-TAL-TPR-TPL;\n  gradientSample.g =  TPR+TPL+BPR+BPL -TAR-TAL-BAR-BAL;\n  gradientSample.b =  TAL+TPL+BAL+BPL -TAR-TPR-BAR-BPR;\n  gradientSample.a = (abs(gradientSample.r)+abs(gradientSample.g)+abs(gradientSample.b))*0.29;\n  gradientSample.rgb = normalize(gradientSample.rgb);\n  gradientSample.rgb =  (gradientSample.rgb * 0.5)+0.5;\n  FragColor = gradientSample;\n}`\n","export const orientCube = new Float32Array([\n  -1, -1, -1, 0.28, 0.28, 0.28, -1, -1, -1, 0.28, 0.28, 0.28, -1, 1, -1, 0.28, 0.28, 0.28, 1, -1, -1, 0.28, 0.28, 0.28,\n  1, 1, -1, 0.28, 0.28, 0.28, 1, 1, -1, 0.28, 0.28, 0.28, -1, -1, 1, 0.8, 0.8, 0.8, -1, -1, 1, 0.8, 0.8, 0.8, 1, -1, 1,\n  0.8, 0.8, 0.8, -1, 1, 1, 0.8, 0.8, 0.8, 1, 1, 1, 0.8, 0.8, 0.8, 1, 1, 1, 0.8, 0.8, 0.8, -1, 1, -1, 0, 0, 0.74, -1, 1,\n  -1, 0, 0, 0.74, -1, 1, 1, 0, 0, 0.74, 1, 1, -1, 0, 0, 0.74, 1, 1, 1, 0, 0, 0.74, 1, 1, 1, 0, 0, 0.74, -1, -1, -1,\n  0.42, 0, 0.42, -1, -1, -1, 0.42, 0, 0.42, 1, -1, -1, 0.42, 0, 0.42, -1, -1, 1, 0.42, 0, 0.42, 1, -1, 1, 0.42, 0, 0.42,\n  1, -1, 1, 0.42, 0, 0.42, -1, -1, -1, 0.64, 0, 0, -1, -1, -1, 0.64, 0, 0, -1, -1, 1, 0.64, 0, 0, -1, 1, -1, 0.64, 0, 0,\n  -1, 1, 1, 0.64, 0, 0, -1, 1, 1, 0.64, 0, 0, 1, -1, -1, 0, 0.5, 0, 1, -1, -1, 0, 0.5, 0, 1, 1, -1, 0, 0.5, 0, 1, -1, 1,\n  0, 0.5, 0, 1, 1, 1, 0, 0.5, 0, 1, 1, 1, 0, 0.5, 0,\n  // P\n  -0.45, 1, -0.8, 0, 0, 0, -0.45, 1, -0.8, 0, 0, 0, -0.45, 1, 0.8, 0, 0, 0, -0.25, 1, -0.8, 0, 0, 0, -0.25, 1, 0.8, 0,\n  0, 0, -0.25, 1, 0.8, 0, 0, 0, -0.25, 1, 0.6, 0, 0, 0, -0.25, 1, 0.6, 0, 0, 0, -0.25, 1, 0.8, 0, 0, 0, 0.45, 1, 0.6, 0,\n  0, 0, 0.25, 1, 0.8, 0, 0, 0, 0.25, 1, 0.8, 0, 0, 0, 0.25, 1, 0.1, 0, 0, 0, 0.25, 1, 0.1, 0, 0, 0, 0.25, 1, 0.6, 0, 0,\n  0, 0.45, 1, 0.1, 0, 0, 0, 0.45, 1, 0.6, 0, 0, 0, 0.45, 1, 0.6, 0, 0, 0, -0.25, 1, -0.1, 0, 0, 0, -0.25, 1, -0.1, 0, 0,\n  0, -0.25, 1, 0.1, 0, 0, 0, 0.25, 1, -0.1, 0, 0, 0, 0.45, 1, 0.1, 0, 0, 0, 0.45, 1, 0.1, 0, 0, 0,\n  // A\n  0.45, -1, -0.8, 0, 0, 0, 0.45, -1, -0.8, 0, 0, 0, 0.05, -1, 0.8, 0, 0, 0, 0.25, -1, -0.8, 0, 0, 0, -0.15, -1, 0.8, 0,\n  0, 0, -0.15, -1, 0.8, 0, 0, 0, -0.25, -1, -0.8, 0, 0, 0, -0.25, -1, -0.8, 0, 0, 0, 0.05, -1, 0.8, 0, 0, 0, -0.45, -1,\n  -0.8, 0, 0, 0, -0.15, -1, 0.8, 0, 0, 0, -0.15, -1, 0.8, 0, 0, 0, 0.13, -1, -0.3, 0, 0, 0, 0.13, -1, -0.3, 0, 0, 0,\n  0.07, -1, -0.1, 0, 0, 0, -0.33, -1, -0.3, 0, 0, 0, -0.27, -1, -0.1, 0, 0, 0, -0.27, -1, -0.1, 0, 0, 0,\n  // S\n  -0.45, 0.6, 1, 0, 0, 0, -0.45, 0.6, 1, 0, 0, 0, -0.45, 0.4, 1, 0, 0, 0, -0.25, 0.8, 1, 0, 0, 0, -0.25, 0.4, 1, 0, 0,\n  0, -0.25, 0.4, 1, 0, 0, 0, -0.25, 0.8, 1, 0, 0, 0, -0.25, 0.8, 1, 0, 0, 0, -0.25, 0.6, 1, 0, 0, 0, 0.25, 0.8, 1, 0, 0,\n  0, 0.45, 0.6, 1, 0, 0, 0, 0.45, 0.6, 1, 0, 0, 0, 0.25, 0.8, 1, 0, 0, 0, 0.25, 0.8, 1, 0, 0, 0, 0.25, -0.1, 1, 0, 0, 0,\n  0.45, 0.6, 1, 0, 0, 0, 0.45, 0.1, 1, 0, 0, 0, 0.45, 0.1, 1, 0, 0, 0, -0.25, 0.1, 1, 0, 0, 0, -0.25, 0.1, 1, 0, 0, 0,\n  -0.45, -0.1, 1, 0, 0, 0, 0.25, 0.1, 1, 0, 0, 0, 0.25, -0.1, 1, 0, 0, 0, 0.25, -0.1, 1, 0, 0, 0, -0.45, -0.1, 1, 0, 0,\n  0, -0.45, -0.1, 1, 0, 0, 0, -0.45, -0.6, 1, 0, 0, 0, -0.25, -0.1, 1, 0, 0, 0, -0.25, -0.8, 1, 0, 0, 0, -0.25, -0.8, 1,\n  0, 0, 0, -0.25, -0.6, 1, 0, 0, 0, -0.25, -0.6, 1, 0, 0, 0, -0.25, -0.8, 1, 0, 0, 0, 0.45, -0.6, 1, 0, 0, 0, 0.25,\n  -0.8, 1, 0, 0, 0, 0.25, -0.8, 1, 0, 0, 0, 0.25, -0.4, 1, 0, 0, 0, 0.25, -0.4, 1, 0, 0, 0, 0.25, -0.6, 1, 0, 0, 0,\n  0.45, -0.4, 1, 0, 0, 0, 0.45, -0.6, 1, 0, 0, 0, 0.45, -0.6, 1, 0, 0, 0,\n  // I\n  -0.1, -0.8, -1, 0, 0, 0, -0.1, -0.8, -1, 0, 0, 0, -0.1, 0.8, -1, 0, 0, 0, 0.1, -0.8, -1, 0, 0, 0, 0.1, 0.8, -1, 0, 0,\n  0, 0.1, 0.8, -1, 0, 0, 0,\n  // L\n  -1, -0.45, -0.8, 0, 0, 0, -1, -0.45, -0.8, 0, 0, 0, -1, -0.45, 0.8, 0, 0, 0, -1, -0.25, -0.8, 0, 0, 0, -1, -0.25, 0.8,\n  0, 0, 0, -1, -0.25, 0.8, 0, 0, 0, -1, -0.25, -0.8, 0, 0, 0, -1, -0.25, -0.8, 0, 0, 0, -1, -0.25, -0.6, 0, 0, 0, -1,\n  0.45, -0.8, 0, 0, 0, -1, 0.45, -0.6, 0, 0, 0, -1, 0.45, -0.6, 0, 0, 0,\n  // R\n  1, 0.45, -0.8, 0, 0, 0, 1, 0.45, -0.8, 0, 0, 0, 1, 0.45, 0.8, 0, 0, 0, 1, 0.25, -0.8, 0, 0, 0, 1, 0.25, 0.8, 0, 0, 0,\n  1, 0.25, 0.8, 0, 0, 0, 1, 0.25, 0.6, 0, 0, 0, 1, 0.25, 0.6, 0, 0, 0, 1, 0.25, 0.8, 0, 0, 0, 1, -0.45, 0.6, 0, 0, 0, 1,\n  -0.25, 0.8, 0, 0, 0, 1, -0.25, 0.8, 0, 0, 0, 1, -0.25, 0.1, 0, 0, 0, 1, -0.25, 0.1, 0, 0, 0, 1, -0.25, 0.6, 0, 0, 0,\n  1, -0.45, 0.1, 0, 0, 0, 1, -0.45, 0.6, 0, 0, 0, 1, -0.45, 0.6, 0, 0, 0, 1, 0.25, -0.1, 0, 0, 0, 1, 0.25, -0.1, 0, 0,\n  0, 1, 0.25, 0.1, 0, 0, 0, 1, -0.25, -0.1, 0, 0, 0, 1, -0.45, 0.1, 0, 0, 0, 1, -0.45, 0.1, 0, 0, 0, 1, -0.25, -0.8, 0,\n  0, 0, 1, -0.25, -0.8, 0, 0, 0, 1, -0.05, -0.1, 0, 0, 0, 1, -0.45, -0.8, 0, 0, 0, 1, -0.25, -0.1, 0, 0, 0, 1, -0.25,\n  -0.1, 0, 0, 0\n])\n","import { mat4, vec3, vec4 } from 'gl-matrix'\n\ntype Geometry = {\n  vertexBuffer: WebGLBuffer\n  indexBuffer: WebGLBuffer\n  indexCount: number\n  vao: WebGLVertexArrayObject | null\n}\n\n/**\n * Object rendered with WebGL\n **/\nexport class NiivueObject3D {\n  static BLEND = 1\n  static CULL_FACE = 2\n  static CULL_FRONT = 4\n  static CULL_BACK = 8\n  static ENABLE_DEPTH_TEST = 16\n\n  sphereIdx: number[] = []\n  sphereVtx: number[] = []\n  renderShaders: number[] = []\n  isVisible = true\n  isPickable = true\n  vertexBuffer: WebGLVertexArrayObject\n  indexCount: number\n  indexBuffer: WebGLVertexArrayObject | null\n  vao: WebGLVertexArrayObject | null\n  mode: number\n  glFlags = 0\n  id: number\n  colorId: [number, number, number, number]\n\n  modelMatrix = mat4.create()\n  scale = [1, 1, 1]\n  position = [0, 0, 0]\n  rotation = [0, 0, 0]\n  rotationRadians = 0.0\n\n  extentsMin: number[] = []\n  extentsMax: number[] = []\n\n  // TODO needed through NVImage\n  furthestVertexFromOrigin?: number\n  originNegate?: vec3\n  fieldOfViewDeObliqueMM?: vec3\n\n  // TODO needed through crosshairs in NiiVue\n  mm?: vec4\n\n  constructor(\n    id: number,\n    vertexBuffer: WebGLBuffer,\n    mode: number,\n    indexCount: number,\n    indexBuffer: WebGLVertexArrayObject | null = null,\n    vao: WebGLVertexArrayObject | null = null\n  ) {\n    this.vertexBuffer = vertexBuffer\n    this.indexCount = indexCount\n    this.indexBuffer = indexBuffer\n    this.vao = vao\n    this.mode = mode\n\n    this.id = id\n    this.colorId = [\n      ((id >> 0) & 0xff) / 255.0,\n      ((id >> 8) & 0xff) / 255.0,\n      ((id >> 16) & 0xff) / 255.0,\n      ((id >> 24) & 0xff) / 255.0\n    ]\n  }\n\n  static generateCrosshairs = function (\n    gl: WebGL2RenderingContext,\n    id: number,\n    xyzMM: vec4,\n    xyzMin: vec3,\n    xyzMax: vec3,\n    radius: number,\n    sides = 20,\n    gap = 0\n  ): NiivueObject3D {\n    const geometry = NiivueObject3D.generateCrosshairsGeometry(gl, xyzMM, xyzMin, xyzMax, radius, sides, gap)\n    return new NiivueObject3D(\n      id,\n      geometry.vertexBuffer,\n      gl.TRIANGLES,\n      geometry.indexCount,\n      geometry.indexBuffer,\n      geometry.vao\n    )\n  }\n\n  // not included in public docs\n  static generateCrosshairsGeometry = function (\n    gl: WebGL2RenderingContext,\n    xyzMM: vec4,\n    xyzMin: vec3,\n    xyzMax: vec3,\n    radius: number,\n    sides = 20,\n    gap = 0\n  ): Geometry {\n    const vertices: number[] = []\n    const indices: number[] = []\n    const gapX = radius * gap\n    if (gapX <= 0) {\n      // left-right\n      let start = vec3.fromValues(xyzMin[0], xyzMM[1], xyzMM[2])\n      let dest = vec3.fromValues(xyzMax[0], xyzMM[1], xyzMM[2])\n      NiivueObject3D.makeCylinder(vertices, indices, start, dest, radius, sides)\n      // anterior-posterior\n      start = vec3.fromValues(xyzMM[0], xyzMin[1], xyzMM[2])\n      dest = vec3.fromValues(xyzMM[0], xyzMax[1], xyzMM[2])\n      NiivueObject3D.makeCylinder(vertices, indices, start, dest, radius, sides)\n      // superior-inferior\n      start = vec3.fromValues(xyzMM[0], xyzMM[1], xyzMin[2])\n      dest = vec3.fromValues(xyzMM[0], xyzMM[1], xyzMax[2])\n      NiivueObject3D.makeCylinder(vertices, indices, start, dest, radius, sides)\n    } else {\n      // left-right\n      let start = vec3.fromValues(xyzMin[0], xyzMM[1], xyzMM[2])\n      let dest = vec3.fromValues(xyzMM[0] - gapX, xyzMM[1], xyzMM[2])\n      NiivueObject3D.makeCylinder(vertices, indices, start, dest, radius, sides, false)\n      start = vec3.fromValues(xyzMM[0] + gapX, xyzMM[1], xyzMM[2])\n      dest = vec3.fromValues(xyzMax[0], xyzMM[1], xyzMM[2])\n      NiivueObject3D.makeCylinder(vertices, indices, start, dest, radius, sides, false)\n      // anterior-posterior\n      start = vec3.fromValues(xyzMM[0], xyzMin[1], xyzMM[2])\n      dest = vec3.fromValues(xyzMM[0], xyzMM[1] - gapX, xyzMM[2])\n      NiivueObject3D.makeCylinder(vertices, indices, start, dest, radius, sides, false)\n      start = vec3.fromValues(xyzMM[0], xyzMM[1] + gapX, xyzMM[2])\n      dest = vec3.fromValues(xyzMM[0], xyzMax[1], xyzMM[2])\n      NiivueObject3D.makeCylinder(vertices, indices, start, dest, radius, sides, false)\n      // superior-inferior\n      start = vec3.fromValues(xyzMM[0], xyzMM[1], xyzMin[2])\n      dest = vec3.fromValues(xyzMM[0], xyzMM[1], xyzMM[2] - gapX)\n      NiivueObject3D.makeCylinder(vertices, indices, start, dest, radius, sides, false)\n      start = vec3.fromValues(xyzMM[0], xyzMM[1], xyzMM[2] + gapX)\n      dest = vec3.fromValues(xyzMM[0], xyzMM[1], xyzMax[2])\n      NiivueObject3D.makeCylinder(vertices, indices, start, dest, radius, sides, false)\n    }\n    // console.log('i:',indices.length / 3, 'v:',vertices.length / 3);\n    const vertexBuffer = gl.createBuffer()\n    if (vertexBuffer === null) {\n      throw new Error('could not instantiate vertex buffer')\n    }\n\n    gl.bindBuffer(gl.ARRAY_BUFFER, vertexBuffer)\n    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertices), gl.STATIC_DRAW)\n\n    // index buffer allocated in parent class\n    const indexBuffer = gl.createBuffer()\n    if (indexBuffer === null) {\n      throw new Error('could not instantiate index buffer')\n    }\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, indexBuffer)\n    gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint32Array(indices), gl.STATIC_DRAW)\n\n    const vao = gl.createVertexArray()\n    gl.bindVertexArray(vao)\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, indexBuffer)\n    gl.bindBuffer(gl.ARRAY_BUFFER, vertexBuffer)\n    // vertex position: 3 floats X,Y,Z\n    gl.enableVertexAttribArray(0)\n    gl.vertexAttribPointer(0, 3, gl.FLOAT, false, 0, 0)\n    gl.bindVertexArray(null) // https://stackoverflow.com/questions/43904396/are-we-not-allowed-to-bind-gl-array-buffer-and-vertex-attrib-array-to-0-in-webgl\n\n    return {\n      vertexBuffer,\n      indexBuffer,\n      indexCount: indices.length,\n      vao\n    }\n  }\n\n  static getFirstPerpVector = function (v1: vec3): vec3 {\n    const v2 = vec3.fromValues(0.0, 0.0, 0.0)\n    if (v1[0] === 0.0) {\n      v2[0] = 1.0\n    } else if (v1[1] === 0.0) {\n      v2[1] = 1.0\n    } else if (v1[2] === 0.0) {\n      v2[2] = 1.0\n    } else {\n      // If xyz is all set, we set the z coordinate as first and second argument .\n      // As the scalar product must be zero, we add the negated sum of x and y as third argument\n      v2[0] = v1[2] // scalp = z*x\n      v2[1] = v1[2] // scalp = z*(x+y)\n      v2[2] = -(v1[0] + v1[1]) // scalp = z*(x+y)-z*(x+y) = 0\n      vec3.normalize(v2, v2)\n    }\n    return v2\n  }\n\n  static subdivide = function (verts: number[], faces: number[]): void {\n    // Subdivide each triangle into four triangles, pushing verts to the unit sphere\"\"\"\n    let nv = verts.length / 3\n    let nf = faces.length / 3\n    const n = nf\n    const vNew = vec3.create()\n    const nNew = vec3.create()\n    for (let faceIndex = 0; faceIndex < n; faceIndex++) {\n      // setlength(verts, nv + 3);\n      const fx = faces[faceIndex * 3 + 0]\n      const fy = faces[faceIndex * 3 + 1]\n      const fz = faces[faceIndex * 3 + 2]\n      const vx = vec3.fromValues(verts[fx * 3 + 0], verts[fx * 3 + 1], verts[fx * 3 + 2])\n      const vy = vec3.fromValues(verts[fy * 3 + 0], verts[fy * 3 + 1], verts[fy * 3 + 2])\n      const vz = vec3.fromValues(verts[fz * 3 + 0], verts[fz * 3 + 1], verts[fz * 3 + 2])\n      vec3.add(vNew, vx, vy)\n      vec3.normalize(nNew, vNew)\n      verts.push(...nNew)\n\n      vec3.add(vNew, vy, vz)\n      vec3.normalize(nNew, vNew)\n      verts.push(...nNew)\n\n      vec3.add(vNew, vx, vz)\n      vec3.normalize(nNew, vNew)\n      verts.push(...nNew)\n      // Split the current triangle into four smaller triangles:\n      let face = [nv, nv + 1, nv + 2]\n      faces.push(...face)\n      face = [fx, nv, nv + 2]\n      faces.push(...face)\n      face = [nv, fy, nv + 1]\n      faces.push(...face)\n      faces[faceIndex * 3 + 0] = nv + 2\n      faces[faceIndex * 3 + 1] = nv + 1\n      faces[faceIndex * 3 + 2] = fz\n      nf = nf + 3\n      nv = nv + 3\n    }\n  }\n\n  static weldVertices = function (verts: number[], faces: number[]): number[] {\n    // unify identical vertices\n    const nv = verts.length / 3\n    // yikes: bubble sort! TO DO: see Surfice for more efficient solution\n    let nUnique = 0 // first vertex is unique\n    // var remap = new Array();\n    const remap = new Int32Array(nv)\n    for (let i = 0; i < nv - 1; i++) {\n      if (remap[i] !== 0) {\n        continue\n      } // previously tested\n      remap[i] = nUnique\n      let v = i * 3\n      const x = verts[v]\n      const y = verts[v + 1]\n      const z = verts[v + 2]\n      for (let j = i + 1; j < nv; j++) {\n        v += 3\n        if (x === verts[v] && y === verts[v + 1] && z === verts[v + 2]) {\n          remap[j] = nUnique\n        }\n      }\n      nUnique++ // another new vertex\n    } // for i\n    if (nUnique === nv) {\n      return verts\n    }\n    // console.log('welding vertices removed redundant positions ', nv, '->', nUnique);\n    const nf = faces.length\n    for (let f = 0; f < nf; f++) {\n      faces[f] = remap[faces[f]]\n    }\n    const vtx = verts.slice(0, nUnique * 3 - 1)\n    for (let i = 0; i < nv - 1; i++) {\n      const v = i * 3\n      const r = remap[i] * 3\n      vtx[r] = verts[v]\n      vtx[r + 1] = verts[v + 1]\n      vtx[r + 2] = verts[v + 2]\n    }\n    return vtx\n  }\n\n  static makeSphere = function (\n    vertices: number[],\n    indices: number[],\n    radius: number,\n    origin: vec3 | vec4 = [0, 0, 0]\n  ): void {\n    let vtx = [\n      0.0, 0.0, 1.0, 0.894, 0.0, 0.447, 0.276, 0.851, 0.447, -0.724, 0.526, 0.447, -0.724, -0.526, 0.447, 0.276, -0.851,\n      0.447, 0.724, 0.526, -0.447, -0.276, 0.851, -0.447, -0.894, 0.0, -0.447, -0.276, -0.851, -0.447, 0.724, -0.526,\n      -0.447, 0.0, 0.0, -1.0\n    ]\n    // let idx = new Uint16Array([\n    const idx = [\n      0, 1, 2, 0, 2, 3, 0, 3, 4, 0, 4, 5, 0, 5, 1, 7, 6, 11, 8, 7, 11, 9, 8, 11, 10, 9, 11, 6, 10, 11, 6, 2, 1, 7, 3, 2,\n      8, 4, 3, 9, 5, 4, 10, 1, 5, 6, 7, 2, 7, 8, 3, 8, 9, 4, 9, 10, 5, 10, 6, 1\n    ]\n    NiivueObject3D.subdivide(vtx, idx)\n    NiivueObject3D.subdivide(vtx, idx)\n    vtx = NiivueObject3D.weldVertices(vtx, idx)\n\n    for (let i = 0; i < vtx.length; i++) {\n      vtx[i] = vtx[i] * radius\n    }\n    const nvtx = vtx.length / 3\n    let j = 0\n    for (let i = 0; i < nvtx; i++) {\n      vtx[j] = vtx[j] + origin[0]\n      j++\n      vtx[j] = vtx[j] + origin[1]\n      j++\n      vtx[j] = vtx[j] + origin[2]\n      j++\n    }\n    const idx0 = Math.floor(vertices.length / 3) // first new vertex will be AFTER previous vertices\n    for (let i = 0; i < idx.length; i++) {\n      idx[i] = idx[i] + idx0\n    }\n\n    indices.push(...idx)\n    vertices.push(...vtx)\n  }\n\n  static makeCylinder = function (\n    vertices: number[],\n    indices: number[],\n    start: vec3,\n    dest: vec3,\n    radius: number,\n    sides = 20,\n    endcaps = true\n  ): void {\n    if (sides < 3) {\n      sides = 3\n    } // prism is minimal 3D cylinder\n    const v1 = vec3.create()\n    vec3.subtract(v1, dest, start)\n    vec3.normalize(v1, v1) // principle axis of cylinder\n    const v2 = NiivueObject3D.getFirstPerpVector(v1) // a unit length vector orthogonal to v1\n    // Get the second perp vector by cross product\n    const v3 = vec3.create()\n    vec3.cross(v3, v1, v2) // a unit length vector orthogonal to v1 and v2\n    vec3.normalize(v3, v3)\n    let num_v = 2 * sides\n    let num_f = 2 * sides\n    if (endcaps) {\n      num_f += 2 * sides\n      num_v += 2\n    }\n    const idx0 = Math.floor(vertices.length / 3) // first new vertex will be AFTER previous vertices\n    const idx = new Uint32Array(num_f * 3)\n    const vtx = new Float32Array(num_v * 3)\n    function setV(i: number, vec3: vec3): void {\n      vtx[i * 3 + 0] = vec3[0]\n      vtx[i * 3 + 1] = vec3[1]\n      vtx[i * 3 + 2] = vec3[2]\n    }\n    function setI(i: number, a: number, b: number, c: number): void {\n      idx[i * 3 + 0] = a + idx0\n      idx[i * 3 + 1] = b + idx0\n      idx[i * 3 + 2] = c + idx0\n    }\n    const startPole = 2 * sides\n    const destPole = startPole + 1\n    if (endcaps) {\n      setV(startPole, start)\n      setV(destPole, dest)\n    }\n    const pt1 = vec3.create()\n    const pt2 = vec3.create()\n    for (let i = 0; i < sides; i++) {\n      const c = Math.cos((i / sides) * 2 * Math.PI)\n      const s = Math.sin((i / sides) * 2 * Math.PI)\n      pt1[0] = radius * (c * v2[0] + s * v3[0])\n      pt1[1] = radius * (c * v2[1] + s * v3[1])\n      pt1[2] = radius * (c * v2[2] + s * v3[2])\n      vec3.add(pt2, start, pt1)\n      setV(i, pt2)\n      vec3.add(pt2, dest, pt1)\n      setV(i + sides, pt2)\n      let nxt = 0\n      if (i < sides - 1) {\n        nxt = i + 1\n      }\n      setI(i * 2, i, nxt, i + sides)\n      setI(i * 2 + 1, nxt, nxt + sides, i + sides)\n      if (endcaps) {\n        setI(sides * 2 + i, i, startPole, nxt)\n        setI(sides * 2 + i + sides, destPole, i + sides, nxt + sides)\n      }\n    }\n    indices.push(...idx)\n    vertices.push(...vtx)\n  }\n\n  static makeColoredCylinder = function (\n    vertices: number[],\n    indices: number[],\n    colors: number[],\n    start: vec3,\n    dest: vec3,\n    radius: number,\n    rgba255 = [192, 0, 0, 255],\n    sides = 20,\n    endcaps = false\n  ): void {\n    let nv = vertices.length / 3\n    NiivueObject3D.makeCylinder(vertices, indices, start, dest, radius, sides, endcaps)\n    nv = vertices.length / 3 - nv\n    const clrs = []\n    for (let i = 0; i < nv * 4 - 1; i += 4) {\n      clrs[i] = rgba255[0]\n      clrs[i + 1] = rgba255[1]\n      clrs[i + 2] = rgba255[2]\n      clrs[i + 3] = rgba255[3]\n    }\n    colors.push(...clrs)\n  }\n\n  static makeColoredSphere = function (\n    vertices: number[],\n    indices: number[],\n    colors: number[],\n    radius: number,\n    origin: vec3 | vec4 = [0, 0, 0],\n    rgba255 = [0, 0, 192, 255]\n  ): void {\n    let nv = vertices.length / 3\n    NiivueObject3D.makeSphere(vertices, indices, radius, origin)\n    nv = vertices.length / 3 - nv\n    const clrs = []\n    for (let i = 0; i < nv * 4 - 1; i += 4) {\n      clrs[i] = rgba255[0]\n      clrs[i + 1] = rgba255[1]\n      clrs[i + 2] = rgba255[2]\n      clrs[i + 3] = rgba255[3]\n    }\n    colors.push(...clrs)\n  }\n}\n","import { vec3, vec4 } from 'gl-matrix'\nimport { v4 as uuidv4 } from '@lukeed/uuid'\nimport { log } from './logger.js'\nimport { NiivueObject3D } from './niivue-object3D.js' // n.b. used by connectome\nimport { ColorMap, LUT, cmapper } from './colortables.js'\nimport { NVMeshUtilities } from './nvmesh-utilities.js'\nimport { NVMeshLoaders } from './nvmesh-loaders.js'\nimport { LegacyConnectome, LegacyNodes, NVConnectomeEdge, NVConnectomeNode, Point } from './types.js'\nimport {\n  ANNOT,\n  DefaultMeshType,\n  GII,\n  MGH,\n  MZ3,\n  TCK,\n  TRACT,\n  TRK,\n  TT,\n  TRX,\n  VTK,\n  ValuesArray,\n  X3D,\n  AnyNumberArray\n} from './nvmesh-types.js'\n\n/** Enum for text alignment\n */\nexport enum MeshType {\n  MESH = 'mesh',\n  CONNECTOME = 'connectome',\n  FIBER = 'fiber'\n}\n\nexport type NVMeshLayer = {\n  name?: string\n  key?: string\n  url?: string\n  headers?: Record<string, string>\n  opacity: number\n  colormap: string\n  colormapNegative?: string\n  colormapInvert?: boolean\n  colormapLabel?: ColorMap | LUT\n  useNegativeCmap?: boolean\n  global_min?: number\n  global_max?: number\n  cal_min: number\n  cal_max: number\n  cal_minNeg: number\n  cal_maxNeg: number\n  isAdditiveBlend?: boolean\n  frame4D: number\n  nFrame4D: number\n  values: AnyNumberArray // number[] | Float32Array | Uint32Array\n  outlineBorder?: number\n  isTransparentBelowCalMin?: boolean\n  alphaThreshold?: boolean\n  base64?: string\n  // TODO referenced in niivue/refreshColormaps\n  colorbarVisible?: boolean\n}\n\nexport const NVMeshLayerDefaults = {\n  colormap: 'gray',\n  opacity: 0.0,\n  nFrame4D: 0,\n  frame4D: 0,\n  outlineBorder: 0,\n  cal_min: 0,\n  cal_max: 0,\n  cal_minNeg: 0,\n  cal_maxNeg: 0,\n  values: new Array<number>()\n}\n\nexport class NVMeshFromUrlOptions {\n  url: string\n  gl: WebGL2RenderingContext | null\n  name: string\n  opacity: number\n  rgba255: Uint8Array\n  visible: boolean\n  layers: NVMeshLayer[]\n  colorbarVisible: boolean\n\n  constructor(\n    url = '',\n    gl = null,\n    name = '',\n    opacity = 1.0,\n    rgba255 = new Uint8Array([255, 255, 255, 255]),\n    visible = true,\n    layers = [],\n    colorbarVisible = true\n  ) {\n    this.url = url\n    this.gl = gl\n    this.name = name\n    this.opacity = opacity\n    this.rgba255 = rgba255\n    this.visible = visible\n    this.layers = layers\n    this.colorbarVisible = colorbarVisible\n  }\n}\n\ntype BaseLoadParams = {\n  // WebGL rendering context\n  gl: WebGL2RenderingContext\n  // a name for this image. Default is an empty string\n  name: string\n  // the opacity for this image. default is 1\n  opacity: number\n  // the base color of the mesh. RGBA values from 0 to 255. Default is white\n  rgba255: number[] | Uint8Array\n  // whether or not this image is to be visible\n  visible: boolean\n  // layers of the mesh to load\n  layers: NVMeshLayer[]\n}\n\nexport type LoadFromUrlParams = Partial<BaseLoadParams> & {\n  // the resolvable URL pointing to a mesh to load\n  url: string\n  headers?: Record<string, string>\n  buffer?: ArrayBuffer\n}\n\ntype LoadFromFileParams = BaseLoadParams & {\n  // the file object\n  file: Blob\n}\n\ntype LoadFromBase64Params = BaseLoadParams & {\n  // the base64 encoded string\n  base64: string\n}\n\n/**\n * a NVMesh encapsulates some mesh data and provides methods to query and operate on meshes\n */\nexport class NVMesh {\n  id: string\n  name: string\n  anatomicalStructurePrimary: string\n  colorbarVisible: boolean\n  furthestVertexFromOrigin: number\n  extentsMin: number | number[]\n  extentsMax: number | number[]\n  opacity: number\n  visible: boolean\n  meshShaderIndex = 0\n  offsetPt0: Uint32Array | null = null\n\n  colormapInvert = false\n  fiberGroupColormap: ColorMap | null = null\n\n  indexBuffer: WebGLBuffer\n  vertexBuffer: WebGLBuffer\n  vao: WebGLVertexArrayObject\n  vaoFiber: WebGLVertexArrayObject\n\n  pts: Float32Array\n  tris?: Uint32Array\n  layers: NVMeshLayer[]\n  type = MeshType.MESH\n\n  data_type?: string\n  rgba255: Uint8Array\n  fiberLength?: number\n  fiberLengths?: Uint32Array\n  fiberDensity?: Float32Array\n  fiberDither = 0.1\n  fiberColor = 'Global'\n  fiberDecimationStride = 1 // e.g. if 2 the 50% of streamlines visible, if 3 then 1/3rd\n  fiberSides = 5 // 1=streamline, 2=imposter, >2=mesh(cylinder with fiberSides sides)\n  fiberRadius = 0 // in mm, e.g. 3 means 6mm diameter fibers, ignored if fiberSides < 3\n  fiberOcclusion = 0 // value 0..1 to simulate ambient occlusion\n  f32PerVertex = 5 // MUST be 5 or 7: number of float32s per vertex DEPRECATED, future releases will ALWAYS be 5\n  fiberMask?: unknown[]\n  colormap?: ColorMap | LegacyConnectome | string | null\n  dpg?: ValuesArray | null\n  dps?: ValuesArray | null\n  dpv?: ValuesArray | null\n\n  hasConnectome = false\n  connectome?: LegacyConnectome | string\n\n  // TODO this should somehow get aligned with connectome\n  indexCount?: number\n  vertexCount = 1\n  nodeScale = 4\n  edgeScale = 1\n  legendLineThickness = 0\n  nodeColormap = 'warm'\n  edgeColormap = 'warm'\n  nodeColormapNegative?: string\n  edgeColormapNegative?: string\n  nodeMinColor?: number\n  nodeMaxColor?: number\n  edgeMin?: number\n  edgeMax?: number\n\n  nodes?: LegacyNodes | NVConnectomeNode[]\n\n  edges?: number[] | NVConnectomeEdge[]\n\n  points?: Point[]\n\n  /**\n   * @param pts - a 3xN array of vertex positions (X,Y,Z coordinates).\n   * @param tris - a 3xN array of triangle indices (I,J,K; indexed from zero). Each triangle generated from three vertices.\n   * @param name - a name for this image. Default is an empty string\n   * @param rgba255 - the base color of the mesh. RGBA values from 0 to 255. Default is white\n   * @param opacity - the opacity for this mesh. default is 1\n   * @param visible - whether or not this image is to be visible\n   * @param gl - WebGL rendering context\n   * @param connectome - specify connectome edges and nodes. Default is null (not a connectome).\n   * @param dpg - Data per group for tractography, see TRK format. Default is null (not tractograpgy)\n   * @param dps - Data per streamline for tractography, see TRK format.  Default is null (not tractograpgy)\n   * @param dpv - Data per vertex for tractography, see TRK format.  Default is null (not tractograpgy)\n   * @param colorbarVisible - does this mesh display a colorbar\n   * @param anatomicalStructurePrimary - region for mesh. Default is an empty string\n   */\n  constructor(\n    pts: Float32Array,\n    tris: Uint32Array,\n    name = '',\n    rgba255 = new Uint8Array([255, 255, 255, 255]),\n    opacity = 1.0,\n    visible = true,\n    gl: WebGL2RenderingContext,\n    connectome: LegacyConnectome | string | null = null,\n    dpg: ValuesArray | null = null,\n    dps: ValuesArray | null = null,\n    dpv: ValuesArray | null = null,\n    colorbarVisible = true,\n    anatomicalStructurePrimary = ''\n  ) {\n    this.anatomicalStructurePrimary = anatomicalStructurePrimary\n    this.name = name\n    this.colorbarVisible = colorbarVisible\n    this.id = uuidv4()\n    const obj = NVMeshUtilities.getExtents(pts)\n    this.furthestVertexFromOrigin = obj.mxDx\n    this.extentsMin = obj.extentsMin\n    this.extentsMax = obj.extentsMax\n    this.opacity = opacity > 1.0 ? 1.0 : opacity // make sure opacity can't be initialized greater than 1 see: #107 and #117 on github\n    this.visible = visible\n    this.meshShaderIndex = 0\n    this.indexBuffer = gl.createBuffer()!\n    this.vertexBuffer = gl.createBuffer()!\n    this.vao = gl.createVertexArray()!\n    // the VAO binds the vertices and indices as well as describing the vertex layout\n    gl.bindVertexArray(this.vao)\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.indexBuffer)\n    gl.bindBuffer(gl.ARRAY_BUFFER, this.vertexBuffer)\n    // vertex position: 3 floats X,Y,Z\n    gl.enableVertexAttribArray(0)\n\n    gl.enableVertexAttribArray(1)\n    const f32PerVertex = this.f32PerVertex\n    if (f32PerVertex !== 7) {\n      // n32\n      gl.vertexAttribPointer(0, 3, gl.FLOAT, false, 20, 0)\n      // vertex surface normal vector: (also three floats)\n      gl.vertexAttribPointer(1, 4, gl.BYTE, true, 20, 12)\n      // vertex color\n      gl.enableVertexAttribArray(2)\n      gl.vertexAttribPointer(2, 4, gl.UNSIGNED_BYTE, true, 20, 16)\n    } else {\n      gl.vertexAttribPointer(0, 3, gl.FLOAT, false, 28, 0)\n      // vertex surface normal vector: (also three floats)\n      gl.vertexAttribPointer(1, 3, gl.FLOAT, false, 28, 12)\n      // vertex color\n      gl.enableVertexAttribArray(2)\n      gl.vertexAttribPointer(2, 4, gl.UNSIGNED_BYTE, true, 28, 24)\n    }\n    gl.bindVertexArray(null) // https://stackoverflow.com/questions/43904396/are-we-not-allowed-to-bind-gl-array-buffer-and-vertex-attrib-array-to-0-in-webgl\n\n    this.vaoFiber = gl.createVertexArray()!\n    this.offsetPt0 = null\n    this.hasConnectome = false\n    this.colormapInvert = false\n    this.fiberGroupColormap = null\n    this.pts = pts\n    this.layers = []\n    this.type = MeshType.MESH\n    this.tris = tris\n    if (rgba255[3] < 1) {\n      this.rgba255 = rgba255\n      this.fiberLength = 2\n      this.fiberDither = 0.1\n      this.fiberColor = 'Global'\n      this.fiberDecimationStride = 1 // e.g. if 2 the 50% of streamlines visible, if 3 then 1/3rd\n      this.fiberMask = [] // provide method to show/hide specific fibers\n      this.colormap = connectome\n      this.dpg = dpg\n      this.dps = dps\n      this.dpv = dpv\n      if (dpg) {\n        this.initValuesArray(dpg)\n      }\n      if (dps) {\n        this.initValuesArray(dps)\n      }\n      if (dpv) {\n        this.initValuesArray(dpv)\n      }\n      this.offsetPt0 = new Uint32Array(tris)\n      this.tris = new Uint32Array(0)\n      this.updateFibers(gl)\n      // define VAO\n      gl.bindVertexArray(this.vaoFiber)\n      gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.indexBuffer)\n      gl.bindBuffer(gl.ARRAY_BUFFER, this.vertexBuffer)\n      // vertex position: 3 floats X,Y,Z\n      gl.enableVertexAttribArray(0)\n      gl.vertexAttribPointer(0, 3, gl.FLOAT, false, 16, 0)\n      // vertex color\n      gl.enableVertexAttribArray(1)\n      gl.vertexAttribPointer(1, 4, gl.UNSIGNED_BYTE, true, 16, 12)\n      gl.bindVertexArray(null) // https://stackoverflow.com/questions/43904396/are-we-not-allowed-to-bind-gl-array-buffer-and-vertex-attrib-array-to-0-in-webgl\n      return\n    } // if fiber not mesh\n    if (connectome) {\n      this.connectome = connectome\n      this.hasConnectome = true\n      const keysArray = Object.keys(connectome)\n      for (let i = 0, len = keysArray.length; i < len; i++) {\n        this[keysArray[i]] = connectome[keysArray[i]]\n      }\n    }\n    this.rgba255 = rgba255\n\n    this.updateMesh(gl)\n  }\n\n  initValuesArray(va: ValuesArray): ValuesArray {\n    for (let i = 0; i < va.length; i++) {\n      const mn = va[i].vals.reduce((acc, current) => Math.min(acc, current))\n      const mx = va[i].vals.reduce((acc, current) => Math.max(acc, current))\n      va[i].global_min = mn\n      va[i].global_max = mx\n      va[i].cal_min = mn\n      va[i].cal_max = mx\n    }\n    return va\n  }\n\n  // given streamlines (which webGL renders as a single pixel), extrude to cylinders\n  linesToCylinders(gl: WebGL2RenderingContext, posClrF32: Float32Array, indices: number[]): void {\n    // return Float32Array\n    // const posClrF32 four 32-bit components X,Y,Z,C where C is Uint32 with RGBA\n    function v4ToV3(v4: vec4): vec3 {\n      return vec3.fromValues(v4[0], v4[1], v4[2])\n    }\n    const primitiveRestart = Math.pow(2, 32) - 1 // for gl.UNSIGNED_INT\n    const n_count = indices.length\n    let n_line_vtx = 0\n    let n_streamlines = 0\n    // n.b. each streamline terminates with a `primitiveRestart`, even the final one\n    for (let i = 0; i < n_count; i++) {\n      if (indices[i] === primitiveRestart) {\n        n_streamlines++\n        continue\n      }\n      n_line_vtx++\n    }\n    const cyl_sides = this.fiberSides\n    // next: generate extruded cylinders\n    // npt is number of points (vertices) for cylinders\n    const npt = cyl_sides * n_line_vtx\n    const f32PerVertex = this.f32PerVertex // 7 if NormalXYZ is 3 floats, 5 if normalXYZ is packed into rgb32\n    if (f32PerVertex !== 5) {\n      throw Error('fiberSides > 1 requires f32PerVertex == 5')\n    }\n    const f32 = new Float32Array(npt * f32PerVertex) // Each vertex has 5 components: PosX, PosY, PosZ, NormalXYZ, RGBA32\n    const u8 = new Uint8Array(f32.buffer) // Each vertex has 7 components: PositionXYZ, NormalXYZ, RGBA32\n    let vtx = 0\n    //\n    // previous vector location\n    let prevV4 = vec4.create()\n    let currV4 = vec4.create()\n    let nextV4 = vec4.create()\n    const v1 = vec3.create()\n    let prevV2 = vec3.create()\n    let node = 0\n    const radius = this.fiberRadius\n    for (let i = 0; i < n_count; i++) {\n      const isLineEnd = indices[i] === primitiveRestart\n      if (isLineEnd && node < 1) {\n        continue\n      } // two restarts in a row!\n      let idx = indices[i] * 4 // each posClrF32 has 4 elements X,Y,Z,C\n      node++\n      if (node <= 1) {\n        // first vertex in a streamline, no previous vertex\n        prevV4 = vec4.fromValues(posClrF32[idx + 0], posClrF32[idx + 1], posClrF32[idx + 2], posClrF32[idx + 3])\n        currV4 = vec4.clone(prevV4)\n        if (i + 1 < n_count && indices[i + 1] !== primitiveRestart) {\n          idx = indices[i + 1] * 4\n          nextV4 = vec4.fromValues(posClrF32[idx + 0], posClrF32[idx + 1], posClrF32[idx + 2], posClrF32[idx + 3])\n          vec3.subtract(v1, v4ToV3(prevV4), v4ToV3(nextV4))\n          vec3.normalize(v1, v1) // principle axis of cylinder\n          prevV2 = NiivueObject3D.getFirstPerpVector(v1)\n        }\n        continue\n      }\n      if (isLineEnd) {\n        // last vertex of streamline, no next vertex\n        nextV4 = vec4.clone(currV4)\n      } else {\n        nextV4 = vec4.fromValues(posClrF32[idx + 0], posClrF32[idx + 1], posClrF32[idx + 2], posClrF32[idx + 3])\n      }\n      // mean direction at joint\n      // n.b. vec4 -> vec3 we ignore 4th dimension (color)\n      vec3.subtract(v1, v4ToV3(prevV4), v4ToV3(nextV4))\n      vec3.normalize(v1, v1) // principle axis of cylinder\n      // avoid twisted cylinders: ensure v2 as closely aligned with previous v2 as possible\n      // method simpler than Frenet–Serret apparatus\n      // https://math.stackexchange.com/questions/410530/find-closest-vector-to-a-which-is-perpendicular-to-b\n      // const v2 = NiivueObject3D.getFirstPerpVector(v1)\n      // 𝐷=𝐴×𝐵, and then 𝐶=𝐵×𝐷. 𝐶 is automatically orthogonal to 𝐵\n      const D = vec3.create()\n      vec3.cross(D, prevV2, v1)\n      const v2 = vec3.create()\n      vec3.cross(v2, v1, D)\n      prevV2 = vec3.clone(prevV2)\n      // the next line of code would create arbitrary v2 that might show twisting\n      // v2 = NiivueObject3D.getFirstPerpVector(v1)\n      // Get the second perp vector by cross product\n      const v3 = vec3.create()\n      vec3.cross(v3, v1, v2) // a unit length vector orthogonal to v1 and v2\n      vec3.normalize(v3, v3)\n      const vtxXYZ = vec3.create()\n      for (let j = 0; j < cyl_sides; j++) {\n        const c = Math.cos((j / cyl_sides) * 2 * Math.PI)\n        const s = Math.sin((j / cyl_sides) * 2 * Math.PI)\n        vtxXYZ[0] = radius * (c * v2[0] + s * v3[0])\n        vtxXYZ[1] = radius * (c * v2[1] + s * v3[1])\n        vtxXYZ[2] = radius * (c * v2[2] + s * v3[2])\n        vec3.add(vtxXYZ, v4ToV3(currV4), vtxXYZ)\n        const fidx = vtx * f32PerVertex\n        f32[fidx + 0] = vtxXYZ[0]\n        f32[fidx + 1] = vtxXYZ[1]\n        f32[fidx + 2] = vtxXYZ[2]\n        // compute normal\n        const n3 = vec3.create()\n        vec3.subtract(n3, vtxXYZ, v4ToV3(currV4))\n        vec3.normalize(n3, n3)\n        const fidxU8 = (fidx + 3) * 4 // 4 Uint8 per Float32\n        u8[fidxU8 + 0] = n3[0] * 127\n        u8[fidxU8 + 1] = n3[1] * 127\n        u8[fidxU8 + 2] = n3[2] * 127\n        // f32[fidx+3] = normal;\n        f32[fidx + 4] = currV4[3]\n        // u32[fidx+3] = 65555;\n        // u32[fidx+4] = 65555;\n        vtx++\n      }\n      prevV4 = vec4.clone(currV4)\n      currV4 = vec4.clone(nextV4)\n      if (isLineEnd) {\n        node = 0\n      }\n    }\n    // ntri = number of triangles\n    // each cylinder is composed of 2 * cyl_sides (e.g. triangular cylinder is 6 triangles)\n    // each streamline with n nodes has n-1 cylinders (fencepost)\n    // each triangle defined by three indices, each referring to a vertex\n    const nidx = (n_line_vtx - n_streamlines) * cyl_sides * 2 * 3\n    const idxs = new Uint32Array(nidx)\n    let idx = 0\n    vtx = 0\n    for (let i = 1; i < n_count; i++) {\n      if (indices[i] === primitiveRestart) {\n        vtx += cyl_sides\n        continue\n      }\n      if (indices[i - 1] === primitiveRestart) {\n        // fencepost: do not create indices for first node in each streamline\n        continue\n      }\n      let prevStartVtx = vtx // startOfPreviousCylinder\n      let startVtx = vtx + cyl_sides // startOfCurrentCylinder\n      const prevStartVtxOverflow = startVtx // startOfCurrentCylinder\n      const startVtxOverflow = startVtx + cyl_sides // startOfNextCylinder\n      for (let j = 0; j < cyl_sides; j++) {\n        // emit triangle with one vertex on previous\n        idxs[idx++] = prevStartVtx\n        idxs[idx++] = startVtx++\n        if (startVtx === startVtxOverflow) {\n          startVtx = startVtxOverflow - cyl_sides\n        }\n        idxs[idx++] = startVtx\n        // emit triangle with two vertex on previous\n        idxs[idx++] = prevStartVtx++\n        if (prevStartVtx === prevStartVtxOverflow) {\n          prevStartVtx = prevStartVtxOverflow - cyl_sides\n        }\n        idxs[idx++] = startVtx\n        idxs[idx++] = prevStartVtx\n      }\n      vtx += cyl_sides\n    }\n    // copy index and vertex buffer to GPU\n    // no need to release: https://registry.khronos.org/OpenGL-Refpages/gl4/html/glBufferData.xhtml\n    // any pre-existing data store is deleted\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.indexBuffer)\n    gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, Uint32Array.from(idxs), gl.STATIC_DRAW)\n    gl.bindBuffer(gl.ARRAY_BUFFER, this.vertexBuffer)\n    // issue1129\n    // gl.bufferData(gl.ARRAY_BUFFER, Float32Array.from(f32), gl.STATIC_DRAW)\n    gl.bufferData(gl.ARRAY_BUFFER, u8, gl.STATIC_DRAW)\n    this.indexCount = nidx\n  } // linesToCylinders\n\n  createFiberDensityMap(): void {\n    // generate a fiber density map\n    // the array fiberDensity has one element per vertex\n    // this provides the normalized (0..1) neighboring vertices\n    if (this.fiberDensity) {\n      return\n    }\n    const pts = this.pts\n    const npt = pts.length / 3 // each point has three components: X,Y,Z\n    let maxExtentsRange = 0\n    for (let i = 0; i < 3; i++) {\n      const range = this.extentsMax[i] - this.extentsMin[i]\n      maxExtentsRange = Math.max(maxExtentsRange, range)\n    }\n    this.fiberDensity = new Float32Array(npt)\n    if (maxExtentsRange === 0) {\n      return\n    }\n    // DSI-Studio counts vertex density per voxel\n    // However, some tract formats do not store voxel dimensions\n    // therefore, we will create a 3D volume of size bins*bins*bins\n    const bins = 64\n    const binWidth = maxExtentsRange / (bins - 1)\n    const half = binWidth / 2\n    const scale = (bins - 1) / maxExtentsRange\n    let densityMap = new Float32Array(bins * bins * bins)\n    const mn = [this.extentsMin[0] - half, this.extentsMin[1] - half, this.extentsMin[2] - half]\n    // sum density map\n    const xyz = [0, 0, 0]\n    const prevVx = -1\n    const binsXbins = bins * bins\n    let j = 0\n    for (let i = 0; i < npt; i++) {\n      xyz[0] = Math.round((pts[j++] - mn[0]) * scale)\n      xyz[1] = Math.round((pts[j++] - mn[1]) * scale)\n      xyz[2] = Math.round((pts[j++] - mn[2]) * scale)\n      const vx = xyz[0] + xyz[1] * bins + xyz[2] * binsXbins\n      if (vx === prevVx) {\n        // each streamline contributes once per voxel\n        continue\n      }\n      densityMap[vx]++\n    }\n    function blur3D(vol: Float32Array, dim: number): Float32Array {\n      // let raw = vol.slice()\n      let raw = vol.slice()\n      let v = -1\n      const dim1 = dim - 1\n      // blur in x\n      for (let z = 0; z < dim; z++) {\n        for (let y = 0; y < dim; y++) {\n          for (let x = 0; x < dim; x++) {\n            v++\n            if (x < 1 || x >= dim1) {\n              continue\n            }\n            vol[v] = raw[v - 1] + raw[v] + raw[v] + raw[v + 1]\n          }\n        }\n      }\n      // blur in y\n      v = -1\n      raw = vol.slice()\n      for (let z = 0; z < dim; z++) {\n        for (let y = 0; y < dim; y++) {\n          for (let x = 0; x < dim; x++) {\n            v++\n            if (y < 1 || y >= dim1) {\n              continue\n            }\n            vol[v] = raw[v - dim] + raw[v] + raw[v] + raw[v + dim]\n          }\n        }\n      }\n      // blur in z\n      const dimXdim = dim * dim\n      v = -1\n      raw = vol.slice()\n      for (let z = 0; z < dim; z++) {\n        for (let y = 0; y < dim; y++) {\n          for (let x = 0; x < dim; x++) {\n            v++\n            if (z < 1 || z >= dim1) {\n              continue\n            }\n            vol[v] = raw[v - dimXdim] + raw[v] + raw[v] + raw[dimXdim]\n          }\n        }\n      }\n      return vol\n    }\n    densityMap = blur3D(densityMap, bins)\n    densityMap = blur3D(densityMap, bins)\n    // let raw = densityMap.slice()\n    let mx = 0\n    let mn0 = Infinity\n    const binsXbinsXbins = bins * bins * bins\n    for (let i = 0; i < binsXbinsXbins; i++) {\n      if (densityMap[i] <= 0) {\n        continue\n      }\n      mx = Math.max(mx, densityMap[i])\n      mn0 = Math.min(mn0, densityMap[i])\n    }\n    // console.log('Maximum streamlines in a voxel:', mx, mn0)\n    if (mx <= 1 || mx <= mn0) {\n      // no neighbors: no ambient occlusion\n      return\n    }\n    j = 0\n    for (let i = 0; i < binsXbinsXbins; i++) {\n      // least occluded vertices should have no occlusion\n      densityMap[i] = Math.max(0, densityMap[i] - mn0)\n    }\n    mx -= mn0\n    for (let i = 0; i < npt; i++) {\n      xyz[0] = Math.round((pts[j++] - mn[0]) * scale)\n      xyz[1] = Math.round((pts[j++] - mn[1]) * scale)\n      xyz[2] = Math.round((pts[j++] - mn[2]) * scale)\n      const vx = xyz[0] + xyz[1] * bins + xyz[2] * binsXbins\n      this.fiberDensity[i] = densityMap[vx] / mx\n    }\n  }\n\n  // not included in public docs\n  // internal function filters tractogram to identify which color and visibility of streamlines\n  updateFibers(gl: WebGL2RenderingContext): void {\n    if (!this.offsetPt0 || !this.fiberLength) {\n      return\n    }\n    const pts = this.pts\n    const offsetPt0 = this.offsetPt0\n    const n_count = offsetPt0.length - 1\n    const npt = pts.length / 3 // each point has three components: X,Y,Z\n    // only once: compute length of each streamline\n    if (!this.fiberLengths) {\n      this.fiberLengths = new Uint32Array(n_count)\n      for (let i = 0; i < n_count; i++) {\n        // for each streamline\n        const vStart3 = offsetPt0[i] * 3 // first vertex in streamline\n        const vEnd3 = (offsetPt0[i + 1] - 1) * 3 // last vertex in streamline\n        let len = 0\n        for (let j = vStart3; j < vEnd3; j += 3) {\n          const v = vec3.fromValues(pts[j + 0] - pts[j + 3], pts[j + 1] - pts[j + 4], pts[j + 2] - pts[j + 5])\n          len += vec3.len(v)\n        }\n        this.fiberLengths[i] = len\n      }\n    } // only once: compute length of each streamline\n    // determine fiber colors\n    // Each streamline vertex has color and position attributes\n    // Interleaved Vertex Data https://developer.apple.com/library/archive/documentation/3DDrawing/Conceptual/OpenGLES_ProgrammingGuide/TechniquesforWorkingwithVertexData/TechniquesforWorkingwithVertexData.html\n    const posClrF32 = new Float32Array(npt * 4) // four 32-bit components X,Y,Z,C\n    const posClrU32 = new Uint32Array(posClrF32.buffer) // typecast of our X,Y,Z,C array\n    // fill XYZ position of XYZC array\n    let i3 = 0\n    let i4 = 0\n    for (let i = 0; i < npt; i++) {\n      posClrF32[i4 + 0] = pts[i3 + 0]\n      posClrF32[i4 + 1] = pts[i3 + 1]\n      posClrF32[i4 + 2] = pts[i3 + 2]\n      i3 += 3\n      i4 += 4\n    }\n    // fill fiber Color\n    const dither = this.fiberDither\n    const ditherHalf = dither * 0.5\n    function rgb2int32(r: number, g: number, b: number): number {\n      const ditherFrac = dither * Math.random()\n      const d = 255.0 * (ditherFrac - ditherHalf)\n      r = Math.max(Math.min(r + d, 255.0), 0.0)\n      g = Math.max(Math.min(g + d, 255.0), 0.0)\n      b = Math.max(Math.min(b + d, 255.0), 0.0)\n      return r + (g << 8) + (b << 16)\n    }\n    function direction2rgb(\n      x1: number,\n      y1: number,\n      z1: number,\n      x2: number,\n      y2: number,\n      z2: number,\n      ditherFrac: number\n    ): number {\n      // generate color based on direction between two 3D spatial positions\n      const v = vec3.fromValues(Math.abs(x1 - x2), Math.abs(y1 - y2), Math.abs(z1 - z2))\n      vec3.normalize(v, v)\n      const r = ditherFrac - ditherHalf\n      for (let j = 0; j < 3; j++) {\n        v[j] = 255 * Math.max(Math.min(Math.abs(v[j]) + r, 1.0), 0.0)\n      }\n      return v[0] + (v[1] << 8) + (v[2] << 16)\n    } // direction2rgb()\n    // Determine color: local, global, dps0, dpv0, etc.\n    const fiberColor = this.fiberColor.toLowerCase()\n    let dps: Float32Array | null = null\n    let dpv: ValuesArray[0] | null = null\n    if (fiberColor.startsWith('dps') && this.dps && this.dps.length > 0) {\n      const n = parseInt(fiberColor.substring(3))\n      if (n < this.dps.length && this.dps[n].vals.length === n_count) {\n        dps = this.dps[n].vals\n      }\n    }\n    if (fiberColor.startsWith('dpv') && this.dpv && this.dpv.length > 0) {\n      const n = parseInt(fiberColor.substring(3))\n      if (n < this.dpv.length && this.dpv[n].vals.length === npt) {\n        dpv = this.dpv[n]\n      }\n    }\n    const streamlineVisible = new Int16Array(n_count)\n    // if ((this.dpg !== null) && (this.fiberGroupMask !== null) && (this.fiberGroupMask.length === this.dpg.length)) {\n    if (this.dpg && this.fiberGroupColormap !== null) {\n      const lut = new Uint8ClampedArray(this.dpg.length * 4) // 4 component RGBA for each group\n      const groupVisible = new Array(this.dpg.length).fill(false)\n      const cmap = this.fiberGroupColormap\n      if (cmap.A === undefined) {\n        cmap.A = Array.from(new Uint8ClampedArray(cmap.I.length).fill(255))\n      }\n      for (let i = 0; i < cmap.I.length; i++) {\n        let idx = cmap.I[i]\n        if (idx < 0 || idx >= this.dpg.length) {\n          continue\n        }\n        if (cmap.A[i] < 1) {\n          continue\n        }\n        groupVisible[idx] = true\n        idx *= 4\n        lut[idx] = cmap.R[i]\n        lut[idx + 1] = cmap.G[i]\n        lut[idx + 2] = cmap.B[i]\n        lut[idx + 3] = 255 // opaque\n      }\n      streamlineVisible.fill(-1) // -1 assume streamline not visible\n      for (let i = 0; i < this.dpg.length; i++) {\n        if (!groupVisible[i]) {\n          continue\n        } // this group is not visible\n        for (let v = 0; v < this.dpg[i].vals.length; v++) {\n          streamlineVisible[this.dpg[i].vals[v]] = i\n        }\n      }\n      for (let i = 0; i < n_count; i++) {\n        if (streamlineVisible[i] < 0) {\n          continue\n        } // hidden\n        const color = (streamlineVisible[i] % 256) * 4\n        // let RGBA = lut[color] + (lut[color + 1] << 8) + (lut[color + 2] << 16);\n        const RGBA = rgb2int32(lut[color], lut[color + 1], lut[color + 2])\n        const vStart = offsetPt0[i] // first vertex in streamline\n        const vEnd = offsetPt0[i + 1] - 1 // last vertex in streamline\n        const vStart4 = vStart * 4 + 3 // +3: fill 4th component colors: XYZC = 0123\n        const vEnd4 = vEnd * 4 + 3\n        for (let j = vStart4; j <= vEnd4; j += 4) {\n          posClrU32[j] = RGBA\n        }\n      }\n    } else if (dpv) {\n      // color per vertex\n      const lut = cmapper.colormap(this.colormap as string, this.colormapInvert)\n      const mn = dpv.cal_min\n      const mx = dpv.cal_max\n      let v4 = 3 // +3: fill 4th component colors: XYZC = 0123\n      for (let i = 0; i < npt; i++) {\n        let color = Math.min(Math.max((dpv.vals[i] - mn!) / (mx! - mn!), 0), 1)\n        color = Math.round(Math.max(Math.min(255, color * 255))) * 4\n        const RGBA = lut[color] + (lut[color + 1] << 8) + (lut[color + 2] << 16)\n        posClrU32[v4] = RGBA\n        v4 += 4\n      }\n    } else if (dps) {\n      // color per streamline\n      const lut = cmapper.colormap(this.colormap as string, this.colormapInvert)\n      let mn = dps[0]\n      let mx = dps[0]\n      for (let i = 0; i < n_count; i++) {\n        mn = Math.min(mn, dps[i])\n        mx = Math.max(mx, dps[i])\n      }\n      if (mx === mn) {\n        mn -= 1\n      } // avoid divide by zero\n      for (let i = 0; i < n_count; i++) {\n        let color = (dps[i] - mn) / (mx - mn)\n        color = Math.round(Math.max(Math.min(255, color * 255))) * 4\n        const RGBA = lut[color] + (lut[color + 1] << 8) + (lut[color + 2] << 16)\n        const vStart = offsetPt0[i] // first vertex in streamline\n        const vEnd = offsetPt0[i + 1] - 1 // last vertex in streamline\n        const vStart4 = vStart * 4 + 3 // +3: fill 4th component colors: XYZC = 0123\n        const vEnd4 = vEnd * 4 + 3\n        for (let j = vStart4; j <= vEnd4; j += 4) {\n          posClrU32[j] = RGBA\n        }\n      }\n    } else if (fiberColor.includes('fixed')) {\n      if (dither === 0.0) {\n        const RGBA = this.rgba255[0] + (this.rgba255[1] << 8) + (this.rgba255[2] << 16)\n        let v4 = 3 // +3: fill 4th component colors: XYZC = 0123\n        for (let i = 0; i < npt; i++) {\n          posClrU32[v4] = RGBA\n          v4 += 4\n        }\n      } else {\n        for (let i = 0; i < n_count; i++) {\n          const RGBA = rgb2int32(this.rgba255[0], this.rgba255[1], this.rgba255[2])\n          const vStart = offsetPt0[i] // first vertex in streamline\n          const vEnd = offsetPt0[i + 1] - 1 // last vertex in streamline\n          const vStart4 = vStart * 4 + 3 // +3: fill 4th component colors: XYZC = 0123\n          const vEnd4 = vEnd * 4 + 3\n          for (let j = vStart4; j <= vEnd4; j += 4) {\n            posClrU32[j] = RGBA\n          }\n        }\n      } // else fixed with dither\n    } else if (fiberColor.includes('local')) {\n      for (let i = 0; i < n_count; i++) {\n        // for each streamline\n        const vStart = offsetPt0[i] // first vertex in streamline\n        const vEnd = offsetPt0[i + 1] - 1 // last vertex in streamline\n        let v3 = vStart * 3 // pts have 3 components XYZ\n        const vEnd3 = vEnd * 3\n        const ditherFrac = dither * Math.random() // same dither amount throughout line\n        // for first point, we do not have a prior sample\n        let RGBA = direction2rgb(pts[v3], pts[v3 + 1], pts[v3 + 2], pts[v3 + 4], pts[v3 + 5], pts[v3 + 6], ditherFrac)\n        let v4 = vStart * 4 + 3 // +3: fill 4th component colors: XYZC = 0123\n        while (v3 < vEnd3) {\n          posClrU32[v4] = RGBA\n          v4 += 4 // stride is 4 32-bit values: float32 XYZ and 32-bit rgba\n          v3 += 3 // read next vertex\n          // direction estimated based on previous and next vertex\n          RGBA = direction2rgb(pts[v3 - 3], pts[v3 - 2], pts[v3 - 1], pts[v3 + 3], pts[v3 + 4], pts[v3 + 5], ditherFrac)\n        }\n        posClrU32[v4] = posClrU32[v4 - 4]\n      }\n    } else {\n      // if color is local direction, else global\n      for (let i = 0; i < n_count; i++) {\n        // for each streamline\n        const vStart = offsetPt0[i] // first vertex in streamline\n        const vEnd = offsetPt0[i + 1] - 1 // last vertex in streamline\n        const vStart3 = vStart * 3 // pts have 3 components XYZ\n        const vEnd3 = vEnd * 3\n        const RGBA = direction2rgb(\n          pts[vStart3],\n          pts[vStart3 + 1],\n          pts[vStart3 + 2],\n          pts[vEnd3],\n          pts[vEnd3 + 1],\n          pts[vEnd3 + 2],\n          dither * Math.random()\n        )\n        const vStart4 = vStart * 4 + 3 // +3: fill 4th component colors: XYZC = 0123\n        const vEnd4 = vEnd * 4 + 3\n        for (let j = vStart4; j <= vEnd4; j += 4) {\n          posClrU32[j] = RGBA\n        }\n      }\n    }\n    // SHADING: ambient occlusion\n    if (this.fiberOcclusion > 0) {\n      this.createFiberDensityMap()\n      function shadeRGBA(rgba: number, frac: number): number {\n        const r = frac * (rgba & 0xff)\n        const g = frac * ((rgba >> 8) & 0xff)\n        const b = frac * ((rgba >> 16) & 0xff)\n        return r + (g << 8) + (b << 16)\n      }\n      for (let i = 0; i < n_count; i++) {\n        // for each streamline\n        const vStart = offsetPt0[i] // first vertex in streamline\n        const vEnd = offsetPt0[i + 1] - 1 // last vertex in streamline\n        const vStart4 = vStart * 4 + 3 // +3: fill 4th component colors: XYZC = 0123\n        const vEnd4 = vEnd * 4 + 3\n        let vtx = vStart\n        const bias = Math.min(this.fiberOcclusion, 0.99)\n        for (let j = vStart4; j <= vEnd4; j += 4) {\n          let shade = this.fiberDensity[vtx++]\n          if (shade <= 0) {\n            continue\n          }\n          // Schlick's fast bias function\n          // https://github.com/ayamflow/schlick-curve\n          shade = shade / ((1.0 / bias - 2.0) * (1.0 - shade) + 1.0)\n          const frac = 1 - Math.min(shade, 0.9)\n          // console.log(shade, frac)\n          let RGBA = posClrU32[j]\n          RGBA = shadeRGBA(RGBA, frac)\n          posClrU32[j] = RGBA\n        }\n      }\n    }\n    // INDICES:\n    const min_mm = this.fiberLength\n    //  https://blog.spacepatroldelta.com/a?ID=00950-d878555f-a97a-4e32-9f40-fd9a449cb4fe\n    const primitiveRestart = Math.pow(2, 32) - 1 // for gl.UNSIGNED_INT\n    const indices: number[] = []\n    let stride = -1\n    for (let i = 0; i < n_count; i++) {\n      // let n_pts = offsetPt0[i + 1] - offsetPt0[i]; //if streamline0 starts at point 0 and streamline1 at point 4, then streamline0 has 4 points: 0,1,2,3\n      if (streamlineVisible[i] < 0) {\n        continue\n      }\n      if (this.fiberLengths[i] < min_mm) {\n        continue\n      }\n      stride++\n      if (stride % this.fiberDecimationStride !== 0) {\n        continue\n      } // e.g. if stride is 2 then half culled\n      for (let j = offsetPt0[i]; j < offsetPt0[i + 1]; j++) {\n        indices.push(j)\n      }\n      indices.push(primitiveRestart)\n    }\n    if (this.fiberSides > 2 && this.fiberRadius > 0) {\n      this.linesToCylinders(gl, posClrF32, indices)\n    } else {\n      // copy streamlines to GPU\n      this.indexCount = indices.length\n      gl.bindBuffer(gl.ARRAY_BUFFER, this.vertexBuffer)\n      gl.bufferData(gl.ARRAY_BUFFER, Uint32Array.from(posClrU32), gl.STATIC_DRAW)\n      gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.indexBuffer)\n      gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, Uint32Array.from(indices), gl.STATIC_DRAW)\n    }\n  } // updateFibers()\n\n  // given X,Y,Z coordinates in world space, return index of nearest vertex as well as\n  // the distance of this closest vertex to the coordinates\n  indexNearestXYZmm(Xmm: number, Ymm: number, Zmm: number): number[] {\n    const pts = this.pts\n    const nvtx = this.pts.length / 3\n    let i = 0\n    let mnDx = Infinity\n    let mnIdx = 0\n    for (let j = 0; j < nvtx; j++) {\n      const dx = Math.pow(pts[i] - Xmm, 2) + Math.pow(pts[i + 1] - Ymm, 2) + Math.pow(pts[i + 2] - Zmm, 2)\n      if (dx < mnDx) {\n        mnDx = dx\n        mnIdx = j\n      }\n      i += 3\n    }\n    // Pythagorean theorem sqrt(x^2+y^2+z^2)\n    // only calculate sqrt once\n    mnDx = Math.sqrt(mnDx)\n    return [mnIdx, mnDx]\n  } // indexNearestXYZmm()\n\n  // internal function discards GPU resources\n  unloadMesh(gl: WebGL2RenderingContext): void {\n    // free WebGL resources\n    gl.bindBuffer(gl.ARRAY_BUFFER, null)\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null)\n    gl.bindVertexArray(null)\n    gl.deleteBuffer(this.vertexBuffer)\n    gl.deleteBuffer(this.indexBuffer)\n    gl.deleteVertexArray(this.vao)\n    gl.deleteVertexArray(this.vaoFiber)\n    // presumably, if we null the mesh we dereference all the arrays, or do we have to explicitly null arrays\n    this.offsetPt0 = null\n    this.tris = null\n    this.pts = null\n    if (this.layers && this.layers.length > 0) {\n      for (let i = 0; i < this.layers.length; i++) {\n        this.layers[i].values = null\n      }\n    }\n    if (this.dpg && this.dpg.length > 0) {\n      for (let i = 0; i < this.dpg.length; i++) {\n        this.dpg[i].vals = null\n      }\n    }\n    if (this.dps && this.dps.length > 0) {\n      for (let i = 0; i < this.dps.length; i++) {\n        this.dps[i].vals = null\n      }\n    }\n  }\n\n  // internal function filters mesh to identify which color of triangulated mesh vertices\n  updateMesh(gl: WebGL2RenderingContext): void {\n    if (this.offsetPt0) {\n      this.updateFibers(gl)\n      return // fiber not mesh\n    }\n    if (this.hasConnectome) {\n      // this.updateConnectome(gl)\n      return // connectome not mesh\n    }\n    if (!this.pts || !this.tris || !this.rgba255) {\n      log.warn('underspecified mesh')\n      return\n    }\n    function lerp(x: number, y: number, a: number): number {\n      // https://www.khronos.org/registry/OpenGL-Refpages/gl4/html/mix.xhtml\n      return x * (1 - a) + y * a\n    }\n    function additiveBlend(x: number, y: number): number {\n      return Math.min(x + y, 255.0)\n    }\n    const posNormClr = this.generatePosNormClr(this.pts, this.tris, this.rgba255)\n    const nvtx = this.pts.length / 3\n    const u8 = new Uint8Array(posNormClr.buffer) // Each vertex has 7 components: PositionXYZ, NormalXYZ, RGBA32\n    // create emission values\n    // let posNormClrEmission = posNormClr.slice();\n    let maxAdditiveBlend = 0\n    const additiveRGBA = new Uint8Array(nvtx * 4) // emission\n\n    if (this.layers && this.layers.length > 0) {\n      for (let i = 0; i < this.layers.length; i++) {\n        const layer = this.layers[i]\n        const opacity = layer.opacity\n        if (opacity <= 0.0 || layer.cal_min > layer.cal_max) {\n          continue\n        }\n        if (layer.outlineBorder === undefined) {\n          layer.outlineBorder = 0\n        }\n        if (layer.isAdditiveBlend === undefined) {\n          layer.isAdditiveBlend = false\n        }\n        // build a label colormap\n        if (layer.colormapLabel && (layer.colormapLabel as ColorMap).R && !(layer.colormapLabel as LUT).lut) {\n          // convert colormap JSON to RGBA LUT\n          layer.colormapLabel = cmapper.makeLabelLut(layer.colormapLabel as ColorMap)\n        }\n        if (layer.colormapLabel && (layer.colormapLabel as LUT).lut) {\n          const colormapLabel = layer.colormapLabel as LUT\n          const lut = colormapLabel.lut\n          const nLabel = Math.floor(lut.length / 4)\n          const frame = Math.min(Math.max(layer.frame4D, 0), layer.nFrame4D - 1)\n          const frameOffset = nvtx * frame\n          // let mx = 0\n          const rgba8 = new Uint8Array(nvtx * 4)\n          let k = 0\n          for (let j = 0; j < layer.values.length; j++) {\n            // eslint-disable-next-line\n            let idx = 4 * Math.min(Math.max(layer.values[j + frameOffset], 0), nLabel - 1)\n            rgba8[k + 0] = lut[idx + 0]\n            rgba8[k + 1] = lut[idx + 1]\n            rgba8[k + 2] = lut[idx + 2]\n            k += 4\n          }\n          let opaque = new Array(nvtx).fill(false)\n          if (layer.outlineBorder > 0.0) {\n            opaque = NVMeshUtilities.getClusterBoundary(rgba8, this.tris)\n          }\n          k = 0\n          for (let j = 0; j < layer.values.length; j++) {\n            let opa = opacity\n            if (opaque[j]) {\n              opa = layer.outlineBorder\n            }\n            let vtx = j * 28 + 24 // posNormClr is 28 bytes stride, RGBA color at offset 24,\n            if (this.f32PerVertex !== 7) {\n              vtx = j * 20 + 16\n            }\n            u8[vtx + 0] = lerp(u8[vtx + 0], rgba8[k + 0], opa)\n            u8[vtx + 1] = lerp(u8[vtx + 1], rgba8[k + 1], opa)\n            u8[vtx + 2] = lerp(u8[vtx + 2], rgba8[k + 2], opa)\n            k += 4\n          } // for each vertex\n          continue\n        } // if colormapLabel\n        if (layer.values instanceof Uint8Array) {\n          const rgba8 = new Uint8Array(layer.values.buffer)\n          let opaque = new Array(nvtx).fill(true)\n          if (layer.outlineBorder > 0) {\n            opaque = NVMeshUtilities.getClusterBoundary(rgba8, this.tris)\n          }\n          let k = 0\n          for (let j = 0; j < layer.values.length; j++) {\n            let vtx = j * 28 + 24 // posNormClr is 28 bytes stride, RGBA color at offset 24,\n            if (this.f32PerVertex !== 7) {\n              vtx = j * 20 + 16\n            }\n            let opa = opacity\n            if (opaque[j]) {\n              opa = layer.outlineBorder\n            }\n            u8[vtx + 0] = lerp(u8[vtx + 0], rgba8[k + 0], opa)\n            u8[vtx + 1] = lerp(u8[vtx + 1], rgba8[k + 1], opa)\n            u8[vtx + 2] = lerp(u8[vtx + 2], rgba8[k + 2], opa)\n            k += 4\n          }\n          continue\n        }\n        const lut = cmapper.colormap(layer.colormap, layer.colormapInvert)\n        const frame = Math.min(Math.max(layer.frame4D, 0), layer.nFrame4D - 1)\n        const frameOffset = nvtx * frame\n        if (layer.isAdditiveBlend) {\n          maxAdditiveBlend = Math.max(maxAdditiveBlend, opacity)\n        }\n        if (layer.useNegativeCmap) {\n          layer.cal_min = Math.max(0, layer.cal_min)\n          layer.cal_max = Math.max(layer.cal_min + 0.000001, layer.cal_max)\n        }\n        if (layer.isTransparentBelowCalMin === undefined) {\n          layer.isTransparentBelowCalMin = true\n        }\n        let mn = layer.cal_min\n        // let mnVisible = mn;\n        if (layer.alphaThreshold) {\n          mn = Math.min(mn, 0.0)\n        }\n\n        const scale255 = 255.0 / (layer.cal_max - mn)\n        let mnCal = layer.cal_min\n        if (!layer.isTransparentBelowCalMin) {\n          mnCal = Number.NEGATIVE_INFINITY\n        }\n        if (layer.outlineBorder <= 0.0) {\n          // blend colors for each voxel\n          for (let j = 0; j < nvtx; j++) {\n            const v = layer.values[j + frameOffset]\n            if (v < mnCal) {\n              continue\n            }\n            let v255 = Math.round((v - mn) * scale255)\n            if (v255 < 0 && layer.isTransparentBelowCalMin) {\n              continue\n            }\n            v255 = Math.max(0.0, v255)\n            v255 = Math.min(255.0, v255) * 4\n            let vtx = j * 28 + 24 // posNormClr is 28 bytes stride, RGBA color at offset 24,\n            if (this.f32PerVertex !== 7) {\n              vtx = j * 20 + 16\n            }\n            if (layer.isAdditiveBlend) {\n              const j4 = j * 4\n              // sum red, green and blue layers\n              additiveRGBA[j4 + 0] = additiveBlend(additiveRGBA[j4 + 0], lut[v255 + 0])\n              additiveRGBA[j4 + 1] = additiveBlend(additiveRGBA[j4 + 1], lut[v255 + 1])\n              additiveRGBA[j4 + 2] = additiveBlend(additiveRGBA[j4 + 2], lut[v255 + 2])\n              additiveRGBA[j4 + 3] = additiveBlend(additiveRGBA[j4 + 3], 255.0)\n            } else {\n              const opa = opacity\n              u8[vtx + 0] = lerp(u8[vtx + 0], lut[v255 + 0], opa)\n              u8[vtx + 1] = lerp(u8[vtx + 1], lut[v255 + 1], opa)\n              u8[vtx + 2] = lerp(u8[vtx + 2], lut[v255 + 2], opa)\n            }\n          }\n        } else {\n          const v255s = new Uint8Array(nvtx)\n          for (let j = 0; j < nvtx; j++) {\n            let v255 = Math.round((layer.values[j + frameOffset] - layer.cal_min) * scale255)\n            if (v255 < 0) {\n              continue\n            }\n            v255 = Math.min(255.0, v255)\n            v255s[j] = v255\n          }\n          const opaque = NVMeshUtilities.getClusterBoundaryU8(v255s, this.tris)\n          for (let j = 0; j < nvtx; j++) {\n            if (v255s[j] < 1) {\n              continue\n            }\n            let opa = opacity\n            if (opaque[j]) {\n              opa = layer.outlineBorder\n            }\n            const v255 = v255s[j] * 4\n            let vtx = j * 28 + 24 // posNormClr is 28 bytes stride, RGBA color at offset 24,\n            if (this.f32PerVertex !== 7) {\n              vtx = j * 20 + 16\n            }\n            u8[vtx + 0] = lerp(u8[vtx + 0], lut[v255 + 0], opa)\n            u8[vtx + 1] = lerp(u8[vtx + 1], lut[v255 + 1], opa)\n            u8[vtx + 2] = lerp(u8[vtx + 2], lut[v255 + 2], opa)\n          }\n        }\n        if (layer.useNegativeCmap) {\n          const lut = cmapper.colormap(layer.colormapNegative, layer.colormapInvert)\n          if (layer.outlineBorder <= 0.0) {\n            let mn = layer.cal_min\n            let mx = layer.cal_max\n\n            if (isFinite(layer.cal_minNeg) && isFinite(layer.cal_minNeg)) {\n              mn = -layer.cal_minNeg\n              mx = -layer.cal_maxNeg\n            }\n            if (mx < mn) {\n              ;[mn, mx] = [mx, mn]\n            }\n            let mnVisible = mn\n            if (mnVisible === 0.0) {\n              mnVisible = Number.EPSILON\n            } // do not shade 0.0 twice with positive and negative colormap\n            if (layer.alphaThreshold) {\n              mn = 0.0\n            }\n            const scale255neg = 255.0 / (mx - mn)\n            for (let j = 0; j < nvtx; j++) {\n              const v = -layer.values[j + frameOffset]\n              if (v < mnVisible) {\n                continue\n              }\n              let v255 = Math.round((v - mn) * scale255neg)\n              /* let v255 = Math.round(\n                (-layer.values[j + frameOffset] - layer.cal_min) * scale255\n              ); */\n              if (v255 < 0) {\n                continue\n              }\n              v255 = Math.min(255.0, v255) * 4\n              let vtx = j * 28 + 24 // posNormClr is 28 bytes stride, RGBA color at offset 24,\n              if (this.f32PerVertex !== 7) {\n                vtx = j * 20 + 16\n              }\n              if (layer.isAdditiveBlend) {\n                const j4 = j * 4\n                // sum red, green and blue layers\n                additiveRGBA[j4 + 0] = additiveBlend(additiveRGBA[j4 + 0], lut[v255 + 0])\n                additiveRGBA[j4 + 1] = additiveBlend(additiveRGBA[j4 + 1], lut[v255 + 1])\n                additiveRGBA[j4 + 2] = additiveBlend(additiveRGBA[j4 + 2], lut[v255 + 2])\n                additiveRGBA[j4 + 3] = additiveBlend(additiveRGBA[j4 + 3], 255.0)\n              } else {\n                u8[vtx + 0] = lerp(u8[vtx + 0], lut[v255 + 0], opacity)\n                u8[vtx + 1] = lerp(u8[vtx + 1], lut[v255 + 1], opacity)\n                u8[vtx + 2] = lerp(u8[vtx + 2], lut[v255 + 2], opacity)\n              }\n            }\n          } else {\n            const v255s = new Uint8Array(nvtx)\n            for (let j = 0; j < nvtx; j++) {\n              const v255 = Math.round((-layer.values[j + frameOffset] - layer.cal_min) * scale255)\n              if (v255 < 0) {\n                continue\n              }\n              v255s[j] = Math.min(255.0, v255)\n            }\n            const opaque = NVMeshUtilities.getClusterBoundaryU8(v255s, this.tris)\n            for (let j = 0; j < nvtx; j++) {\n              let v255 = 255 // v255s[j];\n              let opa = opacity\n              if (opaque[j]) {\n                opa = layer.outlineBorder\n              }\n              v255 = Math.min(255.0, v255) * 4\n              let vtx = j * 28 + 24 // posNormClr is 28 bytes stride, RGBA color at offset 24,\n              if (this.f32PerVertex !== 7) {\n                vtx = j * 20 + 16\n              }\n              u8[vtx + 0] = lerp(u8[vtx + 0], lut[v255 + 0], opa)\n              u8[vtx + 1] = lerp(u8[vtx + 1], lut[v255 + 1], opa)\n              u8[vtx + 2] = lerp(u8[vtx + 2], lut[v255 + 2], opa)\n            }\n          }\n        }\n      }\n    }\n    if (maxAdditiveBlend > 0) {\n      for (let j = 0; j < nvtx; j++) {\n        let vtx = j * 28 + 24 // posNormClr is 28 bytes stride, RGBA color at offset 24,\n        if (this.f32PerVertex !== 7) {\n          vtx = j * 20 + 16\n        }\n        const v = j * 4 // additiveRGBA is 4 bytes stride, RGBA color at offset 0,\n        const opacity = Math.min(maxAdditiveBlend, additiveRGBA[v + 3] / 255)\n        if (opacity <= 0) {\n          continue\n        }\n        function modulate(x: number, y: number): number {\n          return Math.min(x * y * (1 / 255), 255.0)\n        }\n        u8[vtx + 0] = modulate(u8[vtx + 0], additiveRGBA[v + 0])\n        u8[vtx + 1] = modulate(u8[vtx + 1], additiveRGBA[v + 1])\n        u8[vtx + 2] = modulate(u8[vtx + 2], additiveRGBA[v + 2])\n        u8[vtx + 0] = lerp(u8[vtx + 0], additiveRGBA[v + 0], opacity)\n        u8[vtx + 1] = lerp(u8[vtx + 1], additiveRGBA[v + 1], opacity)\n        u8[vtx + 2] = lerp(u8[vtx + 2], additiveRGBA[v + 2], opacity)\n      }\n    } // isAdditiveBlend\n    // generate webGL buffers and vao\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.indexBuffer)\n    gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, Uint32Array.from(this.tris), gl.STATIC_DRAW)\n    gl.bindBuffer(gl.ARRAY_BUFFER, this.vertexBuffer)\n    // issue1129\n    // gl.bufferData(gl.ARRAY_BUFFER, Float32Array.from(posNormClr), gl.STATIC_DRAW)\n    gl.bufferData(gl.ARRAY_BUFFER, u8, gl.STATIC_DRAW)\n    this.indexCount = this.tris.length\n    this.vertexCount = this.pts.length\n  } // updateMesh()\n\n  // internal function filters mesh to identify which color of triangulated mesh vertices\n  reverseFaces(gl: WebGL2RenderingContext): void {\n    if (this.offsetPt0) {\n      return\n    } // fiber not mesh\n    if (this.hasConnectome) {\n      return\n    } // connectome not mesh\n    const tris = this.tris || [] // TODO tris should probably be assigned in the constructor\n    for (let j = 0; j < tris.length; j += 3) {\n      const tri = tris[j]\n      tris[j] = tris[j + 1]\n      tris[j + 1] = tri\n    }\n    this.updateMesh(gl) // apply the new properties...\n  }\n\n  hierarchicalOrder(): number {\n    const V0 = 12\n    const F0 = 20\n    const nF = this.tris.length / 3\n    const order = Math.log(nF / F0) / Math.log(4)\n    // Sanity checks\n    if (nF !== Math.pow(4, order) * F0) {\n      return NaN\n    }\n    const nV = this.pts.length / 3\n    if (nV !== Math.pow(4, order) * (V0 - 2) + 2) {\n      return NaN\n    }\n    // next checks are in case FreeSurfer was optimized with more local face indices\n    // for an example see BrainMesh_ICBM152.lh.mz3\n    for (let i = 0; i < 15; i += 3) {\n      if (this.tris[i] !== 0) {\n        return NaN\n      }\n    }\n    for (let i = 15; i < 24; i += 3) {\n      if (this.tris[i] !== 3) {\n        return NaN\n      }\n    }\n    for (let i = 24; i < 30; i += 3) {\n      if (this.tris[i] !== 4) {\n        return NaN\n      }\n    }\n    return order\n  }\n\n  decimateFaces(n: number, ntarget: number): void {\n    let fac = this.tris\n    // Constants for the icosahedron\n    const V0 = 12\n    const F0 = 20\n    for (let j = n - 1; j >= ntarget; j--) {\n      const nVjprev = Math.pow(4, j + 1) * (V0 - 2) + 2\n      const nVj = Math.pow(4, j) * (V0 - 2) + 2\n      const nFjprev = fac.length / 3 // = 4^(j+1)*F0\n      const nFj = Math.pow(4, j) * F0\n\n      console.log(`order ${j + 1} -> ${j} vertices ${nVjprev} -> ${nVj} faces ${nFjprev} -> ${nFj}`)\n\n      const remap = Array.from({ length: nVjprev }, (_, i) => i + 1)\n\n      for (let i = 0; i < nFjprev; i++) {\n        const v1 = fac[3 * i]\n        const v2 = fac[3 * i + 1]\n        const v3 = fac[3 * i + 2]\n        remap[v1 - 1] = Math.min(remap[v1 - 1], v2, v3)\n      }\n\n      const facJ = new Uint32Array(nFj * 3)\n      for (let i = 0; i < nFj; i++) {\n        facJ[3 * i] = remap[fac[3 * i] - 1]\n        facJ[3 * i + 1] = remap[fac[3 * i + 1] - 1]\n        facJ[3 * i + 2] = remap[fac[3 * i + 2] - 1]\n      }\n      fac = facJ\n    }\n    this.tris = new Uint32Array(fac)\n  }\n\n  // internal function simplifies FreeSurfer triangulated mesh and overlays\n  decimateHierarchicalMesh(gl: WebGL2RenderingContext, order: number = 4): boolean {\n    const inputOrder = this.hierarchicalOrder()\n    if (isNaN(inputOrder)) {\n      log.warn('Unable to decimate mesh: it does not have a hierarchical structure')\n      return false\n    }\n    if (order >= inputOrder) {\n      log.warn(`Unable to decimate mesh: input order (${inputOrder}) must be larger than downsampled order (${order})`)\n      return false\n    }\n    const inputVLength = this.pts.length / 3\n    const V0 = 12\n    const nV = Math.pow(4, order) * (V0 - 2) + 2\n    this.pts = new Float32Array(this.pts.slice(0, nV * 3))\n    this.decimateFaces(inputOrder, order)\n    if (this.layers && this.layers.length > 0) {\n      for (let i = 0; i < this.layers.length; i++) {\n        const layer = this.layers[i]\n        if (layer.values instanceof Float32Array || layer.values.length !== inputVLength) {\n          layer.values = new Float32Array(layer.values.slice(0, nV))\n        } else {\n          log.warn(`decimation logic needs to be updated`)\n        }\n      }\n    }\n    this.updateMesh(gl) // apply the new properties...\n    return true\n  }\n\n  // adjust attributes of a mesh layer. invoked by niivue.setMeshLayerProperty()\n  // TODO this method is a bit too generic\n  setLayerProperty(\n    id: number,\n    key: keyof NVMeshLayer,\n    val: number | string | boolean,\n    gl: WebGL2RenderingContext\n  ): void {\n    const layer = this.layers[id]\n    if (!layer || !(key in layer)) {\n      log.warn('mesh does not have property ', key, ' for layer ', layer)\n      return\n    }\n    // @ts-expect-error TODO generic property access\n    layer[key] = val\n    this.updateMesh(gl) // apply the new properties...\n  }\n\n  // adjust mesh attributes. invoked by niivue.setMeshProperty(()\n  // TODO this method is too generic\n  setProperty(key: keyof this, val: unknown, gl: WebGL2RenderingContext): void {\n    if (!(key in this)) {\n      log.warn('mesh does not have property ', key, this)\n      return\n    }\n    // @ts-expect-error TODO generic access\n    this[key] = val\n    this.updateMesh(gl) // apply the new properties...\n  }\n\n  // Each streamline vertex has color, normal and position attributes\n  // Interleaved Vertex Data https://developer.apple.com/library/archive/documentation/3DDrawing/Conceptual/OpenGLES_ProgrammingGuide/TechniquesforWorkingwithVertexData/TechniquesforWorkingwithVertexData.html\n  generatePosNormClr(pts: Float32Array, tris: Uint32Array, rgba255: Uint8Array): Float32Array {\n    if (pts.length < 3 || rgba255.length < 4) {\n      log.error('Catastrophic failure generatePosNormClr()')\n      log.debug('this', this)\n      log.debug('pts', pts)\n      log.debug('rgba', rgba255)\n    }\n    const norms = NVMeshUtilities.generateNormals(pts, tris)\n    const npt = pts.length / 3\n    const isPerVertexColors = npt === rgba255.length / 4\n    // n32\n    const f32PerVertex = this.f32PerVertex // 7 if NormalXYZ is 3 floats, 5 if normalXYZ is packed into rgb32\n    const f32 = new Float32Array(npt * f32PerVertex) // Each vertex has 7 components: PositionXYZ, NormalXYZ, RGBA32\n    const u8 = new Uint8Array(f32.buffer) // Each vertex has 7 components: PositionXYZ, NormalXYZ, RGBA32\n    let p = 0 // input position\n    let c = 0 // input color\n    let f = 0 // output float32 location (position and normals)\n    let u = (f32PerVertex - 1) * 4 // output uint8 location (colors), offset 24 as after 3*position+3*normal\n    for (let i = 0; i < npt; i++) {\n      f32[f + 0] = pts[p + 0]\n      f32[f + 1] = pts[p + 1]\n      f32[f + 2] = pts[p + 2]\n      if (f32PerVertex !== 7) {\n        u8[u - 4] = norms[p + 0] * 127\n        u8[u - 3] = norms[p + 1] * 127\n        u8[u - 2] = norms[p + 2] * 127\n      } else {\n        f32[f + 3] = norms[p + 0]\n        f32[f + 4] = norms[p + 1]\n        f32[f + 5] = norms[p + 2]\n      }\n      u8[u] = rgba255[c + 0]\n      u8[u + 1] = rgba255[c + 1]\n      u8[u + 2] = rgba255[c + 2]\n      u8[u + 3] = rgba255[c + 3]\n      if (isPerVertexColors) {\n        c += 4\n      }\n      p += 3 // read 3 input components: XYZ\n      f += f32PerVertex // write 7 output components: 3*Position, 3*Normal, 1*RGBA\n      u += f32PerVertex * 4 // stride of 28 bytes\n    }\n    return f32\n  }\n\n  // wrapper to read meshes, tractograms and connectomes regardless of format\n  static readMesh(\n    buffer: ArrayBuffer,\n    name: string,\n    gl: WebGL2RenderingContext,\n    opacity = 1.0,\n    rgba255 = new Uint8Array([255, 255, 255, 255]),\n    visible = true\n  ): NVMesh {\n    let tris: Uint32Array = new Uint32Array([])\n    let pts: Float32Array = new Float32Array([])\n    let anatomicalStructurePrimary = ''\n    let obj: TCK | TRACT | TT | TRX | TRK | GII | MZ3 | X3D | VTK | DefaultMeshType\n    const re = /(?:\\.([^.]+))?$/\n    let ext = re.exec(name)![1]\n    ext = ext.toUpperCase()\n    if (ext === 'GZ') {\n      ext = re.exec(name.slice(0, -3))![1] // img.trk.gz -> img.trk\n      ext = ext.toUpperCase()\n    }\n    if (ext === 'JCON') {\n      // return NVMesh.loadConnectomeFromJSON(JSON.parse(new TextDecoder().decode(buffer)), gl, name, opacity)\n      log.error('you should never see this message: load using nvconnectome not nvmesh')\n    }\n    if (ext === 'JSON') {\n      // return NVMesh.loadConnectomeFromFreeSurfer(JSON.parse(new TextDecoder().decode(buffer)), gl, name, opacity)\n      log.error('you should never see this message: load using nvconnectome not nvmesh')\n    }\n    rgba255[3] = Math.max(1, rgba255[3])\n    if (ext === 'TCK' || ext === 'TRK' || ext === 'TT' || ext === 'TRX' || ext === 'TRACT') {\n      if (ext === 'TCK') {\n        obj = NVMeshLoaders.readTCK(buffer)\n      } else if (ext === 'TRACT') {\n        obj = NVMeshLoaders.readTRACT(buffer)\n      } else if (ext === 'TT') {\n        obj = NVMeshLoaders.readTT(buffer)\n      } else if (ext === 'TRX') {\n        obj = NVMeshLoaders.readTRX(buffer)\n      } else {\n        obj = NVMeshLoaders.readTRK(buffer)\n      }\n      if (typeof obj === 'undefined') {\n        const pts = new Float32Array([0, 0, 0, 0, 0, 0])\n        const offsetPt0 = new Uint32Array([0])\n        obj = { pts, offsetPt0 }\n        log.error('Creating empty tracts')\n      }\n      rgba255[3] = 0.0\n      return new NVMesh(\n        obj.pts,\n        obj.offsetPt0,\n        name,\n        rgba255, // colormap,\n        opacity, // opacity,\n        visible, // visible,\n        gl,\n        'inferno',\n        (obj as TRX).dpg || null,\n        (obj as TRX).dps || null,\n        (obj as TRX).dpv || null\n      )\n    } // is fibers\n    if (ext === 'GII') {\n      obj = NVMeshLoaders.readGII(buffer)\n    } else if (ext === 'MZ3') {\n      obj = NVMeshLoaders.readMZ3(buffer)\n      if (obj instanceof Float32Array || obj.positions === null) {\n        log.warn('MZ3 does not have positions (statistical overlay?)')\n      }\n    } else if (ext === 'ASC') {\n      obj = NVMeshLoaders.readASC(buffer)\n    } else if (ext === 'DFS') {\n      obj = NVMeshLoaders.readDFS(buffer)\n    } else if (ext === 'BYU' || ext === 'G') {\n      obj = NVMeshLoaders.readGEO(buffer)\n    } else if (ext === 'GEO') {\n      obj = NVMeshLoaders.readGEO(buffer, true)\n    } else if (ext === 'ICO' || ext === 'TRI') {\n      obj = NVMeshLoaders.readICO(buffer)\n    } else if (ext === 'OFF') {\n      obj = NVMeshLoaders.readOFF(buffer)\n    } else if (ext === 'NV') {\n      obj = NVMeshLoaders.readNV(buffer)\n    } else if (ext === 'OBJ') {\n      obj = NVMeshLoaders.readOBJ(buffer)\n    } else if (ext === 'PLY') {\n      obj = NVMeshLoaders.readPLY(buffer)\n    } else if (ext === 'X3D') {\n      obj = NVMeshLoaders.readX3D(buffer)\n    } else if (ext === 'FIB' || ext === 'VTK') {\n      obj = NVMeshLoaders.readVTK(buffer)\n      if ('offsetPt0' in obj) {\n        // VTK files used both for meshes and streamlines\n        rgba255[3] = 0.0\n        return new NVMesh(\n          obj.pts,\n          obj.offsetPt0,\n          name,\n          rgba255, // colormap,\n          opacity, // opacity,\n          visible, // visible,\n          gl,\n          'inferno'\n        )\n      } // if streamlines, not mesh\n    } else if (ext === 'SRF') {\n      obj = NVMeshLoaders.readSRF(buffer)\n    } else if (ext === 'STL') {\n      obj = NVMeshLoaders.readSTL(buffer)\n    } else {\n      obj = NVMeshLoaders.readFreeSurfer(buffer)\n    } // freesurfer hail mary\n    if ((obj as GII).anatomicalStructurePrimary) {\n      anatomicalStructurePrimary = (obj as GII).anatomicalStructurePrimary\n    }\n    if (obj instanceof Float32Array) {\n      throw new Error('fatal: unknown mesh type loaded')\n    }\n\n    if (!obj.positions) {\n      throw new Error('positions not loaded')\n    }\n    if (!obj.indices) {\n      throw new Error('indices not loaded')\n    }\n\n    pts = obj.positions\n    tris = obj.indices\n\n    if ('rgba255' in obj && obj.rgba255.length > 0) {\n      // e.g. x3D format\n      // rgba255 = Array.from(obj.rgba255)\n      rgba255 = obj.rgba255\n    }\n    if ('colors' in obj && obj.colors && obj.colors.length === pts.length) {\n      const n = pts.length / 3\n      rgba255 = new Uint8Array(n * 4)\n      let c = 0\n      let k = 0\n      for (let i = 0; i < n; i++) {\n        // convert ThreeJS unit RGB to RGBA255\n        rgba255[k++] = obj.colors[c] * 255 // red\n        rgba255[k++] = obj.colors[c + 1] * 255 // green\n        rgba255[k++] = obj.colors[c + 2] * 255 // blue\n        rgba255[k++] = 255 // alpha\n        c += 3\n      } // for i: each vertex\n    } // obj includes colors\n    const npt = pts.length / 3\n    const ntri = tris.length / 3\n    if (ntri < 1 || npt < 3) {\n      throw new Error('Mesh should have at least one triangle and three vertices')\n    }\n    rgba255[3] = Math.max(1, rgba255[3]) // mesh not streamline\n    const nvm = new NVMesh(\n      pts,\n      tris,\n      name,\n      rgba255, // colormap,\n      opacity, // opacity,\n      visible, // visible,\n      gl,\n      null, // connectome\n      null, // dpg\n      null, // dps\n      null, // dpv\n      true, // colorbarVisible\n      anatomicalStructurePrimary\n    )\n    if ('scalars' in obj && obj.scalars.length > 0) {\n      NVMeshLoaders.readLayer(name, buffer, nvm, opacity, 'gray')\n      nvm.updateMesh(gl)\n    }\n    return nvm\n  }\n\n  static async loadLayer(layer: NVMeshLayer, nvmesh: NVMesh): Promise<void> {\n    let buffer\n\n    function base64ToArrayBuffer(base64: string): ArrayBuffer {\n      const binary_string = window.atob(base64)\n      const len = binary_string.length\n      const bytes = new Uint8Array(len)\n      for (let i = 0; i < len; i++) {\n        bytes[i] = binary_string.charCodeAt(i)\n      }\n      return bytes.buffer\n    }\n\n    if (layer.base64 !== undefined) {\n      // populate buffer with base64 if exists\n      buffer = base64ToArrayBuffer(layer.base64)\n    } else {\n      if (!layer.url) {\n        throw new Error('layer: missing url')\n      }\n      // fetch url otherwise\n      const response = await fetch(layer.url, { headers: layer.headers })\n      if (!response.ok) {\n        throw Error(response.statusText)\n      }\n      buffer = await response.arrayBuffer()\n    }\n\n    let layerName: string\n    let urlParts: string[] = []\n    if (layer.name && layer.name !== '') {\n      layerName = layer.name\n    } else {\n      if (!layer.url) {\n        throw new Error('layer: missing url')\n      }\n      // urlParts = layer.url.split(\"/\");\n      // layerName = urlParts.slice(-1)[0];\n      try {\n        // if a full url like https://domain/path/file.nii.gz?query=filter\n        // parse the url and get the pathname component without the query\n        urlParts = new URL(layer.url).pathname.split('/')\n      } catch (e) {\n        // if a relative url then parse the path (assuming no query)\n        urlParts = layer.url.split('/')\n      } finally {\n        layerName = urlParts.slice(-1)[0]\n      }\n    }\n    if (layerName.indexOf('?') > -1) {\n      layerName = layerName.slice(0, layerName.indexOf('?')) // remove query string if any\n    }\n\n    let opacity = 0.5\n    if ('opacity' in layer) {\n      opacity = layer.opacity\n    }\n    let colormap = 'warm'\n    if ('colormap' in layer) {\n      colormap = layer.colormap!\n    }\n    let colormapNegative = 'winter'\n    if ('colormapNegative' in layer) {\n      colormapNegative = layer.colormapNegative!\n    }\n    let useNegativeCmap = false\n    if ('useNegativeCmap' in layer) {\n      useNegativeCmap = layer.useNegativeCmap!\n    }\n    let cal_min: number | null = null\n    if ('cal_min' in layer) {\n      cal_min = layer.cal_min\n    }\n    let cal_max: number | null = null\n    if ('cal_max' in layer) {\n      cal_max = layer.cal_max\n    }\n\n    const newLayer = NVMeshLoaders.readLayer(\n      layerName,\n      buffer,\n      nvmesh,\n      opacity,\n      colormap,\n      colormapNegative,\n      useNegativeCmap,\n      cal_min,\n      cal_max\n    )\n    if (newLayer) {\n      nvmesh.layers.push(newLayer)\n    }\n  }\n\n  /**\n   * factory function to load and return a new NVMesh instance from a given URL\n   */\n  static async loadFromUrl({\n    url = '',\n    headers = {},\n    gl,\n    name = '',\n    opacity = 1.0,\n    rgba255 = [255, 255, 255, 255],\n    visible = true,\n    layers = [],\n    buffer = new ArrayBuffer(0)\n  }: Partial<LoadFromUrlParams> = {}): Promise<NVMesh> {\n    let urlParts = url.split('/') // split url parts at slash\n    if (name === '') {\n      try {\n        // if a full url like https://domain/path/file.nii.gz?query=filter\n        // parse the url and get the pathname component without the query\n        urlParts = new URL(url).pathname.split('/')\n      } catch (e) {\n        // if a relative url then parse the path (assuming no query)\n        urlParts = url.split('/')\n      }\n      name = urlParts.slice(-1)[0] // name will be last part of url (e.g. some/url/image.nii.gz --> image.nii.gz\n      if (name.indexOf('?') > -1) {\n        name = name.slice(0, name.indexOf('?')) // remove query string if any\n      }\n    }\n    if (url === '') {\n      throw Error('url must not be empty')\n    }\n    if (!gl) {\n      throw Error('gl context is null')\n    }\n    let buff\n    if (buffer.byteLength > 0) {\n      buff = buffer\n    } else {\n      // TRX format is special (its a zip archive of multiple files)\n      const response = await fetch(url, { headers })\n      if (!response.ok) {\n        throw Error(response.statusText)\n      }\n      buff = await response.arrayBuffer()\n    }\n    const nvmesh = await this.readMesh(buff, name, gl, opacity, new Uint8Array(rgba255), visible)\n\n    if (!layers || layers.length < 1) {\n      return nvmesh\n    }\n\n    for (let i = 0; i < layers.length; i++) {\n      await NVMesh.loadLayer(layers[i], nvmesh)\n    }\n\n    // apply the new properties\n    nvmesh.updateMesh(gl)\n    return nvmesh\n  }\n\n  // not included in public docs\n  // loading Nifti files\n  static async readFileAsync(file: Blob): Promise<ArrayBuffer> {\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader()\n\n      reader.onload = (): void => {\n        resolve(reader.result as ArrayBuffer)\n      }\n\n      reader.onerror = reject\n\n      reader.readAsArrayBuffer(file)\n    })\n  }\n\n  /**\n   * factory function to load and return a new NVMesh instance from a file in the browser\n   *\n   * @returns NVMesh instance\n   */\n  static async loadFromFile({\n    file,\n    gl,\n    name = '',\n    opacity = 1.0,\n    rgba255 = [255, 255, 255, 255],\n    visible = true,\n    layers = []\n  }: Partial<LoadFromFileParams> = {}): Promise<NVMesh> {\n    if (!file) {\n      throw new Error('file must be set')\n    }\n    if (!gl) {\n      throw new Error('rendering context must be set')\n    }\n\n    const buffer = await NVMesh.readFileAsync(file)\n    const nvmesh = NVMesh.readMesh(buffer, name, gl, opacity, new Uint8Array(rgba255), visible)\n\n    if (!layers || layers.length < 1) {\n      return nvmesh\n    }\n\n    for (let i = 0; i < layers.length; i++) {\n      await NVMesh.loadLayer(layers[i], nvmesh)\n    }\n\n    // apply the new properties\n    nvmesh.updateMesh(gl)\n    return nvmesh\n  }\n\n  /**\n   * load and return a new NVMesh instance from a base64 encoded string\n   */\n  async loadFromBase64({\n    base64,\n    gl,\n    name = '',\n    opacity = 1.0,\n    rgba255 = [255, 255, 255, 255],\n    visible = true,\n    layers = []\n  }: Partial<LoadFromBase64Params> = {}): Promise<NVMesh> {\n    if (!base64) {\n      throw new Error('base64 must bet set')\n    }\n    if (!gl) {\n      throw new Error('rendering context must be set')\n    }\n\n    // https://stackoverflow.com/questions/21797299/convert-base64-string-to-arraybuffer\n    function base64ToArrayBuffer(base64: string): ArrayBuffer {\n      const binary_string = window.atob(base64)\n      const len = binary_string.length\n      const bytes = new Uint8Array(len)\n      for (let i = 0; i < len; i++) {\n        bytes[i] = binary_string.charCodeAt(i)\n      }\n      return bytes.buffer\n    }\n\n    const buffer = base64ToArrayBuffer(base64)\n    const nvmesh = await NVMesh.readMesh(buffer, name, gl, opacity, new Uint8Array(rgba255), visible)\n\n    if (!layers || layers.length < 1) {\n      return nvmesh\n    }\n    for (let i = 0; i < layers.length; i++) {\n      await NVMesh.loadLayer(layers[i], nvmesh)\n    }\n\n    // apply new properties\n    nvmesh.updateMesh(gl)\n    return nvmesh\n  }\n\n  // loaders\n  static readGII(buffer: ArrayBuffer): GII {\n    return NVMeshLoaders.readGII(buffer)\n  }\n\n  static readX3D(buffer: ArrayBuffer): X3D {\n    return NVMeshLoaders.readX3D(buffer)\n  }\n\n  static readNII(buffer: ArrayBuffer, n_vert = 0): Uint8Array | Float32Array | Int32Array | Int16Array {\n    return NVMeshLoaders.readNII(buffer, n_vert)\n  }\n\n  static readNII2(buffer: ArrayBuffer, n_vert = 0): Uint8Array | Float32Array | Int32Array | Int16Array {\n    return NVMeshLoaders.readNII2(buffer, n_vert)\n  }\n\n  static readMGH(buffer: ArrayBuffer): MGH {\n    return NVMeshLoaders.readMGH(buffer)\n  }\n\n  static readSTL(buffer: ArrayBuffer): DefaultMeshType {\n    return NVMeshLoaders.readSTL(buffer)\n  }\n\n  static readTxtSTL(buffer: ArrayBuffer): DefaultMeshType {\n    return NVMeshLoaders.readTxtSTL(buffer)\n  }\n\n  static readSRF(buffer: ArrayBuffer): DefaultMeshType {\n    return NVMeshLoaders.readSRF(buffer)\n  }\n\n  static readFreeSurfer(buffer: ArrayBuffer): DefaultMeshType {\n    return NVMeshLoaders.readFreeSurfer(buffer)\n  }\n\n  static readOBJ(buffer: ArrayBuffer): DefaultMeshType {\n    return NVMeshLoaders.readOBJ(buffer)\n  }\n\n  static readOFF(buffer: ArrayBuffer): DefaultMeshType {\n    return NVMeshLoaders.readOFF(buffer)\n  }\n\n  static readGEO(buffer: ArrayBuffer, isFlipWinding = false): DefaultMeshType {\n    return NVMeshLoaders.readGEO(buffer, isFlipWinding)\n  }\n\n  static readICO(buffer: ArrayBuffer): DefaultMeshType {\n    return NVMeshLoaders.readICO(buffer)\n  }\n\n  static readPLY(buffer: ArrayBuffer): DefaultMeshType {\n    return NVMeshLoaders.readPLY(buffer)\n  }\n\n  static readMZ3(buffer: ArrayBuffer, n_vert = 0): MZ3 {\n    return NVMeshLoaders.readMZ3(buffer, n_vert)\n  }\n\n  static readVTK(buffer: ArrayBuffer): VTK {\n    return NVMeshLoaders.readVTK(buffer)\n  }\n\n  static readASC(buffer: ArrayBuffer): DefaultMeshType {\n    return NVMeshLoaders.readASC(buffer)\n  }\n\n  static readNV(buffer: ArrayBuffer): DefaultMeshType {\n    return NVMeshLoaders.readNV(buffer)\n  }\n\n  static readANNOT(buffer: ArrayBuffer, n_vert: number, isReadColortables = false): ANNOT {\n    return NVMeshLoaders.readANNOT(buffer, n_vert, isReadColortables)\n  }\n\n  static readCURV(buffer: ArrayBuffer, n_vert: number): Float32Array {\n    return NVMeshLoaders.readCURV(buffer, n_vert)\n  }\n\n  static readSTC(buffer: ArrayBuffer, n_vert: number): Float32Array {\n    return NVMeshLoaders.readSTC(buffer, n_vert)\n  }\n\n  static readSMP(buffer: ArrayBuffer, n_vert: number): Float32Array {\n    return NVMeshLoaders.readSMP(buffer, n_vert)\n  }\n\n  static readTxtVTK(buffer: ArrayBuffer): VTK {\n    return NVMeshLoaders.readTxtVTK(buffer)\n  }\n\n  static readTRK(buffer: ArrayBuffer): TRK {\n    return NVMeshLoaders.readTRK(buffer)\n  }\n\n  static readTCK(buffer: ArrayBuffer): TCK {\n    return NVMeshLoaders.readTCK(buffer)\n  }\n\n  static readTSF(buffer: ArrayBuffer): Float32Array {\n    return NVMeshLoaders.readTSF(buffer)\n  }\n\n  static readTT(buffer: ArrayBuffer): TT {\n    return NVMeshLoaders.readTT(buffer)\n  }\n\n  static readTRX(buffer: ArrayBuffer): TRX {\n    return NVMeshLoaders.readTRX(buffer)\n  }\n\n  static readTRACT(buffer: ArrayBuffer): TRACT {\n    return NVMeshLoaders.readTRACT(buffer)\n  }\n}\n","export { default as $itksnap } from './_itksnap.json'\nexport { default as $slicer3d } from './_slicer3d.json'\nexport { default as actc } from './actc.json'\nexport { default as bcgwhw_dark } from './bcgwhw_dark.json'\nexport { default as bcgwhw } from './bcgwhw.json'\nexport { default as blue2red } from './blue2red.json'\nexport { default as blue2magenta } from './blue2magenta.json'\nexport { default as blue2cyan } from './blue2cyan.json'\nexport { default as bluegrn } from './bluegrn.json'\nexport { default as blue } from './blue.json'\nexport { default as bone } from './bone.json'\nexport { default as bronze } from './bronze.json'\nexport { default as cet_l17 } from './cet_l17.json'\nexport { default as cividis } from './cividis.json'\nexport { default as cool } from './cool.json'\nexport { default as copper2 } from './copper2.json'\nexport { default as copper } from './copper.json'\nexport { default as ct_airways } from './ct_airways.json'\nexport { default as ct_artery } from './ct_artery.json'\nexport { default as ct_bones } from './ct_bones.json'\nexport { default as ct_brain_gray } from './ct_brain_gray.json'\nexport { default as ct_brain } from './ct_brain.json'\nexport { default as ct_cardiac } from './ct_cardiac.json'\nexport { default as ct_head } from './ct_head.json'\nexport { default as ct_kidneys } from './ct_kidneys.json'\nexport { default as ct_liver } from './ct_liver.json'\nexport { default as ct_muscles } from './ct_muscles.json'\nexport { default as ct_scalp } from './ct_scalp.json'\nexport { default as ct_skull } from './ct_skull.json'\nexport { default as ct_soft } from './ct_soft.json'\nexport { default as ct_soft_tissue } from './ct_soft_tissue.json'\nexport { default as ct_surface } from './ct_surface.json'\nexport { default as ct_vessels } from './ct_vessels.json'\nexport { default as ct_w_contrast } from './ct_w_contrast.json'\nexport { default as cubehelix } from './cubehelix.json'\nexport { default as electric_blue } from './electric_blue.json'\nexport { default as freesurfer } from './freesurfer.json'\nexport { default as ge_color } from './ge_color.json'\nexport { default as gold } from './gold.json'\nexport { default as gray } from './gray.json'\nexport { default as green } from './green.json'\nexport { default as green2cyan } from './green2cyan.json'\nexport { default as green2orange } from './green2orange.json'\nexport { default as hotiron } from './hotiron.json'\nexport { default as hot } from './hot.json'\nexport { default as hsv } from './hsv.json'\nexport { default as inferno } from './inferno.json'\nexport { default as jet } from './jet.json'\nexport { default as linspecer } from './linspecer.json'\nexport { default as magma } from './magma.json'\nexport { default as mako } from './mako.json'\nexport { default as nih } from './nih.json'\nexport { default as plasma } from './plasma.json'\nexport { default as random } from './random.json'\nexport { default as red } from './red.json'\nexport { default as redyell } from './redyell.json'\nexport { default as rocket } from './rocket.json'\nexport { default as surface } from './surface.json'\nexport { default as turbo } from './turbo.json'\nexport { default as violet } from './violet.json'\nexport { default as viridis } from './viridis.json'\nexport { default as warm } from './warm.json'\nexport { default as winter } from './winter.json'\nexport { default as x_rain } from './x_rain.json'\nexport { default as afni_blues_inv } from './afni_blues_inv.json'\nexport { default as afni_reds_inv } from './afni_reds_inv.json'\nexport { default as roi_i256 } from './roi_i256.json'\n","{\n  \"R\": [\n    0, 255, 0, 0, 255, 0, 255, 255, 0, 205, 210, 102, 0, 0, 46, 255, 106, 221,\n    233, 165, 255, 147, 218, 75, 255, 60, 255, 255, 218, 0, 188, 255, 255, 222,\n    127, 139, 124, 255, 70, 0, 238, 238, 240, 245, 184, 32, 255, 25, 112, 34,\n    248, 245, 255, 144, 173, 65, 255, 250, 128, 50, 244, 255, 123, 255, 173,\n    255, 127, 255, 143, 220, 253, 255, 0, 0, 128, 255, 250, 148, 178, 255, 135,\n    100, 240, 250, 255, 107, 135, 0, 139, 245, 186, 255, 255, 0, 210, 255, 47,\n    72, 175, 128, 176, 255, 139, 240, 255, 216, 119, 219, 72, 255, 199, 154,\n    189, 240, 230, 0, 85, 64, 153, 205, 250, 95, 0, 255, 224, 176, 138, 30, 240,\n    152, 160\n  ],\n  \"G\": [\n    0, 0, 255, 0, 255, 255, 0, 239, 0, 133, 180, 205, 0, 139, 139, 228, 90, 160,\n    150, 42, 250, 112, 112, 0, 182, 179, 235, 228, 165, 128, 143, 105, 218, 184,\n    255, 69, 252, 255, 130, 100, 130, 232, 255, 222, 134, 178, 20, 25, 128, 139,\n    248, 255, 160, 238, 255, 105, 99, 240, 0, 205, 164, 255, 104, 165, 216, 192,\n    255, 140, 188, 20, 245, 250, 206, 255, 0, 250, 128, 0, 34, 127, 206, 149,\n    230, 235, 245, 142, 206, 0, 0, 245, 85, 228, 222, 191, 105, 248, 79, 61,\n    238, 128, 224, 240, 0, 255, 215, 191, 136, 112, 209, 0, 21, 205, 183, 248,\n    230, 250, 107, 224, 50, 92, 250, 158, 128, 69, 255, 196, 43, 144, 128, 251,\n    82\n  ],\n  \"B\": [\n    0, 0, 0, 255, 0, 255, 255, 213, 205, 63, 140, 170, 128, 139, 87, 225, 205,\n    221, 122, 42, 250, 219, 214, 130, 193, 113, 205, 196, 32, 128, 143, 180,\n    185, 135, 0, 19, 0, 224, 180, 0, 238, 170, 240, 179, 11, 170, 147, 112, 144,\n    34, 255, 250, 122, 144, 47, 225, 71, 230, 0, 50, 96, 240, 238, 0, 230, 203,\n    212, 0, 143, 60, 230, 240, 209, 127, 128, 205, 114, 211, 34, 80, 235, 237,\n    140, 215, 238, 35, 250, 139, 139, 220, 211, 181, 173, 255, 30, 220, 79, 139,\n    238, 0, 230, 245, 0, 255, 0, 216, 153, 147, 204, 255, 133, 50, 107, 255,\n    250, 154, 47, 208, 204, 92, 210, 160, 0, 0, 255, 222, 226, 255, 128, 152, 45\n  ],\n  \"A\": [\n    0, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,\n    255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,\n    255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,\n    255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,\n    255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,\n    255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,\n    255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,\n    255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,\n    255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255\n  ],\n  \"I\": [\n    0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n    21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39,\n    40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58,\n    59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77,\n    78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96,\n    97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112,\n    113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127,\n    128, 129, 130\n  ]\n}\n","{\n  \"labels\": [\n    \"background\",\n    \"tissue\",\n    \"bone\",\n    \"skin\",\n    \"connective tissue\",\n    \"blood\",\n    \"organ\",\n    \"mass\",\n    \"muscle\",\n    \"foreign object\",\n    \"waste\",\n    \"teeth\",\n    \"fat\",\n    \"gray matter\",\n    \"white matter\",\n    \"nerve\",\n    \"vein\",\n    \"artery\",\n    \"capillary\",\n    \"ligament\",\n    \"tendon\",\n    \"cartilage\",\n    \"meniscus\",\n    \"lymph node\",\n    \"lymphatic vessel\",\n    \"cerebro-spinal fluid\",\n    \"bile\",\n    \"urine\",\n    \"feces\",\n    \"gas\",\n    \"fluid\",\n    \"edema\",\n    \"bleeding\",\n    \"necrosis\",\n    \"clot\",\n    \"embolism\",\n    \"head\",\n    \"central nervous system\",\n    \"brain\",\n    \"gray matter of brain\",\n    \"telencephalon\",\n    \"cerebral cortex\",\n    \"right frontal lobe\",\n    \"left frontal lobe\",\n    \"right temporal lobe\",\n    \"left temporal lobe\",\n    \"right parietal lobe\",\n    \"left parietal lobe\",\n    \"right occipital lobe\",\n    \"left occipital lobe\",\n    \"right insular lobe\",\n    \"left insular lobe\",\n    \"right limbic lobe\",\n    \"left limbic lobe\",\n    \"right striatum\",\n    \"left striatum\",\n    \"right caudate nucleus\",\n    \"left caudate nucleus\",\n    \"right putamen\",\n    \"left putamen\",\n    \"right pallidum\",\n    \"left pallidum\",\n    \"right amygdaloid complex\",\n    \"left amygdaloid complex\",\n    \"diencephalon\",\n    \"thalamus\",\n    \"right thalamus\",\n    \"left thalamus\",\n    \"pineal gland\",\n    \"midbrain\",\n    \"substantia nigra\",\n    \"right substantia nigra\",\n    \"left substantia nigra\",\n    \"cerebral white matter\",\n    \"right superior longitudinal fasciculus\",\n    \"left superior longitudinal fasciculus\",\n    \"right inferior longitudinal fasciculus\",\n    \"left inferior longitudinal fasciculus\",\n    \"right arcuate fasciculus\",\n    \"left arcuate fasciculus\",\n    \"right uncinate fasciculus\",\n    \"left uncinate fasciculus\",\n    \"right cingulum bundle\",\n    \"left cingulum bundle\",\n    \"projection fibers\",\n    \"right corticospinal tract\",\n    \"left corticospinal tract\",\n    \"right optic radiation\",\n    \"left optic radiation\",\n    \"right medial lemniscus\",\n    \"left medial lemniscus\",\n    \"right superior cerebellar peduncle\",\n    \"left superior cerebellar peduncle\",\n    \"right middle cerebellar peduncle\",\n    \"left middle cerebellar peduncle\",\n    \"right inferior cerebellar peduncle\",\n    \"left inferior cerebellar peduncle\",\n    \"optic chiasm\",\n    \"right optic tract\",\n    \"left optic tract\",\n    \"right fornix\",\n    \"left fornix\",\n    \"commissural fibers\",\n    \"corpus callosum\",\n    \"posterior commissure\",\n    \"cerebellar white matter\",\n    \"CSF space\",\n    \"ventricles of brain\",\n    \"right lateral ventricle\",\n    \"left lateral ventricle\",\n    \"right third ventricle\",\n    \"left third ventricle\",\n    \"cerebral aqueduct\",\n    \"fourth ventricle\",\n    \"subarachnoid space\",\n    \"spinal cord\",\n    \"gray matter of spinal cord\",\n    \"white matter of spinal cord\",\n    \"endocrine system of brain\",\n    \"pituitary gland\",\n    \"adenohypophysis\",\n    \"neurohypophysis\",\n    \"meninges\",\n    \"dura mater\",\n    \"arachnoid\",\n    \"pia mater\",\n    \"muscles of head\",\n    \"salivary glands\",\n    \"lips\",\n    \"nose\",\n    \"tongue\",\n    \"soft palate\",\n    \"right inner ear\",\n    \"left inner ear\",\n    \"right external ear\",\n    \"left external ear\",\n    \"right middle ear\",\n    \"left middle ear\",\n    \"right eyeball\",\n    \"left eyeball\",\n    \"skull\",\n    \"right frontal bone\",\n    \"left frontal bone\",\n    \"right parietal bone\",\n    \"left parietal bone\",\n    \"right temporal bone\",\n    \"left temporal bone\",\n    \"right sphenoid bone\",\n    \"left sphenoid bone\",\n    \"right ethmoid bone\",\n    \"left ethmoid bone\",\n    \"occipital bone\",\n    \"maxilla\",\n    \"right zygomatic bone\",\n    \"right lacrimal bone\",\n    \"vomer bone\",\n    \"right palatine bone\",\n    \"left palatine bone\",\n    \"mandible\",\n    \"neck\",\n    \"muscles of neck\",\n    \"pharynx\",\n    \"larynx\",\n    \"thyroid gland\",\n    \"right parathyroid glands\",\n    \"left parathyroid glands\",\n    \"skeleton of neck\",\n    \"hyoid bone\",\n    \"cervical vertebral column\",\n    \"thorax\",\n    \"trachea\",\n    \"bronchi\",\n    \"right lung\",\n    \"left lung\",\n    \"superior lobe of right lung\",\n    \"superior lobe of left lung\",\n    \"middle lobe of right lung\",\n    \"inferior lobe of right lung\",\n    \"inferior lobe of left lung\",\n    \"pleura\",\n    \"heart\",\n    \"right atrium\",\n    \"left atrium\",\n    \"atrial septum\",\n    \"ventricular septum\",\n    \"right ventricle of heart\",\n    \"left ventricle of heart\",\n    \"mitral valve\",\n    \"tricuspid valve\",\n    \"aortic valve\",\n    \"pulmonary valve\",\n    \"aorta\",\n    \"pericardium\",\n    \"pericardial cavity\",\n    \"esophagus\",\n    \"thymus\",\n    \"mediastinum\",\n    \"skin of thoracic wall\",\n    \"muscles of thoracic wall\",\n    \"skeleton of thorax\",\n    \"thoracic vertebral column\",\n    \"ribs\",\n    \"sternum\",\n    \"right clavicle\",\n    \"left clavicle\",\n    \"abdominal cavity\",\n    \"abdomen\",\n    \"peritoneum\",\n    \"omentum\",\n    \"peritoneal cavity\",\n    \"retroperitoneal space\",\n    \"stomach\",\n    \"duodenum\",\n    \"small bowel\",\n    \"colon\",\n    \"anus\",\n    \"liver\",\n    \"biliary tree\",\n    \"gallbladder\",\n    \"pancreas\",\n    \"spleen\",\n    \"urinary system\",\n    \"right kidney\",\n    \"left kidney\",\n    \"right ureter\",\n    \"left ureter\",\n    \"urinary bladder\",\n    \"urethra\",\n    \"right adrenal gland\",\n    \"left adrenal gland\",\n    \"female internal genitalia\",\n    \"uterus\",\n    \"right fallopian tube\",\n    \"left fallopian tube\",\n    \"right ovary\",\n    \"left ovary\",\n    \"vagina\",\n    \"male internal genitalia\",\n    \"prostate\",\n    \"right seminal vesicle\",\n    \"left seminal vesicle\",\n    \"right deferent duct\",\n    \"left deferent duct\",\n    \"skin of abdominal wall\",\n    \"muscles of abdominal wall\",\n    \"skeleton of abdomen\",\n    \"lumbar vertebral column\",\n    \"female external genitalia\",\n    \"male external genitalia\",\n    \"skeleton of upper limb\",\n    \"muscles of upper limb\",\n    \"right upper limb\",\n    \"left upper limb\",\n    \"right shoulder\",\n    \"left shoulder\",\n    \"right arm\"\n  ],\n  \"R\": [\n    0, 128, 241, 177, 111, 216, 221, 144, 192, 220, 78, 255, 230, 200, 250, 244,\n    0, 216, 183, 183, 152, 111, 178, 68, 111, 85, 0, 214, 78, 218, 170, 140,\n    188, 216, 145, 150, 177, 244, 250, 200, 68, 128, 83, 83, 162, 162, 141, 141,\n    182, 182, 188, 188, 154, 154, 177, 177, 30, 30, 210, 210, 48, 48, 98, 98,\n    69, 166, 122, 122, 253, 145, 46, 0, 0, 250, 127, 127, 159, 159, 125, 125,\n    106, 106, 154, 154, 126, 201, 201, 78, 78, 174, 174, 139, 139, 148, 148,\n    186, 186, 99, 156, 156, 64, 64, 138, 97, 126, 194, 85, 88, 88, 88, 88, 88,\n    88, 88, 88, 244, 200, 250, 82, 57, 60, 92, 255, 255, 255, 255, 201, 70, 188,\n    177, 166, 182, 229, 229, 174, 174, 201, 201, 194, 194, 241, 203, 203, 229,\n    229, 255, 255, 209, 209, 248, 248, 255, 196, 255, 255, 255, 242, 242, 222,\n    177, 213, 184, 150, 62, 62, 62, 242, 250, 255, 177, 182, 175, 197, 197, 172,\n    172, 202, 224, 224, 255, 206, 210, 203, 233, 195, 181, 152, 159, 166, 218,\n    225, 224, 255, 184, 211, 47, 255, 173, 188, 255, 226, 253, 244, 205, 205,\n    186, 177, 255, 234, 204, 180, 216, 255, 205, 204, 255, 221, 0, 139, 249,\n    157, 203, 185, 185, 247, 247, 222, 124, 249, 249, 244, 255, 255, 227, 213,\n    213, 193, 216, 230, 245, 245, 241, 241, 177, 171, 217, 212, 185, 185, 198,\n    194, 177, 177, 177, 177, 177\n  ],\n  \"G\": [\n    0, 174, 214, 122, 184, 101, 130, 238, 104, 245, 63, 250, 220, 200, 250, 214,\n    151, 101, 156, 214, 189, 184, 212, 172, 197, 188, 145, 230, 63, 255, 250,\n    224, 65, 191, 60, 98, 122, 214, 250, 200, 131, 174, 146, 146, 115, 115, 93,\n    93, 166, 166, 135, 135, 150, 150, 140, 140, 111, 111, 157, 157, 129, 129,\n    153, 153, 110, 113, 101, 101, 135, 92, 101, 108, 108, 250, 150, 150, 116,\n    116, 102, 102, 174, 174, 146, 146, 126, 160, 160, 152, 152, 140, 140, 126,\n    126, 120, 120, 135, 135, 106, 171, 171, 123, 123, 95, 113, 161, 195, 188,\n    106, 106, 106, 106, 106, 106, 106, 106, 214, 200, 250, 174, 157, 143, 162,\n    244, 244, 244, 244, 121, 163, 91, 122, 84, 105, 147, 147, 122, 122, 112,\n    112, 142, 142, 213, 179, 179, 204, 204, 243, 243, 185, 185, 223, 223, 230,\n    172, 255, 250, 237, 217, 217, 198, 122, 124, 105, 208, 162, 162, 162, 206,\n    210, 255, 122, 228, 216, 165, 165, 138, 138, 164, 186, 186, 245, 110, 115,\n    108, 138, 100, 85, 55, 63, 70, 123, 130, 97, 244, 122, 171, 150, 244, 121,\n    95, 239, 202, 232, 217, 179, 179, 124, 122, 255, 234, 142, 119, 132, 253,\n    167, 168, 224, 130, 145, 150, 180, 108, 136, 102, 102, 182, 182, 154, 186,\n    186, 186, 170, 181, 190, 153, 141, 141, 123, 146, 158, 172, 172, 172, 172,\n    124, 85, 198, 188, 135, 135, 175, 98, 122, 122, 122, 122, 122\n  ],\n  \"B\": [\n    0, 128, 145, 101, 210, 79, 101, 144, 88, 20, 0, 220, 70, 235, 210, 49, 206,\n    79, 220, 211, 207, 210, 242, 100, 131, 255, 30, 130, 0, 255, 250, 228, 28,\n    216, 66, 83, 101, 49, 225, 215, 98, 128, 164, 164, 105, 105, 137, 137, 110,\n    110, 166, 166, 201, 201, 190, 190, 85, 85, 166, 166, 126, 126, 112, 112, 53,\n    137, 38, 38, 192, 109, 131, 112, 112, 225, 88, 88, 163, 163, 154, 154, 155,\n    155, 83, 83, 55, 133, 133, 141, 141, 103, 103, 177, 177, 72, 72, 135, 135,\n    24, 108, 108, 147, 147, 74, 158, 197, 164, 255, 215, 215, 215, 215, 215,\n    215, 215, 215, 49, 215, 225, 128, 110, 83, 109, 209, 209, 209, 209, 77, 117,\n    95, 101, 94, 107, 118, 118, 90, 90, 73, 73, 0, 0, 144, 77, 77, 109, 109,\n    152, 152, 85, 85, 131, 131, 138, 68, 167, 160, 145, 123, 123, 101, 101, 109,\n    108, 243, 114, 114, 114, 142, 139, 207, 101, 255, 244, 145, 145, 115, 115,\n    140, 162, 162, 217, 84, 89, 81, 112, 73, 57, 13, 27, 38, 97, 104, 76, 209,\n    154, 143, 103, 209, 88, 76, 172, 134, 158, 154, 108, 108, 161, 101, 220,\n    194, 178, 153, 105, 229, 142, 143, 199, 101, 30, 98, 111, 162, 116, 83, 83,\n    164, 164, 132, 223, 150, 150, 147, 158, 165, 130, 113, 113, 103, 127, 140,\n    147, 147, 151, 151, 92, 68, 131, 102, 134, 134, 125, 79, 101, 101, 101, 101,\n    101\n  ],\n  \"A\": [\n    0, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,\n    255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,\n    255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,\n    255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,\n    255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,\n    255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,\n    255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,\n    255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,\n    255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,\n    255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,\n    255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,\n    255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,\n    255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,\n    255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,\n    255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,\n    255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,\n    255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,\n    255\n  ],\n  \"I\": [\n    0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n    21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39,\n    40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58,\n    59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77,\n    78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96,\n    97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112,\n    113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127,\n    128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142,\n    143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157,\n    158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172,\n    173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187,\n    188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202,\n    203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217,\n    218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232,\n    233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247,\n    248, 249, 250, 251, 252, 253, 254, 255\n  ]\n}\n","{\n  \"R\": [0, 0, 24, 248, 255],\n  \"G\": [0, 0, 177, 254, 0],\n  \"B\": [0, 136, 0, 0, 0],\n  \"A\": [0, 32, 64, 78, 128],\n  \"I\": [0, 64, 128, 156, 255]\n}\n","{\n  \"R\": [\n    0, 248, 242, 235, 229, 222, 212, 202, 193, 183, 173, 145, 117, 78, 39, 0, 0,\n    0, 0, 0, 0, 64, 128, 191, 255, 255, 255, 255, 255, 238, 221, 204, 214, 224,\n    235, 245, 255, 249, 242, 236, 229, 223, 217, 210, 204, 197, 191, 184, 176,\n    169, 161, 154, 146, 139, 132, 124, 117, 109, 102, 0\n  ],\n  \"G\": [\n    0, 251, 247, 243, 239, 235, 235, 235, 235, 235, 235, 216, 197, 174, 150,\n    127, 153, 178, 204, 229, 255, 255, 255, 255, 255, 220, 185, 150, 115, 77,\n    38, 0, 31, 61, 92, 122, 153, 138, 122, 107, 92, 77, 61, 46, 31, 15, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0\n  ],\n  \"B\": [\n    0, 254, 253, 252, 251, 250, 251, 252, 253, 254, 255, 226, 198, 132, 66, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 40, 80, 120, 160, 200, 199,\n    198, 197, 196, 196, 195, 194, 193, 192, 191, 184, 176, 169, 161, 154, 146,\n    139, 132, 124, 117, 109, 102, 0\n  ],\n  \"A\": [\n    256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256,\n    256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256,\n    256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256,\n    256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256\n  ],\n  \"I\": [\n    0, 4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56, 60, 64, 68, 72, 76,\n    80, 84, 88, 92, 96, 100, 104, 108, 112, 116, 120, 124, 128, 132, 136, 140,\n    144, 148, 152, 156, 160, 164, 168, 172, 176, 180, 184, 188, 192, 196, 200,\n    204, 208, 212, 216, 220, 224, 228, 232, 236, 240, 244, 248, 255\n  ]\n}\n","{\n  \"R\": [\n    255, 248, 242, 235, 229, 222, 212, 202, 193, 183, 173, 145, 117, 78, 39, 0,\n    0, 0, 0, 0, 0, 64, 128, 191, 255, 255, 255, 255, 255, 238, 221, 204, 214,\n    224, 235, 245, 255, 249, 242, 236, 229, 223, 217, 210, 204, 197, 191, 184,\n    176, 169, 161, 154, 146, 139, 132, 124, 117, 109, 102, 0\n  ],\n  \"G\": [\n    255, 251, 247, 243, 239, 235, 235, 235, 235, 235, 235, 216, 197, 174, 150,\n    127, 153, 178, 204, 229, 255, 255, 255, 255, 255, 220, 185, 150, 115, 77,\n    38, 0, 31, 61, 92, 122, 153, 138, 122, 107, 92, 77, 61, 46, 31, 15, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0\n  ],\n  \"B\": [\n    255, 254, 253, 252, 251, 250, 251, 252, 253, 254, 255, 226, 198, 132, 66, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 40, 80, 120, 160, 200, 199,\n    198, 197, 196, 196, 195, 194, 193, 192, 191, 184, 176, 169, 161, 154, 146,\n    139, 132, 124, 117, 109, 102, 0\n  ],\n  \"A\": [\n    256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256,\n    256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256,\n    256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256,\n    256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256\n  ],\n  \"I\": [\n    0, 4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56, 60, 64, 68, 72, 76,\n    80, 84, 88, 92, 96, 100, 104, 108, 112, 116, 120, 124, 128, 132, 136, 140,\n    144, 148, 152, 156, 160, 164, 168, 172, 176, 180, 184, 188, 192, 196, 200,\n    204, 208, 212, 216, 220, 224, 228, 232, 236, 240, 244, 248, 255\n  ]\n}\n","{\n  \"R\": [0, 0, 0, 0, 196, 255],\n  \"G\": [0, 32, 128, 128, 128, 32],\n  \"B\": [0, 255, 196, 0, 0, 0],\n  \"A\": [0, 128, 64, 64, 64, 128],\n  \"I\": [0, 1, 64, 128, 192, 255]\n}\n","{\n  \"R\": [0, 255],\n  \"G\": [0, 0],\n  \"B\": [255, 255],\n  \"A\": [0, 128],\n  \"I\": [0, 255]\n}\n","{\n  \"R\": [0, 0],\n  \"G\": [0, 255],\n  \"B\": [255, 255],\n  \"A\": [0, 128],\n  \"I\": [0, 255]\n}\n","{\n  \"R\": [0, 0, 0, 0],\n  \"G\": [0, 1, 128, 255],\n  \"B\": [0, 222, 127, 32],\n  \"A\": [0, 0, 64, 128],\n  \"I\": [0, 1, 128, 255]\n}\n","{\n  \"R\": [0, 0, 0],\n  \"G\": [0, 0, 0],\n  \"B\": [0, 128, 255],\n  \"A\": [0, 64, 128],\n  \"I\": [0, 128, 255]\n}\n","{\n  \"R\": [0, 103, 255],\n  \"G\": [0, 126, 255],\n  \"B\": [0, 165, 255],\n  \"A\": [0, 76, 128],\n  \"I\": [0, 153, 255]\n}\n","{\n  \"R\": [0, 43, 103, 199, 216, 255],\n  \"G\": [0, 0, 37, 155, 213, 255],\n  \"B\": [0, 0, 20, 97, 201, 255],\n  \"A\": [0, 44, 48, 54, 56, 56],\n  \"I\": [0, 64, 128, 196, 240, 255]\n}\n","{\n  \"R\": [\n    0, 9, 24, 33, 40, 46, 52, 57, 62, 66, 70, 74, 78, 81, 85, 88, 91, 94, 98,\n    101, 103, 106, 109, 112, 114, 117, 119, 121, 124, 126, 128, 130, 133, 135,\n    137, 139, 141, 143, 145, 147, 149, 151, 153, 155, 157, 159, 161, 163, 164,\n    166, 168, 169, 171, 172, 174, 175, 177, 178, 180, 181, 183, 184, 186, 187,\n    189, 190, 191, 193, 194, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205,\n    206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220,\n    221, 222, 222, 223, 224, 224, 225, 226, 226, 227, 228, 228, 229, 229, 230,\n    231, 231, 232, 233, 233, 234, 234, 235, 235, 236, 236, 236, 237, 237, 237,\n    238, 238, 238, 239, 239, 239, 240, 240, 240, 241, 241, 241, 242, 242, 242,\n    243, 243, 243, 243, 243, 243, 243, 243, 244, 244, 244, 244, 244, 244, 244,\n    244, 244, 244, 244, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245,\n    245, 245, 245, 245, 245, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244,\n    244, 244, 244, 244, 244, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243,\n    243, 243, 242, 242, 242, 242, 242, 242, 242, 242, 241, 242, 242, 242, 242,\n    242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242,\n    242, 242, 242, 242, 243, 243, 244, 244, 245, 246, 246, 247, 247, 248, 249,\n    249, 250, 250, 251, 251, 252, 252, 253, 253, 254, 254, 254\n  ],\n  \"G\": [\n    42, 41, 41, 41, 40, 40, 40, 39, 39, 39, 38, 38, 37, 37, 36, 36, 35, 35, 34,\n    34, 33, 32, 32, 31, 30, 30, 30, 30, 29, 29, 29, 29, 28, 28, 28, 27, 27, 27,\n    26, 26, 26, 25, 25, 25, 24, 24, 24, 24, 24, 25, 25, 26, 27, 27, 28, 28, 29,\n    30, 30, 31, 31, 32, 33, 33, 34, 34, 35, 36, 36, 37, 38, 39, 40, 42, 43, 44,\n    45, 47, 48, 49, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 62, 63, 64, 65, 66,\n    68, 69, 71, 72, 73, 75, 76, 77, 79, 80, 81, 83, 84, 85, 87, 88, 89, 90, 92,\n    93, 94, 95, 97, 98, 100, 101, 102, 104, 105, 107, 108, 109, 111, 112, 113,\n    115, 116, 117, 119, 120, 121, 122, 124, 125, 126, 128, 129, 130, 132, 133,\n    134, 136, 137, 138, 140, 141, 142, 144, 145, 146, 147, 149, 150, 151, 153,\n    154, 155, 156, 158, 159, 160, 161, 163, 164, 165, 167, 168, 169, 170, 172,\n    173, 174, 175, 176, 178, 179, 180, 181, 183, 184, 185, 186, 187, 189, 190,\n    191, 192, 193, 194, 196, 197, 198, 199, 200, 201, 203, 204, 205, 206, 207,\n    208, 209, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223,\n    224, 225, 226, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 238,\n    239, 240, 241, 241, 242, 243, 244, 244, 245, 246, 247, 248, 248, 249, 250,\n    251, 251, 252, 253, 254, 255\n  ],\n  \"B\": [\n    167, 167, 166, 166, 166, 165, 165, 165, 164, 164, 164, 163, 163, 162, 162,\n    162, 161, 161, 161, 160, 160, 160, 159, 159, 158, 158, 157, 157, 156, 155,\n    155, 154, 154, 153, 153, 152, 151, 151, 150, 150, 149, 149, 148, 147, 147,\n    146, 146, 145, 144, 144, 143, 143, 142, 141, 141, 140, 139, 139, 138, 137,\n    137, 136, 135, 135, 134, 133, 133, 132, 131, 131, 130, 130, 129, 128, 128,\n    127, 127, 126, 125, 125, 124, 124, 123, 123, 122, 121, 121, 120, 119, 119,\n    118, 118, 117, 116, 116, 116, 115, 115, 114, 114, 113, 113, 113, 112, 112,\n    111, 111, 110, 110, 109, 109, 109, 108, 108, 107, 107, 106, 106, 106, 106,\n    106, 105, 105, 105, 105, 105, 105, 105, 104, 104, 104, 104, 104, 103, 103,\n    103, 103, 103, 102, 102, 102, 103, 103, 103, 103, 104, 104, 104, 104, 104,\n    105, 105, 105, 105, 106, 106, 106, 106, 106, 107, 107, 107, 107, 108, 108,\n    109, 110, 111, 111, 112, 113, 113, 114, 115, 115, 116, 117, 117, 118, 119,\n    120, 120, 121, 122, 122, 123, 124, 125, 126, 128, 129, 130, 131, 132, 134,\n    135, 136, 137, 138, 140, 141, 142, 143, 144, 146, 147, 148, 149, 150, 152,\n    153, 155, 157, 158, 160, 162, 163, 165, 167, 168, 170, 172, 173, 175, 177,\n    178, 180, 182, 183, 185, 187, 188, 190, 193, 196, 199, 201, 204, 207, 210,\n    212, 215, 218, 221, 224, 226, 229, 232, 235, 238, 240, 243, 246, 249, 252,\n    255\n  ],\n  \"A\": [\n    0, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,\n    64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,\n    64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,\n    64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,\n    64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,\n    64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,\n    64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,\n    64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,\n    64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,\n    64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,\n    64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,\n    64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,\n    64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,\n    64, 64, 64, 64, 64, 64, 64, 64, 64\n  ],\n  \"I\": [\n    0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n    21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39,\n    40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58,\n    59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77,\n    78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96,\n    97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112,\n    113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127,\n    128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142,\n    143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157,\n    158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172,\n    173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187,\n    188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202,\n    203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217,\n    218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232,\n    233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247,\n    248, 249, 250, 251, 252, 253, 254, 255\n  ]\n}\n","{\n  \"R\": [0, 86, 166, 255],\n  \"G\": [32, 92, 156, 233],\n  \"B\": [76, 108, 117, 69],\n  \"A\": [0, 56, 80, 88],\n  \"I\": [0, 64, 192, 255]\n}\n","{\n  \"R\": [0, 0, 0],\n  \"G\": [127, 196, 254],\n  \"B\": [255, 255, 255],\n  \"A\": [0, 64, 128],\n  \"I\": [0, 128, 255]\n}\n","{\n  \"R\": [0, 61, 122, 183, 244, 255],\n  \"G\": [0, 41, 81, 122, 163, 255],\n  \"B\": [0, 25, 51, 76, 102, 255],\n  \"A\": [0, 25, 51, 71, 102, 128],\n  \"I\": [0, 51, 102, 153, 204, 255]\n}\n","{\n  \"R\": [0, 61, 122, 183, 244, 255],\n  \"G\": [0, 41, 81, 122, 163, 203],\n  \"B\": [0, 25, 51, 76, 102, 127],\n  \"A\": [0, 25, 51, 71, 102, 128],\n  \"I\": [0, 51, 102, 153, 204, 255]\n}\n","{\n  \"min\": -643,\n  \"max\": -235,\n  \"R\": [0, 0, 0],\n  \"G\": [154, 154, 154],\n  \"B\": [179, 179, 101],\n  \"A\": [0, 32, 0],\n  \"I\": [0, 163, 255]\n}\n","{\n  \"min\": 114,\n  \"max\": 800,\n  \"R\": [0, 255, 255, 255],\n  \"G\": [0, 0, 129, 255],\n  \"B\": [0, 0, 0, 255],\n  \"A\": [0, 64, 88, 228],\n  \"I\": [0, 80, 160, 255]\n}\n","{\n  \"min\": 180,\n  \"max\": 600,\n  \"R\": [0, 0, 113, 255],\n  \"G\": [0, 0, 109, 250],\n  \"B\": [0, 0, 101, 245],\n  \"A\": [0, 0, 100, 160],\n  \"I\": [0, 1, 128, 255]\n}\n","{\n  \"min\": -10,\n  \"max\": 110,\n  \"R\": [0, 127, 255],\n  \"G\": [0, 127, 255],\n  \"B\": [0, 127, 255],\n  \"A\": [0, 48, 128],\n  \"I\": [0, 124, 255]\n}\n","{\n  \"min\": -10,\n  \"max\": 110,\n  \"R\": [0, 199, 255],\n  \"G\": [0, 127, 255],\n  \"B\": [0, 127, 255],\n  \"A\": [0, 48, 128],\n  \"I\": [0, 124, 255]\n}\n","{\n  \"min\": -80,\n  \"max\": 1000,\n  \"R\": [0, 189, 150, 150, 150, 150, 255],\n  \"G\": [0, 169, 54, 54, 54, 54, 240],\n  \"B\": [0, 153, 52, 52, 52, 52, 242],\n  \"A\": [0, 32, 64, 0, 0, 64, 64],\n  \"I\": [0, 1, 82, 92, 234, 242, 255]\n}\n","{\n  \"min\": -590,\n  \"max\": 600,\n  \"R\": [0, 241, 241, 248, 248, 178, 178, 232, 255, 255, 255],\n  \"G\": [0, 156, 156, 222, 222, 36, 36, 51, 255, 255, 255],\n  \"B\": [0, 130, 130, 169, 169, 24, 24, 37, 255, 255, 255],\n  \"A\": [0, 8, 0, 0, 0, 64, 64, 0, 0, 222, 222],\n  \"I\": [0, 2, 3, 64, 122, 142, 172, 182, 252, 253, 255]\n}\n","{\n  \"min\": 114,\n  \"max\": 302,\n  \"R\": [0, 255, 255],\n  \"G\": [0, 129, 255],\n  \"B\": [0, 0, 255],\n  \"A\": [0, 88, 228],\n  \"I\": [0, 103, 255]\n}\n","{\n  \"min\": -23,\n  \"max\": 246,\n  \"R\": [0, 44, 255, 255, 255],\n  \"G\": [0, 128, 90, 255, 255],\n  \"B\": [0, 0, 70, 0, 255],\n  \"A\": [0, 0, 82, 184, 228],\n  \"I\": [0, 64, 131, 196, 255]\n}\n","{\n  \"min\": -100,\n  \"max\": 246,\n  \"R\": [0, 128, 159, 255, 255, 255, 255],\n  \"G\": [0, 0, 56, 90, 0, 255, 255],\n  \"B\": [0, 0, 41, 70, 0, 0, 255],\n  \"A\": [0, 63, 105, 135, 167, 184, 228],\n  \"I\": [0, 100, 128, 155, 180, 209, 255]\n}\n","{\n  \"min\": -590,\n  \"max\": 600,\n  \"R\": [0, 241, 241, 248, 248, 178, 232, 255, 255],\n  \"G\": [0, 156, 156, 222, 222, 36, 51, 255, 255],\n  \"B\": [0, 130, 130, 169, 169, 24, 37, 255, 255],\n  \"A\": [0, 63, 105, 135, 167, 184, 228, 228, 228],\n  \"I\": [0, 1, 52, 127, 137, 162, 172, 252, 255]\n}\n","{\n  \"min\": 140,\n  \"max\": 1024,\n  \"R\": [0, 2, 113, 255],\n  \"G\": [0, 1, 109, 250],\n  \"B\": [0, 1, 101, 245],\n  \"A\": [0, 1, 96, 168],\n  \"I\": [0, 1, 128, 255]\n}\n","{\n  \"min\": -923,\n  \"max\": 679,\n  \"R\": [0, 0, 0, 0, 0, 255, 255, 255],\n  \"G\": [154, 154, 154, 154, 0, 0, 254, 255],\n  \"B\": [179, 179, 179, 179, 0, 0, 0, 255],\n  \"A\": [0, 3, 8, 0, 0, 10, 15, 20],\n  \"I\": [0, 30, 62, 88, 170, 200, 232, 255]\n}\n","{\n  \"min\": -10,\n  \"max\": 110,\n  \"R\": [0, 199, 255],\n  \"G\": [0, 127, 255],\n  \"B\": [0, 127, 255],\n  \"A\": [0, 48, 128],\n  \"I\": [0, 124, 255]\n}\n","{\n  \"min\": -600,\n  \"max\": 100,\n  \"R\": [0, 134, 255],\n  \"G\": [0, 109, 250],\n  \"B\": [0, 101, 245],\n  \"A\": [0, 60, 148],\n  \"I\": [0, 128, 255]\n}\n","{\n  \"min\": 114,\n  \"max\": 246,\n  \"R\": [0, 255, 255],\n  \"G\": [0, 128, 255],\n  \"B\": [0, 128, 255],\n  \"A\": [0, 64, 96],\n  \"I\": [0, 87, 255]\n}\n","{\n  \"min\": 50,\n  \"max\": 1000,\n  \"R\": [98, 210, 169, 128, 255],\n  \"G\": [94, 26, 77, 128, 255],\n  \"B\": [45, 21, 74, 128, 255],\n  \"A\": [0, 25, 0, 4, 168],\n  \"I\": [0, 41, 87, 154, 255]\n}\n","{\n  \"R\": [\n    0, 13, 21, 26, 27, 25, 22, 21, 22, 28, 39, 54, 75, 98, 124, 148, 171, 189,\n    202, 210, 213, 211, 206, 200, 195, 193, 195, 201, 211, 225, 240, 255\n  ],\n  \"G\": [\n    0, 5, 11, 20, 31, 44, 58, 72, 86, 99, 109, 116, 120, 122, 122, 122, 121,\n    121, 124, 129, 137, 147, 161, 175, 190, 205, 218, 229, 238, 245, 251, 255\n  ],\n  \"B\": [\n    0, 14, 30, 46, 61, 71, 77, 78, 75, 68, 60, 52, 48, 47, 53, 65, 83, 105, 131,\n    157, 183, 205, 222, 235, 241, 243, 242, 240, 239, 240, 245, 255\n  ],\n  \"A\": [\n    0, 4, 8, 12, 17, 21, 25, 29, 33, 37, 41, 45, 50, 54, 58, 62, 66, 70, 74, 78,\n    83, 87, 91, 95, 99, 103, 107, 111, 116, 120, 124, 128\n  ],\n  \"I\": [\n    0, 8, 16, 25, 33, 41, 49, 58, 66, 74, 82, 90, 99, 107, 115, 123, 132, 140,\n    148, 156, 165, 173, 181, 189, 197, 206, 214, 222, 230, 239, 247, 255\n  ]\n}\n","{\n  \"R\": [0, 10, 136, 255],\n  \"G\": [0, 39, 220, 255],\n  \"B\": [0, 223, 253, 255],\n  \"A\": [0, 48, 64, 70],\n  \"I\": [0, 92, 192, 255]\n}\n","{\n  \"R\": [\n    0, 245, 205, 120, 196, 220, 230, 0, 122, 236, 12, 204, 42, 119, 220, 103,\n    60, 255, 165, 160, 0, 245, 205, 120, 196, 220, 230, 0, 122, 236, 13, 220,\n    103, 255, 165, 160, 0, 120, 200, 255, 255, 164, 164, 164, 234, 0, 0, 0, 0, 0\n  ],\n  \"G\": [\n    0, 245, 62, 18, 58, 248, 148, 118, 186, 13, 48, 182, 204, 159, 216, 255, 60,\n    165, 42, 32, 200, 245, 62, 18, 58, 248, 148, 118, 186, 13, 48, 216, 255,\n    165, 42, 32, 200, 190, 70, 148, 148, 108, 108, 108, 169, 0, 0, 0, 0, 0\n  ],\n  \"B\": [\n    0, 245, 78, 134, 250, 164, 34, 14, 220, 176, 255, 142, 164, 176, 20, 255,\n    60, 0, 42, 240, 200, 245, 78, 134, 250, 164, 34, 14, 220, 176, 255, 20, 255,\n    0, 42, 240, 221, 150, 255, 10, 10, 226, 226, 226, 30, 64, 112, 160, 208, 255\n  ],\n  \"A\": [\n    0, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,\n    64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,\n    64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64\n  ],\n  \"I\": [\n    0, 2, 3, 4, 5, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 24, 26, 28, 30, 31,\n    41, 42, 43, 44, 46, 47, 49, 50, 51, 52, 53, 54, 58, 60, 62, 63, 72, 77, 78,\n    79, 80, 81, 82, 85, 251, 252, 253, 254, 255\n  ]\n}\n","{\n  \"R\": [0, 0, 128, 255, 255],\n  \"G\": [0, 128, 0, 128, 255],\n  \"B\": [0, 125, 255, 0, 255],\n  \"A\": [0, 32, 64, 96, 128],\n  \"I\": [0, 63, 128, 192, 255]\n}\n","{\n  \"R\": [0, 142, 227, 255],\n  \"G\": [0, 85, 170, 255],\n  \"B\": [0, 14, 76, 255],\n  \"A\": [0, 42, 84, 128],\n  \"I\": [0, 85, 170, 255]\n}\n","{\n  \"R\": [0, 255],\n  \"G\": [0, 255],\n  \"B\": [0, 255],\n  \"A\": [0, 128],\n  \"I\": [0, 255]\n}\n","{\n  \"R\": [0, 0, 0],\n  \"G\": [0, 128, 255],\n  \"B\": [0, 0, 0],\n  \"A\": [0, 64, 128],\n  \"I\": [0, 128, 255]\n}\n","{\n  \"R\": [0, 0, 0],\n  \"G\": [72, 72, 255],\n  \"B\": [0, 255, 255],\n  \"A\": [0, 64, 128],\n  \"I\": [0, 88, 255]\n}\n","{\n  \"R\": [0, 255, 255],\n  \"G\": [72, 88, 255],\n  \"B\": [0, 0, 0],\n  \"A\": [0, 64, 128],\n  \"I\": [0, 88, 255]\n}\n","{\n  \"R\": [0, 255, 255, 255],\n  \"G\": [0, 0, 126, 255],\n  \"B\": [0, 0, 0, 255],\n  \"A\": [0, 64, 96, 128],\n  \"I\": [0, 128, 191, 255]\n}\n","{\n  \"R\": [3, 255, 255, 255],\n  \"G\": [0, 0, 255, 255],\n  \"B\": [0, 0, 0, 255],\n  \"A\": [0, 48, 96, 128],\n  \"I\": [0, 95, 191, 255]\n}\n","{\n  \"R\": [255, 255, 0, 0, 0, 255, 255],\n  \"G\": [0, 255, 255, 255, 0, 0, 0],\n  \"B\": [0, 0, 0, 255, 255, 255, 0],\n  \"A\": [0, 14, 28, 43, 57, 71, 85],\n  \"I\": [0, 43, 85, 128, 170, 213, 255]\n}\n","{\n  \"R\": [0, 120, 237, 240],\n  \"G\": [0, 28, 105, 249],\n  \"B\": [4, 109, 37, 33],\n  \"A\": [0, 56, 80, 88],\n  \"I\": [0, 64, 192, 255]\n}\n","{\n  \"R\": [0, 0, 127, 255, 127],\n  \"G\": [0, 127, 255, 127, 0],\n  \"B\": [127, 255, 127, 0, 0],\n  \"A\": [0, 32, 64, 96, 128],\n  \"I\": [0, 63, 128, 192, 255]\n}\n","{\n  \"R\": [94, 50, 90, 152, 215, 238, 249, 254, 252, 241, 209, 158],\n  \"G\": [79, 131, 186, 214, 240, 244, 237, 210, 157, 100, 57, 1],\n  \"B\": [162, 189, 167, 164, 155, 169, 168, 123, 86, 68, 79, 66],\n  \"A\": [0, 12, 23, 35, 47, 58, 70, 81, 93, 105, 116, 128],\n  \"I\": [0, 23, 46, 70, 93, 116, 139, 162, 185, 209, 232, 255]\n}\n","{\n  \"R\": [0, 148, 183, 223, 247, 252],\n  \"G\": [0, 44, 55, 74, 112, 253],\n  \"B\": [4, 128, 121, 104, 92, 191],\n  \"A\": [0, 44, 53, 64, 75, 107],\n  \"I\": [0, 107, 128, 154, 179, 255]\n}\n","{\n  \"R\": [11, 59, 55, 222],\n  \"G\": [4, 45, 165, 245],\n  \"B\": [5, 91, 172, 229],\n  \"A\": [0, 23, 70, 107],\n  \"I\": [0, 56, 167, 255]\n}\n","{\n  \"R\": [0, 85, 0, 0, 0, 0, 0, 0, 85, 255, 255, 255, 172],\n  \"G\": [0, 0, 0, 0, 85, 170, 255, 255, 255, 255, 85, 0, 0],\n  \"B\": [0, 170, 85, 255, 255, 170, 170, 0, 85, 0, 0, 0, 0],\n  \"A\": [0, 5, 10, 21, 26, 32, 37, 42, 48, 53, 64, 72, 85],\n  \"I\": [0, 15, 31, 63, 79, 95, 111, 127, 143, 159, 191, 217, 255]\n}\n","{\n  \"R\": [13, 156, 237, 240],\n  \"G\": [8, 23, 121, 249],\n  \"B\": [135, 158, 83, 33],\n  \"A\": [0, 56, 80, 88],\n  \"I\": [0, 64, 192, 255]\n}\n","{\n  \"R\": [\n    208, 71, 33, 192, 32, 195, 208, 173, 233, 202, 25, 210, 145, 89, 87, 245,\n    246, 38, 3, 25, 57, 167, 245, 86, 227, 208, 81, 64, 90, 199, 140, 48, 212,\n    180, 70, 120, 9, 192, 245, 177, 65, 157, 9, 193, 100, 181, 125, 145, 62, 8,\n    108, 36, 140, 237, 242, 248, 161, 189, 41, 114, 65, 121, 97, 50, 238, 149,\n    44, 214, 124, 167, 40, 167, 127, 178, 231, 30, 173, 244, 193, 203, 204, 238,\n    139, 135, 71, 234, 234, 217, 66, 14, 129, 19, 97, 165, 112, 244, 35, 73,\n    192, 12, 149, 71, 33, 192, 32, 195, 208, 173, 233, 202, 25, 210, 145, 89,\n    87, 245, 246, 38, 3, 25, 57, 167, 245, 86, 227, 208, 81, 64, 90, 199, 140,\n    48, 212, 180, 70, 120, 9, 192, 245, 177, 65, 157, 9, 193, 100, 181, 125,\n    145, 62, 8, 108, 36, 140, 237, 242, 248, 161, 189, 41, 114, 65, 121, 97, 50,\n    238, 149, 44, 214, 124, 167, 40, 167, 127, 178, 231, 30, 173, 244, 193, 203,\n    204, 238, 139, 135, 71, 234, 234, 217, 66, 14, 129, 19, 97, 165, 112, 244,\n    35, 73, 192, 12, 149, 71, 33, 192, 32, 195, 208, 173, 233, 202, 25, 210,\n    145, 89, 87, 245, 246, 38, 3, 25, 57, 167, 245, 86, 227, 208, 81, 64, 90,\n    199, 140, 48, 212, 180, 70, 120, 9, 192, 245, 177, 65, 157, 9, 193, 100,\n    181, 125, 145, 62, 8, 108, 36, 140, 237, 242, 248\n  ],\n  \"G\": [\n    182, 46, 78, 199, 79, 89, 41, 208, 135, 20, 154, 35, 21, 43, 230, 113, 191,\n    147, 208, 37, 28, 27, 86, 203, 25, 209, 148, 187, 139, 111, 48, 102, 76,\n    110, 106, 130, 37, 160, 34, 222, 90, 165, 245, 222, 102, 47, 19, 130, 4,\n    232, 137, 211, 240, 11, 140, 21, 42, 22, 241, 61, 99, 115, 199, 166, 114,\n    190, 204, 60, 233, 66, 115, 230, 125, 103, 203, 125, 13, 176, 94, 131, 39,\n    198, 167, 124, 67, 175, 254, 1, 15, 198, 62, 237, 159, 31, 218, 58, 244, 47,\n    61, 67, 94, 46, 78, 199, 79, 89, 41, 208, 135, 20, 154, 35, 21, 43, 230,\n    113, 191, 147, 208, 37, 28, 27, 86, 203, 25, 209, 148, 187, 139, 111, 48,\n    102, 76, 110, 106, 130, 37, 160, 34, 222, 90, 165, 245, 222, 102, 47, 19,\n    130, 4, 232, 137, 211, 240, 11, 140, 21, 42, 22, 241, 61, 99, 115, 199, 166,\n    114, 190, 204, 60, 233, 66, 115, 230, 125, 103, 203, 125, 13, 176, 94, 131,\n    39, 198, 167, 124, 67, 175, 254, 1, 15, 198, 62, 237, 159, 31, 218, 58, 244,\n    47, 61, 67, 94, 46, 78, 199, 79, 89, 41, 208, 135, 20, 154, 35, 21, 43, 230,\n    113, 191, 147, 208, 37, 28, 27, 86, 203, 25, 209, 148, 187, 139, 111, 48,\n    102, 76, 110, 106, 130, 37, 160, 34, 222, 90, 165, 245, 222, 102, 47, 19,\n    130, 4, 232, 137, 211, 240, 11, 140, 21\n  ],\n  \"B\": [\n    191, 154, 43, 10, 207, 204, 164, 231, 136, 58, 239, 30, 147, 230, 101, 111,\n    150, 35, 128, 57, 252, 79, 173, 120, 25, 126, 81, 85, 8, 7, 122, 237, 190,\n    152, 246, 182, 130, 219, 67, 76, 167, 178, 235, 250, 28, 61, 186, 250, 199,\n    67, 58, 50, 86, 182, 108, 77, 89, 112, 59, 125, 226, 50, 205, 227, 125, 128,\n    104, 27, 59, 66, 53, 133, 159, 203, 97, 125, 139, 159, 158, 7, 215, 47, 140,\n    226, 223, 231, 44, 110, 184, 61, 233, 47, 67, 148, 22, 120, 173, 156, 117,\n    181, 94, 154, 43, 10, 207, 204, 164, 231, 136, 58, 239, 30, 147, 230, 101,\n    111, 150, 35, 128, 57, 252, 79, 173, 120, 25, 126, 81, 85, 8, 7, 122, 237,\n    190, 152, 246, 182, 130, 219, 67, 76, 167, 178, 235, 250, 28, 61, 186, 250,\n    199, 67, 58, 50, 86, 182, 108, 77, 89, 112, 59, 125, 226, 50, 205, 227, 125,\n    128, 104, 27, 59, 66, 53, 133, 159, 203, 97, 125, 139, 159, 158, 7, 215, 47,\n    140, 226, 223, 231, 44, 110, 184, 61, 233, 47, 67, 148, 22, 120, 173, 156,\n    117, 181, 94, 154, 43, 10, 207, 204, 164, 231, 136, 58, 239, 30, 147, 230,\n    101, 111, 150, 35, 128, 57, 252, 79, 173, 120, 25, 126, 81, 85, 8, 7, 122,\n    237, 190, 152, 246, 182, 130, 219, 67, 76, 167, 178, 235, 250, 28, 61, 186,\n    250, 199, 67, 58, 50, 86, 182, 108, 77\n  ],\n  \"A\": [\n    0, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,\n    64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,\n    64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,\n    64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,\n    64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,\n    64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,\n    64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,\n    64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,\n    64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,\n    64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,\n    64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,\n    64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,\n    64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,\n    64, 64, 64, 64, 64, 64, 64, 64, 64\n  ],\n  \"I\": [\n    0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n    21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39,\n    40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58,\n    59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77,\n    78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96,\n    97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112,\n    113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127,\n    128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142,\n    143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157,\n    158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172,\n    173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187,\n    188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202,\n    203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217,\n    218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232,\n    233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247,\n    248, 249, 250, 251, 252, 253, 254, 255\n  ]\n}\n","{\n  \"R\": [0, 128, 255],\n  \"G\": [0, 0, 0],\n  \"B\": [0, 0, 0],\n  \"A\": [0, 64, 128],\n  \"I\": [0, 128, 255]\n}\n","{\n  \"R\": [192, 224, 255],\n  \"G\": [1, 128, 255],\n  \"B\": [0, 0, 0],\n  \"A\": [0, 64, 128],\n  \"I\": [0, 128, 255]\n}\n","{\n  \"R\": [3, 112, 144, 188, 236, 246, 255],\n  \"G\": [5, 31, 29, 22, 76, 158, 250],\n  \"B\": [26, 87, 91, 86, 62, 117, 235],\n  \"A\": [0, 30, 38, 49, 67, 85, 107],\n  \"I\": [0, 73, 92, 118, 160, 205, 255]\n}\n","{\n  \"R\": [1, 240, 255],\n  \"G\": [1, 128, 255],\n  \"B\": [1, 128, 255],\n  \"A\": [0, 76, 128],\n  \"I\": [0, 153, 255]\n}\n","{\n  \"R\": [48, 48, 64, 70, 65, 25, 132, 195, 244, 254, 218, 122],\n  \"G\": [18, 18, 64, 107, 150, 226, 255, 241, 199, 158, 57, 4],\n  \"B\": [59, 59, 162, 227, 255, 187, 81, 52, 58, 47, 7, 3],\n  \"A\": [0, 22, 26, 30, 34, 43, 52, 57, 63, 67, 77, 86],\n  \"I\": [0, 1, 16, 32, 49, 83, 118, 140, 164, 181, 219, 255]\n}\n","{\n  \"R\": [0, 128, 255],\n  \"G\": [0, 0, 0],\n  \"B\": [0, 128, 255],\n  \"A\": [0, 64, 128],\n  \"I\": [0, 128, 255]\n}\n","{\n  \"R\": [68, 49, 53, 253],\n  \"G\": [1, 104, 183, 231],\n  \"B\": [84, 142, 121, 37],\n  \"A\": [0, 56, 80, 88],\n  \"I\": [0, 64, 192, 255]\n}\n","{\n  \"R\": [255, 255, 255],\n  \"G\": [127, 196, 254],\n  \"B\": [0, 0, 0],\n  \"A\": [0, 64, 128],\n  \"I\": [0, 128, 255]\n}\n","{\n  \"R\": [0, 0, 0],\n  \"G\": [0, 128, 255],\n  \"B\": [255, 196, 128],\n  \"A\": [0, 64, 128],\n  \"I\": [0, 128, 255]\n}\n","{\n  \"R\": [3, 64, 0, 0, 255, 255, 255],\n  \"G\": [0, 0, 0, 255, 255, 192, 3],\n  \"B\": [0, 32, 48, 56, 64, 96, 128],\n  \"A\": [0, 8, 16, 24, 32, 52, 80],\n  \"I\": [0, 32, 64, 96, 160, 192, 255]\n}\n","{\n  \"min\": 0,\n  \"max\": 0,\n  \"R\": [0, 37],\n  \"G\": [242, 0],\n  \"B\": [255, 255],\n  \"A\": [0, 64],\n  \"I\": [0, 255]\n}\n","{\n  \"R\": [255, 255],\n  \"G\": [255, 11],\n  \"B\": [0, 0],\n  \"A\": [0, 64],\n  \"I\": [0, 255]\n}\n","{\n  \"min\": 0,\n  \"max\": 0,\n  \"R\": [\n    65, 10, 223, 120, 216, 207, 251, 93, 252, 217, 21, 253, 131, 165, 173, 143,\n    144, 217, 86, 89, 63, 254, 172, 1, 142, 107, 42, 78, 221, 8, 222, 71, 127,\n    126, 167, 33, 104, 2, 208, 216, 0, 251, 7, 105, 2, 101, 248, 190, 253, 62,\n    255, 224, 166, 37, 110, 138, 45, 34, 6, 37, 69, 201, 43, 122, 199, 37, 173,\n    194, 103, 211, 75, 159, 96, 4, 239, 98, 110, 193, 253, 166, 40, 255, 48,\n    130, 140, 243, 101, 9, 177, 220, 133, 32, 4, 81, 48, 48, 210, 109, 60, 132,\n    1, 119, 1, 159, 247, 33, 212, 187, 253, 144, 196, 254, 168, 79, 64, 196, 39,\n    97, 73, 173, 104, 216, 217, 43, 101, 119, 254, 5, 237, 103, 203, 122, 57,\n    87, 251, 164, 19, 75, 200, 2, 252, 150, 66, 0, 255, 157, 23, 254, 55, 16,\n    240, 161, 69, 253, 207, 195, 5, 60, 255, 251, 200, 217, 134, 123, 253, 180,\n    27, 246, 130, 136, 250, 232, 4, 125, 140, 22, 253, 255, 13, 180, 123, 61,\n    254, 111, 10, 185, 76, 192, 255, 223, 186, 61, 198, 5, 172, 13, 83, 172,\n    171, 6, 23, 73, 134, 133, 109, 61, 213, 55, 57, 132, 36, 209, 2, 144, 1,\n    253, 68, 155, 3, 160, 2, 77, 121, 70, 67, 176, 223, 131, 4, 162, 232, 255,\n    150, 94, 235, 191, 207, 10, 246, 0, 225, 4, 209, 116, 57, 112, 172, 253, 1,\n    6, 92, 227, 73, 62, 135, 223\n  ],\n  \"G\": [\n    162, 50, 112, 245, 4, 124, 176, 243, 56, 125, 183, 139, 182, 68, 189, 4,\n    225, 10, 20, 223, 7, 46, 31, 193, 225, 250, 219, 41, 2, 100, 83, 181, 34,\n    150, 72, 223, 168, 248, 80, 253, 7, 117, 214, 2, 248, 10, 3, 59, 179, 160,\n    90, 244, 146, 4, 207, 4, 125, 255, 96, 100, 1, 208, 130, 51, 116, 181, 236,\n    53, 244, 5, 165, 28, 181, 86, 96, 42, 254, 1, 134, 194, 214, 92, 41, 204,\n    137, 86, 207, 3, 143, 3, 100, 239, 164, 94, 65, 251, 131, 244, 173, 57, 143,\n    107, 217, 53, 210, 0, 148, 250, 45, 198, 81, 40, 61, 218, 252, 88, 171, 0,\n    248, 24, 248, 4, 41, 100, 187, 46, 208, 145, 43, 168, 121, 46, 175, 250,\n    125, 107, 233, 112, 207, 231, 174, 215, 53, 9, 43, 153, 52, 124, 128, 65,\n    210, 147, 255, 147, 63, 200, 148, 254, 0, 179, 241, 42, 239, 2, 230, 8, 82,\n    135, 87, 16, 3, 87, 86, 151, 254, 8, 255, 86, 53, 19, 7, 192, 171, 201, 253,\n    247, 197, 103, 251, 126, 0, 149, 54, 183, 61, 126, 79, 113, 10, 103, 184,\n    75, 11, 195, 222, 136, 149, 131, 8, 99, 240, 177, 252, 255, 198, 16, 7, 68,\n    178, 66, 191, 150, 73, 26, 211, 109, 78, 209, 240, 254, 1, 166, 247, 131, 2,\n    0, 167, 127, 133, 10, 43, 99, 235, 3, 214, 142, 176, 82, 132, 38, 10, 249,\n    255, 215, 44, 81\n  ],\n  \"B\": [\n    176, 182, 248, 37, 117, 35, 96, 69, 32, 152, 108, 20, 237, 250, 2, 89, 141,\n    216, 111, 251, 211, 149, 10, 44, 214, 103, 31, 251, 3, 32, 252, 246, 97, 1,\n    219, 167, 197, 4, 36, 116, 206, 118, 106, 43, 205, 204, 114, 69, 127, 205,\n    87, 80, 41, 251, 145, 204, 253, 161, 247, 1, 149, 9, 43, 253, 97, 72, 136,\n    161, 171, 181, 26, 255, 108, 80, 218, 214, 231, 255, 84, 31, 109, 4, 218, 3,\n    217, 36, 68, 85, 241, 39, 221, 2, 240, 2, 173, 42, 206, 5, 110, 46, 103, 27,\n    212, 184, 2, 207, 246, 45, 116, 72, 110, 253, 38, 105, 248, 159, 243, 81,\n    192, 93, 141, 145, 24, 157, 234, 131, 57, 178, 62, 75, 65, 176, 148, 40,\n    253, 66, 76, 240, 51, 154, 17, 251, 139, 253, 207, 9, 114, 49, 200, 254, 96,\n    73, 138, 118, 204, 102, 137, 89, 145, 161, 4, 112, 66, 234, 147, 178, 212,\n    205, 185, 11, 203, 131, 2, 250, 118, 169, 1, 185, 154, 53, 171, 197, 61,\n    175, 249, 96, 15, 254, 95, 5, 222, 75, 246, 194, 2, 61, 180, 25, 133, 165,\n    15, 233, 59, 35, 221, 140, 109, 7, 114, 255, 198, 0, 115, 168, 252, 23, 242,\n    80, 75, 142, 137, 255, 12, 182, 68, 201, 4, 111, 37, 228, 83, 248, 24, 192,\n    249, 5, 54, 223, 160, 122, 160, 114, 145, 119, 252, 31, 253, 250, 10, 214,\n    8, 47, 0, 142, 222, 70\n  ],\n  \"A\": [\n    0, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,\n    64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,\n    64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,\n    64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,\n    64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,\n    64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,\n    64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,\n    64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,\n    64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,\n    64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,\n    64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,\n    64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,\n    64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,\n    64, 64, 64, 64, 64, 64, 64, 64, 64\n  ],\n  \"I\": [\n    0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n    21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39,\n    40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58,\n    59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77,\n    78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96,\n    97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112,\n    113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127,\n    128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142,\n    143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157,\n    158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172,\n    173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187,\n    188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202,\n    203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217,\n    218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232,\n    233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247,\n    248, 249, 250, 251, 252, 253, 254, 255\n  ]\n}\n","import * as cmaps from './cmaps/index.js'\nimport { log } from './logger.js'\n\nexport type ColorMap = {\n  R: number[]\n  G: number[]\n  B: number[]\n  A: number[]\n  I: number[]\n\n  min?: number\n  max?: number\n  labels?: string[]\n}\n\nexport type LUT = {\n  lut: Uint8ClampedArray\n  min?: number\n  max?: number\n  labels?: string[]\n}\n\nexport class ColorTables {\n  gamma = 1.0\n  version = 0.1\n  cluts: Record<string, ColorMap> = {}\n\n  /**\n   * Sets cluts to alphabetically sorted cmaps\n   */\n  constructor() {\n    const cmapKeys = Object.keys(cmaps) as Array<keyof typeof cmaps>\n\n    const cmapsSorted = cmapKeys\n      .filter((k) => !k.startsWith('$')) // ignore drawing maps\n      .sort(new Intl.Collator('en').compare) // case insensitive, e.g. \"ROI_i256\" > \"actc\"\n\n    for (const key of cmapsSorted) {\n      this.cluts[key] = cmaps[key]\n    }\n  }\n\n  addColormap(key: string, cmap: ColorMap): void {\n    this.cluts[key] = cmap\n  }\n\n  colormaps(): Array<keyof typeof this.cluts> {\n    return Object.keys(this.cluts) as Array<keyof typeof this.cluts>\n  }\n\n  // for backward compatibility: prior to v0.34 \"colormaps\" used to be \"colorMaps\"\n  colorMaps(): Array<keyof typeof this.cluts> {\n    return this.colormaps()\n  }\n\n  // returns key name if it exists, otherwise returns default \"gray\"\n  colormapFromKey(name: string): ColorMap {\n    let cmap = this.cluts[name]\n    if (cmap !== undefined) {\n      return cmap\n    }\n\n    cmap = this.cluts[name.toLowerCase()]\n    if (cmap !== undefined) {\n      return cmap\n    }\n\n    if (name.length > 0) {\n      log.warn('No color map named ' + name)\n    }\n    return {\n      min: 0,\n      max: 0,\n      R: [0, 255],\n      G: [0, 255],\n      B: [0, 255],\n      A: [0, 255],\n      I: [0, 255]\n    }\n  }\n\n  // not included in public docs\n  colormap(key = '', isInvert = false): Uint8ClampedArray {\n    const cmap = this.colormapFromKey(key)\n    return this.makeLut(cmap.R, cmap.G, cmap.B, cmap.A, cmap.I, isInvert)\n  }\n\n  makeLabelLut(cm: ColorMap, alphaFill = 255): LUT {\n    if (cm.R === undefined || cm.G === undefined || cm.B === undefined) {\n      throw new Error(`Invalid colormap table: ${cm}`)\n    }\n    const nLabels = cm.R.length\n\n    // if indices are not provided, indices default to 0..(nLabels-1)\n    const idxs = cm.I ?? [...Array(nLabels).keys()]\n\n    if (nLabels !== cm.G.length || nLabels !== cm.B.length || nLabels !== idxs.length) {\n      throw new Error(`colormap does not make sense: ${cm}`)\n    }\n\n    let As = new Uint8ClampedArray(nLabels).fill(alphaFill)\n    As[0] = 0\n    if (cm.A !== undefined) {\n      As = Uint8ClampedArray.from(cm.A)\n    }\n\n    const mnIdx = Math.min(...idxs)\n    const mxIdx = Math.max(...idxs)\n\n    // n.b. number of input labels can be sparse: I:[0,3,4] output is dense [0,1,2,3,4]\n    const nLabelsDense = mxIdx - mnIdx + 1\n    const lut = new Uint8ClampedArray(nLabelsDense * 4).fill(0)\n    for (let i = 0; i < nLabels; i++) {\n      let k = (idxs[i] - mnIdx) * 4\n      lut[k++] = cm.R[i] // Red\n      lut[k++] = cm.G[i] // Green\n      lut[k++] = cm.B[i] // Blue\n      lut[k++] = As[i] // Alpha\n    }\n\n    const cmap: LUT = {\n      lut,\n      min: mnIdx,\n      max: mxIdx\n    }\n    // labels are optional\n    if (cm.labels) {\n      const nL = cm.labels.length\n      if (nL === nLabelsDense) {\n        cmap.labels = cm.labels\n      } else if (nL === nLabels) {\n        cmap.labels = Array(nLabelsDense).fill('?')\n        for (let i = 0; i < nLabels; i++) {\n          const idx = idxs[i]\n          cmap.labels[idx] = cm.labels[i]\n        }\n      }\n    }\n    return cmap\n  }\n\n  async makeLabelLutFromUrl(name: string): Promise<LUT> {\n    const response = await fetch(name)\n    const cm = await response.json()\n    return this.makeLabelLut(cm)\n  }\n\n  // not included in public docs\n  // The drawing colormap is a variant of the label colormap with precisely 256 colors\n  makeDrawLut(name: string | ColorMap): LUT {\n    let cmap: ColorMap = typeof name === 'object' ? name : cmaps[name as keyof typeof cmaps]\n\n    if (cmap === undefined) {\n      cmap = {\n        min: 0,\n        max: 0,\n        R: [0, 255, 0, 0, 255, 0, 255],\n        G: [0, 0, 255, 0, 255, 255, 0],\n        B: [0, 0, 0, 255, 0, 255, 255],\n        A: [0, 255, 255, 255, 255, 255, 255],\n        I: [0, 255]\n      }\n    }\n\n    const cm = this.makeLabelLut(cmap, 255)\n\n    if (cm.labels === undefined) {\n      cm.labels = []\n    }\n    if (cm.labels.length < 256) {\n      const j = cm.labels.length\n      for (let i = j; i < 256; i++) {\n        // make all unused slots opaque red\n        cm.labels.push(i.toString())\n      }\n    }\n\n    const lut = new Uint8ClampedArray(256 * 4)\n    let k = 0\n    for (let i = 0; i < 256; i++) {\n      lut[k++] = 255 // Red\n      lut[k++] = 0 // Green\n      lut[k++] = 0 // Blue\n      lut[k++] = 255 // Alpha\n    }\n    lut[3] = 0 // make first alpha transparent: not part of drawing\n\n    // drawings can have no more than 256 colors\n    const explicitLUTbytes = Math.min(cm.lut.length, 256 * 4)\n    if (explicitLUTbytes > 0) {\n      for (let i = 0; i < explicitLUTbytes; i++) {\n        lut[i] = cm.lut[i]\n      }\n    }\n\n    return {\n      lut,\n      labels: cm.labels\n    }\n  }\n\n  // not included in public docs\n  makeLut(\n    Rsi: number[],\n    Gsi: number[],\n    Bsi: number[],\n    Asi: number[],\n    Isi: number[],\n    isInvert: boolean\n  ): Uint8ClampedArray {\n    // create color lookup table provided arrays of reds, greens, blues, alphas and intensity indices\n    // intensity indices should be in increasing order with the first value 0 and the last 255.\n    // this.makeLut([0, 255], [0, 0], [0,0], [0,128],[0,255]); //red gradient\n    const nIdx = Rsi.length\n    const Rs = [...Rsi]\n    const Gs = [...Gsi]\n    const Bs = [...Bsi]\n    if (!Isi) {\n      Isi = new Array(nIdx)\n      for (let i = 0; i < nIdx; i++) {\n        Isi[i] = (i / (nIdx - 1)) * 255\n      }\n    }\n    if (!Asi) {\n      Asi = new Array(nIdx).fill(64)\n      Asi[0] = 0\n    }\n    let As = Uint8ClampedArray.from(Asi)\n    let Is = Uint8ClampedArray.from(Isi)\n    if (isInvert) {\n      for (let i = 0; i < nIdx; i++) {\n        Rs[i] = Rsi[nIdx - 1 - i]\n        Gs[i] = Gsi[nIdx - 1 - i]\n        Bs[i] = Bsi[nIdx - 1 - i]\n        As[i] = 255 - Asi[nIdx - 1 - i]\n        Is[i] = 255 - Isi[nIdx - 1 - i]\n      }\n    }\n    const lut = new Uint8ClampedArray(256 * 4)\n    if (typeof Is === 'undefined') {\n      Is = new Uint8ClampedArray(nIdx).fill(0)\n      for (let i = 0; i < nIdx; i++) {\n        Is[i] = Math.round((i * 255.0) / (nIdx - 1))\n      }\n    }\n    if (typeof As === 'undefined') {\n      As = new Uint8ClampedArray(nIdx).fill(64)\n      As[0] = 0\n    }\n    for (let i = 0; i < nIdx - 1; i++) {\n      const idxLo = Is[i]\n      let idxHi = Is[i + 1]\n      if (i === 0 && idxLo !== 0) {\n        log.warn('colormap issue: indices expected to start with 0 not ', idxLo)\n      }\n      if (i === Is.length - 2 && idxHi !== 255) {\n        log.warn('padding colormap: indices expected end with 255 not ', idxHi)\n        idxHi = 255\n      }\n      const idxRng = idxHi - idxLo\n      let k = idxLo * 4\n      for (let j = idxLo; j <= idxHi; j++) {\n        const f = (j - idxLo) / idxRng\n        lut[k++] = Rs[i] + f * (Rs[i + 1] - Rs[i]) // Red\n        lut[k++] = Gs[i] + f * (Gs[i + 1] - Gs[i]) // Green\n        lut[k++] = Bs[i] + f * (Bs[i + 1] - Bs[i]) // Blue\n        lut[k++] = As[i] + f * (As[i + 1] - As[i]) // Alpha\n      }\n    }\n    if (this.gamma === 1.0) {\n      return lut\n    }\n    for (let i = 0; i < 255 * 4; i++) {\n      if (i % 4 === 3) {\n        continue\n      } // gamma changes RGB, not Alpha\n      lut[i] = Math.pow(lut[i] / 255, 1 / this.gamma) * 255\n    }\n    return lut\n  }\n}\n\nexport const cmapper = new ColorTables()\n","import { vec3 } from 'gl-matrix'\nimport { gzipSync } from 'fflate/browser'\n\ntype Extents = {\n  mxDx: number\n  extentsMin: number | number[]\n  extentsMax: number | number[]\n}\n\n/**\n * Utilities class for common mesh functions\n */\nexport class NVMeshUtilities {\n  static getClusterBoundaryU8(u8: Uint8Array, faces: number[] | Uint32Array): boolean[] {\n    // assume all vertices are not near a border\n    const border = new Array(u8.length).fill(false)\n    const binary = new Array(u8.length).fill(false)\n    for (let i = 0; i < u8.length; i++) {\n      if (u8[i] > 0) {\n        binary[i] = true\n      }\n    }\n    const nTri = faces.length / 3\n    let j = 0\n    // interior: a triangle where all three vertices are the same color\n    // else, all three vertices are on a border\n    for (let i = 0; i < nTri; i++) {\n      const v0 = faces[j]\n      const v1 = faces[j + 1]\n      const v2 = faces[j + 2]\n      j += 3\n      if (binary[v0] === binary[v1] && binary[v0] === binary[v2] && binary[v1] === binary[v2]) {\n        continue\n      }\n      border[v0] = true\n      border[v1] = true\n      border[v2] = true\n    }\n    return border\n  }\n\n  static createMZ3(vertices: Float32Array, indices: Uint32Array, compress: boolean = false): ArrayBuffer {\n    // generate binary MZ3 format mesh\n    // n.b. small, precise and small but support is not widespread\n    // n.b. result can be compressed with gzip\n    // https://github.com/neurolabusc/surf-ice/tree/master/mz3\n    const magic = 23117\n    const attr = 3\n    const nface = indices.length / 3\n    const nvert = vertices.length / 3\n    const nskip = 0\n    // Calculate buffer size\n    const headerSize = 16\n    const indexSize = nface * 3 * 4 // Uint32Array\n    const vertexSize = nvert * 3 * 4 // Float32Array\n    const totalSize = headerSize + indexSize + vertexSize\n    const buffer = new ArrayBuffer(totalSize)\n    const writer = new DataView(buffer)\n    // Write header\n    writer.setUint16(0, magic, true)\n    writer.setUint16(2, attr, true)\n    writer.setUint32(4, nface, true)\n    writer.setUint32(8, nvert, true)\n    writer.setUint32(12, nskip, true)\n    // Write indices\n    let offset = headerSize\n    new Uint32Array(buffer, offset, indices.length).set(indices)\n    offset += indexSize\n    // Write vertices\n    new Float32Array(buffer, offset, vertices.length).set(vertices)\n    if (compress) {\n      return gzipSync(new Uint8Array(buffer))\n    }\n    return buffer\n  }\n\n  static createOBJ(vertices: Float32Array, indices: Uint32Array): ArrayBuffer {\n    // generate binary OBJ format mesh\n    // n.b. widespread support, but large and slow due to ASCII\n    // https://en.wikipedia.org/wiki/Wavefront_.obj_file\n    let objContent = ''\n    // Add vertices to OBJ content\n    for (let i = 0; i < vertices.length; i += 3) {\n      objContent += `v ${vertices[i]} ${vertices[i + 1]} ${vertices[i + 2]}\\n`\n    }\n    // Add faces to OBJ content (OBJ indices start at 1, not 0)\n    for (let i = 0; i < indices.length; i += 3) {\n      objContent += `f ${indices[i] + 1} ${indices[i + 1] + 1} ${indices[i + 2] + 1}\\n`\n    }\n    // Encode the OBJ content as an ArrayBuffer\n    const encoder = new TextEncoder()\n    const arrayBuffer = encoder.encode(objContent).buffer\n    return arrayBuffer\n  }\n\n  static createSTL(vertices: Float32Array, indices: Uint32Array): ArrayBuffer {\n    // generate binary STL format mesh\n    // n.b. inefficient and slow as vertices are not reused\n    // https://en.wikipedia.org/wiki/STL_(file_format)#Binary\n    const numTriangles = indices.length / 3\n    const bufferLength = 84 + numTriangles * 50\n    const arrayBuffer = new ArrayBuffer(bufferLength)\n    const dataView = new DataView(arrayBuffer)\n    // Write header (80 bytes)\n    for (let i = 0; i < 80; i++) {\n      dataView.setUint8(i, 0)\n    }\n    // Write number of triangles (4 bytes)\n    dataView.setUint32(80, numTriangles, true)\n    let offset = 84\n    for (let i = 0; i < indices.length; i += 3) {\n      const i0 = indices[i] * 3\n      const i1 = indices[i + 1] * 3\n      const i2 = indices[i + 2] * 3\n      // Normal vector (12 bytes, set to zero)\n      dataView.setFloat32(offset, 0, true) // Normal X\n      dataView.setFloat32(offset + 4, 0, true) // Normal Y\n      dataView.setFloat32(offset + 8, 0, true) // Normal Z\n      offset += 12\n      // Vertex 1 (12 bytes)\n      dataView.setFloat32(offset, vertices[i0], true) // Vertex 1 X\n      dataView.setFloat32(offset + 4, vertices[i0 + 1], true) // Vertex 1 Y\n      dataView.setFloat32(offset + 8, vertices[i0 + 2], true) // Vertex 1 Z\n      offset += 12\n      // Vertex 2 (12 bytes)\n      dataView.setFloat32(offset, vertices[i1], true) // Vertex 2 X\n      dataView.setFloat32(offset + 4, vertices[i1 + 1], true) // Vertex 2 Y\n      dataView.setFloat32(offset + 8, vertices[i1 + 2], true) // Vertex 2 Z\n      offset += 12\n      // Vertex 3 (12 bytes)\n      dataView.setFloat32(offset, vertices[i2], true) // Vertex 3 X\n      dataView.setFloat32(offset + 4, vertices[i2 + 1], true) // Vertex 3 Y\n      dataView.setFloat32(offset + 8, vertices[i2 + 2], true) // Vertex 3 Z\n      offset += 12\n      // Attribute byte count (2 bytes, set to zero)\n      dataView.setUint16(offset, 0, true)\n      offset += 2\n    }\n    return arrayBuffer\n  }\n\n  static downloadArrayBuffer(buffer: ArrayBuffer, filename: string): void {\n    const blob = new Blob([buffer], { type: 'application/octet-stream' })\n    const url = URL.createObjectURL(blob)\n    const a = document.createElement('a')\n    a.href = url\n    a.download = filename\n    document.body.appendChild(a)\n    a.style.display = 'none'\n    a.click()\n    setTimeout(() => {\n      document.body.removeChild(a)\n      URL.revokeObjectURL(url)\n    }, 0)\n  }\n\n  static saveMesh(\n    vertices: Float32Array,\n    indices: Uint32Array,\n    filename: string = '.mz3',\n    compress: boolean = false\n  ): ArrayBuffer {\n    let buff = new ArrayBuffer(0)\n    if (/\\.obj$/i.test(filename)) {\n      buff = this.createOBJ(vertices, indices)\n    } else if (/\\.stl$/i.test(filename)) {\n      buff = this.createSTL(vertices, indices)\n    } else {\n      if (!/\\.mz3$/i.test(filename)) {\n        filename += '.mz3'\n      }\n      buff = this.createMZ3(vertices, indices, compress)\n    }\n    if (filename.length > 4) {\n      this.downloadArrayBuffer(buff, filename)\n    }\n    return buff\n  }\n\n  static getClusterBoundary(rgba8: Uint8Array, faces: number[] | Uint32Array): boolean[] {\n    const rgba32 = new Uint32Array(rgba8.buffer)\n    // assume all vertices are not near a border\n    const border = new Array(rgba32.length).fill(false)\n    const nTri = faces.length / 3\n    let j = 0\n    // interior: a triangle where all three vertices are the same color\n    // else, all three vertices are on a border\n    for (let i = 0; i < nTri; i++) {\n      const v0 = faces[j]\n      const v1 = faces[j + 1]\n      const v2 = faces[j + 2]\n      j += 3\n      if (rgba32[v0] === rgba32[v1] && rgba32[v0] === rgba32[v2] && rgba32[v1] === rgba32[v2]) {\n        continue\n      }\n      border[v0] = true\n      border[v1] = true\n      border[v2] = true\n    }\n    return border\n  }\n\n  // return spatial extremes for vertices\n  static getExtents(pts: number[] | Float32Array): Extents {\n    if ((!ArrayBuffer.isView(pts) && !Array.isArray(pts)) || pts.length < 3) {\n      return { mxDx: 0.0, extentsMin: 0.0, extentsMax: 0.0 }\n    }\n\n    // each vertex has 3 coordinates: XYZ\n    let mxDx = 0.0\n    const mn = vec3.fromValues(pts[0], pts[1], pts[2])\n    const mx = vec3.fromValues(pts[0], pts[1], pts[2])\n    for (let i = 0; i < pts.length; i += 3) {\n      const v = vec3.fromValues(pts[i], pts[i + 1], pts[i + 2])\n      mxDx = Math.max(mxDx, vec3.len(v))\n      vec3.min(mn, mn, v)\n      vec3.max(mx, mx, v)\n    }\n    const extentsMin = [mn[0], mn[1], mn[2]]\n    const extentsMax = [mx[0], mx[1], mx[2]]\n    return { mxDx, extentsMin, extentsMax }\n  }\n\n  // determine vector orthogonal to plane defined by triangle\n  // triangle winding determines front/back face\n  static generateNormals(pts: number[] | Float32Array, tris: number[] | Uint32Array): Float32Array {\n    // from https://github.com/rii-mango/Papaya\n    /*\nCopyright (c) 2012-2015, RII-UTHSCSA\nAll rights reserved.\n\nTHIS PRODUCT IS NOT FOR CLINICAL USE.\n\nRedistribution and use in source and binary forms, with or without modification, are permitted provided that the\nfollowing conditions are met:\n\n - Redistributions of source code must retain the above copyright notice, this list of conditions and the following\n   disclaimer.\n\n - Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following\n   disclaimer in the documentation and/or other materials provided with the distribution.\n\n - Neither the name of the RII-UTHSCSA nor the names of its contributors may be used to endorse or promote products\n   derived from this software without specific prior written permission.\n\n THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES,\n INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n*/\n    const normal = []\n    // nn = [],\n    let ctr\n    const normalsDataLength = pts.length\n    let qx\n    let qy\n    let qz\n    let px\n    let py\n    let pz\n    let index1\n    let index2\n    let index3\n\n    const norms = new Float32Array(normalsDataLength)\n    const numIndices = tris.length\n    for (ctr = 0; ctr < numIndices; ctr += 3) {\n      index1 = tris[ctr] * 3\n      index2 = tris[ctr + 1] * 3\n      index3 = tris[ctr + 2] * 3\n\n      const p1 = [pts[index1], pts[index1 + 1], pts[index1 + 2]]\n      const p2 = [pts[index2], pts[index2 + 1], pts[index2 + 2]]\n      const p3 = [pts[index3], pts[index3 + 1], pts[index3 + 2]]\n\n      qx = p2[0] - p1[0]\n      qy = p2[1] - p1[1]\n      qz = p2[2] - p1[2]\n      px = p3[0] - p1[0]\n      py = p3[1] - p1[1]\n      pz = p3[2] - p1[2]\n\n      normal[0] = py * qz - pz * qy\n      normal[1] = pz * qx - px * qz\n      normal[2] = px * qy - py * qx\n\n      norms[index1] += normal[0]\n      norms[index1 + 1] += normal[1]\n      norms[index1 + 2] += normal[2]\n\n      norms[index2] += normal[0]\n      norms[index2 + 1] += normal[1]\n      norms[index2 + 2] += normal[2]\n\n      norms[index3] += normal[0]\n      norms[index3 + 1] += normal[1]\n      norms[index3 + 2] += normal[2]\n    }\n    for (ctr = 0; ctr < normalsDataLength; ctr += 3) {\n      normal[0] = -1 * norms[ctr]\n      normal[1] = -1 * norms[ctr + 1]\n      normal[2] = -1 * norms[ctr + 2]\n      let len = normal[0] * normal[0] + normal[1] * normal[1] + normal[2] * normal[2]\n      if (len > 0) {\n        len = 1.0 / Math.sqrt(len)\n        normal[0] *= len\n        normal[1] *= len\n        normal[2] *= len\n      }\n      norms[ctr] = normal[0]\n      norms[ctr + 1] = normal[1]\n      norms[ctr + 2] = normal[2]\n    }\n    return norms\n  }\n}\n","import { mat4, vec4, vec3 } from 'gl-matrix'\nimport { decompressSync, unzipSync } from 'fflate/browser'\nimport { log } from './logger.js'\nimport { NVUtilities } from './nvutilities.js'\nimport { ColorMap, LUT, cmapper } from './colortables.js'\nimport { NiivueObject3D } from './niivue-object3D.js'\nimport { NVMesh, NVMeshLayer, NVMeshLayerDefaults } from './nvmesh.js'\nimport {\n  ANNOT,\n  DefaultMeshType,\n  GII,\n  // Layer,\n  MGH,\n  MZ3,\n  SmpMap,\n  TCK,\n  TRACT,\n  TRK,\n  TT,\n  TRX,\n  VTK,\n  X3D,\n  XmlTag,\n  AnyNumberArray\n} from './nvmesh-types.js'\n\nconst utiltiesLogger = log\n\n/**\n * Class to load different mesh formats\n * @ignore\n */\nexport class NVMeshLoaders {\n  // read undocumented AFNI tract.niml format streamlines\n  static readTRACT(buffer: ArrayBuffer): TRACT {\n    const len = buffer.byteLength\n    if (len < 20) {\n      throw new Error('File too small to be niml.tract: bytes = ' + len)\n    }\n    const reader = new DataView(buffer)\n    const bytes = new Uint8Array(buffer)\n    let pos = 0\n    function readStr(): string {\n      // read until right angle bracket \">\"\n      while (pos < len && bytes[pos] !== 60) {\n        pos++\n      } // start with \"<\"\n      const startPos = pos\n      while (pos < len && bytes[pos] !== 62) {\n        pos++\n      }\n      pos++ // skip EOLN\n      if (pos - startPos < 1) {\n        return ''\n      }\n      return new TextDecoder().decode(buffer.slice(startPos, pos - 1)).trim()\n    }\n\n    let line = readStr() // 1st line: signature '<network'\n    function readNumericTag(TagName: string): number {\n      // Tag 'Dim1' will return 3 for Dim1=\"3\"\n      const pos = line.indexOf(TagName)\n      if (pos < 0) {\n        return 0\n      }\n      const spos = line.indexOf('\"', pos) + 1\n      const epos = line.indexOf('\"', spos)\n      const str = line.slice(spos, epos)\n      return parseInt(str)\n    }\n    const n_tracts = readNumericTag('N_tracts=')\n    if (!line.startsWith('<network') || n_tracts < 1) {\n      log.warn('This is not a valid niml.tract file ' + line)\n    }\n    let npt = 0\n    const offsetPt0 = []\n    offsetPt0.push(npt) // 1st streamline starts at 0\n    const pts = []\n    const bundleTags = []\n    for (let t = 0; t < n_tracts; t++) {\n      line = readStr() // <tracts ...\n      const new_tracts = readNumericTag('ni_dimen=')\n      const bundleTag = readNumericTag('Bundle_Tag=')\n      const isLittleEndian = line.includes('binary.lsbfirst')\n      for (let i = 0; i < new_tracts; i++) {\n        // let id = reader.getUint32(pos, isLittleEndian);\n        pos += 4\n        const new_pts = reader.getUint32(pos, isLittleEndian) / 3\n        pos += 4\n        for (let j = 0; j < new_pts; j++) {\n          pts.push(reader.getFloat32(pos, isLittleEndian))\n          pos += 4\n          pts.push(-reader.getFloat32(pos, isLittleEndian))\n          pos += 4\n          pts.push(reader.getFloat32(pos, isLittleEndian))\n          pos += 4\n        }\n        npt += new_pts\n        offsetPt0.push(npt)\n        bundleTags.push(bundleTag) // each streamline associated with tract\n      }\n      line = readStr() // </tracts>\n    }\n    const dps = []\n    dps.push({\n      id: 'tract',\n      vals: Float32Array.from(bundleTags)\n    })\n\n    return {\n      pts: new Float32Array(pts),\n      offsetPt0: new Uint32Array(offsetPt0),\n      dps\n    }\n  } // readTRACT()\n\n  // https://dsi-studio.labsolver.org/doc/cli_data.html\n  // https://brain.labsolver.org/hcp_trk_atlas.html\n  static readTT(buffer: ArrayBuffer): TT {\n    // Read a Matlab V4 file, n.b. does not support modern versions\n    // https://www.mathworks.com/help/pdf_doc/matlab/matfile_format.pdf\n    let offsetPt0 = new Uint32Array(0)\n    let pts = new Float32Array(0)\n    const mat = NVUtilities.readMatV4(buffer)\n    if (!('trans_to_mni' in mat)) {\n      throw new Error(\"TT format file must have 'trans_to_mni'\")\n    }\n    if (!('voxel_size' in mat)) {\n      throw new Error(\"TT format file must have 'voxel_size'\")\n    }\n    if (!('track' in mat)) {\n      throw new Error(\"TT format file must have 'track'\")\n    }\n    let trans_to_mni = mat4.create()\n    const m = mat.trans_to_mni\n    trans_to_mni = mat4.fromValues(\n      m[0],\n      m[1],\n      m[2],\n      m[3],\n      m[4],\n      m[5],\n      m[6],\n      m[7],\n      m[8],\n      m[9],\n      m[10],\n      m[11],\n      m[12],\n      m[13],\n      m[14],\n      m[15]\n    )\n    mat4.transpose(trans_to_mni, trans_to_mni)\n    // unlike TRK, TT uses voxel centers, not voxel corners\n    function parse_tt(\n      track: Float64Array | Float32Array | Uint32Array | Uint16Array | Uint8Array | Int32Array | Int16Array | Int8Array\n    ): void {\n      const dv = new DataView(track.buffer)\n      const pos = []\n      let nvert3 = 0\n      let i = 0\n      while (i < track.length) {\n        pos.push(i)\n        const newpts = dv.getUint32(i, true)\n        i = i + newpts + 13\n        nvert3 += newpts\n      }\n      offsetPt0 = new Uint32Array(pos.length + 1)\n      pts = new Float32Array(nvert3)\n      let npt = 0\n      for (let i = 0; i < pos.length; i++) {\n        offsetPt0[i] = npt / 3\n        let p = pos[i]\n        const sz = dv.getUint32(p, true) / 3\n        let x = dv.getInt32(p + 4, true)\n        let y = dv.getInt32(p + 8, true)\n        let z = dv.getInt32(p + 12, true)\n        p += 16\n        pts[npt++] = x\n        pts[npt++] = y\n        pts[npt++] = z\n        for (let j = 2; j <= sz; j++) {\n          x = x + dv.getInt8(p++)\n          y = y + dv.getInt8(p++)\n          z = z + dv.getInt8(p++)\n          pts[npt++] = x\n          pts[npt++] = y\n          pts[npt++] = z\n        }\n      } // for each streamline\n      for (let i = 0; i < npt; i++) {\n        pts[i] = pts[i] / 32.0\n      }\n      let v = 0\n      for (let i = 0; i < npt / 3; i++) {\n        const pos = vec4.fromValues(pts[v], pts[v + 1], pts[v + 2], 1)\n        vec4.transformMat4(pos, pos, trans_to_mni)\n        pts[v++] = pos[0]\n        pts[v++] = pos[1]\n        pts[v++] = pos[2]\n      }\n      offsetPt0[pos.length] = npt / 3 // solve fence post problem, offset for final streamline\n    } // parse_tt()\n    parse_tt(mat.track)\n    return {\n      pts,\n      offsetPt0\n    }\n  }\n\n  // read TRX format tractogram\n  // https://github.com/tee-ar-ex/trx-spec/blob/master/specifications.md\n  static readTRX(buffer: ArrayBuffer): TRX {\n    // Javascript does not support float16, so we convert to float32\n    // https://stackoverflow.com/questions/5678432/decompressing-half-precision-floats-in-javascript\n    function decodeFloat16(binary: number): number {\n      'use strict'\n      const exponent = (binary & 0x7c00) >> 10\n      const fraction = binary & 0x03ff\n      return (\n        (binary >> 15 ? -1 : 1) *\n        (exponent\n          ? exponent === 0x1f\n            ? fraction\n              ? NaN\n              : Infinity\n            : Math.pow(2, exponent - 15) * (1 + fraction / 0x400)\n          : 6.103515625e-5 * (fraction / 0x400))\n      )\n    } // decodeFloat16()\n    let noff = 0\n    let npt = 0\n    let pts = new Float32Array([])\n    const offsetPt0: number[] = []\n    const dpg = []\n    const dps = []\n    const dpv = []\n    let header = []\n    let isOverflowUint64 = false\n    const decompressed = unzipSync(new Uint8Array(buffer), {\n      filter(file) {\n        return file.originalSize > 0\n      }\n    })\n    const keys = Object.keys(decompressed)\n    for (let i = 0, len = keys.length; i < len; i++) {\n      const parts = keys[i].split('/')\n      const fname = parts.slice(-1)[0] // my.trx/dpv/fx.float32 -> fx.float32\n      if (fname.startsWith('.')) {\n        continue\n      }\n      const pname = parts.slice(-2)[0] // my.trx/dpv/fx.float32 -> dpv\n      const tag = fname.split('.')[0] // \"positions.3.float16 -> \"positions\"\n      // todo: should tags be censored for invalid characters: https://stackoverflow.com/questions/8676011/which-characters-are-valid-invalid-in-a-json-key-name\n      const data = decompressed[keys[i]]\n      if (fname.includes('header.json')) {\n        const jsonString = new TextDecoder().decode(data)\n        header = JSON.parse(jsonString)\n        continue\n      }\n      // next read arrays for all possible datatypes: int8/16/32/64 uint8/16/32/64 float16/32/64\n      let nval = 0\n      let vals: AnyNumberArray = []\n      if (fname.endsWith('.uint64') || fname.endsWith('.int64')) {\n        // javascript does not have 64-bit integers! read lower 32-bits\n        // note for signed int64 we only read unsigned bytes\n        // for both signed and unsigned, generate an error if any value is out of bounds\n        // one alternative might be to convert to 64-bit double that has a flintmax of 2^53.\n        nval = data.length / 8 // 8 bytes per 64bit input\n        vals = new Uint32Array(nval)\n        const u32 = new Uint32Array(data.buffer)\n        let j = 0\n        for (let i = 0; i < nval; i++) {\n          vals[i] = u32[j]\n          if (u32[j + 1] !== 0) {\n            isOverflowUint64 = true\n          }\n          j += 2\n        }\n      } else if (fname.endsWith('.uint32')) {\n        vals = new Uint32Array(data.buffer)\n      } else if (fname.endsWith('.uint16')) {\n        vals = new Uint16Array(data.buffer)\n      } else if (fname.endsWith('.uint8')) {\n        vals = new Uint8Array(data.buffer)\n      } else if (fname.endsWith('.int32')) {\n        vals = new Int32Array(data.buffer)\n      } else if (fname.endsWith('.int16')) {\n        vals = new Int16Array(data.buffer)\n      } else if (fname.endsWith('.int8')) {\n        vals = new Int8Array(data.buffer)\n      } else if (fname.endsWith('.float64')) {\n        vals = new Float64Array(data.buffer)\n      } else if (fname.endsWith('.float32')) {\n        vals = new Float32Array(data.buffer)\n      } else if (fname.endsWith('.float16')) {\n        // javascript does not have 16-bit floats! Convert to 32-bits\n        nval = data.length / 2 // 2 bytes per 16bit input\n        vals = new Float32Array(nval)\n        const u16 = new Uint16Array(data.buffer)\n        const lut = new Float32Array(65536)\n        for (let i = 0; i < 65536; i++) {\n          lut[i] = decodeFloat16(i)\n        }\n        for (let i = 0; i < nval; i++) {\n          vals[i] = lut[u16[i]]\n        }\n      } else {\n        continue\n      } // not a data array\n      nval = vals.length\n      // next: read data_per_group\n      if (pname.includes('groups')) {\n        dpg.push({\n          id: tag,\n          vals: Float32Array.from(vals.slice())\n        })\n        continue\n      }\n      // next: read data_per_vertex\n      if (pname.includes('dpv')) {\n        dpv.push({\n          id: tag,\n          vals: Float32Array.from(vals.slice())\n        })\n        continue\n      }\n      // next: read data_per_streamline\n      if (pname.includes('dps')) {\n        dps.push({\n          id: tag,\n          vals: Float32Array.from(vals.slice())\n        })\n        continue\n      }\n      // Next: read offsets: Always uint64\n      if (fname.startsWith('offsets.')) {\n        // javascript does not have 64-bit integers! read lower 32-bits\n        noff = nval // 8 bytes per 64bit input\n        // we need to solve the fence post problem, so we can not use slice\n        for (let i = 0; i < nval; i++) {\n          offsetPt0[i] = vals[i]\n        }\n      }\n      if (fname.startsWith('positions.3.')) {\n        npt = nval // 4 bytes per 32bit input\n        pts = new Float32Array(vals)\n      }\n    }\n    if (noff === 0 || npt === 0) {\n      throw new Error('Failure reading TRX format (no offsets or points).')\n    }\n    if (isOverflowUint64) {\n      // TODO use BigInt\n      throw new Error('Too many vertices: JavaScript does not support 64 bit integers')\n    }\n    offsetPt0[noff] = npt / 3 // solve fence post problem, offset for final streamline\n    return {\n      pts,\n      offsetPt0: new Uint32Array(offsetPt0),\n      dpg,\n      dps,\n      dpv,\n      header\n    }\n  } // readTRX()\n\n  // read mrtrix tsf format Track Scalar Files - these are are DPV\n  // https://mrtrix.readthedocs.io/en/dev/getting_started/image_data.html#track-scalar-file-format-tsf\n  static readTSF(buffer: ArrayBuffer, n_vert = 0): Float32Array {\n    const vals = new Float32Array(n_vert)\n    const len = buffer.byteLength\n    if (len < 20) {\n      throw new Error('File too small to be TSF: bytes = ' + len)\n    }\n    const bytes = new Uint8Array(buffer)\n    let pos = 0\n    function readStr(): string {\n      while (pos < len && bytes[pos] === 10) {\n        pos++\n      } // skip blank lines\n      const startPos = pos\n      while (pos < len && bytes[pos] !== 10) {\n        pos++\n      }\n      pos++ // skip EOLN\n      if (pos - startPos < 1) {\n        return ''\n      }\n      return new TextDecoder().decode(buffer.slice(startPos, pos - 1))\n    }\n    let line = readStr() // 1st line: signature 'mrtrix tracks'\n    if (!line.includes('mrtrix track scalars')) {\n      throw new Error('Not a valid TSF file')\n    }\n    let offset = -1 // \"file: offset\" is REQUIRED\n    while (pos < len && !line.includes('END')) {\n      line = readStr()\n      if (line.toLowerCase().startsWith('file:')) {\n        offset = parseInt(line.split(' ').pop()!)\n      }\n      if (line.toLowerCase().startsWith('datatype:') && !line.endsWith('Float32LE')) {\n        throw new Error('Only supports TSF files with Float32LE')\n      }\n    }\n    if (offset < 20) {\n      throw new Error('Not a valid TSF file (missing file offset)')\n    }\n    pos = offset\n    const reader = new DataView(buffer)\n    // read and transform vertex positions\n    let npt = 0\n    while (pos + 4 <= len && npt < n_vert) {\n      const ptx = reader.getFloat32(pos, true)\n      pos += 4\n      if (!isFinite(ptx)) {\n        // both NaN and Infinity are not finite\n        if (!isNaN(ptx)) {\n          // terminate if infinity\n          break\n        }\n      } else {\n        vals[npt++] = ptx\n      }\n    }\n    return vals\n  } // readTSF\n\n  // read mrtrix tck format streamlines\n  // https://mrtrix.readthedocs.io/en/latest/getting_started/image_data.html#tracks-file-format-tck\n  static readTCK(buffer: ArrayBuffer): TCK {\n    const len = buffer.byteLength\n    if (len < 20) {\n      throw new Error('File too small to be TCK: bytes = ' + len)\n    }\n    const bytes = new Uint8Array(buffer)\n    let pos = 0\n    function readStr(): string {\n      while (pos < len && bytes[pos] === 10) {\n        pos++\n      } // skip blank lines\n      const startPos = pos\n      while (pos < len && bytes[pos] !== 10) {\n        pos++\n      }\n      pos++ // skip EOLN\n      if (pos - startPos < 1) {\n        return ''\n      }\n      return new TextDecoder().decode(buffer.slice(startPos, pos - 1))\n    }\n    let line = readStr() // 1st line: signature 'mrtrix tracks'\n    if (!line.includes('mrtrix tracks')) {\n      throw new Error('Not a valid TCK file')\n    }\n    let offset = -1 // \"file: offset\" is REQUIRED\n    while (pos < len && !line.includes('END')) {\n      line = readStr()\n      if (line.toLowerCase().startsWith('file:')) {\n        offset = parseInt(line.split(' ').pop()!)\n      }\n    }\n    if (offset < 20) {\n      throw new Error('Not a valid TCK file (missing file offset)')\n    }\n    pos = offset\n    const reader = new DataView(buffer)\n    // read and transform vertex positions\n    let npt = 0\n    // over-provision offset array to store number of segments\n    let offsetPt0 = new Uint32Array(len / (4 * 4))\n    let noffset = 0\n    // over-provision points array to store vertex positions\n    let npt3 = 0\n    let pts = new Float32Array(len / 4)\n    offsetPt0[0] = 0 // 1st streamline starts at 0\n    while (pos + 12 < len) {\n      const ptx = reader.getFloat32(pos, true)\n      pos += 4\n      const pty = reader.getFloat32(pos, true)\n      pos += 4\n      const ptz = reader.getFloat32(pos, true)\n      pos += 4\n      if (!isFinite(ptx)) {\n        // both NaN and Infinity are not finite\n        offsetPt0[noffset++] = npt\n        if (!isNaN(ptx)) {\n          // terminate if infinity\n          break\n        }\n      } else {\n        pts[npt3++] = ptx\n        pts[npt3++] = pty\n        pts[npt3++] = ptz\n        npt++\n      }\n    }\n    // resize offset/vertex arrays that were initially over-provisioned\n    pts = pts.slice(0, npt3)\n    offsetPt0 = offsetPt0.slice(0, noffset)\n    return {\n      pts,\n      offsetPt0\n    }\n  } // readTCK()\n\n  // not included in public docs\n  // read trackvis trk format streamlines\n  // http://trackvis.org/docs/?subsect=fileformat\n  static readTRK(buffer: ArrayBuffer): TRK {\n    // https://brain.labsolver.org/hcp_trk_atlas.html\n    // https://github.com/xtk/X/tree/master/io\n    // in practice, always little endian\n    let reader = new DataView(buffer)\n    let magic = reader.getUint32(0, true) // 'TRAC'\n    if (magic !== 1128354388) {\n      // e.g. TRK.gz\n      let raw\n      if (magic === 4247762216) {\n        // e.g. TRK.zstd\n        // raw = fzstd.decompress(new Uint8Array(buffer));\n        // raw = new Uint8Array(raw);\n        throw new Error('zstd TRK decompression is not supported')\n      } else {\n        raw = decompressSync(new Uint8Array(buffer))\n      }\n      buffer = raw.buffer\n      reader = new DataView(buffer)\n      magic = reader.getUint32(0, true) // 'TRAC'\n    }\n    const vers = reader.getUint32(992, true) // 2\n    const hdr_sz = reader.getUint32(996, true) // 1000\n    if (vers > 2 || hdr_sz !== 1000 || magic !== 1128354388) {\n      throw new Error('Not a valid TRK file')\n    }\n    const n_scalars = reader.getInt16(36, true)\n    const dpv = []\n    // data_per_vertex\n    for (let i = 0; i < n_scalars; i++) {\n      const arr = new Uint8Array(buffer.slice(38 + i * 20, 58 + i * 20))\n      const str = new TextDecoder().decode(arr).split('\\0').shift()\n      dpv.push({\n        id: str!.trim(), // TODO can we guarantee this?\n        vals: [] as number[]\n      })\n    }\n    const voxel_sizeX = reader.getFloat32(12, true)\n    const voxel_sizeY = reader.getFloat32(16, true)\n    const voxel_sizeZ = reader.getFloat32(20, true)\n    const zoomMat = mat4.fromValues(\n      1 / voxel_sizeX,\n      0,\n      0,\n      -0.5,\n      0,\n      1 / voxel_sizeY,\n      0,\n      -0.5,\n      0,\n      0,\n      1 / voxel_sizeZ,\n      -0.5,\n      0,\n      0,\n      0,\n      1\n    )\n    const n_properties = reader.getInt16(238, true)\n    const dps = []\n    // data_per_streamline\n    for (let i = 0; i < n_properties; i++) {\n      const arr = new Uint8Array(buffer.slice(240 + i * 20, 260 + i * 20))\n      const str = new TextDecoder().decode(arr).split('\\0').shift()\n      dps.push({\n        id: str!.trim(), // TODO can we guarantee this?\n        vals: [] as number[]\n      })\n    }\n    const mat = mat4.create()\n    for (let i = 0; i < 16; i++) {\n      mat[i] = reader.getFloat32(440 + i * 4, true)\n    }\n    if (mat[15] === 0.0) {\n      // vox_to_ras[3][3] is 0, it means the matrix is not recorded\n      log.warn('TRK vox_to_ras not set')\n      mat4.identity(mat)\n    }\n    const vox2mmMat = mat4.create()\n    mat4.mul(vox2mmMat, zoomMat, mat)\n    let i32 = null\n    let f32 = null\n    i32 = new Int32Array(buffer.slice(hdr_sz))\n    f32 = new Float32Array(i32.buffer)\n    const ntracks = i32.length\n    if (ntracks < 1) {\n      throw new Error('Empty TRK file.')\n    }\n    // read and transform vertex positions\n    let i = 0\n    let npt = 0\n    // pre-allocate and over-provision offset array\n    let offsetPt0 = new Uint32Array(i32.length / 4)\n    let noffset = 0\n    // pre-allocate and over-provision vertex positions array\n    let pts = new Float32Array(i32.length)\n    let npt3 = 0\n    while (i < ntracks) {\n      const n_pts = i32[i]\n      i = i + 1 // read 1 32-bit integer for number of points in this streamline\n      offsetPt0[noffset++] = npt\n      for (let j = 0; j < n_pts; j++) {\n        const ptx = f32[i + 0]\n        const pty = f32[i + 1]\n        const ptz = f32[i + 2]\n        i += 3 // read 3 32-bit floats for XYZ position\n        pts[npt3++] = ptx * vox2mmMat[0] + pty * vox2mmMat[1] + ptz * vox2mmMat[2] + vox2mmMat[3]\n        pts[npt3++] = ptx * vox2mmMat[4] + pty * vox2mmMat[5] + ptz * vox2mmMat[6] + vox2mmMat[7]\n        pts[npt3++] = ptx * vox2mmMat[8] + pty * vox2mmMat[9] + ptz * vox2mmMat[10] + vox2mmMat[11]\n        if (n_scalars > 0) {\n          for (let s = 0; s < n_scalars; s++) {\n            dpv[s].vals.push(f32[i])\n            i++\n          }\n        }\n        npt++\n      } // for j: each point in streamline\n      if (n_properties > 0) {\n        for (let j = 0; j < n_properties; j++) {\n          dps[j].vals.push(f32[i])\n          i++\n        }\n      }\n    } // for each streamline: while i < n_count\n    // output uses static float32 not dynamic number[]\n    const dps32 = []\n    // data_per_streamline\n    for (let i = 0; i < dps.length; i++) {\n      dps32.push({\n        id: dps[i].id,\n        vals: Float32Array.from(dps[i].vals)\n      })\n    }\n    const dpv32 = []\n    for (let i = 0; i < dpv.length; i++) {\n      dpv32.push({\n        id: dpv[i].id,\n        vals: Float32Array.from(dpv[i].vals)\n      })\n    }\n    // add 'first index' as if one more line was added (fence post problem)\n    offsetPt0[noffset++] = npt\n    // resize offset/vertex arrays that were initially over-provisioned\n    pts = pts.slice(0, npt3)\n    offsetPt0 = offsetPt0.slice(0, noffset)\n    return {\n      pts,\n      offsetPt0,\n      dps: dps32,\n      dpv: dpv32\n    }\n  } // readTRK()\n\n  // read legacy VTK text format file\n  static readTxtVTK(buffer: ArrayBuffer): VTK {\n    const enc = new TextDecoder('utf-8')\n    const txt = enc.decode(buffer)\n    const lines = txt.split('\\n')\n    const n = lines.length\n    if (n < 7 || !lines[0].startsWith('# vtk DataFile')) {\n      throw new Error('Invalid VTK image')\n    }\n    if (!lines[2].startsWith('ASCII')) {\n      throw new Error('Not ASCII VTK mesh')\n    }\n    let pos = 3\n    while (lines[pos].length < 1) {\n      pos++\n    } // skip blank lines\n    if (!lines[pos].includes('POLYDATA')) {\n      throw new Error('Not ASCII VTK polydata')\n    }\n    pos++\n    while (lines[pos].length < 1) {\n      pos++\n    } // skip blank lines\n    if (!lines[pos].startsWith('POINTS')) {\n      throw new Error('Not VTK POINTS')\n    }\n    let items = lines[pos].trim().split(/\\s+/)\n    const nvert = parseInt(items[1]) // POINTS 10261 float\n    const nvert3 = nvert * 3\n    const positions = new Float32Array(nvert * 3)\n    let v = 0\n    while (v < nvert * 3) {\n      pos++\n      const str = lines[pos].trim()\n      const pts = str.trim().split(/\\s+/)\n      for (let i = 0; i < pts.length; i++) {\n        if (v >= nvert3) {\n          break\n        }\n        positions[v] = parseFloat(pts[i])\n        v++\n      }\n    }\n    const tris = []\n    pos++\n    while (lines[pos].length < 1) {\n      pos++\n    } // skip blank lines\n    if (lines[pos].startsWith('METADATA')) {\n      while (lines[pos].length > 1) {\n        pos++\n      } // skip until blank line\n      pos++\n    }\n    items = lines[pos].trim().split(/\\s+/)\n    pos++\n    if (items[0].includes('LINES')) {\n      const n_count = parseInt(items[1])\n      if (n_count < 1) {\n        throw new Error('Corrupted VTK ASCII')\n      }\n      let str = lines[pos].trim()\n      const offsetPt0 = []\n      let pts: number[] = []\n      if (str.startsWith('OFFSETS')) {\n        // 'new' line style https://discourse.vtk.org/t/upcoming-changes-to-vtkcellarray/2066\n        pos++\n        let c = 0\n        while (c < n_count) {\n          str = lines[pos].trim()\n          pos++\n          const items = str.trim().split(/\\s+/)\n          for (let i = 0; i < items.length; i++) {\n            offsetPt0[c] = parseInt(items[i])\n            c++\n            if (c >= n_count) {\n              break\n            }\n          } // for each line\n        } // while offset array not filled\n        pts = Array.from(positions)\n      } else {\n        // classic line style https://www.visitusers.org/index.php?title=ASCII_VTK_Files\n        let npt = 0\n        offsetPt0[0] = 0 // 1st streamline starts at 0\n        let asciiInts: number[] = []\n        let asciiIntsPos = 0\n\n        function lineToInts(): void {\n          // VTK can save one array across multiple ASCII lines\n          str = lines[pos].trim()\n          const items = str.trim().split(/\\s+/)\n          asciiInts = []\n          for (let i = 0; i < items.length; i++) {\n            asciiInts.push(parseInt(items[i]))\n          }\n          asciiIntsPos = 0\n          pos++\n        }\n\n        lineToInts()\n        for (let c = 0; c < n_count; c++) {\n          if (asciiIntsPos >= asciiInts.length) {\n            lineToInts()\n          }\n          const numPoints = asciiInts[asciiIntsPos++]\n          npt += numPoints\n          offsetPt0[c + 1] = npt\n          for (let i = 0; i < numPoints; i++) {\n            if (asciiIntsPos >= asciiInts.length) {\n              lineToInts()\n            }\n            const idx = asciiInts[asciiIntsPos++] * 3\n            pts.push(positions[idx + 0]) // X\n            pts.push(positions[idx + 1]) // Y\n            pts.push(positions[idx + 2]) // Z\n          } // for numPoints: number of segments in streamline\n        } // for n_count: number of streamlines\n      }\n      return {\n        pts: Float32Array.from(pts),\n        offsetPt0: Uint32Array.from(offsetPt0)\n      }\n    } else if (items[0].includes('TRIANGLE_STRIPS')) {\n      const nstrip = parseInt(items[1])\n      for (let i = 0; i < nstrip; i++) {\n        const str = lines[pos].trim()\n        pos++\n        const vs = str.trim().split(/\\s+/)\n        const ntri = parseInt(vs[0]) - 2 // -2 as triangle strip is creates pts - 2 faces\n        let k = 1\n        for (let t = 0; t < ntri; t++) {\n          if (t % 2) {\n            // preserve winding order\n            tris.push(parseInt(vs[k + 2]))\n            tris.push(parseInt(vs[k + 1]))\n            tris.push(parseInt(vs[k]))\n          } else {\n            tris.push(parseInt(vs[k]))\n            tris.push(parseInt(vs[k + 1]))\n            tris.push(parseInt(vs[k + 2]))\n          }\n          k += 1\n        } // for each triangle\n      } // for each strip\n    } else if (items[0].includes('POLYGONS')) {\n      const npoly = parseInt(items[1])\n      for (let i = 0; i < npoly; i++) {\n        const str = lines[pos].trim()\n        pos++\n        const vs = str.trim().split(/\\s+/)\n        const ntri = parseInt(vs[0]) - 2 // e.g. 3 for triangle\n        const fx = parseInt(vs[1])\n        let fy = parseInt(vs[2])\n        for (let t = 0; t < ntri; t++) {\n          const fz = parseInt(vs[3 + t])\n          tris.push(fx)\n          tris.push(fy)\n          tris.push(fz)\n          fy = fz\n        }\n      }\n    } else {\n      throw new Error('Unsupported ASCII VTK datatype ' + items[0])\n    }\n    const indices = new Uint32Array(tris)\n    return {\n      positions,\n      indices\n    }\n  } // readTxtVTK()\n\n  // read mesh overlay to influence vertex colors\n  static readLayer(\n    name: string = '',\n    buffer: ArrayBuffer,\n    nvmesh: NVMesh,\n    opacity = 0.5,\n    colormap = 'warm',\n    colormapNegative = 'winter',\n    useNegativeCmap = false,\n    cal_min: number | null = null,\n    cal_max: number | null = null,\n    outlineBorder = 0\n  ): NVMeshLayer | undefined {\n    const layer: NVMeshLayer = {\n      ...NVMeshLayerDefaults,\n      colormapInvert: false,\n      alphaThreshold: false,\n      isTransparentBelowCalMin: true,\n      isAdditiveBlend: false,\n      colorbarVisible: true\n    }\n    const isReadColortables = true\n    const re = /(?:\\.([^.]+))?$/\n    let ext = re.exec(name)![1] // TODO can we guarantee this?\n    ext = ext.toUpperCase()\n    if (ext === 'GZ') {\n      ext = re.exec(name.slice(0, -3))![1] // img.trk.gz -> img.trk\n      ext = ext.toUpperCase()\n    }\n    const n_vert = nvmesh.vertexCount / 3 // each vertex has XYZ component\n    if (nvmesh.offsetPt0) {\n      if (ext !== 'TSF') {\n        throw new Error('readLayer for streamlines only supports TSF files.')\n      }\n      const npt = nvmesh.pts.length / 3\n      // typescript hell commences for one liner\n      // const tag = name.split('/')!.pop()!.split('.')!.slice(0, -1).join('.')!\n      const splitResult = name.split('/')\n      let tag = 'Unknown'\n      if (splitResult.length > 1) {\n        const tag1 = splitResult.pop()\n        if (tag1) {\n          tag = tag.split('.').slice(0, -1).join('.')\n        }\n      }\n      // return to readable javascript\n      const vals = NVMeshLoaders.readTSF(buffer, npt)\n      if (!nvmesh.dpv) {\n        nvmesh.dpv = []\n      }\n      const mn = vals.reduce((acc, current) => Math.min(acc, current))\n      const mx = vals.reduce((acc, current) => Math.max(acc, current))\n      nvmesh.dpv.push({\n        id: tag,\n        vals: Float32Array.from(vals.slice()),\n        global_min: mn,\n        global_max: mx,\n        cal_min: mn,\n        cal_max: mx\n      })\n      return layer\n    }\n    if (n_vert < 3) {\n      log.error('n_vert < 3 in layer')\n      return\n    }\n    if (ext === 'MZ3') {\n      layer.values = NVMeshLoaders.readMZ3(buffer, n_vert) as Float32Array\n    } else if (ext === 'ANNOT') {\n      if (!isReadColortables) {\n        // TODO: bogus ANNOT return type\n        layer.values = NVMeshLoaders.readANNOT(buffer, n_vert) as unknown as Float32Array\n      } else {\n        const obj = NVMeshLoaders.readANNOT(buffer, n_vert, true)\n        if (!(obj instanceof Uint32Array)) {\n          layer.values = obj.scalars\n          layer.colormapLabel = obj.colormapLabel\n        } // unable to decode colormapLabel\n        else {\n          layer.values = obj\n        }\n      }\n    } else if (ext === 'CRV' || ext === 'CURV' || ext === 'THICKNESS' || ext === 'AREA') {\n      layer.values = NVMeshLoaders.readCURV(buffer, n_vert)\n      layer.isTransparentBelowCalMin = false\n    } else if (ext === 'GII') {\n      const obj = NVMeshLoaders.readGII(buffer, n_vert)\n      layer.values = obj.scalars // colormapLabel\n      layer.colormapLabel = obj.colormapLabel\n    } else if (ext === 'MGH' || ext === 'MGZ') {\n      if (!isReadColortables) {\n        layer.values = NVMeshLoaders.readMGH(buffer, n_vert) as number[]\n      } else {\n        const obj = NVMeshLoaders.readMGH(buffer, n_vert, true)\n        if ('scalars' in obj) {\n          layer.values = obj.scalars\n          layer.colormapLabel = obj.colormapLabel\n        } // unable to decode colormapLabel\n        else {\n          layer.values = obj\n        }\n      }\n    } else if (ext === 'NII') {\n      layer.values = NVMeshLoaders.readNII(buffer, n_vert, nvmesh.anatomicalStructurePrimary) as Float32Array\n    } else if (ext === 'SMP') {\n      layer.values = NVMeshLoaders.readSMP(buffer, n_vert)\n    } else if (ext === 'STC') {\n      layer.values = NVMeshLoaders.readSTC(buffer, n_vert)\n    } else if (NVMeshLoaders.isCurv(buffer)) {\n      // Unknown layer overlay format - hail mary assume FreeSurfer\n      layer.values = NVMeshLoaders.readCURV(buffer, n_vert)\n      layer.isTransparentBelowCalMin = false\n    } else {\n      log.warn('Unknown layer overlay format ' + name)\n      return layer\n    }\n    if (!layer.values) {\n      log.error('no values in layer')\n      return\n    }\n    layer.nFrame4D = layer.values.length / n_vert\n    layer.frame4D = 0\n    layer.outlineBorder = outlineBorder\n    // determine global min..max\n    let mn = layer.values[0]\n    let mx = layer.values[0]\n    for (let i = 0; i < layer.values.length; i++) {\n      mn = Math.min(mn, layer.values[i])\n      mx = Math.max(mx, layer.values[i])\n    }\n    layer.global_min = mn\n    layer.global_max = mx\n    layer.cal_min = cal_min || 0\n    if (!cal_min) {\n      layer.cal_min = mn\n    }\n    layer.cal_max = cal_max || 0\n    if (!cal_max) {\n      layer.cal_max = mx\n    }\n    layer.cal_minNeg = NaN\n    layer.cal_maxNeg = NaN\n    layer.opacity = opacity\n    layer.colormap = colormap\n    layer.colormapNegative = colormapNegative\n    layer.useNegativeCmap = useNegativeCmap\n    return layer\n  } // readLayer()\n\n  // read brainvoyager smp format file\n  // https://support.brainvoyager.com/brainvoyager/automation-development/84-file-formats/40-the-format-of-smp-files\n  static readSMP(buffer: ArrayBuffer, n_vert: number): Float32Array {\n    const len = buffer.byteLength\n    let reader = new DataView(buffer)\n    let vers = reader.getUint16(0, true)\n    if (vers > 5) {\n      // assume gzip\n      const raw = decompressSync(new Uint8Array(buffer))\n      reader = new DataView(raw.buffer)\n      vers = reader.getUint16(0, true)\n      buffer = raw.buffer\n    }\n    if (vers > 5) {\n      log.error('Unsupported or invalid BrainVoyager SMP version ' + vers)\n    }\n    const nvert = reader.getUint32(2, true)\n    if (nvert !== n_vert) {\n      log.error('SMP file has ' + nvert + ' vertices, background mesh has ' + n_vert)\n    }\n    const nMaps = reader.getUint16(6, true)\n\n    const scalars = new Float32Array(nvert * nMaps)\n    const maps = []\n    let pos = 9\n    function readStr(): string {\n      const startPos = pos\n      while (pos < len && reader.getUint8(pos) !== 0) {\n        pos++\n      }\n      pos++ // skip null termination\n      return new TextDecoder().decode(buffer.slice(startPos, pos - 1))\n    } // readStr: read variable length string\n\n    // read Name of SRF\n    const _filenameSRF = readStr()\n\n    for (let i = 0; i < nMaps; i++) {\n      const m: Partial<SmpMap> = {}\n      m.mapType = reader.getUint32(pos, true)\n      pos += 4\n      // Read additional values only if a lag map\n      if (vers >= 3 && m.mapType === 3) {\n        m.nLags = reader.getUint32(pos, true)\n        pos += 4\n        m.mnLag = reader.getUint32(pos, true)\n        pos += 4\n        m.mxLag = reader.getUint32(pos, true)\n        pos += 4\n        m.ccOverlay = reader.getUint32(pos, true)\n        pos += 4\n      }\n      m.clusterSize = reader.getUint32(pos, true)\n      pos += 4\n      m.clusterCheck = reader.getUint8(pos)\n      pos += 1\n      m.critThresh = reader.getFloat32(pos, true)\n      pos += 4\n      m.maxThresh = reader.getFloat32(pos, true)\n      pos += 4\n      if (vers >= 4) {\n        m.includeValuesGreaterThreshMax = reader.getUint32(pos, true)\n        pos += 4\n      }\n      m.df1 = reader.getUint32(pos, true)\n      pos += 4\n      m.df2 = reader.getUint32(pos, true)\n      pos += 4\n      if (vers >= 5) {\n        m.posNegFlag = reader.getUint32(pos, true)\n        pos += 4\n      } else {\n        m.posNegFlag = 3\n      }\n      m.cortexBonferroni = reader.getUint32(pos, true)\n      pos += 4\n      m.posMinRGB = [0, 0, 0]\n      m.posMaxRGB = [0, 0, 0]\n      m.negMinRGB = [0, 0, 0]\n      m.negMaxRGB = [0, 0, 0]\n      if (vers >= 2) {\n        m.posMinRGB[0] = reader.getUint8(pos)\n        pos++\n        m.posMinRGB[1] = reader.getUint8(pos)\n        pos++\n        m.posMinRGB[2] = reader.getUint8(pos)\n        pos++\n        m.posMaxRGB[0] = reader.getUint8(pos)\n        pos++\n        m.posMaxRGB[1] = reader.getUint8(pos)\n        pos++\n        m.posMaxRGB[2] = reader.getUint8(pos)\n        pos++\n        if (vers >= 4) {\n          m.negMinRGB[0] = reader.getUint8(pos)\n          pos++\n          m.negMinRGB[1] = reader.getUint8(pos)\n          pos++\n          m.negMinRGB[2] = reader.getUint8(pos)\n          pos++\n          m.negMaxRGB[0] = reader.getUint8(pos)\n          pos++\n          m.negMaxRGB[1] = reader.getUint8(pos)\n          pos++\n          m.negMaxRGB[2] = reader.getUint8(pos)\n          pos++\n        } // vers >= 4\n        m.enableSMPColor = reader.getUint8(pos)\n        pos++\n        if (vers >= 4) {\n          m.lut = readStr()\n        }\n        m.colorAlpha = reader.getFloat32(pos, true)\n        pos += 4\n      } // vers >= 2\n      m.name = readStr()\n      const scalarsNew = new Float32Array(buffer, pos, nvert)\n      scalars.set(scalarsNew, i * nvert)\n      pos += nvert * 4\n      maps.push(m)\n    } // for i to nMaps\n    return scalars\n  } // readSMP()\n\n  // read mne stc format file, not to be confused with brainvoyager stc format\n  // https://github.com/mne-tools/mne-python/blob/main/mne/source_estimate.py#L211-L365\n  static readSTC(buffer: ArrayBuffer, n_vert: number): Float32Array {\n    // https://github.com/fahsuanlin/fhlin_toolbox/blob/400cb73cda4880d9ad7841d9dd68e4e9762976bf/codes/inverse_read_stc.m\n    // let len = buffer.byteLength;\n    const reader = new DataView(buffer)\n    // first 12 bytes are header\n    // let epoch_begin_latency = reader.getFloat32(0, false);\n    // let sample_period = reader.getFloat32(4, false);\n    const n_vertex = reader.getInt32(8, false)\n    if (n_vertex !== n_vert) {\n      throw new Error('Overlay has ' + n_vertex + ' vertices, expected ' + n_vert)\n    }\n    // next 4*n_vertex bytes are vertex IDS\n    let pos = 12 + n_vertex * 4\n    // next 4 bytes reports number of volumes/time points\n    const n_time = reader.getUint32(pos, false)\n    pos += 4\n    const f32 = new Float32Array(n_time * n_vertex)\n    // reading all floats with .slice() would be faster, but lets handle endian-ness\n    for (let i = 0; i < n_time * n_vertex; i++) {\n      f32[i] = reader.getFloat32(pos, false)\n      pos += 4\n    }\n    return f32\n  } // readSTC()\n\n  static isCurv(buffer: ArrayBuffer): boolean {\n    const view = new DataView(buffer) // ArrayBuffer to dataview\n    // ALWAYS big endian\n    const sig0 = view.getUint8(0)\n    const sig1 = view.getUint8(1)\n    const sig2 = view.getUint8(2)\n    if (sig0 !== 255 || sig1 !== 255 || sig2 !== 255) {\n      utiltiesLogger.debug('Unable to recognize file type: does not appear to be FreeSurfer format.')\n      return false\n    }\n    return true\n  }\n\n  // read freesurfer curv big-endian format\n  // https://github.com/bonilhamusclab/MRIcroS/blob/master/%2BfileUtils/%2Bpial/readPial.m\n  // http://www.grahamwideman.com/gw/brain/fs/surfacefileformats.htm\n  static readCURV(buffer: ArrayBuffer, n_vert: number): Float32Array {\n    const view = new DataView(buffer) // ArrayBuffer to dataview\n    // ALWAYS big endian\n    const sig0 = view.getUint8(0)\n    const sig1 = view.getUint8(1)\n    const sig2 = view.getUint8(2)\n    const n_vertex = view.getUint32(3, false)\n    // let num_f = view.getUint32(7, false);\n    const n_time = view.getUint32(11, false)\n    if (sig0 !== 255 || sig1 !== 255 || sig2 !== 255) {\n      utiltiesLogger.debug('Unable to recognize file type: does not appear to be FreeSurfer format.')\n    }\n    if (n_vert !== n_vertex) {\n      throw new Error('CURV file has different number of vertices ( ' + n_vertex + ')than mesh (' + n_vert + ')')\n    }\n    if (buffer.byteLength < 15 + 4 * n_vertex * n_time) {\n      throw new Error('CURV file smaller than specified')\n    }\n    const f32 = new Float32Array(n_time * n_vertex)\n    let pos = 15\n    // reading all floats with .slice() would be faster, but lets handle endian-ness\n    for (let i = 0; i < n_time * n_vertex; i++) {\n      f32[i] = view.getFloat32(pos, false)\n      pos += 4\n    }\n    let mn = f32[0]\n    let mx = f32[0]\n    for (let i = 0; i < f32.length; i++) {\n      mn = Math.min(mn, f32[i])\n      mx = Math.max(mx, f32[i])\n    }\n    // normalize\n    const scale = 1.0 / (mx - mn)\n    for (let i = 0; i < f32.length; i++) {\n      f32[i] = 1.0 - (f32[i] - mn) * scale\n    }\n    return f32\n  } // readCURV()\n\n  // read freesurfer Annotation file provides vertex colors\n  // https://surfer.nmr.mgh.harvard.edu/fswiki/LabelsClutsAnnotationFiles\n  static readANNOT(buffer: ArrayBuffer, n_vert: number, isReadColortables = false): ANNOT {\n    const view = new DataView(buffer) // ArrayBuffer to dataview\n    // ALWAYS big endian\n    const n_vertex = view.getUint32(0, false)\n    const n_vertexDecimated = this.decimateLayerVertices(n_vertex, n_vert)\n    if (n_vert !== n_vertexDecimated) {\n      throw new Error('ANNOT file has different number of vertices than mesh')\n    }\n    if (buffer.byteLength < 4 + 8 * n_vertex) {\n      throw new Error('ANNOT file smaller than specified')\n    }\n    let pos = 0\n    // reading all floats with .slice() would be faster, but lets handle endian-ness\n    const rgba32 = new Uint32Array(n_vertex)\n    for (let i = 0; i < n_vertex; i++) {\n      const idx = view.getUint32((pos += 4), false)\n      rgba32[idx] = view.getUint32((pos += 4), false)\n    }\n    if (!isReadColortables) {\n      // only read label colors, ignore labels\n      return rgba32\n    }\n    let tag = 0\n    try {\n      tag = view.getInt32((pos += 4), false)\n    } catch (error) {\n      return rgba32\n    }\n    const TAG_OLD_COLORTABLE = 1\n    if (tag !== TAG_OLD_COLORTABLE) {\n      // undocumented old format\n      return rgba32\n    }\n    const ctabversion = view.getInt32((pos += 4), false)\n    if (ctabversion > 0) {\n      // undocumented old format\n      return rgba32\n    }\n    const maxstruc = view.getInt32((pos += 4), false)\n    const len = view.getInt32((pos += 4), false)\n    pos += len\n    const num_entries = view.getInt32((pos += 4), false)\n    if (num_entries < 1) {\n      // undocumented old format\n      return rgba32\n    }\n    // preallocate lookuptable\n    const LUT = {\n      R: Array(maxstruc).fill(0),\n      G: Array(maxstruc).fill(0),\n      B: Array(maxstruc).fill(0),\n      A: Array(maxstruc).fill(0),\n      I: Array(maxstruc).fill(0),\n      labels: Array(maxstruc).fill('')\n    }\n    for (let i = 0; i < num_entries; i++) {\n      const struc = view.getInt32((pos += 4), false)\n      const labelLen = view.getInt32((pos += 4), false)\n      pos += 4\n      let txt = ''\n      for (let c = 0; c < labelLen; c++) {\n        const val = view.getUint8(pos++)\n        if (val === 0) {\n          break\n        }\n        txt += String.fromCharCode(val)\n      }\n      pos -= 4\n      const R = view.getInt32((pos += 4), false)\n      const G = view.getInt32((pos += 4), false)\n      const B = view.getInt32((pos += 4), false)\n      const A = view.getInt32((pos += 4), false)\n      if (struc < 0 || struc >= maxstruc) {\n        log.warn('annot entry out of range')\n        continue\n      }\n      LUT.R[struc] = R\n      LUT.G[struc] = G\n      LUT.B[struc] = B\n      LUT.A[struc] = A\n      LUT.I[struc] = (A << 24) + (B << 16) + (G << 8) + R\n      LUT.labels[struc] = txt\n    }\n    const scalars = new Float32Array(n_vertex)\n    scalars.fill(-1)\n    let nError = 0\n    for (let i = 0; i < n_vert; i++) {\n      const RGB = rgba32[i]\n      for (let c = 0; c < maxstruc; c++) {\n        if (LUT.I[c] === RGB) {\n          scalars[i] = c\n          break\n        }\n      } // for c\n      if (scalars[i] < 0) {\n        nError++\n        scalars[i] = 0\n      }\n    }\n    if (nError > 0) {\n      log.error(`annot vertex colors do not match ${nError} of ${n_vertex} vertices.`)\n    }\n    for (let i = 0; i < maxstruc; i++) {\n      LUT.I[i] = i\n    }\n    const colormapLabel = cmapper.makeLabelLut(LUT)\n    return {\n      scalars,\n      colormapLabel\n    }\n  } // readANNOT()\n\n  // read BrainNet viewer format\n  // https://www.nitrc.org/projects/bnv/\n  static readNV(buffer: ArrayBuffer): DefaultMeshType {\n    // n.b. clockwise triangle winding, indexed from 1\n    const len = buffer.byteLength\n    const bytes = new Uint8Array(buffer)\n    let pos = 0\n    function readStr(): string {\n      while (pos < len && bytes[pos] === 10) {\n        pos++\n      } // skip blank lines\n      const startPos = pos\n      while (pos < len && bytes[pos] !== 10) {\n        pos++\n      }\n      pos++ // skip EOLN\n      if (pos - startPos < 1) {\n        return ''\n      }\n      return new TextDecoder().decode(buffer.slice(startPos, pos - 1))\n    }\n    let nvert = 0 // 173404 346804\n    let ntri = 0\n    let v = 0\n    let t = 0\n    let positions: Float32Array\n    let indices: Uint32Array\n    while (pos < len) {\n      const line = readStr()\n      if (line.startsWith('#')) {\n        continue\n      }\n      const items = line.trim().split(/\\s+/)\n      if (nvert < 1) {\n        nvert = parseInt(items[0])\n        positions = new Float32Array(nvert * 3)\n        continue\n      }\n      if (v < nvert * 3) {\n        positions![v] = parseFloat(items[0])\n        positions![v + 1] = parseFloat(items[1])\n        positions![v + 2] = parseFloat(items[2])\n        v += 3\n        continue\n      }\n      if (ntri < 1) {\n        ntri = parseInt(items[0])\n        indices = new Uint32Array(ntri * 3)\n        continue\n      }\n      if (t >= ntri * 3) {\n        break\n      }\n      indices![t + 2] = parseInt(items[0]) - 1\n      indices![t + 1] = parseInt(items[1]) - 1\n      indices![t + 0] = parseInt(items[2]) - 1\n      t += 3\n    }\n    return {\n      positions: positions!,\n      indices: indices!\n    }\n  } // readNV()\n\n  // read ASCII Patch File format\n  // https://afni.nimh.nih.gov/pub/dist/doc/htmldoc/demos/Bootcamp/CD.html#cd\n  // http://www.grahamwideman.com/gw/brain/fs/surfacefileformats.htm\n  static readASC(buffer: ArrayBuffer): DefaultMeshType {\n    const len = buffer.byteLength\n    const bytes = new Uint8Array(buffer)\n    let pos = 0\n    function readStr(): string {\n      while (pos < len && bytes[pos] === 10) {\n        pos++\n      } // skip blank lines\n      const startPos = pos\n      while (pos < len && bytes[pos] !== 10) {\n        pos++\n      }\n      pos++ // skip EOLN\n      if (pos - startPos < 1) {\n        return ''\n      }\n      return new TextDecoder().decode(buffer.slice(startPos, pos - 1))\n    }\n    let line = readStr() // 1st line: '#!ascii version of lh.pial'\n    if (!line.startsWith('#!ascii')) {\n      log.warn('Invalid ASC mesh')\n    }\n    line = readStr() // 1st line: signature\n    let items = line.trim().split(/\\s+/)\n    const nvert = parseInt(items[0]) // 173404 346804\n    const ntri = parseInt(items[1])\n    const positions = new Float32Array(nvert * 3)\n    let j = 0\n    for (let i = 0; i < nvert; i++) {\n      line = readStr() // 1st line: signature\n      items = line.trim().split(/\\s+/)\n      positions[j] = parseFloat(items[0])\n      positions[j + 1] = parseFloat(items[1])\n      positions[j + 2] = parseFloat(items[2])\n      j += 3\n    }\n    const indices = new Uint32Array(ntri * 3)\n    j = 0\n    for (let i = 0; i < ntri; i++) {\n      line = readStr() // 1st line: signature\n      items = line.trim().split(/\\s+/)\n      indices[j] = parseInt(items[0])\n      indices[j + 1] = parseInt(items[1])\n      indices[j + 2] = parseInt(items[2])\n      j += 3\n    }\n    return {\n      positions,\n      indices\n    }\n  } // readASC()\n\n  // read legacy VTK format\n  static readVTK(buffer: ArrayBuffer): VTK {\n    const len = buffer.byteLength\n    if (len < 20) {\n      throw new Error('File too small to be VTK: bytes = ' + buffer.byteLength)\n    }\n    const bytes = new Uint8Array(buffer)\n    let pos = 0\n    function readStr(isSkipBlank = true): string {\n      if (isSkipBlank) {\n        while (pos < len && bytes[pos] === 10) {\n          pos++\n        }\n      } // skip blank lines\n      const startPos = pos\n      while (pos < len && bytes[pos] !== 10) {\n        pos++\n      }\n      pos++ // skip EOLN\n      if (pos - startPos < 1) {\n        return ''\n      }\n      return new TextDecoder().decode(buffer.slice(startPos, pos - 1))\n    }\n    let line = readStr() // 1st line: signature\n    if (!line.startsWith('# vtk DataFile')) {\n      throw new Error('Invalid VTK mesh')\n    }\n    line = readStr(false) // 2nd line comment, n.b. MRtrix stores empty line\n    line = readStr() // 3rd line ASCII/BINARY\n    if (line.startsWith('ASCII')) {\n      return NVMeshLoaders.readTxtVTK(buffer)\n    } else if (!line.startsWith('BINARY')) {\n      throw new Error('Invalid VTK image, expected ASCII or BINARY ' + line)\n    }\n    line = readStr() // 5th line \"DATASET POLYDATA\"\n    if (!line.includes('POLYDATA')) {\n      throw new Error('Only able to read VTK POLYDATA ' + line)\n    }\n    line = readStr() // 6th line \"POINTS 10261 float\"\n    if (!line.includes('POINTS') || (!line.includes('double') && !line.includes('float'))) {\n      log.warn('Only able to read VTK float or double POINTS' + line)\n    }\n    const isFloat64 = line.includes('double')\n    let items = line.trim().split(/\\s+/)\n    const nvert = parseInt(items[1]) // POINTS 10261 float\n    const nvert3 = nvert * 3\n    const positions = new Float32Array(nvert3)\n    const reader = new DataView(buffer)\n    if (isFloat64) {\n      for (let i = 0; i < nvert3; i++) {\n        positions[i] = reader.getFloat64(pos, false)\n        pos += 8\n      }\n    } else {\n      for (let i = 0; i < nvert3; i++) {\n        positions[i] = reader.getFloat32(pos, false)\n        pos += 4\n      }\n    }\n    line = readStr() // Type, \"LINES 11885 \"\n    items = line.trim().split(/\\s+/)\n    const tris = []\n    if (items[0].includes('LINES')) {\n      const n_count = parseInt(items[1])\n      // tractogaphy data: detect if borked by DiPy\n      const posOK = pos\n      line = readStr() // borked files \"OFFSETS vtktypeint64\"\n      if (line.startsWith('OFFSETS')) {\n        let isInt64 = false\n        if (line.includes('int64')) {\n          isInt64 = true\n        }\n        const offsetPt0 = new Uint32Array(n_count)\n        if (isInt64) {\n          let isOverflowInt32 = false\n          for (let c = 0; c < n_count; c++) {\n            let idx = reader.getInt32(pos, false)\n            if (idx !== 0) {\n              isOverflowInt32 = true\n            }\n            pos += 4\n            idx = reader.getInt32(pos, false)\n            pos += 4\n            offsetPt0[c] = idx\n          }\n          if (isOverflowInt32) {\n            log.warn('int32 overflow: JavaScript does not support int64')\n          }\n        } else {\n          for (let c = 0; c < n_count; c++) {\n            const idx = reader.getInt32(pos, false)\n            pos += 4\n            offsetPt0[c] = idx\n          }\n        }\n        const pts = positions\n        return {\n          pts,\n          offsetPt0\n        }\n      }\n      pos = posOK // valid VTK file\n      let npt = 0\n      const offsetPt0 = []\n      const pts = []\n      offsetPt0.push(npt) // 1st streamline starts at 0\n      for (let c = 0; c < n_count; c++) {\n        const numPoints = reader.getInt32(pos, false)\n        pos += 4\n        npt += numPoints\n        offsetPt0.push(npt)\n        for (let i = 0; i < numPoints; i++) {\n          const idx = reader.getInt32(pos, false) * 3\n          pos += 4\n          pts.push(positions[idx + 0])\n          pts.push(positions[idx + 1])\n          pts.push(positions[idx + 2])\n        } // for numPoints: number of segments in streamline\n      } // for n_count: number of streamlines\n      return {\n        pts: Float32Array.from(pts),\n        offsetPt0: Uint32Array.from(offsetPt0)\n      }\n    } else if (items[0].includes('TRIANGLE_STRIPS')) {\n      const nstrip = parseInt(items[1])\n      for (let i = 0; i < nstrip; i++) {\n        const ntri = reader.getInt32(pos, false) - 2 // -2 as triangle strip is creates pts - 2 faces\n        pos += 4\n        for (let t = 0; t < ntri; t++) {\n          if (t % 2) {\n            // preserve winding order\n            tris.push(reader.getInt32(pos + 8, false))\n            tris.push(reader.getInt32(pos + 4, false))\n            tris.push(reader.getInt32(pos, false))\n          } else {\n            tris.push(reader.getInt32(pos, false))\n            tris.push(reader.getInt32(pos + 4, false))\n            tris.push(reader.getInt32(pos + 8, false))\n          }\n          pos += 4\n        } // for each triangle\n        pos += 8\n      } // for each strip\n    } else if (items[0].includes('POLYGONS')) {\n      const npoly = parseInt(items[1])\n      for (let i = 0; i < npoly; i++) {\n        const ntri = reader.getInt32(pos, false) - 2 // 3 for single triangle, 4 for 2 triangles\n        if (i === 0 && ntri > 65535) {\n          throw new Error('Invalid VTK binary polygons using little-endian data (MRtrix)')\n        }\n        pos += 4\n        const fx = reader.getInt32(pos, false)\n        pos += 4\n        let fy = reader.getInt32(pos, false)\n        pos += 4\n        for (let t = 0; t < ntri; t++) {\n          const fz = reader.getInt32(pos, false)\n          pos += 4\n          tris.push(fx)\n          tris.push(fy)\n          tris.push(fz)\n          fy = fz\n        } // for each triangle\n      } // for each polygon\n    } else {\n      throw new Error('Unsupported binary VTK datatype ' + items[0])\n    }\n    const indices = new Uint32Array(tris)\n    return {\n      positions,\n      indices\n    }\n  } // readVTK()\n\n  // read brainsuite DFS format\n  // http://brainsuite.org/formats/dfs/\n  static readDFS(buffer: ArrayBuffer): DefaultMeshType {\n    // Does not play with other formats: vertex positions do not use Aneterior Commissure as origin\n    const reader = new DataView(buffer)\n    const magic = reader.getUint32(0, true) // \"DFS_\"\n    const LE = reader.getUint16(4, true) // \"LE\"\n    if (magic !== 1599292996 || LE !== 17740) {\n      log.warn('Not a little-endian brainsuite DFS mesh')\n    }\n    const hdrBytes = reader.getUint32(12, true)\n    // var mdoffset = reader.getUint32(16, true);\n    // var pdoffset = reader.getUint32(20, true);\n    const nface = reader.getUint32(24, true) // number of triangles\n    const nvert = reader.getUint32(28, true)\n    // var nStrips = reader.getUint32(32, true); //deprecated\n    // var stripSize = reader.getUint32(36, true); //deprecated\n    // var normals = reader.getUint32(40, true);\n    // var uvStart = reader.getUint32(44, true);\n    const vcoffset = reader.getUint32(48, true) // vertexColor offset\n    // var precision = reader.getUint32(52, true);\n    // float64 orientation[4][4]; //4x4 matrix, affine transformation to world coordinates*)\n    let pos = hdrBytes\n    const indices = new Uint32Array(buffer, pos, nface * 3)\n    pos += nface * 3 * 4\n    const positions = new Float32Array(buffer, pos, nvert * 3)\n    // oops, triangle winding opposite of CCW convention\n    for (let i = 0; i < nvert * 3; i += 3) {\n      const tmp = positions[i]\n      positions[i] = positions[i + 1]\n      positions[i + 1] = tmp\n    }\n    let colors\n    if (vcoffset >= 0) {\n      colors = new Float32Array(buffer, vcoffset, nvert * 3)\n    }\n    return {\n      positions,\n      indices,\n      colors\n    }\n  }\n\n  // read surfice MZ3 format\n  // https://github.com/neurolabusc/surf-ice/tree/master/mz3\n  static readMZ3(buffer: ArrayBuffer, n_vert = 0): MZ3 {\n    // ToDo: mz3 always little endian: support big endian? endian https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array\n    if (buffer.byteLength < 20) {\n      // 76 for raw, not sure of gzip\n      throw new Error('File too small to be mz3: bytes = ' + buffer.byteLength)\n    }\n    let reader = new DataView(buffer)\n    // get number of vertices and faces\n    let magic = reader.getUint16(0, true)\n    let _buffer = buffer\n    if (magic === 35615 || magic === 8075) {\n      // gzip signature 0x1F8B in little and big endian\n      const raw = decompressSync(new Uint8Array(buffer))\n      reader = new DataView(raw.buffer)\n      magic = reader.getUint16(0, true)\n      _buffer = raw.buffer\n      // throw new Error( 'Gzip MZ3 file' );\n    }\n    const attr = reader.getUint16(2, true)\n    const nface = reader.getUint32(4, true)\n    let nvert = reader.getUint32(8, true)\n    const nskip = reader.getUint32(12, true)\n    utiltiesLogger.debug('MZ3 magic %d attr %d face %d vert %d skip %d', magic, attr, nface, nvert, nskip)\n    if (magic !== 23117) {\n      throw new Error('Invalid MZ3 file')\n    }\n    const isFace = (attr & 1) !== 0\n    const isVert = (attr & 2) !== 0\n    const isRGBA = (attr & 4) !== 0\n    let isSCALAR = (attr & 8) !== 0\n    const isDOUBLE = (attr & 16) !== 0\n    // var isAOMap = attr & 32;\n    if (attr > 63) {\n      throw new Error('Unsupported future version of MZ3 file')\n    }\n    let bytesPerScalar = 4\n    if (isDOUBLE) {\n      bytesPerScalar = 8\n    }\n    let NSCALAR = 0\n    if (n_vert > 0 && !isFace && nface < 1 && !isRGBA) {\n      isSCALAR = true\n    }\n    if (isSCALAR) {\n      let nv = n_vert\n      if (n_vert === 0) {\n        nv = nvert\n      }\n      const FSizeWoScalars =\n        16 + nskip + (isFace ? 1 : 0) * nface * 12 + (isVert ? 1 : 0) * nv * 12 + (isRGBA ? 1 : 0) * nv * 4\n      const scalarFloats = Math.floor((_buffer.byteLength - FSizeWoScalars) / bytesPerScalar)\n      if (nvert !== n_vert && scalarFloats % n_vert === 0) {\n        log.warn('Issue 729: mz3 mismatch scalar NVERT does not match mesh NVERT')\n        nvert = n_vert\n      }\n      NSCALAR = Math.floor(scalarFloats / nvert)\n      if (NSCALAR < 1) {\n        log.warn('Corrupt MZ3: file reports NSCALAR but not enough bytes')\n        isSCALAR = false\n      }\n    }\n    if (nvert < 3 && n_vert < 3) {\n      throw new Error('Not a mesh MZ3 file (maybe scalar)')\n    }\n    if (n_vert > 0 && n_vert !== nvert) {\n      log.warn('Layer has ' + nvert + 'vertices, but background mesh has ' + n_vert)\n    }\n    let filepos = 16 + nskip\n    let indices = null\n    if (isFace) {\n      indices = new Uint32Array(_buffer, filepos, nface * 3)\n      filepos += nface * 3 * 4\n    }\n    let positions = null\n    if (isVert) {\n      positions = new Float32Array(_buffer, filepos, nvert * 3)\n      filepos += nvert * 3 * 4\n    }\n    let colors = null\n    if (isRGBA) {\n      colors = new Float32Array(nvert * 3)\n      const rgba8 = new Uint8Array(_buffer, filepos, nvert * 4)\n      filepos += nvert * 4\n      let k3 = 0\n      let k4 = 0\n      for (let i = 0; i < nvert; i++) {\n        for (let j = 0; j < 3; j++) {\n          // for RGBA\n          colors[k3] = rgba8[k4] / 255\n          k3++\n          k4++\n        }\n        k4++ // skip Alpha\n      } // for i\n    } // if isRGBA\n    let scalars = new Float32Array()\n    if (!isRGBA && isSCALAR && NSCALAR > 0) {\n      if (isDOUBLE) {\n        const flt64 = new Float64Array(_buffer, filepos, NSCALAR * nvert)\n        scalars = Float32Array.from(flt64)\n      } else {\n        scalars = new Float32Array(_buffer, filepos, NSCALAR * nvert)\n      }\n      filepos += bytesPerScalar * NSCALAR * nvert\n    }\n    if (n_vert > 0) {\n      return scalars\n    }\n    return {\n      positions,\n      indices,\n      scalars,\n      colors\n    }\n  } // readMZ3()\n\n  // read PLY format\n  // https://en.wikipedia.org/wiki/PLY_(file_format)\n  static readPLY(buffer: ArrayBuffer): DefaultMeshType {\n    const len = buffer.byteLength\n    const bytes = new Uint8Array(buffer)\n    let pos = 0\n    function readStr(): string {\n      while (pos < len && bytes[pos] === 10) {\n        pos++\n      } // skip blank lines\n      const startPos = pos\n      while (pos < len && bytes[pos] !== 10) {\n        pos++\n      }\n      pos++ // skip EOLN\n      if (pos - startPos < 1) {\n        return ''\n      }\n      return new TextDecoder().decode(buffer.slice(startPos, pos - 1))\n    }\n    let line = readStr() // 1st line: magic 'ply'\n    if (!line.startsWith('ply')) {\n      throw new Error('Not a valid PLY file')\n    }\n    line = readStr() // 2nd line: format 'format binary_little_endian 1.0'\n    const isAscii = line.includes('ascii')\n    function dataTypeBytes(str: string): number {\n      if (str === 'char' || str === 'uchar' || str === 'int8' || str === 'uint8') {\n        return 1\n      }\n      if (str === 'short' || str === 'ushort' || str === 'int16' || str === 'uint16') {\n        return 2\n      }\n      if (\n        str === 'int' ||\n        str === 'uint' ||\n        str === 'int32' ||\n        str === 'uint32' ||\n        str === 'float' ||\n        str === 'float32'\n      ) {\n        return 4\n      }\n      if (str === 'double') {\n        return 8\n      }\n      throw new Error('Unknown data type: ' + str)\n    }\n    const isLittleEndian = line.includes('binary_little_endian')\n    let nvert = 0\n    let vertIsDouble = false\n    let vertStride = 0 // e.g. if each vertex stores xyz as float32 and rgb as uint8, stride is 15\n    let indexStrideBytes = 0 // \"list uchar int vertex_indices\" has stride 1 + 3 * 4\n    let indexCountBytes = 0 // if \"property list uchar int vertex_index\" this is 1 (uchar)\n    let indexBytes = 0 // if \"property list uchar int vertex_index\" this is 4 (int)\n    let indexPaddingBytes = 0\n    let nIndexPadding = 0\n    let nface = 0\n    while (pos < len && !line.startsWith('end_header')) {\n      line = readStr()\n      if (line.startsWith('comment')) {\n        continue\n      }\n      // line = line.replaceAll('\\t', ' '); // ?are tabs valid white space?\n      let items = line.split(/\\s/)\n      if (line.startsWith('element vertex')) {\n        nvert = parseInt(items[items.length - 1])\n        // read vertex properties:\n        line = readStr()\n        items = line.split(/\\s/)\n        while (line.startsWith('property')) {\n          const datatype = items[1]\n          if (items[2] === 'x' && datatype.startsWith('double')) {\n            vertIsDouble = true\n          } else if (items[2] === 'x' && !datatype.startsWith('float')) {\n            log.error('Error: expect ply xyz to be float or double: ' + line)\n          }\n          vertStride += dataTypeBytes(datatype)\n          line = readStr()\n          items = line.split(/\\s/)\n        }\n      }\n      if (line.startsWith('element face')) {\n        nface = parseInt(items[items.length - 1])\n        // read face properties:\n        line = readStr()\n        items = line.split(/\\s/)\n        while (line.startsWith('property')) {\n          if (items[1] === 'list') {\n            indexCountBytes = dataTypeBytes(items[2])\n            indexBytes = dataTypeBytes(items[3])\n            indexStrideBytes += indexCountBytes + 3 * indexBytes // e.g. \"uchar int\" is 1 + 3 * 4 bytes\n          } else {\n            const bytes = dataTypeBytes(items[1])\n            indexStrideBytes += bytes\n            if (indexBytes === 0) {\n              // this index property is BEFORE the list\n              indexPaddingBytes += bytes\n              nIndexPadding++\n            }\n          }\n          line = readStr()\n          items = line.split(/\\s/)\n        }\n      }\n    } // while reading all lines of header\n    if (isAscii) {\n      if (nface < 1) {\n        log.error(`Malformed ply format: faces ${nface} `)\n      }\n      const positions = new Float32Array(nvert * 3)\n      let v = 0\n      for (let i = 0; i < nvert; i++) {\n        line = readStr()\n        const items = line.split(/\\s/)\n        positions[v] = parseFloat(items[0])\n        positions[v + 1] = parseFloat(items[1])\n        positions[v + 2] = parseFloat(items[2])\n        v += 3\n      }\n      let indices = new Uint32Array(nface * 3)\n      let f = 0\n      for (let i = 0; i < nface; i++) {\n        line = readStr()\n        const items = line.split(/\\s/)\n        const nTri = parseInt(items[nIndexPadding]) - 2\n        if (nTri < 1) {\n          break\n        } // error\n        if (f + nTri * 3 > indices.length) {\n          const c = new Uint32Array(indices.length + indices.length)\n          c.set(indices)\n          indices = c.slice()\n        }\n        const idx0 = parseInt(items[nIndexPadding + 1])\n        let idx1 = parseInt(items[nIndexPadding + 2])\n        for (let j = 0; j < nTri; j++) {\n          const idx2 = parseInt(items[nIndexPadding + 3 + j])\n          indices[f + 0] = idx0\n          indices[f + 1] = idx1\n          indices[f + 2] = idx2\n          idx1 = idx2\n          f += 3\n        }\n      }\n      if (indices.length !== f) {\n        indices = indices.slice(0, f)\n      }\n      return {\n        positions,\n        indices\n      }\n    } // if isAscii\n    if (vertStride < 12 || indexCountBytes < 1 || indexBytes < 1 || nface < 1) {\n      log.warn(\n        `Malformed ply format: stride ${vertStride} count ${indexCountBytes} iBytes ${indexBytes} iStrideBytes ${indexStrideBytes} iPadBytes ${indexPaddingBytes} faces ${nface}`\n      )\n    }\n    const reader = new DataView(buffer)\n    let positions\n    if (pos % 4 === 0 && vertStride === 12 && isLittleEndian) {\n      // optimization: vertices only store xyz position as float\n      // n.b. start offset of Float32Array must be a multiple of 4\n      positions = new Float32Array(buffer, pos, nvert * 3)\n      pos += nvert * vertStride\n    } else {\n      positions = new Float32Array(nvert * 3)\n      let v = 0\n      for (let i = 0; i < nvert; i++) {\n        if (vertIsDouble) {\n          positions[v] = reader.getFloat64(pos, isLittleEndian)\n          positions[v + 1] = reader.getFloat64(pos + 8, isLittleEndian)\n          positions[v + 2] = reader.getFloat64(pos + 16, isLittleEndian)\n        } else {\n          positions[v] = reader.getFloat32(pos, isLittleEndian)\n          positions[v + 1] = reader.getFloat32(pos + 4, isLittleEndian)\n          positions[v + 2] = reader.getFloat32(pos + 8, isLittleEndian)\n        }\n        v += 3\n        pos += vertStride\n      }\n    }\n    const indices = new Uint32Array(nface * 3) // assume triangular mesh: pre-allocation optimization\n    let isTriangular = true\n    let j = 0\n    if (indexCountBytes === 1 && indexBytes === 4 && indexStrideBytes === 13) {\n      // default mode: \"list uchar int vertex_indices\" without other properties\n      for (let i = 0; i < nface; i++) {\n        const nIdx = reader.getUint8(pos)\n        pos += indexCountBytes\n        if (nIdx !== 3) {\n          isTriangular = false\n        }\n        indices[j] = reader.getUint32(pos, isLittleEndian)\n        pos += 4\n        indices[j + 1] = reader.getUint32(pos, isLittleEndian)\n        pos += 4\n        indices[j + 2] = reader.getUint32(pos, isLittleEndian)\n        pos += 4\n        j += 3\n      }\n    } else {\n      // not 1:4 index data\n      let startPos = pos\n      for (let i = 0; i < nface; i++) {\n        pos = startPos + indexPaddingBytes\n        let nIdx = 0\n        if (indexCountBytes === 1) {\n          nIdx = reader.getUint8(pos)\n        } else if (indexCountBytes === 2) {\n          nIdx = reader.getUint16(pos, isLittleEndian)\n        } else if (indexCountBytes === 4) {\n          nIdx = reader.getUint32(pos, isLittleEndian)\n        }\n        pos += indexCountBytes\n        if (nIdx !== 3) {\n          isTriangular = false\n        }\n        for (let k = 0; k < 3; k++) {\n          if (indexBytes === 1) {\n            indices[j] = reader.getUint8(pos)\n          } else if (indexBytes === 2) {\n            indices[j] = reader.getUint16(pos, isLittleEndian)\n          } else if (indexBytes === 4) {\n            indices[j] = reader.getUint32(pos, isLittleEndian)\n          }\n          j++\n          pos += indexBytes\n        }\n        startPos += indexStrideBytes\n      } // for each face\n    } // if not 1:4 datatype\n    if (!isTriangular) {\n      log.warn('Only able to read PLY meshes limited to triangles.')\n    }\n    return {\n      positions,\n      indices\n    }\n  } // readPLY()\n\n  // FreeSurfer can convert meshes to ICO/TRI format text files\n  // https://github.com/dfsp-spirit/freesurferformats/blob/434962608108c75d4337d5e7a5096e3bd4ee6ee6/R/read_fs_surface.R#L1090\n  // detect TRI format that uses same extension\n  // http://paulbourke.net/dataformats/tri/\n  static readICO(buffer: ArrayBuffer): DefaultMeshType {\n    const enc = new TextDecoder('utf-8')\n    const txt = enc.decode(buffer)\n    const lines = txt.split('\\n')\n    let header = lines[0].trim().split(/\\s+/)\n    // read line 0: header\n    // FreeSurfer header has one item: [0]'num_verts'\n    // Bourke header has 2 items: [0]'num_verts', [1]'num_faces'\n    if (header.length > 1) {\n      log.warn('This is not a valid FreeSurfer ICO/TRI mesh.')\n    }\n    const num_v = parseInt(header[0])\n    // read vertices: each line has 4 values: index, x, y, z\n    const positions = new Float32Array(num_v * 3)\n    // let v = 0;\n    let line = 1 // line 0 is header\n    for (let i = 0; i < num_v; i++) {\n      const items = lines[line].trim().split(/\\s+/)\n      line++\n      // idx is indexed from 1, not 0\n      let idx = parseInt(items[0]) - 1\n      const x = parseFloat(items[1])\n      const y = parseFloat(items[2])\n      const z = parseFloat(items[3])\n      if (idx < 0 || idx >= num_v) {\n        log.error('ICO vertices corrupted')\n        break\n      }\n      idx *= 3\n      positions[idx] = x\n      positions[idx + 1] = y\n      positions[idx + 2] = z\n    } // read all vertices\n    // read faces\n    header = lines[line].trim().split(/\\s+/)\n    line++\n    const num_f = parseInt(header[0])\n    const indices = new Uint32Array(num_f * 3)\n    for (let i = 0; i < num_f; i++) {\n      const items = lines[line].trim().split(/\\s+/)\n      line++\n      // all values indexed from 1, not 0\n      let idx = parseInt(items[0]) - 1\n      const x = parseInt(items[1]) - 1\n      const y = parseInt(items[2]) - 1\n      const z = parseInt(items[3]) - 1\n      if (idx < 0 || idx >= num_f) {\n        log.error('ICO indices corrupted')\n        break\n      }\n      idx *= 3\n      indices[idx] = x\n      indices[idx + 1] = y\n      indices[idx + 2] = z\n    } // read all faces\n    // FreeSurfer seems to enforce clockwise winding: reverse to CCW\n    for (let j = 0; j < indices.length; j += 3) {\n      const tri = indices[j]\n      indices[j] = indices[j + 1]\n      indices[j + 1] = tri\n    }\n    return {\n      positions,\n      indices\n    }\n  } // readICO()\n\n  // While BYU and FreeSurfer GEO are related\n  // - BYU can have multiple parts\n  // - BYU faces not always triangular\n  // http://www.grahamwideman.com/gw/brain/fs/surfacefileformats.htm#GeoFile\n  // http://www.eg-models.de/formats/Format_Byu.html\n  // https://github.com/dfsp-spirit/freesurferformats/blob/dafaf88a601dac90fa3c9aae4432f003f5344546/R/read_fs_surface.R#L924\n  // https://github.com/dfsp-spirit/freesurferformats/blob/434962608108c75d4337d5e7a5096e3bd4ee6ee6/R/read_fs_surface.R#L1144\n  // n.b. AFNI uses the '.g' extension for this format 'ConvertSurface  -i_gii L.surf.gii -o_byu L'\n  static readGEO(buffer: ArrayBuffer, isFlipWinding = false): DefaultMeshType {\n    const enc = new TextDecoder('utf-8')\n    const txt = enc.decode(buffer)\n    const lines = txt.split('\\n')\n    const header = lines[0].trim().split(/\\s+/)\n    // read line 0: header\n    // header[0]='nparts', [1]'npoints/vertices', [2]'npolys/faces', [3]'nconnects'\n    const num_p = parseInt(header[0])\n    let num_v = parseInt(header[1])\n    let num_f = parseInt(header[2])\n    const num_c = parseInt(header[3])\n    if (num_p > 1 || num_c !== num_f * 3) {\n      log.warn('Multi-part BYU/GEO header or not a triangular mesh.')\n    }\n    // skip line 1: it is redundant (contains number of faces once more)\n    // next read the vertices (points)\n    const pts = []\n    num_v *= 3 // each vertex has three components (x,y,z)\n    let v = 0\n    let line = 2 // line 0 and 1 are header\n    while (v < num_v) {\n      const items = lines[line].trim().split(/\\s+/)\n      line++\n      for (let i = 0; i < items.length; i++) {\n        pts.push(parseFloat(items[i]))\n        v++\n        if (v >= num_v) {\n          break\n        }\n      } // for each item\n    } // read all vertices\n    // next read faces (triangles)\n    const t: number[] = []\n    num_f *= 3 // each triangle has three vertices (i,j,k)\n    let f = 0\n    while (f < num_f) {\n      const items = lines[line].trim().split(/\\s+/)\n      line++\n      for (let i = 0; i < items.length; i++) {\n        t.push(Math.abs(parseInt(items[i])) - 1)\n        f++\n        if (f >= num_f) {\n          break\n        }\n      } // for each item\n    } // read all faces\n    // FreeSurfer seems to enforce clockwise winding: reverse to CCW\n    if (isFlipWinding) {\n      for (let j = 0; j < t.length; j += 3) {\n        const tri = t[j]\n        t[j] = t[j + 1]\n        t[j + 1] = tri\n      }\n    }\n    // return results\n    const positions = new Float32Array(pts)\n    const indices = new Uint32Array(t)\n    return {\n      positions,\n      indices\n    }\n  } // readGEO()\n\n  // read OFF format\n  // https://en.wikipedia.org/wiki/OFF_(file_format)\n  static readOFF(buffer: ArrayBuffer): DefaultMeshType {\n    const enc = new TextDecoder('utf-8')\n    const txt = enc.decode(buffer)\n    const lines = txt.split('\\n')\n    // var n = lines.length;\n    const pts = []\n    const t = []\n    let i = 0\n    // first line signature \"OFF\", but R freesurfer package uses \"# OFF\"\n    if (!lines[i].includes('OFF')) {\n      log.warn('File does not start with OFF')\n    } else {\n      i++\n    }\n    let items = lines[i].trim().split(/\\s+/)\n    const num_v = parseInt(items[0])\n    const num_f = parseInt(items[1])\n    i++\n    for (let j = 0; j < num_v; j++) {\n      const str = lines[i]\n      items = str.trim().split(/\\s+/)\n      pts.push(parseFloat(items[0]))\n      pts.push(parseFloat(items[1]))\n      pts.push(parseFloat(items[2]))\n      i++\n    }\n    for (let j = 0; j < num_f; j++) {\n      const str = lines[i]\n      items = str.trim().split(/\\s+/)\n      const n = parseInt(items[0])\n      if (n !== 3) {\n        log.warn('Only able to read OFF files with triangular meshes')\n      }\n      t.push(parseInt(items[1]))\n      t.push(parseInt(items[2]))\n      t.push(parseInt(items[3]))\n      i++\n    }\n    const positions = new Float32Array(pts)\n    const indices = new Uint32Array(t)\n    return {\n      positions,\n      indices\n    }\n  } // readOFF()\n\n  static readOBJMNI(buffer: ArrayBuffer): DefaultMeshType {\n    // Support MNI 'P'olygon mesh format\n    // n.b. uses same .obj extension as WaveFront OBJ meshes\n    // https://bigbrain.loris.ca/main.php?test_name=brainsurfaces\n    // http://www.bic.mni.mcgill.ca/users/mishkin/mni_obj_format.pdf\n    // https://pages.stat.wisc.edu/~mchung/softwares/mesh/mesh.html\n    // https://github.com/aces/brainbrowser/tree/master\n    const enc = new TextDecoder('utf-8')\n    const txt = enc.decode(buffer)\n    const items = txt.trim().split(/\\s*,\\s*|\\s+/)\n    if (items.length < 1 || items[0] !== 'P') {\n      log.warn('This is not a valid MNI OBJ mesh.')\n    }\n    let j = 6\n    const nVert = parseInt(items[j++])\n    const nVertX3 = nVert * 3\n    const positions = new Float32Array(nVertX3)\n    for (let i = 0; i < nVertX3; i++) {\n      positions[i] = parseFloat(items[j++])\n    }\n    j += nVertX3\n    const nTri = parseInt(items[j++])\n    const colour_flag = parseInt(items[j++])\n    if (nTri < 1 || colour_flag < 0 || colour_flag > 2) {\n      log.warn('This is not a valid MNI OBJ mesh.')\n    }\n    let num_c = 1\n    if (colour_flag === 1) {\n      num_c = nTri\n    } else if (colour_flag === 1) {\n      num_c = nVert\n    }\n    j += num_c * 4\n    j += nTri\n    const nTriX3 = nTri * 3\n    const indices = new Uint32Array(nTriX3)\n    for (let i = 0; i < nTriX3; i++) {\n      indices[i] = parseInt(items[j++])\n    }\n    return {\n      positions,\n      indices\n    }\n  } // readOBJMNI()\n\n  static readOBJ(buffer: ArrayBuffer): DefaultMeshType {\n    // WaveFront OBJ format\n    const enc = new TextDecoder('utf-8')\n    const txt = enc.decode(buffer)\n    if (txt[0] === 'P') {\n      return this.readOBJMNI(buffer)\n    }\n    const lines = txt.split('\\n')\n    const n = lines.length\n    const pts = []\n    const t = []\n    for (let i = 0; i < n; i++) {\n      const str = lines[i]\n      if (str[0] === 'v' && str[1] === ' ') {\n        // 'v ' but not 'vt' or 'vn'\n        const items = str.trim().split(/\\s+/)\n        pts.push(parseFloat(items[1]))\n        pts.push(parseFloat(items[2]))\n        pts.push(parseFloat(items[3]))\n        // v 0 -0.5 -0\n      }\n      if (str[0] === 'f') {\n        const items = str.trim().split(/\\s+/)\n        const new_t = items.length - 3 // number of new triangles created\n        if (new_t < 1) {\n          break\n        } // error\n        let tn = items[1].split('/')\n        const t0 = parseInt(tn[0]) - 1 // first vertex\n        tn = items[2].split('/')\n        let tprev = parseInt(tn[0]) - 1 // previous vertex\n        for (let j = 0; j < new_t; j++) {\n          tn = items[3 + j].split('/')\n          const tcurr = parseInt(tn[0]) - 1 // current vertex\n          t.push(t0)\n          t.push(tprev)\n          t.push(tcurr)\n          tprev = tcurr\n        }\n      }\n    } // for all lines\n    const positions = new Float32Array(pts)\n    const indices = new Uint32Array(t)\n    return {\n      positions,\n      indices\n    }\n  } // readOBJ()\n\n  // read FreeSurfer big endian format\n  static readFreeSurfer(buffer: ArrayBuffer): DefaultMeshType {\n    const bytes = new Uint8Array(buffer)\n    if (bytes[0] === 35 && bytes[1] === 33 && bytes[2] === 97) {\n      return NVMeshLoaders.readASC(buffer) // \"#!ascii version\"\n    }\n    const view = new DataView(buffer) // ArrayBuffer to dataview\n    const sig0 = view.getUint32(0, false)\n    const sig1 = view.getUint32(4, false)\n    if (sig0 !== 4294966883 || sig1 !== 1919246708) {\n      utiltiesLogger.debug('Unable to recognize file type: does not appear to be FreeSurfer format.')\n    }\n    let offset = 0\n    while (view.getUint8(offset) !== 10) {\n      offset++\n    }\n    offset += 2\n    let nv = view.getUint32(offset, false) // number of vertices\n    offset += 4\n    let nf = view.getUint32(offset, false) // number of faces\n    offset += 4\n    nv *= 3 // each vertex has 3 positions: XYZ\n    const positions = new Float32Array(nv)\n    for (let i = 0; i < nv; i++) {\n      positions[i] = view.getFloat32(offset, false)\n      offset += 4\n    }\n    nf *= 3 // each triangle face indexes 3 triangles\n    const indices = new Uint32Array(nf)\n    for (let i = 0; i < nf; i++) {\n      indices[i] = view.getUint32(offset, false)\n      offset += 4\n    }\n    // read undocumented footer\n    // https://github.com/nipy/nibabel/blob/8fea2a8e50aaf4d8b0d4bfff7a21b132914120ee/nibabel/freesurfer/io.py#L58C5-L58C9\n    const head0 = view.getUint32(offset, false)\n    offset += 4\n    let isHeadOK = head0 === 20\n    if (!isHeadOK) {\n      // read two more int32s\n      const head1 = view.getUint32(offset, false)\n      offset += 4\n      const head2 = view.getUint32(offset, false)\n      offset += 4\n      isHeadOK = head0 === 2 && head1 === 0 && head2 === 20\n    }\n    if (!isHeadOK) {\n      log.warn('Unknown FreeSurfer Mesh extension code.')\n    } else {\n      const footer = new TextDecoder().decode(buffer.slice(offset)).trim()\n      const strings = footer.split('\\n')\n      for (let s = 0; s < strings.length; s++) {\n        if (!strings[s].startsWith('cras')) {\n          continue\n        }\n        const cras = strings[s].split('=')[1].trim()\n        const FreeSurferTranlate = cras.split(' ').map(Number)\n        const nvert = Math.floor(positions.length / 3)\n        let i = 0\n        for (let v = 0; v < nvert; v++) {\n          positions[i] += FreeSurferTranlate[0]\n          i++\n          positions[i] += FreeSurferTranlate[1]\n          i++\n          positions[i] += FreeSurferTranlate[2]\n          i++\n        }\n      }\n    }\n    return {\n      positions,\n      indices\n    }\n  } // readFreeSurfer()\n\n  // read brainvoyager SRF format\n  // https://support.brainvoyager.com/brainvoyager/automation-development/84-file-formats/344-users-guide-2-3-the-format-of-srf-files\n  static readSRF(buffer: ArrayBuffer): DefaultMeshType {\n    const bytes = new Uint8Array(buffer)\n    if (bytes[0] === 35 && bytes[1] === 33 && bytes[2] === 97) {\n      // .srf also used for freesurfer https://brainder.org/research/brain-for-blender/\n      return NVMeshLoaders.readASC(buffer) // \"#!ascii version\"\n    }\n    if (bytes[0] === 31 && bytes[1] === 139) {\n      // handle .srf.gz\n      const raw = decompressSync(new Uint8Array(buffer))\n      buffer = raw.buffer\n    }\n    const reader = new DataView(buffer)\n    const ver = reader.getFloat32(0, true)\n    const nVert = reader.getUint32(8, true)\n    const nTri = reader.getUint32(12, true)\n    const oriX = reader.getFloat32(16, true)\n    const oriY = reader.getFloat32(20, true)\n    const oriZ = reader.getFloat32(24, true)\n    const positions = new Float32Array(nVert * 3)\n    // BrainVoyager does not use Talairach coordinates for XYZ!\n    // read X component of each vertex\n    let pos = 28\n    let j = 1 // BrainVoyager X is Talairach Y\n    for (let i = 0; i < nVert; i++) {\n      positions[j] = -reader.getFloat32(pos, true) + oriX\n      j += 3 // read one of 3 components: XYZ\n      pos += 4 // read one float32\n    }\n    // read Y component of each vertex\n    j = 2 // BrainVoyager Y is Talairach Z\n    for (let i = 0; i < nVert; i++) {\n      positions[j] = -reader.getFloat32(pos, true) + oriY\n      j += 3 // read one of 3 components: XYZ\n      pos += 4 // read one float32\n    }\n    // read Z component of each vertex\n    j = 0 // BrainVoyager Z is Talairach X\n    for (let i = 0; i < nVert; i++) {\n      positions[j] = -reader.getFloat32(pos, true) + oriZ\n      j += 3 // read one of 3 components: XYZ\n      pos += 4 // read one float32\n    }\n    // not sure why normals are stored, does bulk up file size\n    pos = 28 + 4 * 6 * nVert // each vertex has 6 float32s: XYZ for position and normal\n    // read concave and convex colors:\n    const rVex = reader.getFloat32(pos, true)\n    const gVex = reader.getFloat32(pos + 4, true)\n    const bVex = reader.getFloat32(pos + 8, true)\n    const rCave = reader.getFloat32(pos + 16, true)\n    const gCave = reader.getFloat32(pos + 20, true)\n    const bCave = reader.getFloat32(pos + 24, true)\n    pos += 8 * 4 // skip 8 floats (RGBA convex/concave)\n    // read per-vertex colors\n    const colors = new Float32Array(nVert * 3)\n    const colorsIdx = new Uint32Array(buffer, pos, nVert)\n    j = 0 // convert RGBA -> RGB\n    for (let i = 0; i < nVert; i++) {\n      const c = colorsIdx[i]\n      if (c > 1056964608) {\n        colors[j + 0] = ((c >> 16) & 0xff) / 255\n        colors[j + 1] = ((c >> 8) & 0xff) / 255\n        colors[j + 2] = (c & 0xff) / 255\n      }\n      if (c === 0) {\n        // convex\n        colors[j + 0] = rVex\n        colors[j + 1] = gVex\n        colors[j + 2] = bVex\n      }\n      if (c === 1) {\n        // concave\n        colors[j + 0] = rCave\n        colors[j + 1] = gCave\n        colors[j + 2] = bCave\n      }\n      j += 3\n    }\n    pos += nVert * 4 // MeshColor, sequence of color indices\n    // not sure why nearest neighbors are stored, slower and bigger files\n    for (let i = 0; i < nVert; i++) {\n      const nNearest = reader.getUint32(pos, true)\n      pos += 4 + 4 * nNearest\n    }\n    const indices = new Uint32Array(nTri * 3)\n    for (let i = 0; i < nTri * 3; i++) {\n      indices[i] = reader.getInt32(pos, true)\n      pos += 4\n    }\n    if (ver !== 4) {\n      log.warn('Not valid SRF')\n    }\n\n    return {\n      positions,\n      indices,\n      colors\n    }\n  } // readSRF()\n\n  // read STL ASCII format file\n  // http://paulbourke.net/dataformats/stl/\n  static readTxtSTL(buffer: ArrayBuffer): DefaultMeshType {\n    const enc = new TextDecoder('utf-8')\n    const txt = enc.decode(buffer)\n    const lines = txt.split('\\n')\n    if (!lines[0].startsWith('solid')) {\n      throw new Error('Not a valid STL file')\n    }\n    const pts = []\n    for (let i = 1; i < lines.length; i++) {\n      if (!lines[i].includes('vertex')) {\n        continue\n      }\n      const items = lines[i].trim().split(/\\s+/)\n      for (let j = 1; j < items.length; j++) {\n        pts.push(parseFloat(items[j]))\n      }\n    }\n    const npts = Math.floor(pts.length / 3) // each vertex has x,y,z\n    if (npts * 3 !== pts.length) {\n      throw new Error('Unable to parse ASCII STL file.')\n    }\n    const positions = new Float32Array(pts)\n    const indices = new Uint32Array(npts)\n    for (let i = 0; i < npts; i++) {\n      indices[i] = i\n    }\n    return {\n      positions,\n      indices\n    }\n  } // readTxtSTL()\n\n  // read STL format, nb this format does not reuse vertices\n  // https://en.wikipedia.org/wiki/STL_(file_format)\n  static readSTL(buffer: ArrayBuffer): DefaultMeshType {\n    if (buffer.byteLength < 80 + 4 + 50) {\n      throw new Error('File too small to be STL: bytes = ' + buffer.byteLength)\n    }\n    const reader = new DataView(buffer)\n    const sig = reader.getUint32(0, true)\n    if (sig === 1768714099) {\n      return NVMeshLoaders.readTxtSTL(buffer)\n    }\n    const ntri = reader.getUint32(80, true)\n    const ntri3 = 3 * ntri\n    if (buffer.byteLength < 80 + 4 + ntri * 50) {\n      throw new Error('STL file too small to store triangles = ' + ntri)\n    }\n    const indices = new Uint32Array(ntri3)\n    const positions = new Float32Array(ntri3 * 3)\n    let pos = 80 + 4 + 12\n    let v = 0 // vertex\n    for (let i = 0; i < ntri; i++) {\n      for (let j = 0; j < 9; j++) {\n        positions[v] = reader.getFloat32(pos, true)\n        v += 1\n        pos += 4\n      }\n      pos += 14 // 50 bytes for triangle, only 36 used for position\n    }\n    for (let i = 0; i < ntri3; i++) {\n      indices[i] = i\n    }\n    return {\n      positions,\n      indices\n    }\n  } // readSTL()\n\n  static decimateLayerVertices(nVertLayer: number, nVertMesh: number): number {\n    // downsample layer vertices if the mesh has been decimated\n    if (nVertLayer % nVertMesh === 0) {\n      return nVertLayer\n    }\n    const V0 = 12\n    const orderLayer = Math.round(Math.log((nVertLayer - 2) / (V0 - 2)) / Math.log(4))\n    const orderMesh = Math.round(Math.log((nVertMesh - 2) / (V0 - 2)) / Math.log(4))\n    // sanity check\n    const nVLayer = Math.pow(4, orderLayer) * (V0 - 2) + 2\n    const nVMesh = Math.pow(4, orderMesh) * (V0 - 2) + 2\n    if (nVLayer !== nVertLayer || nVMesh !== nVertMesh) {\n      return nVertLayer\n    }\n    return nVertMesh\n  }\n\n  // read NIfTI2 format with embedded CIfTI\n  // this variation very specific to connectome workbench\n  // https://brainder.org/2015/04/03/the-nifti-2-file-format/\n  static readNII2(\n    buffer: ArrayBuffer,\n    n_vert = 0,\n    anatomicalStructurePrimary = ''\n  ): Int32Array | Float32Array | Int16Array | Uint8Array {\n    let scalars: Float32Array | Int32Array | Int16Array | Uint8Array = new Float32Array()\n    const len = buffer.byteLength\n    let isLittleEndian = true\n    const reader = new DataView(buffer)\n    let magic = reader.getUint16(0, isLittleEndian)\n    if (magic === 469893120) {\n      isLittleEndian = false\n      magic = reader.getUint16(0, isLittleEndian)\n    }\n    if (magic !== 540) {\n      throw new Error('Not a valid NIfTI-2 dataset')\n    }\n    const voxoffset = Number(reader.getBigInt64(168, isLittleEndian))\n    const scl_slope = reader.getFloat64(176, isLittleEndian)\n    const scl_inter = reader.getFloat64(184, isLittleEndian)\n    if (scl_slope !== 1 || scl_inter !== 0) {\n      log.warn('ignoring scale slope and intercept')\n    }\n    const intent_code = reader.getUint32(504, isLittleEndian)\n    const datatype = reader.getUint16(12, isLittleEndian)\n    if (datatype !== 2 && datatype !== 4 && datatype !== 8 && datatype !== 16) {\n      throw new Error('Unsupported NIfTI datatype ' + datatype)\n    }\n    let nvert = 1\n    const dim = [1, 1, 1, 1, 1, 1, 1, 1]\n    for (let i = 1; i < 8; i++) {\n      dim[i] = Math.max(Number(reader.getBigInt64(16 + i * 8, isLittleEndian)), 1)\n      nvert *= dim[i]\n    }\n    if (intent_code >= 3000 && intent_code <= 3099 && voxoffset > 580) {\n      // CIFTI ConnDenseScalar\n      let indexOffset = 0\n      let indexCount = 0\n      let surfaceNumberOfVertices = 0\n      let brainStructure = ''\n      let vertexIndices: Uint32Array = new Uint32Array()\n      const bytes = new Uint8Array(buffer)\n      let pos = 552\n\n      function readStrX(): string {\n        while (pos < len && bytes[pos] === 10) {\n          pos++\n        } // skip blank lines\n        const startPos = pos\n        while (pos < len && bytes[pos] !== 10) {\n          pos++\n        }\n        pos++ // skip EOLN\n        if (pos - startPos < 1) {\n          return ''\n        }\n        return new TextDecoder().decode(buffer.slice(startPos, pos - 1)).trim()\n      }\n\n      function readStr(): string {\n        // concatenate lines to return tag <...>\n        let line = readStrX()\n        if (!line.startsWith('<') || line.endsWith('>')) {\n          return line\n        }\n        while (pos < len && !line.endsWith('>')) {\n          line += readStrX()\n        }\n        return line\n      }\n      let line: string\n\n      function readNumericTag(TagName: string, asString = false): string | number {\n        // Tag 'Dim1' will return 3 for Dim1=\"3\"\n        const tpos = line.indexOf(TagName)\n        if (tpos < 0) {\n          return 1\n        }\n        const spos = line.indexOf('\"', tpos) + 1\n        const epos = line.indexOf('\"', spos)\n        const str = line.slice(spos, epos)\n        if (asString) {\n          return str\n        }\n        return parseInt(str)\n      } // readNumericTag\n\n      const nFrame4D = dim[5] // number of timepoints/frames per vertex\n      const scalars = new Float32Array(n_vert * nFrame4D)\n\n      // eslint-disable-next-line no-unmodified-loop-condition -- pos is modified within readStr\n      while (pos < len) {\n        line = readStr()\n        if (line.includes('</CIFTI>')) {\n          break\n        }\n        if (line.includes('<BrainModel')) {\n          const nv = readNumericTag('SurfaceNumberOfVertices=') as number\n          const bStruct = (readNumericTag('BrainStructure=', true) as string).toUpperCase()\n          if (nv % n_vert !== 0) {\n            continue\n          }\n          // a single CIfTI file can contain multiple structures, but only one structure per mesh\n          // The big kludge: try to find CIfTI structure that matches GIfTI mesh\n          let isMatch = false\n          if (anatomicalStructurePrimary.includes('CORTEX') && bStruct.includes('CORTEX')) {\n            isMatch = true\n          }\n          // to do: other anatomy: cerebellum\n          if (!isMatch) {\n            continue\n          }\n          isMatch = false\n          if (anatomicalStructurePrimary.includes('LEFT') && bStruct.includes('LEFT')) {\n            isMatch = true\n          }\n          if (anatomicalStructurePrimary.includes('RIGHT') && bStruct.includes('RIGHT')) {\n            isMatch = true\n          }\n          if (!isMatch) {\n            continue\n          }\n          surfaceNumberOfVertices = nv\n          indexOffset = readNumericTag('IndexOffset=') as number\n          indexCount = readNumericTag('IndexCount=') as number\n          brainStructure = bStruct\n          if (!line.includes('<VertexIndices>')) {\n            line = readStr()\n          }\n          if (!line.startsWith('<VertexIndices>') || !line.endsWith('</VertexIndices>')) {\n            log.warn('Unable to find CIfTI <VertexIndices>')\n            return scalars\n          }\n          line = line.slice(15, -16)\n          const items = line.trim().split(/\\s+/)\n          if (items.length < indexCount) {\n            log.error('Error parsing VertexIndices')\n          }\n          vertexIndices = new Uint32Array(indexCount)\n          for (let i = 0; i < indexCount; i++) {\n            vertexIndices[i] = parseInt(items[i])\n          }\n        } // read <BrainModel\n      } // while (pos < len) or reached </CIFTI>\n\n      if (surfaceNumberOfVertices === 0 || vertexIndices.length === 0) {\n        log.warn('Unable to find CIfTI structure that matches the mesh.')\n        return scalars\n      }\n      if (datatype !== 16) {\n        log.warn('Only able to read float32 CIfTI (only known datatype).')\n        return scalars\n      }\n\n      const vals = new Float32Array(indexCount * nFrame4D)\n      const off = voxoffset + nFrame4D * indexOffset * 4\n      for (let i = 0; i < indexCount * nFrame4D; i++) {\n        vals[i] = reader.getFloat32(off + i * 4, isLittleEndian)\n      }\n      // }\n      let j = 0\n\n      for (let i = 0; i < indexCount; i++) {\n        for (let f = 0; f < nFrame4D; f++) {\n          scalars[vertexIndices[i] + f * n_vert] = vals[j]\n          j++\n        }\n      }\n      log.debug(\n        'CIfTI diagnostics',\n        surfaceNumberOfVertices,\n        brainStructure,\n        indexOffset,\n        indexCount,\n        indexOffset,\n        anatomicalStructurePrimary\n      )\n      //\n      return scalars\n    } // is CIfTI\n    nvert = this.decimateLayerVertices(nvert, n_vert)\n    if (nvert % n_vert !== 0) {\n      throw new Error('Vertices in layer (' + nvert + ') is not a multiple of number of vertices (' + n_vert + ')')\n    }\n    if (isLittleEndian) {\n      // block read native endian\n      if (datatype === 16) {\n        scalars = new Float32Array(buffer, voxoffset, nvert)\n      } else if (datatype === 8) {\n        scalars = new Int32Array(buffer, voxoffset, nvert)\n      } else if (datatype === 4) {\n        scalars = new Int16Array(buffer, voxoffset, nvert)\n      }\n    } else {\n      // if isLittleEndian\n      if (datatype === 16) {\n        scalars = new Float32Array(nvert)\n        for (let i = 0; i < nvert; i++) {\n          scalars[i] = reader.getFloat32(voxoffset + i * 4, isLittleEndian)\n        }\n      } else if (datatype === 8) {\n        scalars = new Int32Array(nvert)\n        for (let i = 0; i < nvert; i++) {\n          scalars[i] = reader.getInt32(voxoffset + i * 4, isLittleEndian)\n        }\n      } else if (datatype === 4) {\n        scalars = new Int16Array(nvert)\n        for (let i = 0; i < nvert; i++) {\n          scalars[i] = reader.getInt16(voxoffset + i * 2, isLittleEndian)\n        }\n      }\n    } // if isLittleEndian else big end\n    if (datatype === 2) {\n      scalars = new Uint8Array(buffer, voxoffset, nvert)\n    }\n    return scalars\n  } // readNII2()\n\n  // read NIfTI1/2 as vertex colors\n  // https://brainder.org/2012/09/23/the-nifti-file-format/#:~:text=In%20the%20nifti%20format%2C%20the,seventh%2C%20are%20for%20other%20uses.\n  static readNII(\n    buffer: ArrayBuffer,\n    n_vert = 0,\n    anatomicalStructurePrimary = ''\n  ): Float32Array | Uint8Array | Int32Array | Int16Array {\n    // TODO clean up number types\n    let scalars: Float32Array | Int32Array | Int16Array | Uint8Array = new Float32Array()\n    let isLittleEndian = true\n    let reader = new DataView(buffer)\n    let magic = reader.getUint16(0, isLittleEndian)\n    if (magic === 540 || magic === 469893120) {\n      return NVMeshLoaders.readNII2(buffer, n_vert, anatomicalStructurePrimary)\n    }\n    if (magic === 23553) {\n      isLittleEndian = false\n      magic = reader.getUint16(0, isLittleEndian)\n    }\n    if (magic !== 348) {\n      // gzip signature 0x1F8B in little and big endian\n      const raw = decompressSync(new Uint8Array(buffer))\n      reader = new DataView(raw.buffer)\n      buffer = raw.buffer\n      magic = reader.getUint16(0, isLittleEndian)\n      if (magic === 540 || magic === 469893120) {\n        return NVMeshLoaders.readNII2(buffer, n_vert, anatomicalStructurePrimary)\n      }\n      if (magic === 23553) {\n        isLittleEndian = false\n        magic = reader.getUint16(0, isLittleEndian)\n      }\n    }\n    if (magic !== 348) {\n      log.error('Not a valid NIfTI image.')\n    }\n    const voxoffset = reader.getFloat32(108, isLittleEndian)\n    const scl_slope = reader.getFloat32(112, isLittleEndian)\n    const scl_inter = reader.getFloat32(116, isLittleEndian)\n    if (scl_slope !== 1 || scl_inter !== 0) {\n      log.warn('ignoring scale slope and intercept')\n    }\n    const datatype = reader.getUint16(70, isLittleEndian)\n    if (datatype !== 2 && datatype !== 4 && datatype !== 8 && datatype !== 16) {\n      throw new Error('Unsupported NIfTI datatype ' + datatype)\n    }\n    let nvert = 1\n    for (let i = 1; i < 8; i++) {\n      const dim = reader.getUint16(40 + i * 2, isLittleEndian)\n      nvert *= Math.max(dim, 1)\n    }\n    nvert = this.decimateLayerVertices(nvert, n_vert)\n    if (nvert % n_vert !== 0) {\n      throw new Error('Vertices in layer (' + nvert + ') is not a multiple of number of vertices (' + n_vert + ')')\n    }\n    if (isLittleEndian) {\n      // block read native endian\n      if (datatype === 16) {\n        scalars = new Float32Array(buffer, voxoffset, nvert)\n      } else if (datatype === 8) {\n        scalars = new Int32Array(buffer, voxoffset, nvert)\n      } else if (datatype === 4) {\n        scalars = new Int16Array(buffer, voxoffset, nvert)\n      }\n    } else {\n      // if isLittleEndian\n      if (datatype === 16) {\n        scalars = new Float32Array(nvert)\n        for (let i = 0; i < nvert; i++) {\n          scalars[i] = reader.getFloat32(voxoffset + i * 4, isLittleEndian)\n        }\n      } else if (datatype === 8) {\n        scalars = new Int32Array(nvert)\n        for (let i = 0; i < nvert; i++) {\n          scalars[i] = reader.getInt32(voxoffset + i * 4, isLittleEndian)\n        }\n      } else if (datatype === 4) {\n        scalars = new Int16Array(nvert)\n        for (let i = 0; i < nvert; i++) {\n          scalars[i] = reader.getInt16(voxoffset + i * 2, isLittleEndian)\n        }\n      }\n    } // if isLittleEndian else big end\n    if (datatype === 2) {\n      scalars = new Uint8Array(buffer, voxoffset, nvert)\n    }\n    return scalars\n  } // readNII();\n\n  // read MGH format as vertex colors (not voxel-based image)\n  // https://surfer.nmr.mgh.harvard.edu/fswiki/FsTutorial/MghFormat\n  static readMGH(buffer: ArrayBuffer, n_vert = 0, isReadColortables = false): MGH {\n    let reader = new DataView(buffer)\n    let raw = buffer\n    if (reader.getUint8(0) === 31 && reader.getUint8(1) === 139) {\n      const decompressed = decompressSync(new Uint8Array(buffer))\n      raw = new ArrayBuffer(decompressed.byteLength)\n      new Uint8Array(raw).set(new Uint8Array(decompressed))\n      reader = new DataView(decompressed.buffer)\n    }\n    const version = reader.getInt32(0, false)\n    const width = Math.max(1, reader.getInt32(4, false))\n    const height = Math.max(1, reader.getInt32(8, false))\n    const depth = Math.max(1, reader.getInt32(12, false))\n    const nframes = Math.max(1, reader.getInt32(16, false))\n    const mtype = reader.getInt32(20, false)\n    let voxoffset = 284 // ALWAYS fixed header size\n    const isLittleEndian = false // ALWAYS byte order is BIG ENDIAN\n    if (version !== 1 || mtype < 0 || mtype > 4) {\n      log.warn('Not a valid MGH file')\n    }\n    let nvert = width * height * depth * nframes\n    let scalars: AnyNumberArray = []\n    nvert = this.decimateLayerVertices(nvert, n_vert)\n    if (nvert % n_vert !== 0) {\n      log.warn('Vertices in layer (' + nvert + ') is not a multiple of number of vertices (' + n_vert + ')')\n      return scalars\n    }\n    if (mtype === 3) {\n      scalars = new Float32Array(nvert)\n      for (let i = 0; i < nvert; i++) {\n        scalars[i] = reader.getFloat32(voxoffset + i * 4, isLittleEndian)\n      }\n    } else if (mtype === 1) {\n      scalars = new Int32Array(nvert)\n      for (let i = 0; i < nvert; i++) {\n        scalars[i] = reader.getInt32(voxoffset + i * 4, isLittleEndian)\n      }\n    } else if (mtype === 4) {\n      scalars = new Int16Array(nvert)\n      for (let i = 0; i < nvert; i++) {\n        scalars[i] = reader.getInt16(voxoffset + i * 2, isLittleEndian)\n      }\n    } else if (mtype === 0) {\n      scalars = new Uint8Array(buffer, voxoffset, nvert)\n    }\n    if (!isReadColortables) {\n      return scalars\n    }\n    // next: read footer\n    let bytesPerVertex = 4\n    if (mtype === 4) {\n      bytesPerVertex = 2\n    }\n    if (mtype === 0) {\n      bytesPerVertex = 1\n    }\n    voxoffset += bytesPerVertex * nvert\n    voxoffset += 4 * 4 // skip TR, FlipAngle, TE, TI, FOV\n    const TAG_OLD_COLORTABLE = 1\n    const TAG_OLD_USEREALRAS = 2\n    // const TAG_CMDLINE = 3;\n    // const TAG_USEREALRAS = 4;\n    // const TAG_COLORTABLE = 5;\n    // const TAG_GCAMORPH_GEOM = 10;\n    // const TAG_GCAMORPH_TYPE = 11;\n    // const TAG_GCAMORPH_LABELS = 12;\n    const TAG_OLD_SURF_GEOM = 20\n    // const TAG_SURF_GEOM = 21;\n    const TAG_OLD_MGH_XFORM = 30\n    // const TAG_MGH_XFORM = 31;\n    // const TAG_GROUP_AVG_SURFACE_AREA = 32;\n    // const TAG_AUTO_ALIGN = 33;\n    // const TAG_SCALAR_DOUBLE = 40;\n    // const TAG_PEDIR = 41;\n    // const TAG_MRI_FRAME = 42;\n    // const TAG_FIELDSTRENGTH = 43;\n    // const TAG_ORIG_RAS2VOX = 44;\n    const nBytes = raw.byteLength\n    let colormapLabel: LUT\n\n    while (voxoffset < nBytes - 8) {\n      // let vx = voxoffset;\n      const tagType = reader.getInt32((voxoffset += 4), isLittleEndian)\n      let plen = 0\n      switch (tagType) {\n        case TAG_OLD_MGH_XFORM:\n          // doesn't include null\n          plen = reader.getInt32((voxoffset += 4), isLittleEndian) - 1\n          break\n        case TAG_OLD_SURF_GEOM: // these don't take lengths at all\n        case TAG_OLD_USEREALRAS:\n          plen = 0\n          break\n        case TAG_OLD_COLORTABLE:\n          plen = 0\n          // CTABreadFromBinary()\n          {\n            let version = reader.getInt32((voxoffset += 4), isLittleEndian)\n            if (version > 0) {\n              log.warn('unsupported CTABreadFromBinaryV1')\n              return scalars\n            }\n            version = -version\n            if (version !== 2) {\n              log.warn('CTABreadFromBinary: unknown version')\n              return scalars\n            }\n            // CTABreadFromBinaryV2() follows\n            const nentries = reader.getInt32((voxoffset += 4), isLittleEndian)\n            if (nentries < 0) {\n              log.warn('CTABreadFromBinaryV2: nentries was ', nentries)\n              return scalars\n            }\n            // skip the file name\n            const len = reader.getInt32((voxoffset += 4), isLittleEndian)\n            voxoffset += len\n            const num_entries_to_read = reader.getInt32((voxoffset += 4), isLittleEndian)\n            if (num_entries_to_read < 0) {\n              return scalars\n            }\n            // Allocate our table.\n            const Labels: ColorMap = { R: [], G: [], B: [], A: [], I: [], labels: [] }\n            for (let i = 0; i < num_entries_to_read; i++) {\n              const structure = reader.getInt32((voxoffset += 4), isLittleEndian)\n              const labelLen = reader.getInt32((voxoffset += 4), isLittleEndian)\n              let pos = voxoffset + 4\n              let txt = ''\n              for (let c = 0; c < labelLen; c++) {\n                const val = reader.getUint8(pos++)\n                if (val === 0) {\n                  break\n                }\n                txt += String.fromCharCode(val)\n              } // for labelLen\n              voxoffset += labelLen\n              const R = reader.getInt32((voxoffset += 4), isLittleEndian)\n              const G = reader.getInt32((voxoffset += 4), isLittleEndian)\n              const B = reader.getInt32((voxoffset += 4), isLittleEndian)\n              const A = 255 - reader.getInt32((voxoffset += 4), isLittleEndian)\n              Labels.I.push(structure)\n              Labels.R.push(R)\n              Labels.G.push(G)\n              Labels.B.push(B)\n              Labels.A.push(A)\n              Labels.labels!.push(txt)\n              // break\n            } // for num_entries_to_read\n            colormapLabel = cmapper.makeLabelLut(Labels)\n          }\n          break\n        default:\n          plen = reader.getInt32((voxoffset += 8), isLittleEndian)\n      }\n      voxoffset += plen\n    }\n    return {\n      scalars,\n      colormapLabel: colormapLabel! // TODO can we guarantee this?\n    }\n  } // readMGH()\n\n  // read X3D format mesh\n  // https://en.wikipedia.org/wiki/X3D\n  static readX3D(buffer: ArrayBuffer): X3D {\n    // n.b. only plain text \".x3d\", not binary \".x3db\"\n    // beware: The values of XML attributes are delimited by either single or double quotes\n    const len = buffer.byteLength\n    if (len < 20) {\n      throw new Error('File too small to be X3D: bytes = ' + len)\n    }\n    const bytes = new Uint8Array(buffer)\n    let pos = 0\n    function readStr(): string {\n      while (pos < len && bytes[pos] !== 60) {\n        pos++\n      }\n      const startP = pos\n      while (pos < len && bytes[pos] !== 62) {\n        pos++\n      }\n      const endP = pos\n      return new TextDecoder().decode(buffer.slice(startP, endP + 1)).trim()\n    }\n    let line = readStr() // detect XML signature: '<?xml version=...'\n    function readStringTag(TagName: string): string {\n      // Tag 'DEF' will return l3 for DEF='l3'\n      const fpos = line.indexOf(TagName + '=')\n      if (fpos < 0) {\n        return ''\n      }\n      const delimiter = line[fpos + TagName.length + 1]\n      const spos = line.indexOf(delimiter, fpos) + 1\n      const epos = line.indexOf(delimiter, spos)\n      return line.slice(spos, epos)\n    }\n    function readNumericTag(TagName: string): number | number[] {\n      // Tag 'Dim1' will return 3 for Dim1=\"3\"\n      const fpos = line.indexOf(TagName + '=')\n      if (fpos < 0) {\n        return 1\n      }\n      const delimiter = line[fpos + TagName.length + 1]\n      const spos = line.indexOf(delimiter, fpos) + 1\n      const epos = line.indexOf(delimiter, spos)\n      let str = line.slice(spos, epos).trim()\n      str = str.replace(/,\\s*$/, '')\n      const items = str.trim().split(/\\s*,\\s*|\\s+/)\n      if (items.length < 2) {\n        return parseFloat(str)\n      }\n      let ret = new Array(items.length)\n      let j = 0\n      for (let i = 0; i < items.length; i++) {\n        const v = parseFloat(items[i])\n        if (!isFinite(v)) {\n          continue\n        }\n        ret[j] = v\n        j++\n      }\n      ret = ret.slice(0, j)\n      return ret\n    }\n    if (!line.includes('xml version')) {\n      log.warn('Not a X3D image')\n    }\n    let positions: number[] = []\n    let indices: number[] = []\n    let rgba255: number[] = []\n    let color: number[] = []\n    let translation: vec4 = [0, 0, 0, 0]\n    let rotation = [0, 0, 0, 0]\n    let rgba = [255, 255, 255, 255]\n    let rgbaGlobal = [255, 255, 255, 255]\n    const appearanceStyles: Record<string, number[]> = {}\n    function readAppearance(): void {\n      if (!line.endsWith('/>')) {\n        if (line.startsWith('<Appearance>')) {\n          // eslint-disable-next-line no-unmodified-loop-condition -- modified within readStr\n          while (pos < len && !line.endsWith('</Appearance>')) {\n            line += readStr()\n          }\n        } else {\n          // eslint-disable-next-line no-unmodified-loop-condition -- modified within readStr\n          while (pos < len && !line.endsWith('/>')) {\n            line += readStr()\n          }\n        }\n      }\n      const ref = readStringTag('USE')\n      if (ref.length > 1) {\n        if (ref in appearanceStyles) {\n          rgba = appearanceStyles[ref as keyof typeof appearanceStyles] as number[]\n        } else {\n          log.warn('Unable to find DEF for ' + ref)\n        }\n        return\n      }\n      const diffuseColor = readNumericTag('diffuseColor') as number[]\n      if (diffuseColor.length < 3) {\n        return\n      }\n      rgba[0] = Math.round(diffuseColor[0] * 255)\n      rgba[1] = Math.round(diffuseColor[1] * 255)\n      rgba[2] = Math.round(diffuseColor[2] * 255)\n      const def = readStringTag('DEF')\n      if (def.length < 1) {\n        return\n      }\n      appearanceStyles[def] = rgba\n    }\n    // eslint-disable-next-line no-unmodified-loop-condition -- modified within readStr\n    while (pos < len) {\n      line = readStr()\n      rgba = rgbaGlobal.slice()\n      if (line.startsWith('<Transform')) {\n        translation = readNumericTag('translation') as vec4\n        rotation = readNumericTag('rotation') as number[]\n      }\n      if (line.startsWith('<Appearance')) {\n        readAppearance()\n        rgbaGlobal = rgba.slice()\n      }\n      if (line.startsWith('<Shape')) {\n        let radius = 1.0\n        let height = 1.0\n        let coordIndex: number[] = []\n        let point: number[] = []\n\n        // eslint-disable-next-line no-unmodified-loop-condition -- modified within readAppearance\n        while (pos < len) {\n          line = readStr()\n          if (line.startsWith('<Appearance')) {\n            readAppearance()\n          }\n          if (line.startsWith('</Shape')) {\n            break\n          }\n          if (line.startsWith('<Sphere')) {\n            radius = readNumericTag('radius') as number\n            height = -1.0\n          }\n          if (line.startsWith('<Cylinder')) {\n            radius = readNumericTag('radius') as number\n            height = readNumericTag('height') as number\n          }\n          if (line.startsWith('<IndexedFaceSet')) {\n            height = -2\n            // https://www.web3d.org/specifications/X3Dv4Draft/ISO-IEC19775-1v4-CD/Part01/components/geometry3D.html#IndexedFaceSet\n            coordIndex = readNumericTag('coordIndex') as number[]\n          }\n          if (line.startsWith('<IndexedTriangleSet')) {\n            height = -7\n            coordIndex = readNumericTag('index') as number[]\n          }\n          if (line.startsWith('<IndexedTriangleStripSet')) {\n            height = -3\n            // https://www.web3d.org/specifications/X3Dv4Draft/ISO-IEC19775-1v4-CD/Part01/components/geometry3D.html#IndexedFaceSet\n            coordIndex = readNumericTag('index') as number[]\n          }\n          if (line.startsWith('<Coordinate')) {\n            point = readNumericTag('point') as number[]\n            const rem = point.length % 3\n            if (rem !== 0) {\n              point = point.slice(0, -rem)\n            }\n          } // Coordinate point\n          if (line.startsWith('<Color')) {\n            color = readNumericTag('color') as number[]\n          }\n          if (line.startsWith('<Box')) {\n            height = -4\n            log.warn('Unsupported x3d shape: Box')\n          }\n          if (line.startsWith('<Cone')) {\n            height = -5\n            log.warn('Unsupported x3d shape: Cone')\n          }\n          if (line.startsWith('<ElevationGrid')) {\n            height = -6\n            log.warn('Unsupported x3d shape: ElevationGrid')\n          }\n        }\n        if (height < -3 && height !== -7) {\n          // cone, box, elevation grid\n          // unsupported\n        } else if (height < -1) {\n          // indexed triangle mesh or strip\n          if (coordIndex.length < 1 || point.length < 3 || point.length === undefined) {\n            log.warn('Indexed mesh must specify indices and points')\n            break\n          }\n          const idx0 = Math.floor(positions.length / 3) // first new vertex will be AFTER previous vertices\n          let j = 2\n          if (height === -7) {\n            indices = [...indices, ...coordIndex]\n          } else if (height === -2) {\n            let triStart = 0\n            while (j < coordIndex.length) {\n              if (coordIndex[j] >= 0) {\n                indices.push(coordIndex[triStart] + idx0)\n                indices.push(coordIndex[j - 1] + idx0)\n                indices.push(coordIndex[j - 0] + idx0)\n                j += 1\n              } else {\n                j += 3\n                triStart = j - 2\n              }\n            }\n          } else {\n            while (j < coordIndex.length) {\n              if (coordIndex[j] >= 0) {\n                indices.push(coordIndex[j - 2] + idx0)\n                indices.push(coordIndex[j - 1] + idx0)\n                indices.push(coordIndex[j - 0] + idx0)\n                j += 1\n              } else {\n                // coordIndex[j] === -1, next polygon\n                j += 3\n              }\n            }\n          }\n          // n.b. positions.push(...point) can generate \"Maximum call stack size exceeded\"\n          positions = [...positions, ...point]\n          const npt = Math.floor(point.length / 3)\n          const rgbas = Array(npt).fill(rgba).flat()\n          if (color.length === npt * 3) {\n            // colors are rgb 0..1, rgbas are RGBA 0..255\n            let c3 = 0\n            let c4 = 0\n            for (let i = 0; i < npt; i++) {\n              for (let j2 = 0; j2 < 3; j2++) {\n                rgbas[c4] = Math.round(color[c3] * 255.0)\n                c3++\n                c4++\n              }\n              c4++\n            }\n          }\n          rgba255 = [...rgba255, ...rgbas]\n        } else if (height < 0.0) {\n          // sphere\n          NiivueObject3D.makeColoredSphere(positions, indices, rgba255, radius, translation, rgba)\n        } else {\n          // https://www.andre-gaschler.com/rotationconverter/\n          const r = mat4.create() // rotation mat4x4\n          mat4.fromRotation(r, rotation[3], [rotation[0], rotation[1], rotation[2]])\n          const pti = vec4.fromValues(0, -height * 0.5, 0, 1)\n          const ptj = vec4.fromValues(0, +height * 0.5, 0, 1)\n          vec4.transformMat4(pti, pti, r)\n          vec4.transformMat4(ptj, ptj, r)\n          vec4.add(pti, pti, translation)\n          vec4.add(ptj, ptj, translation)\n          const pti3 = vec3.fromValues(pti[0], pti[1], pti[2])\n          const ptj3 = vec3.fromValues(ptj[0], ptj[1], ptj[2])\n          // https://www.web3d.org/specifications/X3Dv4Draft/ISO-IEC19775-1v4-CD/Part01/components/geometry3D.html#Cylinder\n          NiivueObject3D.makeColoredCylinder(positions, indices, rgba255, pti3, ptj3, radius, rgba)\n        }\n      } // while <shape\n    }\n    return {\n      positions: Float32Array.from(positions),\n      indices: Uint32Array.from(indices),\n      rgba255: Uint8Array.from(rgba255)\n    }\n  } // readX3D()\n\n  // read GIfTI format mesh\n  // https://www.nitrc.org/projects/gifti/\n  static readGII(buffer: ArrayBuffer, n_vert = 0): GII {\n    let len = buffer.byteLength\n    if (len < 20) {\n      throw new Error('File too small to be GII: bytes = ' + len)\n    }\n    let chars = new TextDecoder('ascii').decode(buffer)\n    if (chars[0].charCodeAt(0) === 31) {\n      // raw GIFTI saved as .gii.gz is smaller than gz GIFTI due to base64 overhead\n      const raw = decompressSync(new Uint8Array(buffer))\n      buffer = raw.buffer\n      chars = new TextDecoder('ascii').decode(raw.buffer)\n    }\n    let pos = 0\n    function readXMLtag(): XmlTag {\n      let isEmptyTag = true\n      let startPos = pos\n      while (isEmptyTag) {\n        // while (pos < len && chars[pos] === 10) pos++; //skip blank lines\n        while (pos < len && chars[pos] !== '<') {\n          pos++\n        } // find tag start symbol: '<' e.g. \"<tag>\"\n        startPos = pos\n        while (pos < len && chars[pos] !== '>') {\n          pos++\n        } // find tag end symbol: '>' e.g. \"<tag>\"\n        isEmptyTag = chars[pos - 1] === '/' // empty tag ends \"/>\" e.g. \"<br/>\"\n        if (startPos + 1 < len && chars[startPos + 1] === '/') {\n          // skip end tag \"</\"\n          pos += 1\n          isEmptyTag = true\n        }\n        // let endTagPos = pos;\n        if (pos >= len) {\n          break\n        }\n      }\n      const tagString = new TextDecoder().decode(buffer.slice(startPos + 1, pos)).trim()\n      const startTag = tagString.split(' ')[0].trim()\n      // ignore declarations https://stackoverflow.com/questions/60801060/what-does-mean-in-xml\n      const contentStartPos = pos\n      let contentEndPos = pos\n      let endPos = pos\n      if (chars[startPos + 1] !== '?' && chars[startPos + 1] !== '!') {\n        // ignore declarations \"<?\" and \"<!\"\n        const endTag = '</' + startTag + '>'\n        contentEndPos = chars.indexOf(endTag, contentStartPos)\n        endPos = contentEndPos + endTag.length - 1\n      }\n      // <name>content</name>\n      // a    b      c      d\n      // a: startPos\n      // b: contentStartPos\n      // c: contentEndPos\n      // d: endPos\n      return {\n        name: tagString,\n        startPos,\n        contentStartPos,\n        contentEndPos,\n        endPos\n      } //, 'startTagLastPos': startTagLastPos, 'endTagFirstPos': endTagFirstPos, 'endTagLastPos': endTagLastPos];\n    }\n    let tag = readXMLtag()\n    if (!tag.name.startsWith('?xml')) {\n      throw new Error('readGII: Invalid XML file')\n    }\n    while (!tag.name.startsWith('GIFTI') && tag.endPos < len) {\n      tag = readXMLtag()\n    }\n    if (!tag.name.startsWith('GIFTI') || tag.contentStartPos === tag.contentEndPos) {\n      throw new Error('readGII: XML file does not include GIFTI tag')\n    }\n    len = tag.contentEndPos // only read contents of GIfTI tag\n    let positions = new Float32Array()\n    let indices = new Uint32Array()\n    let scalars = new Float32Array()\n    let anatomicalStructurePrimary = ''\n    let isIdx = false\n    let isPts = false\n    let isVectors = false\n    let isColMajor = false\n    let Dims = [1, 1, 1]\n    const FreeSurferTranlate = [0, 0, 0] // https://gist.github.com/alexisthual/f0b2f9eb2a67b8f61798f2c138dda981\n    let dataType = 0\n    // let isLittleEndian = true;\n    let isGzip = false\n    let isASCII = false\n    let nvert = 0\n    // FreeSurfer versions after 20221225 disambiguate if transform has been applied\n    // \"./mris_convert --to-scanner\" store raw vertex positions in scanner space, so transforms should be ignored.\n    //  FreeSurfer versions after 20221225 report that the transform is applied by reporting:\n    //   <DataSpace><![CDATA[NIFTI_XFORM_SCANNER_ANAT\n    let isDataSpaceScanner = false\n    tag.endPos = tag.contentStartPos // read the children of the 'GIFTI' tag\n    let line = ''\n    function readNumericTag(TagName: string, isFloat = false): number {\n      // Tag 'Dim1' will return 3 for Dim1=\"3\"\n      const pos = line.indexOf(TagName)\n      if (pos < 0) {\n        return 1\n      }\n      const spos = line.indexOf('\"', pos) + 1\n      const epos = line.indexOf('\"', spos)\n      const str = line.slice(spos, epos)\n      if (isFloat) {\n        return parseFloat(str)\n      } else {\n        return parseInt(str)\n      }\n    }\n    function readBracketTag(TagName: string): string {\n      const pos = line.indexOf(TagName)\n      if (pos < 0) {\n        return ''\n      }\n      const spos = pos + TagName.length\n      const epos = line.indexOf(']', spos)\n      return line.slice(spos, epos)\n    }\n    const Labels: ColorMap = { R: [], G: [], B: [], A: [], I: [], labels: [] }\n    while (tag.endPos < len && tag.name.length > 1) {\n      tag = readXMLtag()\n      if (tag.name.startsWith('Label Key')) {\n        line = tag.name\n        Labels.I.push(readNumericTag('Key='))\n        Labels.R.push(Math.round(255 * readNumericTag('Red=', true)))\n        Labels.G.push(Math.round(255 * readNumericTag('Green=', true)))\n        Labels.B.push(Math.round(255 * readNumericTag('Blue=', true)))\n        Labels.A.push(Math.round(255 * readNumericTag('Alpha', true)))\n        line = new TextDecoder().decode(buffer.slice(tag.contentStartPos + 1, tag.contentEndPos)).trim()\n        Labels.labels!.push(readBracketTag('<![CDATA['))\n      }\n      if (tag.name.trim() === 'Data') {\n        if (isVectors) {\n          continue\n        }\n        line = new TextDecoder().decode(buffer.slice(tag.contentStartPos + 1, tag.contentEndPos)).trim()\n        // Data can be on one to three lines...\n        let datBin: Int32Array | Float32Array | Uint8Array\n        if (isASCII) {\n          const nvert = Dims[0] * Dims[1] * Dims[2]\n          const lines = line.split(/\\s+/) // .split(/[ ,]+/);\n          if (nvert !== lines.length) {\n            throw new Error('Unable to parse ASCII GIfTI')\n          }\n          if (dataType === 2) {\n            dataType = 8\n          } // UInt8 -> Int32\n          if (dataType === 32) {\n            dataType = 16\n          } // float64 -> float32\n          if (dataType === 8) {\n            datBin = new Int32Array(nvert)\n            for (let v = 0; v < nvert; v++) {\n              datBin[v] = parseInt(lines[v])\n            }\n          }\n          if (dataType === 16) {\n            datBin = new Float32Array(nvert)\n            for (let v = 0; v < nvert; v++) {\n              datBin[v] = parseFloat(lines[v])\n            }\n          }\n        } else if (typeof Buffer === 'undefined') {\n          // raw.gii\n          function base64ToUint8(base64: string): Uint8Array {\n            const binary_string = atob(base64)\n            const len = binary_string.length\n            const bytes = new Uint8Array(len)\n            for (let i = 0; i < len; i++) {\n              bytes[i] = binary_string.charCodeAt(i)\n            }\n            return bytes\n          }\n          if (isGzip) {\n            const datZ = base64ToUint8(line.slice())\n            datBin = decompressSync(new Uint8Array(datZ))\n          } else {\n            datBin = base64ToUint8(line.slice())\n          }\n        } else {\n          // if Buffer not defined\n          if (isGzip) {\n            const datZ = Buffer.from(line.slice(), 'base64')\n            datBin = decompressSync(new Uint8Array(datZ))\n          } else {\n            datBin = Buffer.from(line.slice(), 'base64')\n          }\n        }\n        if (isPts) {\n          if (dataType !== 16) {\n            log.warn('expect positions as FLOAT32')\n          }\n          positions = new Float32Array(datBin!.buffer) // TODO can we guarantee this?\n          if (isColMajor) {\n            const tmp = positions.slice()\n            const np = tmp.length / 3\n            let j = 0\n            for (let p = 0; p < np; p++) {\n              for (let i = 0; i < 3; i++) {\n                positions[j] = tmp[i * np + p]\n                j++\n              }\n            }\n          } // isColMajor\n        } else if (isIdx) {\n          if (dataType !== 8) {\n            log.warn('expect indices as INT32')\n          }\n          indices = new Uint32Array(datBin!.buffer)\n          if (isColMajor) {\n            const tmp = indices.slice()\n            const np = tmp.length / 3\n            let j = 0\n            for (let p = 0; p < np; p++) {\n              for (let i = 0; i < 3; i++) {\n                indices[j] = tmp[i * np + p]\n                j++\n              }\n            }\n          } // isColMajor\n        } else {\n          // not position or indices: assume scalars NIFTI_INTENT_NONE\n          nvert = Dims[0] * Dims[1] * Dims[2]\n          if (n_vert !== 0) {\n            if (nvert % n_vert !== 0) {\n              log.warn('Number of vertices in scalar overlay (' + nvert + ') does not match mesh (' + n_vert + ')')\n            }\n          }\n          function Float32Concat(first: Float32Array, second: Float32Array): Float32Array {\n            const firstLength = first.length\n            const result = new Float32Array(firstLength + second.length)\n            result.set(first)\n            result.set(second, firstLength)\n            return result\n          } // Float32Concat()\n          let scalarsNew\n          if (dataType === 2) {\n            const scalarsInt = new Uint8Array(datBin!.buffer)\n            scalarsNew = Float32Array.from(scalarsInt)\n          } else if (dataType === 8) {\n            const scalarsInt = new Int32Array(datBin!.buffer)\n            scalarsNew = Float32Array.from(scalarsInt)\n          } else if (dataType === 16) {\n            scalarsNew = new Float32Array(datBin!.buffer)\n          } else if (dataType === 32) {\n            const scalarFloat = new Float64Array(datBin!.buffer)\n            scalarsNew = Float32Array.from(scalarFloat)\n          } else {\n            throw new Error(`Invalid dataType: ${dataType}`)\n          }\n          scalars = Float32Concat(scalars as Float32Array, scalarsNew)\n        }\n        continue\n      }\n      if (tag.name.trim() === 'DataSpace') {\n        line = new TextDecoder().decode(buffer.slice(tag.contentStartPos + 1, tag.contentEndPos)).trim()\n        if (line.includes('NIFTI_XFORM_SCANNER_ANAT')) {\n          isDataSpaceScanner = true\n        }\n      }\n      if (tag.name.trim() === 'MD') {\n        line = new TextDecoder().decode(buffer.slice(tag.contentStartPos + 1, tag.contentEndPos)).trim()\n        if (line.includes('AnatomicalStructurePrimary') && line.includes('CDATA[')) {\n          anatomicalStructurePrimary = readBracketTag('<Value><![CDATA[').toUpperCase()\n          // this.AnatomicalStructurePrimary  = anatomicalStructurePrimary\n        }\n        if (line.includes('VolGeom') && line.includes('CDATA[')) {\n          let e = -1\n          if (line.includes('VolGeomC_R')) {\n            e = 0\n          }\n          if (line.includes('VolGeomC_A')) {\n            e = 1\n          }\n          if (line.includes('VolGeomC_S')) {\n            e = 2\n          }\n          if (e < 0) {\n            continue\n          }\n          FreeSurferTranlate[e] = parseFloat(readBracketTag('<Value><![CDATA['))\n        }\n      }\n      // read DataArray properties\n      if (!tag.name.startsWith('DataArray')) {\n        continue\n      }\n      line = tag.name\n      Dims = [1, 1, 1]\n      isGzip = line.includes('Encoding=\"GZipBase64Binary\"')\n      isASCII = line.includes('Encoding=\"ASCII\"')\n      isIdx = line.includes('Intent=\"NIFTI_INTENT_TRIANGLE\"')\n      isPts = line.includes('Intent=\"NIFTI_INTENT_POINTSET\"')\n      isVectors = line.includes('Intent=\"NIFTI_INTENT_VECTOR\"')\n      isColMajor = line.includes('ArrayIndexingOrder=\"ColumnMajorOrder\"')\n      // isLittleEndian = line.includes('Endian=\"LittleEndian\"');\n      if (line.includes('DataType=\"NIFTI_TYPE_UINT8\"')) {\n        dataType = 2\n      } // DT_UINT8\n      if (line.includes('DataType=\"NIFTI_TYPE_INT32\"')) {\n        dataType = 8\n      } // DT_INT32\n      if (line.includes('DataType=\"NIFTI_TYPE_FLOAT32\"')) {\n        dataType = 16\n      } // DT_FLOAT32\n      if (line.includes('DataType=\"NIFTI_TYPE_FLOAT64\"')) {\n        dataType = 32\n      } // DT_FLOAT64\n      Dims[0] = readNumericTag('Dim0=')\n      Dims[1] = readNumericTag('Dim1=')\n      Dims[2] = readNumericTag('Dim2=')\n    }\n    let colormapLabel\n    if (Labels.I.length > 1) {\n      colormapLabel = cmapper.makeLabelLut(Labels)\n    }\n    if (n_vert > 0) {\n      return { scalars, colormapLabel, anatomicalStructurePrimary }\n    }\n    if (\n      positions!.length > 2 &&\n      !isDataSpaceScanner &&\n      (FreeSurferTranlate[0] !== 0 || FreeSurferTranlate[1] !== 0 || FreeSurferTranlate[2] !== 0)\n    ) {\n      nvert = Math.floor(positions!.length / 3)\n      let i = 0\n      for (let v = 0; v < nvert; v++) {\n        positions![i] += FreeSurferTranlate[0]\n        i++\n        positions[i] += FreeSurferTranlate[1]\n        i++\n        positions[i] += FreeSurferTranlate[2]\n        i++\n      }\n    } // issue416: apply FreeSurfer translation\n    return {\n      positions,\n      indices,\n      scalars,\n      colormapLabel,\n      anatomicalStructurePrimary\n    } // MatrixData\n  } // readGII()\n}\n","import arrayEqual from 'array-equal'\nimport { compress, decompress, decompressSync, strFromU8, strToU8 } from 'fflate/browser'\nimport { mat4, vec3, vec4 } from 'gl-matrix'\n\n// TODO: TypedNumberArray also in nvmesh-types.ts\ntype TypedNumberArray =\n  | Float64Array\n  | Float32Array\n  | Uint32Array\n  | Uint16Array\n  | Uint8Array\n  | Int32Array\n  | Int16Array\n  | Int8Array\n\n/**\n * Namespace for utility functions\n * @ignore\n */\nexport class NVUtilities {\n  static arrayBufferToBase64(arrayBuffer: ArrayBuffer): string {\n    const bytes = new Uint8Array(arrayBuffer)\n    return NVUtilities.uint8tob64(bytes)\n  }\n\n  static readMatV4(buffer: ArrayBuffer): Record<string, TypedNumberArray> {\n    let len = buffer.byteLength\n    if (len < 40) {\n      throw new Error('File too small to be MAT v4: bytes = ' + buffer.byteLength)\n    }\n    let reader = new DataView(buffer)\n    let magic = reader.getUint16(0, true)\n    let _buffer = buffer\n    if (magic === 35615 || magic === 8075) {\n      // gzip signature 0x1F8B in little and big endian\n      const raw = decompressSync(new Uint8Array(buffer))\n      reader = new DataView(raw.buffer)\n      magic = reader.getUint16(0, true)\n      _buffer = raw.buffer\n      len = _buffer.byteLength\n    }\n    const textDecoder = new TextDecoder('utf-8')\n    const bytes = new Uint8Array(_buffer)\n    let pos = 0\n    const mat: Record<string, TypedNumberArray> = {}\n    function getTensDigit(v: number): number {\n      return Math.floor(v / 10) % 10\n    }\n    function readArray(tagDataType: number, tagBytesStart: number, tagBytesEnd: number): TypedNumberArray {\n      const byteArray = new Uint8Array(bytes.subarray(tagBytesStart, tagBytesEnd))\n      if (tagDataType === 1) {\n        return new Float32Array(byteArray.buffer)\n      }\n      if (tagDataType === 2) {\n        return new Int32Array(byteArray.buffer)\n      }\n      if (tagDataType === 3) {\n        return new Int16Array(byteArray.buffer)\n      }\n      if (tagDataType === 4) {\n        return new Uint16Array(byteArray.buffer)\n      }\n      if (tagDataType === 5) {\n        return new Uint8Array(byteArray.buffer)\n      }\n      return new Float64Array(byteArray.buffer)\n    }\n    function readTag(): void {\n      const mtype = reader.getUint32(pos, true)\n      const mrows = reader.getUint32(pos + 4, true)\n      const ncols = reader.getUint32(pos + 8, true)\n      const imagf = reader.getUint32(pos + 12, true)\n      const namlen = reader.getUint32(pos + 16, true)\n      pos += 20 // skip header\n      if (imagf !== 0) {\n        throw new Error('Matlab V4 reader does not support imaginary numbers')\n      }\n      const tagArrayItems = mrows * ncols\n      if (tagArrayItems < 1) {\n        throw new Error('mrows * ncols must be greater than one')\n      }\n      const byteArray = new Uint8Array(bytes.subarray(pos, pos + namlen))\n      const tagName = textDecoder.decode(byteArray).trim().replaceAll('\\x00', '')\n      const tagDataType = getTensDigit(mtype)\n      // 0 double-precision (64-bit) floating-point numbers\n      // 1 single-precision (32-bit) floating-point numbers\n      // 2 32-bit signed integers\n      // 3 16-bit signed integers\n      // 4 16-bit unsigned integers\n      // 5 8-bit unsigned integers\n      let tagBytesPerItem = 8\n      if (tagDataType >= 1 && tagDataType <= 2) {\n        tagBytesPerItem = 4\n      } else if (tagDataType >= 3 && tagDataType <= 4) {\n        tagBytesPerItem = 2\n      } else if (tagDataType === 5) {\n        tagBytesPerItem = 1\n      } else if (tagDataType !== 0) {\n        throw new Error('impossible Matlab v4 datatype')\n      }\n      pos += namlen // skip name\n      if (mtype > 50) {\n        throw new Error('Does not appear to be little-endian V4 Matlab file')\n      }\n      const posEnd = pos + tagArrayItems * tagBytesPerItem\n      mat[tagName] = readArray(tagDataType, pos, posEnd)\n      pos = posEnd\n    }\n    while (pos + 20 < len) {\n      readTag()\n    }\n    return mat\n  } // readMatV4()\n\n  /*\nhttps://gist.github.com/jonleighton/958841\nMIT LICENSE\nCopyright 2011 Jon Leighton\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n*/\n  static uint8tob64(bytes: Uint8Array): string {\n    // TODO: use TextDecoder instead of shipping own implementation\n\n    let base64 = ''\n    const encodings = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\n    const byteLength = bytes.byteLength\n    const byteRemainder = byteLength % 3\n    const mainLength = byteLength - byteRemainder\n\n    let a, b, c, d\n    let chunk\n\n    // Main loop deals with bytes in chunks of 3\n    for (let i = 0; i < mainLength; i = i + 3) {\n      // Combine the three bytes into a single integer\n      chunk = (bytes[i] << 16) | (bytes[i + 1] << 8) | bytes[i + 2]\n\n      // Use bitmasks to extract 6-bit segments from the triplet\n      a = (chunk & 16515072) >> 18 // 16515072 = (2^6 - 1) << 18\n      b = (chunk & 258048) >> 12 // 258048   = (2^6 - 1) << 12\n      c = (chunk & 4032) >> 6 // 4032     = (2^6 - 1) << 6\n      d = chunk & 63 // 63       = 2^6 - 1\n\n      // Convert the raw binary segments to the appropriate ASCII encoding\n      base64 += encodings[a] + encodings[b] + encodings[c] + encodings[d]\n    }\n\n    // Deal with the remaining bytes and padding\n    if (byteRemainder === 1) {\n      chunk = bytes[mainLength]\n\n      a = (chunk & 252) >> 2 // 252 = (2^6 - 1) << 2\n\n      // Set the 4 least significant bits to zero\n      b = (chunk & 3) << 4 // 3   = 2^2 - 1\n\n      base64 += encodings[a] + encodings[b] + '=='\n    } else if (byteRemainder === 2) {\n      chunk = (bytes[mainLength] << 8) | bytes[mainLength + 1]\n\n      a = (chunk & 64512) >> 10 // 64512 = (2^6 - 1) << 10\n      b = (chunk & 1008) >> 4 // 1008  = (2^6 - 1) << 4\n\n      // Set the 2 least significant bits to zero\n      c = (chunk & 15) << 2 // 15    = 2^4 - 1\n\n      base64 += encodings[a] + encodings[b] + encodings[c] + '='\n    }\n\n    return base64\n  }\n\n  // https://stackoverflow.com/questions/34156282/how-do-i-save-json-to-local-text-file\n  static download(content: string | ArrayBuffer, fileName: string, contentType: string): void {\n    const a = document.createElement('a')\n    const contentArray = Array.isArray(content) ? content : [content]\n    const file = new Blob(contentArray, { type: contentType })\n    a.href = URL.createObjectURL(file)\n    a.download = fileName\n    a.click()\n  }\n\n  static readFileAsync(file: Blob): Promise<ArrayBuffer> {\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader()\n      reader.onload = (): void => {\n        resolve(reader.result as ArrayBuffer)\n      }\n\n      reader.onerror = reject\n\n      reader.readAsArrayBuffer(file)\n    })\n  }\n\n  static blobToBase64(blob: Blob): Promise<string> {\n    return new Promise((resolve) => {\n      const reader = new FileReader()\n      reader.onloadend = (): void => resolve(reader.result as string)\n      reader.readAsDataURL(blob)\n    })\n  }\n\n  static async decompressBase64String(base64: string): Promise<string> {\n    const compressed = atob(base64)\n    // convert to an array buffer\n    const compressedBuffer = new ArrayBuffer(compressed.length)\n    const compressedView = new Uint8Array(compressedBuffer)\n    for (let i = 0; i < compressed.length; i++) {\n      compressedView[i] = compressed.charCodeAt(i)\n    }\n    return NVUtilities.decompressArrayBuffer(compressedView)\n  }\n\n  static async compressToBase64String(string: string): Promise<string> {\n    const buf = await NVUtilities.compressStringToArrayBuffer(string)\n    return NVUtilities.uint8tob64(new Uint8Array(buf))\n  }\n\n  static async compressStringToArrayBuffer(input: string): Promise<ArrayBuffer> {\n    return new Promise((resolve, reject) => {\n      const uint8Array = strToU8(input)\n\n      compress(uint8Array, (err, compressed) => {\n        if (err) {\n          reject(err)\n        } else {\n          resolve(compressed.buffer)\n        }\n      })\n    })\n  }\n\n  static isArrayBufferCompressed(buffer: ArrayBuffer): boolean {\n    if (buffer && buffer.byteLength) {\n      const arr = new Uint8Array(buffer)\n      const magicNumber = (arr[0] << 8) | arr[1]\n      return magicNumber === 0x1f8b\n    } else {\n      return false\n    }\n  }\n\n  static async decompressArrayBuffer(buffer: ArrayBuffer): Promise<string> {\n    return new Promise((resolve, reject) => {\n      const uint8Array = new Uint8Array(buffer)\n\n      decompress(uint8Array, (err, decompressed) => {\n        if (err) {\n          reject(err)\n        } else {\n          const result = strFromU8(decompressed)\n          resolve(result)\n        }\n      })\n    })\n  }\n\n  static arraysAreEqual(a: unknown[], b: unknown[]): boolean {\n    return arrayEqual(a, b)\n  }\n\n  /**\n   * Generate a pre-filled number array.\n   *\n   * @param start - start value\n   * @param stop - stop value\n   * @param step - step value\n   * @returns filled number array\n   */\n  static range(start: number, stop: number, step: number): number[] {\n    return Array.from({ length: (stop - start) / step + 1 }, (_, i) => start + i * step)\n  }\n\n  /**\n   * convert spherical AZIMUTH, ELEVATION to Cartesian\n   * @param azimuth - azimuth number\n   * @param elevation - elevation number\n   * @returns the converted [x, y, z] coordinates\n   * @example\n   * xyz = NVUtilities.sph2cartDeg(42, 42)\n   */\n  static sph2cartDeg(azimuth: number, elevation: number): number[] {\n    // convert spherical AZIMUTH,ELEVATION,RANGE to Cartesion\n    // see Matlab's [x,y,z] = sph2cart(THETA,PHI,R)\n    // reverse with cart2sph\n    const Phi = -elevation * (Math.PI / 180)\n    const Theta = ((azimuth - 90) % 360) * (Math.PI / 180)\n    const ret = [Math.cos(Phi) * Math.cos(Theta), Math.cos(Phi) * Math.sin(Theta), Math.sin(Phi)]\n    const len = Math.sqrt(ret[0] * ret[0] + ret[1] * ret[1] + ret[2] * ret[2])\n    if (len <= 0.0) {\n      return ret\n    }\n    ret[0] /= len\n    ret[1] /= len\n    ret[2] /= len\n    return ret\n  }\n\n  static vox2mm(XYZ: number[], mtx: mat4): vec3 {\n    const sform = mat4.clone(mtx)\n    mat4.transpose(sform, sform)\n    const pos = vec4.fromValues(XYZ[0], XYZ[1], XYZ[2], 1)\n    vec4.transformMat4(pos, pos, sform)\n    const pos3 = vec3.fromValues(pos[0], pos[1], pos[2])\n    return pos3\n  }\n}\n","{\n  \"atlas\": {\n    \"type\": \"msdf\",\n    \"distanceRange\": 2,\n    \"size\": 59.65625,\n    \"width\": 512,\n    \"height\": 256,\n    \"yOrigin\": \"bottom\"\n  },\n  \"metrics\": {\n    \"emSize\": 1,\n    \"lineHeight\": 1.171875,\n    \"ascender\": 0.927734375,\n    \"descender\": -0.244140625,\n    \"underlineY\": -0.09765625,\n    \"underlineThickness\": 0.048828125\n  },\n  \"glyphs\": [\n    { \"unicode\": 32, \"advance\": 0.24755859375 },\n    {\n      \"unicode\": 33,\n      \"advance\": 0.25732421875,\n      \"planeBounds\": {\n        \"left\": 0.056159633438645884,\n        \"bottom\": -0.024377614056770559,\n        \"right\": 0.20702396031135412,\n        \"top\": 0.72994402030677052\n      },\n      \"atlasBounds\": {\n        \"left\": 488.5,\n        \"bottom\": 145.5,\n        \"right\": 497.5,\n        \"top\": 190.5\n      }\n    },\n    {\n      \"unicode\": 34,\n      \"advance\": 0.31982421875,\n      \"planeBounds\": {\n        \"left\": 0.049409125974004715,\n        \"bottom\": 0.48691155587022,\n        \"right\": 0.28408696777599529,\n        \"top\": 0.77187750662978005\n      },\n      \"atlasBounds\": {\n        \"left\": 486.5,\n        \"bottom\": 213.5,\n        \"right\": 500.5,\n        \"top\": 230.5\n      }\n    },\n    {\n      \"unicode\": 35,\n      \"advance\": 0.61572265625,\n      \"planeBounds\": {\n        \"left\": 0.037219103997511785,\n        \"bottom\": -0.021692067181770559,\n        \"right\": 0.62391370850248817,\n        \"top\": 0.73262956718177052\n      },\n      \"atlasBounds\": {\n        \"left\": 66.5,\n        \"bottom\": 51.5,\n        \"right\": 101.5,\n        \"top\": 96.5\n      }\n    },\n    {\n      \"unicode\": 36,\n      \"advance\": 0.5615234375,\n      \"planeBounds\": {\n        \"left\": 0.02956531458715296,\n        \"bottom\": -0.12381369908983761,\n        \"right\": 0.53244640416284716,\n        \"top\": 0.84842307408983775\n      },\n      \"atlasBounds\": {\n        \"left\": 109.5,\n        \"bottom\": 197.5,\n        \"right\": 139.5,\n        \"top\": 255.5\n      }\n    },\n    {\n      \"unicode\": 37,\n      \"advance\": 0.732421875,\n      \"planeBounds\": {\n        \"left\": 0.026481776289942378,\n        \"bottom\": -0.030073418674698794,\n        \"right\": 0.71375259871005758,\n        \"top\": 0.74101091867469893\n      },\n      \"atlasBounds\": {\n        \"left\": 88.5,\n        \"bottom\": 144.5,\n        \"right\": 129.5,\n        \"top\": 190.5\n      }\n    },\n    {\n      \"unicode\": 38,\n      \"advance\": 0.62158203125,\n      \"planeBounds\": {\n        \"left\": 0.03225572125458355,\n        \"bottom\": -0.030073418674698794,\n        \"right\": 0.63571302874541658,\n        \"top\": 0.74101091867469893\n      },\n      \"atlasBounds\": {\n        \"left\": 130.5,\n        \"bottom\": 144.5,\n        \"right\": 166.5,\n        \"top\": 190.5\n      }\n    },\n    {\n      \"unicode\": 39,\n      \"advance\": 0.17431640625,\n      \"planeBounds\": {\n        \"left\": 0.028244602049502358,\n        \"bottom\": 0.49895501673814824,\n        \"right\": 0.14558352295049765,\n        \"top\": 0.76715826451185176\n      },\n      \"atlasBounds\": {\n        \"left\": 498.5,\n        \"bottom\": 62.5,\n        \"right\": 505.5,\n        \"top\": 78.5\n      }\n    },\n    {\n      \"unicode\": 40,\n      \"advance\": 0.341796875,\n      \"planeBounds\": {\n        \"left\": 0.042983329377291775,\n        \"bottom\": -0.25002954242240699,\n        \"right\": 0.34471198312270823,\n        \"top\": 0.82278344867240716\n      },\n      \"atlasBounds\": {\n        \"left\": 0.5,\n        \"bottom\": 191.5,\n        \"right\": 18.5,\n        \"top\": 255.5\n      }\n    },\n    {\n      \"unicode\": 41,\n      \"advance\": 0.34765625,\n      \"planeBounds\": {\n        \"left\": -0.0031592487477082251,\n        \"bottom\": -0.25002954242240699,\n        \"right\": 0.29856940499770823,\n        \"top\": 0.82278344867240716\n      },\n      \"atlasBounds\": {\n        \"left\": 19.5,\n        \"bottom\": 191.5,\n        \"right\": 37.5,\n        \"top\": 255.5\n      }\n    },\n    {\n      \"unicode\": 42,\n      \"advance\": 0.4306640625,\n      \"planeBounds\": {\n        \"left\": -0.011208599684062338,\n        \"bottom\": 0.27785390031593765,\n        \"right\": 0.44138438093406235,\n        \"top\": 0.73044688093406229\n      },\n      \"atlasBounds\": {\n        \"left\": 449.5,\n        \"bottom\": 23.5,\n        \"right\": 476.5,\n        \"top\": 50.5\n      }\n    },\n    {\n      \"unicode\": 43,\n      \"advance\": 0.56689453125,\n      \"planeBounds\": {\n        \"left\": 0.01353503347629649,\n        \"bottom\": 0.053493525733368255,\n        \"right\": 0.54994152902370363,\n        \"top\": 0.6066627242666317\n      },\n      \"atlasBounds\": {\n        \"left\": 361.5,\n        \"bottom\": 17.5,\n        \"right\": 393.5,\n        \"top\": 50.5\n      }\n    },\n    {\n      \"unicode\": 44,\n      \"advance\": 0.1962890625,\n      \"planeBounds\": {\n        \"left\": -0.0099194757972105828,\n        \"bottom\": -0.15981695975478,\n        \"right\": 0.17447025704721059,\n        \"top\": 0.12514899100478\n      },\n      \"atlasBounds\": {\n        \"left\": 498.5,\n        \"bottom\": 79.5,\n        \"right\": 509.5,\n        \"top\": 96.5\n      }\n    },\n    {\n      \"unicode\": 45,\n      \"advance\": 0.27587890625,\n      \"planeBounds\": {\n        \"left\": -0.00527594412977999,\n        \"bottom\": 0.24333249267450235,\n        \"right\": 0.27969000662978,\n        \"top\": 0.36067141357549765\n      },\n      \"atlasBounds\": { \"left\": 52.5, \"bottom\": 7.5, \"right\": 69.5, \"top\": 14.5 }\n    },\n    {\n      \"unicode\": 46,\n      \"advance\": 0.26318359375,\n      \"planeBounds\": {\n        \"left\": 0.051032680313645884,\n        \"bottom\": -0.027092319686354116,\n        \"right\": 0.20189700718635412,\n        \"top\": 0.12377200718635412\n      },\n      \"atlasBounds\": {\n        \"left\": 501.5,\n        \"bottom\": 221.5,\n        \"right\": 510.5,\n        \"top\": 230.5\n      }\n    },\n    {\n      \"unicode\": 47,\n      \"advance\": 0.412109375,\n      \"planeBounds\": {\n        \"left\": -0.013733006073205867,\n        \"bottom\": -0.085735051278483493,\n        \"right\": 0.40533456857320588,\n        \"top\": 0.73563739502848347\n      },\n      \"atlasBounds\": {\n        \"left\": 252.5,\n        \"bottom\": 206.5,\n        \"right\": 277.5,\n        \"top\": 255.5\n      }\n    },\n    {\n      \"unicode\": 48,\n      \"advance\": 0.5615234375,\n      \"planeBounds\": {\n        \"left\": 0.037458384830081196,\n        \"bottom\": -0.030073418674698794,\n        \"right\": 0.52357677141991887,\n        \"top\": 0.74101091867469893\n      },\n      \"atlasBounds\": {\n        \"left\": 167.5,\n        \"bottom\": 144.5,\n        \"right\": 196.5,\n        \"top\": 190.5\n      }\n    },\n    {\n      \"unicode\": 49,\n      \"advance\": 0.5615234375,\n      \"planeBounds\": {\n        \"left\": 0.06023674350936354,\n        \"bottom\": -0.019983082806770559,\n        \"right\": 0.37872810024063647,\n        \"top\": 0.73433855155677052\n      },\n      \"atlasBounds\": {\n        \"left\": 488.5,\n        \"bottom\": 97.5,\n        \"right\": 507.5,\n        \"top\": 142.5\n      }\n    },\n    {\n      \"unicode\": 50,\n      \"advance\": 0.5615234375,\n      \"planeBounds\": {\n        \"left\": 0.025334353719224725,\n        \"bottom\": -0.016809254681770559,\n        \"right\": 0.54497814628077523,\n        \"top\": 0.73751237968177052\n      },\n      \"atlasBounds\": {\n        \"left\": 278.5,\n        \"bottom\": 51.5,\n        \"right\": 309.5,\n        \"top\": 96.5\n      }\n    },\n    {\n      \"unicode\": 51,\n      \"advance\": 0.5615234375,\n      \"planeBounds\": {\n        \"left\": 0.028181041080081196,\n        \"bottom\": -0.030073418674698794,\n        \"right\": 0.51429942766991887,\n        \"top\": 0.74101091867469893\n      },\n      \"atlasBounds\": {\n        \"left\": 197.5,\n        \"bottom\": 144.5,\n        \"right\": 226.5,\n        \"top\": 190.5\n      }\n    },\n    {\n      \"unicode\": 52,\n      \"advance\": 0.5615234375,\n      \"planeBounds\": {\n        \"left\": 0.0058861038583682551,\n        \"bottom\": -0.021692067181770559,\n        \"right\": 0.5590553023916317,\n        \"top\": 0.73262956718177052\n      },\n      \"atlasBounds\": {\n        \"left\": 310.5,\n        \"bottom\": 51.5,\n        \"right\": 343.5,\n        \"top\": 96.5\n      }\n    },\n    {\n      \"unicode\": 53,\n      \"advance\": 0.5615234375,\n      \"planeBounds\": {\n        \"left\": 0.055524791080081196,\n        \"bottom\": -0.026574879681770559,\n        \"right\": 0.54164317766991887,\n        \"top\": 0.72774675468177052\n      },\n      \"atlasBounds\": {\n        \"left\": 344.5,\n        \"bottom\": 51.5,\n        \"right\": 373.5,\n        \"top\": 96.5\n      }\n    },\n    {\n      \"unicode\": 54,\n      \"advance\": 0.5615234375,\n      \"planeBounds\": {\n        \"left\": 0.046003306705081196,\n        \"bottom\": -0.034712090549698794,\n        \"right\": 0.53212169329491887,\n        \"top\": 0.73637224679969893\n      },\n      \"atlasBounds\": {\n        \"left\": 227.5,\n        \"bottom\": 144.5,\n        \"right\": 256.5,\n        \"top\": 190.5\n      }\n    },\n    {\n      \"unicode\": 55,\n      \"advance\": 0.5615234375,\n      \"planeBounds\": {\n        \"left\": 0.018010134969224725,\n        \"bottom\": -0.021692067181770559,\n        \"right\": 0.53765392753077523,\n        \"top\": 0.73262956718177052\n      },\n      \"atlasBounds\": {\n        \"left\": 374.5,\n        \"bottom\": 51.5,\n        \"right\": 405.5,\n        \"top\": 96.5\n      }\n    },\n    {\n      \"unicode\": 56,\n      \"advance\": 0.5615234375,\n      \"planeBounds\": {\n        \"left\": 0.037702525455081196,\n        \"bottom\": -0.030073418674698794,\n        \"right\": 0.52382091204491887,\n        \"top\": 0.74101091867469893\n      },\n      \"atlasBounds\": {\n        \"left\": 257.5,\n        \"bottom\": 144.5,\n        \"right\": 286.5,\n        \"top\": 190.5\n      }\n    },\n    {\n      \"unicode\": 57,\n      \"advance\": 0.5615234375,\n      \"planeBounds\": {\n        \"left\": 0.029401744205081196,\n        \"bottom\": -0.025434746799698794,\n        \"right\": 0.51552013079491887,\n        \"top\": 0.74564959054969893\n      },\n      \"atlasBounds\": {\n        \"left\": 287.5,\n        \"bottom\": 144.5,\n        \"right\": 316.5,\n        \"top\": 190.5\n      }\n    },\n    {\n      \"unicode\": 58,\n      \"advance\": 0.2421875,\n      \"planeBounds\": {\n        \"left\": 0.046394008438645884,\n        \"bottom\": -0.029431286627488215,\n        \"right\": 0.19725833531135412,\n        \"top\": 0.55726331787748817\n      },\n      \"atlasBounds\": {\n        \"left\": 439.5,\n        \"bottom\": 61.5,\n        \"right\": 448.5,\n        \"top\": 96.5\n      }\n    },\n    {\n      \"unicode\": 59,\n      \"advance\": 0.21142578125,\n      \"planeBounds\": {\n        \"left\": 0.0010668523277894189,\n        \"bottom\": -0.16459733294591408,\n        \"right\": 0.18545658517221059,\n        \"top\": 0.55619889544591405\n      },\n      \"atlasBounds\": {\n        \"left\": 406.5,\n        \"bottom\": 53.5,\n        \"right\": 417.5,\n        \"top\": 96.5\n      }\n    },\n    {\n      \"unicode\": 60,\n      \"advance\": 0.50830078125,\n      \"planeBounds\": {\n        \"left\": 0.016948142433865897,\n        \"bottom\": 0.072614634830081196,\n        \"right\": 0.45277842006613411,\n        \"top\": 0.55873302141991887\n      },\n      \"atlasBounds\": {\n        \"left\": 394.5,\n        \"bottom\": 21.5,\n        \"right\": 420.5,\n        \"top\": 50.5\n      }\n    },\n    {\n      \"unicode\": 61,\n      \"advance\": 0.548828125,\n      \"planeBounds\": {\n        \"left\": 0.051535540940937666,\n        \"bottom\": 0.17620354038436353,\n        \"right\": 0.5041285215590624,\n        \"top\": 0.49469489711563647\n      },\n      \"atlasBounds\": {\n        \"left\": 477.5,\n        \"bottom\": 31.5,\n        \"right\": 504.5,\n        \"top\": 50.5\n      }\n    },\n    {\n      \"unicode\": 62,\n      \"advance\": 0.5224609375,\n      \"planeBounds\": {\n        \"left\": 0.047629290940937666,\n        \"bottom\": 0.073102916080081196,\n        \"right\": 0.5002222715590624,\n        \"top\": 0.55922130266991887\n      },\n      \"atlasBounds\": {\n        \"left\": 421.5,\n        \"bottom\": 21.5,\n        \"right\": 448.5,\n        \"top\": 50.5\n      }\n    },\n    {\n      \"unicode\": 63,\n      \"advance\": 0.47216796875,\n      \"planeBounds\": {\n        \"left\": 0.016704001808865897,\n        \"bottom\": -0.027876153049698794,\n        \"right\": 0.45253427944113411,\n        \"top\": 0.74320818429969893\n      },\n      \"atlasBounds\": {\n        \"left\": 317.5,\n        \"bottom\": 144.5,\n        \"right\": 343.5,\n        \"top\": 190.5\n      }\n    },\n    {\n      \"unicode\": 64,\n      \"advance\": 0.89794921875,\n      \"planeBounds\": {\n        \"left\": 0.034064457306783605,\n        \"bottom\": -0.23896750384690937,\n        \"right\": 0.87219960659960716,\n        \"top\": 0.71650656634690935\n      },\n      \"atlasBounds\": {\n        \"left\": 155.5,\n        \"bottom\": 198.5,\n        \"right\": 205.5,\n        \"top\": 255.5\n      }\n    },\n    {\n      \"unicode\": 65,\n      \"advance\": 0.65234375,\n      \"planeBounds\": {\n        \"left\": -0.0088380440921293872,\n        \"bottom\": -0.021692067181770559,\n        \"right\": 0.66167007534212952,\n        \"top\": 0.73262956718177052\n      },\n      \"atlasBounds\": {\n        \"left\": 237.5,\n        \"bottom\": 51.5,\n        \"right\": 277.5,\n        \"top\": 96.5\n      }\n    },\n    {\n      \"unicode\": 66,\n      \"advance\": 0.62255859375,\n      \"planeBounds\": {\n        \"left\": 0.064640994344224725,\n        \"bottom\": -0.021692067181770559,\n        \"right\": 0.58428478690577523,\n        \"top\": 0.73262956718177052\n      },\n      \"atlasBounds\": {\n        \"left\": 205.5,\n        \"bottom\": 51.5,\n        \"right\": 236.5,\n        \"top\": 96.5\n      }\n    },\n    {\n      \"unicode\": 67,\n      \"advance\": 0.65087890625,\n      \"planeBounds\": {\n        \"left\": 0.038439807122511785,\n        \"bottom\": -0.030073418674698794,\n        \"right\": 0.62513441162748817,\n        \"top\": 0.74101091867469893\n      },\n      \"atlasBounds\": {\n        \"left\": 344.5,\n        \"bottom\": 144.5,\n        \"right\": 379.5,\n        \"top\": 190.5\n      }\n    },\n    {\n      \"unicode\": 68,\n      \"advance\": 0.65576171875,\n      \"planeBounds\": {\n        \"left\": 0.063015010108368255,\n        \"bottom\": -0.021692067181770559,\n        \"right\": 0.6161842086416317,\n        \"top\": 0.73262956718177052\n      },\n      \"atlasBounds\": {\n        \"left\": 162.5,\n        \"bottom\": 51.5,\n        \"right\": 195.5,\n        \"top\": 96.5\n      }\n    },\n    {\n      \"unicode\": 69,\n      \"advance\": 0.568359375,\n      \"planeBounds\": {\n        \"left\": 0.065290416080081196,\n        \"bottom\": -0.021692067181770559,\n        \"right\": 0.55140880266991887,\n        \"top\": 0.73262956718177052\n      },\n      \"atlasBounds\": {\n        \"left\": 132.5,\n        \"bottom\": 51.5,\n        \"right\": 161.5,\n        \"top\": 96.5\n      }\n    },\n    {\n      \"unicode\": 70,\n      \"advance\": 0.552734375,\n      \"planeBounds\": {\n        \"left\": 0.059675181705081196,\n        \"bottom\": -0.021692067181770559,\n        \"right\": 0.54579356829491887,\n        \"top\": 0.73262956718177052\n      },\n      \"atlasBounds\": {\n        \"left\": 102.5,\n        \"bottom\": 51.5,\n        \"right\": 131.5,\n        \"top\": 96.5\n      }\n    },\n    {\n      \"unicode\": 71,\n      \"advance\": 0.68115234375,\n      \"planeBounds\": {\n        \"left\": 0.040148791497511785,\n        \"bottom\": -0.030073418674698794,\n        \"right\": 0.62684339600248817,\n        \"top\": 0.74101091867469893\n      },\n      \"atlasBounds\": {\n        \"left\": 380.5,\n        \"bottom\": 144.5,\n        \"right\": 415.5,\n        \"top\": 190.5\n      }\n    },\n    {\n      \"unicode\": 72,\n      \"advance\": 0.712890625,\n      \"planeBounds\": {\n        \"left\": 0.062365588372511785,\n        \"bottom\": -0.021692067181770559,\n        \"right\": 0.64906019287748817,\n        \"top\": 0.73262956718177052\n      },\n      \"atlasBounds\": {\n        \"left\": 30.5,\n        \"bottom\": 51.5,\n        \"right\": 65.5,\n        \"top\": 96.5\n      }\n    },\n    {\n      \"unicode\": 73,\n      \"advance\": 0.27197265625,\n      \"planeBounds\": {\n        \"left\": 0.069179656806574119,\n        \"bottom\": -0.021692067181770559,\n        \"right\": 0.20328128069342588,\n        \"top\": 0.73262956718177052\n      },\n      \"atlasBounds\": {\n        \"left\": 196.5,\n        \"bottom\": 51.5,\n        \"right\": 204.5,\n        \"top\": 96.5\n      }\n    },\n    {\n      \"unicode\": 74,\n      \"advance\": 0.5517578125,\n      \"planeBounds\": {\n        \"left\": 0.0071849473300811938,\n        \"bottom\": -0.026574879681770559,\n        \"right\": 0.49330333391991882,\n        \"top\": 0.72774675468177052\n      },\n      \"atlasBounds\": { \"left\": 0.5, \"bottom\": 51.5, \"right\": 29.5, \"top\": 96.5 }\n    },\n    {\n      \"unicode\": 75,\n      \"advance\": 0.626953125,\n      \"planeBounds\": {\n        \"left\": 0.061633166497511785,\n        \"bottom\": -0.021692067181770559,\n        \"right\": 0.64832777100248817,\n        \"top\": 0.73262956718177052\n      },\n      \"atlasBounds\": {\n        \"left\": 452.5,\n        \"bottom\": 97.5,\n        \"right\": 487.5,\n        \"top\": 142.5\n      }\n    },\n    {\n      \"unicode\": 76,\n      \"advance\": 0.5380859375,\n      \"planeBounds\": {\n        \"left\": 0.063417861323009431,\n        \"bottom\": -0.021692067181770559,\n        \"right\": 0.53277354492699058,\n        \"top\": 0.73262956718177052\n      },\n      \"atlasBounds\": {\n        \"left\": 423.5,\n        \"bottom\": 97.5,\n        \"right\": 451.5,\n        \"top\": 142.5\n      }\n    },\n    {\n      \"unicode\": 77,\n      \"advance\": 0.873046875,\n      \"planeBounds\": {\n        \"left\": 0.059118479693229441,\n        \"bottom\": -0.021692067181770559,\n        \"right\": 0.81344011405677052,\n        \"top\": 0.73262956718177052\n      },\n      \"atlasBounds\": {\n        \"left\": 377.5,\n        \"bottom\": 97.5,\n        \"right\": 422.5,\n        \"top\": 142.5\n      }\n    },\n    {\n      \"unicode\": 78,\n      \"advance\": 0.712890625,\n      \"planeBounds\": {\n        \"left\": 0.062365588372511785,\n        \"bottom\": -0.021692067181770559,\n        \"right\": 0.64906019287748817,\n        \"top\": 0.73262956718177052\n      },\n      \"atlasBounds\": {\n        \"left\": 341.5,\n        \"bottom\": 97.5,\n        \"right\": 376.5,\n        \"top\": 142.5\n      }\n    },\n    {\n      \"unicode\": 79,\n      \"advance\": 0.6875,\n      \"planeBounds\": {\n        \"left\": 0.033395854136655315,\n        \"bottom\": -0.030073418674698794,\n        \"right\": 0.65361586461334464,\n        \"top\": 0.74101091867469893\n      },\n      \"atlasBounds\": {\n        \"left\": 416.5,\n        \"bottom\": 144.5,\n        \"right\": 453.5,\n        \"top\": 190.5\n      }\n    },\n    {\n      \"unicode\": 80,\n      \"advance\": 0.630859375,\n      \"planeBounds\": {\n        \"left\": 0.061550166358368255,\n        \"bottom\": -0.021692067181770559,\n        \"right\": 0.6147193648916317,\n        \"top\": 0.73262956718177052\n      },\n      \"atlasBounds\": {\n        \"left\": 273.5,\n        \"bottom\": 97.5,\n        \"right\": 306.5,\n        \"top\": 142.5\n      }\n    },\n    {\n      \"unicode\": 81,\n      \"advance\": 0.6875,\n      \"planeBounds\": {\n        \"left\": 0.030466166636655315,\n        \"bottom\": -0.14391866037519643,\n        \"right\": 0.65068617711334464,\n        \"top\": 0.74450459787519641\n      },\n      \"atlasBounds\": {\n        \"left\": 214.5,\n        \"bottom\": 202.5,\n        \"right\": 251.5,\n        \"top\": 255.5\n      }\n    },\n    {\n      \"unicode\": 82,\n      \"advance\": 0.61572265625,\n      \"planeBounds\": {\n        \"left\": 0.063503291358368255,\n        \"bottom\": -0.021692067181770559,\n        \"right\": 0.6166724898916317,\n        \"top\": 0.73262956718177052\n      },\n      \"atlasBounds\": {\n        \"left\": 186.5,\n        \"bottom\": 97.5,\n        \"right\": 219.5,\n        \"top\": 142.5\n      }\n    },\n    {\n      \"unicode\": 83,\n      \"advance\": 0.59326171875,\n      \"planeBounds\": {\n        \"left\": 0.020778681983368255,\n        \"bottom\": -0.030073418674698794,\n        \"right\": 0.5739478805166317,\n        \"top\": 0.74101091867469893\n      },\n      \"atlasBounds\": {\n        \"left\": 454.5,\n        \"bottom\": 144.5,\n        \"right\": 487.5,\n        \"top\": 190.5\n      }\n    },\n    {\n      \"unicode\": 84,\n      \"advance\": 0.5966796875,\n      \"planeBounds\": {\n        \"left\": 0.0054808227475117866,\n        \"bottom\": -0.021692067181770559,\n        \"right\": 0.59217542725248817,\n        \"top\": 0.73262956718177052\n      },\n      \"atlasBounds\": {\n        \"left\": 112.5,\n        \"bottom\": 97.5,\n        \"right\": 147.5,\n        \"top\": 142.5\n      }\n    },\n    {\n      \"unicode\": 85,\n      \"advance\": 0.6484375,\n      \"planeBounds\": {\n        \"left\": 0.049098994483368255,\n        \"bottom\": -0.026574879681770559,\n        \"right\": 0.6022681930166317,\n        \"top\": 0.72774675468177052\n      },\n      \"atlasBounds\": {\n        \"left\": 78.5,\n        \"bottom\": 97.5,\n        \"right\": 111.5,\n        \"top\": 142.5\n      }\n    },\n    {\n      \"unicode\": 86,\n      \"advance\": 0.63623046875,\n      \"planeBounds\": {\n        \"left\": -0.0082691925992011521,\n        \"bottom\": -0.021692067181770559,\n        \"right\": 0.64547622384920111,\n        \"top\": 0.73262956718177052\n      },\n      \"atlasBounds\": {\n        \"left\": 38.5,\n        \"bottom\": 97.5,\n        \"right\": 77.5,\n        \"top\": 142.5\n      }\n    },\n    {\n      \"unicode\": 87,\n      \"advance\": 0.88720703125,\n      \"planeBounds\": {\n        \"left\": 0.011923628617731797,\n        \"bottom\": -0.021692067181770559,\n        \"right\": 0.88358418388226834,\n        \"top\": 0.73262956718177052\n      },\n      \"atlasBounds\": {\n        \"left\": 220.5,\n        \"bottom\": 97.5,\n        \"right\": 272.5,\n        \"top\": 142.5\n      }\n    },\n    {\n      \"unicode\": 88,\n      \"advance\": 0.626953125,\n      \"planeBounds\": {\n        \"left\": 0.0040989791366553164,\n        \"bottom\": -0.021692067181770559,\n        \"right\": 0.62431898961334464,\n        \"top\": 0.73262956718177052\n      },\n      \"atlasBounds\": {\n        \"left\": 0.5,\n        \"bottom\": 97.5,\n        \"right\": 37.5,\n        \"top\": 142.5\n      }\n    },\n    {\n      \"unicode\": 89,\n      \"advance\": 0.6005859375,\n      \"planeBounds\": {\n        \"left\": -0.010793598988344685,\n        \"bottom\": -0.021692067181770559,\n        \"right\": 0.60942641148834464,\n        \"top\": 0.73262956718177052\n      },\n      \"atlasBounds\": {\n        \"left\": 148.5,\n        \"bottom\": 97.5,\n        \"right\": 185.5,\n        \"top\": 142.5\n      }\n    },\n    {\n      \"unicode\": 90,\n      \"advance\": 0.5986328125,\n      \"planeBounds\": {\n        \"left\": 0.024196650733368255,\n        \"bottom\": -0.021692067181770559,\n        \"right\": 0.5773658492666317,\n        \"top\": 0.73262956718177052\n      },\n      \"atlasBounds\": {\n        \"left\": 307.5,\n        \"bottom\": 97.5,\n        \"right\": 340.5,\n        \"top\": 142.5\n      }\n    },\n    {\n      \"unicode\": 91,\n      \"advance\": 0.26513671875,\n      \"planeBounds\": {\n        \"left\": 0.05437250871693295,\n        \"bottom\": -0.17280296457569408,\n        \"right\": 0.27228764753306706,\n        \"top\": 0.83295921457569422\n      },\n      \"atlasBounds\": {\n        \"left\": 59.5,\n        \"bottom\": 195.5,\n        \"right\": 72.5,\n        \"top\": 255.5\n      }\n    },\n    {\n      \"unicode\": 92,\n      \"advance\": 0.41015625,\n      \"planeBounds\": {\n        \"left\": 0.0014037126767941326,\n        \"bottom\": -0.085735051278483493,\n        \"right\": 0.42047128732320588,\n        \"top\": 0.73563739502848347\n      },\n      \"atlasBounds\": {\n        \"left\": 278.5,\n        \"bottom\": 206.5,\n        \"right\": 303.5,\n        \"top\": 255.5\n      }\n    },\n    {\n      \"unicode\": 93,\n      \"advance\": 0.26513671875,\n      \"planeBounds\": {\n        \"left\": -0.020659233400995285,\n        \"bottom\": -0.17280296457569408,\n        \"right\": 0.21401860840099529,\n        \"top\": 0.83295921457569422\n      },\n      \"atlasBounds\": {\n        \"left\": 94.5,\n        \"bottom\": 195.5,\n        \"right\": 108.5,\n        \"top\": 255.5\n      }\n    },\n    {\n      \"unicode\": 94,\n      \"advance\": 0.41796875,\n      \"planeBounds\": {\n        \"left\": 0.0068553766697223677,\n        \"bottom\": 0.33229482979472236,\n        \"right\": 0.40916024833027764,\n        \"top\": 0.73459970145527764\n      },\n      \"atlasBounds\": {\n        \"left\": 486.5,\n        \"bottom\": 231.5,\n        \"right\": 510.5,\n        \"top\": 255.5\n      }\n    },\n    {\n      \"unicode\": 95,\n      \"advance\": 0.451171875,\n      \"planeBounds\": {\n        \"left\": -0.017473255794918804,\n        \"bottom\": -0.095534694825497646,\n        \"right\": 0.46864513079491882,\n        \"top\": 0.021804226075497646\n      },\n      \"atlasBounds\": { \"left\": 70.5, \"bottom\": 7.5, \"right\": 99.5, \"top\": 14.5 }\n    },\n    {\n      \"unicode\": 96,\n      \"advance\": 0.30908203125,\n      \"planeBounds\": {\n        \"left\": 0.0039183994810764802,\n        \"bottom\": 0.58602778982778947,\n        \"right\": 0.25535894426892353,\n        \"top\": 0.77041752267221053\n      },\n      \"atlasBounds\": { \"left\": 36.5, \"bottom\": 3.5, \"right\": 51.5, \"top\": 14.5 }\n    },\n    {\n      \"unicode\": 97,\n      \"advance\": 0.5439453125,\n      \"planeBounds\": {\n        \"left\": 0.028181041080081196,\n        \"bottom\": -0.029187146002488215,\n        \"right\": 0.51429942766991887,\n        \"top\": 0.55750745850248817\n      },\n      \"atlasBounds\": {\n        \"left\": 30.5,\n        \"bottom\": 15.5,\n        \"right\": 59.5,\n        \"top\": 50.5\n      }\n    },\n    {\n      \"unicode\": 98,\n      \"advance\": 0.56103515625,\n      \"planeBounds\": {\n        \"left\": 0.048932994205081196,\n        \"bottom\": -0.032187684160555265,\n        \"right\": 0.53505138079491887,\n        \"top\": 0.7724220591605554\n      },\n      \"atlasBounds\": {\n        \"left\": 304.5,\n        \"bottom\": 207.5,\n        \"right\": 333.5,\n        \"top\": 255.5\n      }\n    },\n    {\n      \"unicode\": 99,\n      \"advance\": 0.5234375,\n      \"planeBounds\": {\n        \"left\": 0.024518931705081196,\n        \"bottom\": -0.029187146002488215,\n        \"right\": 0.51063731829491887,\n        \"top\": 0.55750745850248817\n      },\n      \"atlasBounds\": { \"left\": 0.5, \"bottom\": 15.5, \"right\": 29.5, \"top\": 50.5 }\n    },\n    {\n      \"unicode\": 100,\n      \"advance\": 0.56396484375,\n      \"planeBounds\": {\n        \"left\": 0.026227916080081196,\n        \"bottom\": -0.032187684160555265,\n        \"right\": 0.51234630266991887,\n        \"top\": 0.7724220591605554\n      },\n      \"atlasBounds\": {\n        \"left\": 334.5,\n        \"bottom\": 207.5,\n        \"right\": 363.5,\n        \"top\": 255.5\n      }\n    },\n    {\n      \"unicode\": 101,\n      \"advance\": 0.52978515625,\n      \"planeBounds\": {\n        \"left\": 0.026472056705081196,\n        \"bottom\": -0.029187146002488215,\n        \"right\": 0.51259044329491887,\n        \"top\": 0.55750745850248817\n      },\n      \"atlasBounds\": {\n        \"left\": 468.5,\n        \"bottom\": 61.5,\n        \"right\": 497.5,\n        \"top\": 96.5\n      }\n    },\n    {\n      \"unicode\": 102,\n      \"advance\": 0.34716796875,\n      \"planeBounds\": {\n        \"left\": 0.0045751109055788379,\n        \"bottom\": -0.022177918535555265,\n        \"right\": 0.37335457659442117,\n        \"top\": 0.7824318247855554\n      },\n      \"atlasBounds\": {\n        \"left\": 364.5,\n        \"bottom\": 207.5,\n        \"right\": 386.5,\n        \"top\": 255.5\n      }\n    },\n    {\n      \"unicode\": 103,\n      \"advance\": 0.56103515625,\n      \"planeBounds\": {\n        \"left\": 0.026960337955081196,\n        \"bottom\": -0.22888445766762702,\n        \"right\": 0.51307872454491887,\n        \"top\": 0.55896258266762699\n      },\n      \"atlasBounds\": {\n        \"left\": 28.5,\n        \"bottom\": 143.5,\n        \"right\": 57.5,\n        \"top\": 190.5\n      }\n    },\n    {\n      \"unicode\": 104,\n      \"advance\": 0.55078125,\n      \"planeBounds\": {\n        \"left\": 0.049826556565937666,\n        \"bottom\": -0.01892352016762703,\n        \"right\": 0.5024195371840624,\n        \"top\": 0.76892352016762699\n      },\n      \"atlasBounds\": {\n        \"left\": 0.5,\n        \"bottom\": 143.5,\n        \"right\": 27.5,\n        \"top\": 190.5\n      }\n    },\n    {\n      \"unicode\": 105,\n      \"advance\": 0.24267578125,\n      \"planeBounds\": {\n        \"left\": 0.046882289688645884,\n        \"bottom\": -0.016809254681770559,\n        \"right\": 0.19774661656135412,\n        \"top\": 0.73751237968177052\n      },\n      \"atlasBounds\": {\n        \"left\": 498.5,\n        \"bottom\": 145.5,\n        \"right\": 507.5,\n        \"top\": 190.5\n      }\n    },\n    {\n      \"unicode\": 106,\n      \"advance\": 0.23876953125,\n      \"planeBounds\": {\n        \"left\": -0.048979545900995285,\n        \"bottom\": -0.23245627721483761,\n        \"right\": 0.18569829590099529,\n        \"top\": 0.73978049596483775\n      },\n      \"atlasBounds\": {\n        \"left\": 140.5,\n        \"bottom\": 197.5,\n        \"right\": 154.5,\n        \"top\": 255.5\n      }\n    },\n    {\n      \"unicode\": 107,\n      \"advance\": 0.5068359375,\n      \"planeBounds\": {\n        \"left\": 0.044294322330081196,\n        \"bottom\": -0.01892352016762703,\n        \"right\": 0.53041270891991887,\n        \"top\": 0.76892352016762699\n      },\n      \"atlasBounds\": {\n        \"left\": 58.5,\n        \"bottom\": 143.5,\n        \"right\": 87.5,\n        \"top\": 190.5\n      }\n    },\n    {\n      \"unicode\": 108,\n      \"advance\": 0.24267578125,\n      \"planeBounds\": {\n        \"left\": 0.054287078681574119,\n        \"bottom\": -0.01892352016762703,\n        \"right\": 0.18838870256842588,\n        \"top\": 0.76892352016762699\n      },\n      \"atlasBounds\": {\n        \"left\": 477.5,\n        \"bottom\": 208.5,\n        \"right\": 485.5,\n        \"top\": 255.5\n      }\n    },\n    {\n      \"unicode\": 109,\n      \"advance\": 0.87646484375,\n      \"planeBounds\": {\n        \"left\": 0.04430890170737297,\n        \"bottom\": -0.024304333502488215,\n        \"right\": 0.83215594204262699,\n        \"top\": 0.56239027100248817\n      },\n      \"atlasBounds\": {\n        \"left\": 116.5,\n        \"bottom\": 15.5,\n        \"right\": 163.5,\n        \"top\": 50.5\n      }\n    },\n    {\n      \"unicode\": 110,\n      \"advance\": 0.5517578125,\n      \"planeBounds\": {\n        \"left\": 0.049826556565937666,\n        \"bottom\": -0.024304333502488215,\n        \"right\": 0.5024195371840624,\n        \"top\": 0.56239027100248817\n      },\n      \"atlasBounds\": {\n        \"left\": 60.5,\n        \"bottom\": 15.5,\n        \"right\": 87.5,\n        \"top\": 50.5\n      }\n    },\n    {\n      \"unicode\": 111,\n      \"advance\": 0.5703125,\n      \"planeBounds\": {\n        \"left\": 0.025090213094224725,\n        \"bottom\": -0.029187146002488215,\n        \"right\": 0.54473400565577523,\n        \"top\": 0.55750745850248817\n      },\n      \"atlasBounds\": {\n        \"left\": 193.5,\n        \"bottom\": 15.5,\n        \"right\": 224.5,\n        \"top\": 50.5\n      }\n    },\n    {\n      \"unicode\": 112,\n      \"advance\": 0.56103515625,\n      \"planeBounds\": {\n        \"left\": 0.048444712955081196,\n        \"bottom\": -0.22644305141762702,\n        \"right\": 0.53456309954491887,\n        \"top\": 0.56140398891762699\n      },\n      \"atlasBounds\": {\n        \"left\": 447.5,\n        \"bottom\": 208.5,\n        \"right\": 476.5,\n        \"top\": 255.5\n      }\n    },\n    {\n      \"unicode\": 113,\n      \"advance\": 0.568359375,\n      \"planeBounds\": {\n        \"left\": 0.025983775455081196,\n        \"bottom\": -0.22644305141762702,\n        \"right\": 0.51210216204491887,\n        \"top\": 0.56140398891762699\n      },\n      \"atlasBounds\": {\n        \"left\": 417.5,\n        \"bottom\": 208.5,\n        \"right\": 446.5,\n        \"top\": 255.5\n      }\n    },\n    {\n      \"unicode\": 114,\n      \"advance\": 0.33837890625,\n      \"planeBounds\": {\n        \"left\": 0.045180595002291775,\n        \"bottom\": -0.024304333502488215,\n        \"right\": 0.34690924874770823,\n        \"top\": 0.56239027100248817\n      },\n      \"atlasBounds\": {\n        \"left\": 449.5,\n        \"bottom\": 61.5,\n        \"right\": 467.5,\n        \"top\": 96.5\n      }\n    },\n    {\n      \"unicode\": 115,\n      \"advance\": 0.515625,\n      \"planeBounds\": {\n        \"left\": 0.021669814448009427,\n        \"bottom\": -0.029187146002488215,\n        \"right\": 0.49102549805199058,\n        \"top\": 0.55750745850248817\n      },\n      \"atlasBounds\": {\n        \"left\": 164.5,\n        \"bottom\": 15.5,\n        \"right\": 192.5,\n        \"top\": 50.5\n      }\n    },\n    {\n      \"unicode\": 116,\n      \"advance\": 0.32666015625,\n      \"planeBounds\": {\n        \"left\": -0.019433670483564695,\n        \"bottom\": -0.028774575202985861,\n        \"right\": 0.3158203892335647,\n        \"top\": 0.67525895020298599\n      },\n      \"atlasBounds\": {\n        \"left\": 418.5,\n        \"bottom\": 54.5,\n        \"right\": 438.5,\n        \"top\": 96.5\n      }\n    },\n    {\n      \"unicode\": 117,\n      \"advance\": 0.55126953125,\n      \"planeBounds\": {\n        \"left\": 0.048117572190937666,\n        \"bottom\": -0.034069958502488215,\n        \"right\": 0.5007105528090624,\n        \"top\": 0.55262464600248817\n      },\n      \"atlasBounds\": {\n        \"left\": 88.5,\n        \"bottom\": 15.5,\n        \"right\": 115.5,\n        \"top\": 50.5\n      }\n    },\n    {\n      \"unicode\": 118,\n      \"advance\": 0.484375,\n      \"planeBounds\": {\n        \"left\": -0.0020923964199188062,\n        \"bottom\": -0.02080579450955998,\n        \"right\": 0.48402599016991882,\n        \"top\": 0.5491261070095601\n      },\n      \"atlasBounds\": {\n        \"left\": 331.5,\n        \"bottom\": 16.5,\n        \"right\": 360.5,\n        \"top\": 50.5\n      }\n    },\n    {\n      \"unicode\": 119,\n      \"advance\": 0.75146484375,\n      \"planeBounds\": {\n        \"left\": -0.002649098431770561,\n        \"bottom\": -0.02080579450955998,\n        \"right\": 0.75167253593177052,\n        \"top\": 0.5491261070095601\n      },\n      \"atlasBounds\": {\n        \"left\": 225.5,\n        \"bottom\": 16.5,\n        \"right\": 270.5,\n        \"top\": 50.5\n      }\n    },\n    {\n      \"unicode\": 120,\n      \"advance\": 0.49560546875,\n      \"planeBounds\": {\n        \"left\": -0.0046143729128470395,\n        \"bottom\": -0.02080579450955998,\n        \"right\": 0.49826671666284711,\n        \"top\": 0.5491261070095601\n      },\n      \"atlasBounds\": {\n        \"left\": 300.5,\n        \"bottom\": 16.5,\n        \"right\": 330.5,\n        \"top\": 50.5\n      }\n    },\n    {\n      \"unicode\": 121,\n      \"advance\": 0.47314453125,\n      \"planeBounds\": {\n        \"left\": -0.0072193495449188062,\n        \"bottom\": -0.23645281704262702,\n        \"right\": 0.47889903704491882,\n        \"top\": 0.55139422329262699\n      },\n      \"atlasBounds\": {\n        \"left\": 387.5,\n        \"bottom\": 208.5,\n        \"right\": 416.5,\n        \"top\": 255.5\n      }\n    },\n    {\n      \"unicode\": 122,\n      \"advance\": 0.49560546875,\n      \"planeBounds\": {\n        \"left\": 0.018007705073009427,\n        \"bottom\": -0.02080579450955998,\n        \"right\": 0.48736338867699058,\n        \"top\": 0.5491261070095601\n      },\n      \"atlasBounds\": {\n        \"left\": 271.5,\n        \"bottom\": 16.5,\n        \"right\": 299.5,\n        \"top\": 50.5\n      }\n    },\n    {\n      \"unicode\": 123,\n      \"advance\": 0.33837890625,\n      \"planeBounds\": {\n        \"left\": 0.011572188891435306,\n        \"bottom\": -0.20234398020069408,\n        \"right\": 0.3468262486085647,\n        \"top\": 0.80341819895069422\n      },\n      \"atlasBounds\": {\n        \"left\": 73.5,\n        \"bottom\": 195.5,\n        \"right\": 93.5,\n        \"top\": 255.5\n      }\n    },\n    {\n      \"unicode\": 124,\n      \"advance\": 0.24365234375,\n      \"planeBounds\": {\n        \"left\": 0.063156711424502354,\n        \"bottom\": -0.15466084787519643,\n        \"right\": 0.18049563232549765,\n        \"top\": 0.73376241037519641\n      },\n      \"atlasBounds\": {\n        \"left\": 206.5,\n        \"bottom\": 202.5,\n        \"right\": 213.5,\n        \"top\": 255.5\n      }\n    },\n    {\n      \"unicode\": 125,\n      \"advance\": 0.33837890625,\n      \"planeBounds\": {\n        \"left\": -0.010156326733564695,\n        \"bottom\": -0.20234398020069408,\n        \"right\": 0.3250977329835647,\n        \"top\": 0.80341819895069422\n      },\n      \"atlasBounds\": {\n        \"left\": 38.5,\n        \"bottom\": 195.5,\n        \"right\": 58.5,\n        \"top\": 255.5\n      }\n    },\n    {\n      \"unicode\": 126,\n      \"advance\": 0.68017578125,\n      \"planeBounds\": {\n        \"left\": 0.046984728997511785,\n        \"bottom\": 0.17660639159900471,\n        \"right\": 0.63367933350248817,\n        \"top\": 0.41128423340099529\n      },\n      \"atlasBounds\": { \"left\": 0.5, \"bottom\": 0.5, \"right\": 35.5, \"top\": 14.5 }\n    }\n  ],\n  \"kerning\": []\n}\n","import { serialize, deserialize } from '@ungap/structured-clone'\nimport { vec3, vec4 } from 'gl-matrix'\nimport { NVUtilities } from './nvutilities.js'\nimport { ImageFromUrlOptions, NVIMAGE_TYPE, NVImage } from './nvimage/index.js'\nimport { MeshType, NVMesh } from './nvmesh.js'\nimport { NVLabel3D } from './nvlabel.js'\nimport { NVConnectome } from './nvconnectome.js'\nimport { log } from './logger.js'\n\n/**\n * Slice Type\n * @ignore\n */\nexport enum SLICE_TYPE {\n  AXIAL = 0,\n  CORONAL = 1,\n  SAGITTAL = 2,\n  MULTIPLANAR = 3,\n  RENDER = 4\n}\n\nexport enum SHOW_RENDER {\n  NEVER = 0,\n  ALWAYS = 1,\n  AUTO = 2\n}\n\n/**\n * Multi-planar layout\n * @ignore\n */\nexport enum MULTIPLANAR_TYPE {\n  AUTO = 0,\n  COLUMN = 1,\n  GRID = 2,\n  ROW = 3\n}\n\n/**\n * Drag mode\n * @ignore\n */\nexport enum DRAG_MODE {\n  none = 0,\n  contrast = 1,\n  measurement = 2,\n  pan = 3,\n  slicer3D = 4,\n  callbackOnly = 5,\n  roiSelection = 6\n}\n\n// make mutable type\ntype Mutable<T> = {\n  -readonly [P in keyof T]: T[P]\n}\n\n/**\n * NVConfigOptions\n */\nexport type NVConfigOptions = {\n  // 0 for no text, fraction of canvas min(height,width)\n  textHeight: number\n  // 0 for no colorbars, fraction of Nifti j dimension\n  colorbarHeight: number\n  // 0 for no crosshairs\n  crosshairWidth: number\n  crosshairWidthUnit: 'voxels' | 'mm' | 'percent'\n  crosshairGap: number\n  rulerWidth: number\n  show3Dcrosshair: boolean\n  backColor: number[]\n  crosshairColor: number[]\n  fontColor: Float32List\n  selectionBoxColor: number[]\n  clipPlaneColor: number[]\n  clipThick: number\n  clipVolumeLow: number[]\n  clipVolumeHigh: number[]\n  rulerColor: number[]\n  // x axis margin around color bar, clip space coordinates\n  colorbarMargin: number\n  // if true do not calculate cal_min or cal_max if set in image header. If false, always calculate display intensity range.\n  trustCalMinMax: boolean\n  // keyboard short cut to activate the clip plane\n  clipPlaneHotKey: string\n  // keyboard shortcut to switch view modes\n  viewModeHotKey: string\n  doubleTouchTimeout: number\n  longTouchTimeout: number\n  // default debounce time used in keyup listeners\n  keyDebounceTime: number\n  isNearestInterpolation: boolean\n  atlasOutline: number\n  isRuler: boolean\n  isColorbar: boolean\n  isOrientCube: boolean\n  tileMargin: number\n  multiplanarPadPixels: number\n  // @deprecated\n  multiplanarForceRender: boolean\n  multiplanarEqualSize: boolean\n  multiplanarShowRender: SHOW_RENDER\n  isRadiologicalConvention: boolean\n  // string to allow infinity\n  meshThicknessOn2D: number | string\n  dragMode: DRAG_MODE\n  yoke3Dto2DZoom: boolean\n  isDepthPickMesh: boolean\n  isCornerOrientationText: boolean\n  heroImageFraction: number\n  heroSliceType: SLICE_TYPE\n  // sagittal slices can have Y+ going left or right\n  sagittalNoseLeft: boolean\n  isSliceMM: boolean\n  // V1 image overlays can show vectors as per-pixel lines\n  isV1SliceShader: boolean\n  isHighResolutionCapable: boolean\n  logLevel: 'debug' | 'info' | 'warn' | 'error' | 'fatal' | 'silent'\n  loadingText: string\n  isForceMouseClickToVoxelCenters: boolean\n  dragAndDropEnabled: boolean\n  // drawing disabled by default\n  drawingEnabled: boolean\n  // sets drawing color. see \"drawPt\"\n  penValue: number\n  // does a voxel have 6 (face), 18 (edge) or 26 (corner) neighbors\n  floodFillNeighbors: number\n  isFilledPen: boolean\n  thumbnail: string\n  maxDrawUndoBitmaps: number\n  sliceType: SLICE_TYPE\n  isAntiAlias: boolean | null\n  isAdditiveBlend: boolean\n  // TODO all following fields were previously not included in the typedef\n  // Allow canvas width ahd height to resize (false for fixed size)\n  isResizeCanvas: boolean\n  meshXRay: number\n  limitFrames4D: number\n  // if a document has labels the default is to show them\n  showLegend: boolean\n  legendBackgroundColor: number[]\n  legendTextColor: number[]\n  multiplanarLayout: MULTIPLANAR_TYPE\n  renderOverlayBlend: number\n  sliceMosaicString: string\n  centerMosaic: boolean\n  penSize: number\n  clickToSegment: boolean\n  clickToSegmentRadius: number\n  clickToSegmentBright: boolean\n  clickToSegmentAutoIntensity: boolean // new option, but keep clickToSegmentBright for backwards compatibility\n  clickToSegmentIntensityMax: number // also covers NaN\n  clickToSegmentIntensityMin: number // also covers NaN\n  clickToSegmentPercent: number\n  clickToSegmentMaxDistanceMM: number // max distance in mm to consider for click to segment flood fill\n  clickToSegmentIs2D: boolean\n  // selection box outline thickness\n  selectionBoxLineThickness: number\n  selectionBoxIsOutline: boolean\n  scrollRequiresFocus: boolean\n  showMeasureUnits: boolean\n  // measureTextJustify: \"origin\" | \"terminus\" | \"center\"\n  measureTextJustify: 'start' | 'center' | 'end' // similar to flexbox justify start, end, center\n  measureTextColor: number[]\n  measureLineColor: number[]\n  measureTextHeight: number\n}\n\nexport const DEFAULT_OPTIONS: NVConfigOptions = {\n  textHeight: 0.06,\n  colorbarHeight: 0.05,\n  crosshairWidth: 1,\n  crosshairWidthUnit: 'voxels',\n  crosshairGap: 0,\n  rulerWidth: 4,\n  show3Dcrosshair: false,\n  backColor: [0, 0, 0, 1],\n  crosshairColor: [1, 0, 0, 1],\n  fontColor: [0.5, 0.5, 0.5, 1],\n  selectionBoxColor: [1, 1, 1, 0.5],\n  clipPlaneColor: [0.7, 0, 0.7, 0.5],\n  clipThick: 2,\n  clipVolumeLow: [0, 0, 0],\n  clipVolumeHigh: [1.0, 1.0, 1.0],\n  rulerColor: [1, 0, 0, 0.8],\n  colorbarMargin: 0.05,\n  trustCalMinMax: true,\n  clipPlaneHotKey: 'KeyC',\n  viewModeHotKey: 'KeyV',\n  doubleTouchTimeout: 500,\n  longTouchTimeout: 1000,\n  keyDebounceTime: 50,\n  isNearestInterpolation: false,\n  isResizeCanvas: true,\n  atlasOutline: 0,\n  isRuler: false,\n  isColorbar: false,\n  isOrientCube: false,\n  tileMargin: 0,\n  multiplanarPadPixels: 0,\n  // @deprecated\n  multiplanarForceRender: false,\n  multiplanarEqualSize: false,\n  multiplanarShowRender: SHOW_RENDER.AUTO, // auto is the same behaviour as multiplanarForceRender: false\n  isRadiologicalConvention: false,\n  meshThicknessOn2D: Infinity,\n  dragMode: DRAG_MODE.contrast,\n  yoke3Dto2DZoom: false,\n  isDepthPickMesh: false,\n  isCornerOrientationText: false,\n  heroImageFraction: 0,\n  heroSliceType: SLICE_TYPE.RENDER,\n  sagittalNoseLeft: false,\n  isSliceMM: false,\n  isV1SliceShader: false,\n  isHighResolutionCapable: true,\n  logLevel: 'info',\n  loadingText: 'waiting for images...',\n  isForceMouseClickToVoxelCenters: false,\n  dragAndDropEnabled: true,\n  drawingEnabled: false,\n  penValue: 1,\n  floodFillNeighbors: 6,\n  isFilledPen: false,\n  thumbnail: '',\n  maxDrawUndoBitmaps: 8,\n  sliceType: SLICE_TYPE.MULTIPLANAR,\n  meshXRay: 0.0,\n  isAntiAlias: null,\n  limitFrames4D: NaN,\n  isAdditiveBlend: false,\n  showLegend: true,\n  legendBackgroundColor: [0.3, 0.3, 0.3, 0.5],\n  legendTextColor: [1.0, 1.0, 1.0, 1.0],\n  multiplanarLayout: MULTIPLANAR_TYPE.AUTO,\n  renderOverlayBlend: 1.0,\n  sliceMosaicString: '',\n  centerMosaic: false,\n  penSize: 1, // in voxels, since all drawing is done using bitmap indices\n  clickToSegment: false,\n  clickToSegmentRadius: 3, // in mm\n  clickToSegmentBright: true,\n  clickToSegmentAutoIntensity: false, // new option, but keep clickToSegmentBright for backwards compatibility\n  clickToSegmentIntensityMax: NaN, // NaN will use auto threshold (default flood fill behavior from before)\n  clickToSegmentIntensityMin: NaN, // NaN will use auto threshold (default flood fill behavior from before)\n  // 0 will use auto threshold (default flood fill behavior from before)\n  // Take the voxel intensity at the click point and use this percentage +/- to threshold the flood fill operation.\n  // If greater than 0, clickedVoxelIntensity +/- clickedVoxelIntensity * clickToSegmentPercent will be used\n  // for the clickToSegmentIntensityMin and clickToSegmentIntensityMax values.\n  clickToSegmentPercent: 0,\n  clickToSegmentMaxDistanceMM: Number.POSITIVE_INFINITY, // default value is infinity for backwards compatibility with flood fill routine.\n  clickToSegmentIs2D: false,\n  selectionBoxLineThickness: 4,\n  selectionBoxIsOutline: false,\n  scrollRequiresFocus: false, // determines if the cavas need to be focused to scroll\n  showMeasureUnits: true, // e.g. 20.2 vs 20.2 mm\n  measureTextJustify: 'center', // start, center, end\n  measureTextColor: [1, 0, 0, 1], // red\n  measureLineColor: [1, 0, 0, 1], // red\n  measureTextHeight: 0.03\n}\n\ntype SceneData = {\n  gamma: number\n  azimuth: number\n  elevation: number\n  crosshairPos: vec3\n  clipPlane: number[]\n  clipPlaneDepthAziElev: number[]\n  volScaleMultiplier: number\n  pan2Dxyzmm: vec4\n  clipThick: number\n  clipVolumeLow: number[]\n  clipVolumeHigh: number[]\n}\n\nexport const INITIAL_SCENE_DATA = {\n  gamma: 1.0,\n  azimuth: 110,\n  elevation: 10,\n  crosshairPos: vec3.fromValues(0.5, 0.5, 0.5),\n  clipPlane: [0, 0, 0, 0],\n  clipPlaneDepthAziElev: [2, 0, 0],\n  volScaleMultiplier: 1.0,\n  pan2Dxyzmm: vec4.fromValues(0, 0, 0, 1),\n  clipThick: 2.0,\n  clipVolumeLow: [0, 0, 0],\n  clipVolumeHigh: [1.0, 1.0, 1.0]\n}\n\nexport type Scene = {\n  onAzimuthElevationChange: (azimuth: number, elevation: number) => void\n  onZoom3DChange: (scale: number) => void\n  sceneData: SceneData\n  renderAzimuth: number\n  renderElevation: number\n  volScaleMultiplier: number\n  crosshairPos: vec3\n  clipPlane: number[]\n  clipPlaneDepthAziElev: number[]\n  pan2Dxyzmm: vec4\n  _elevation?: number\n  _azimuth?: number\n  gamma?: number\n}\n\nexport type DocumentData = {\n  title: string\n  imageOptionsArray: ImageFromUrlOptions[]\n  meshOptionsArray: unknown[]\n  opts: NVConfigOptions\n  previewImageDataURL: string\n  labels: NVLabel3D[]\n  encodedImageBlobs: string[]\n  encodedDrawingBlob: string\n  // TODO not sure if they should be here? They are needed for loadFromJSON\n  meshesString?: string\n  sceneData?: SceneData\n  // TODO referenced in niivue/loadDocument\n  connectomes?: string[]\n  customData?: string\n}\n\nexport type ExportDocumentData = {\n  // base64 encoded images\n  encodedImageBlobs: string[]\n  // base64 encoded drawing\n  encodedDrawingBlob: string\n  // dataURL of the preview image\n  previewImageDataURL: string\n  // map of image ids to image options\n  imageOptionsMap: Map<string, number>\n  // array of image options to recreate images\n  imageOptionsArray: ImageFromUrlOptions[]\n  // data to recreate a scene\n  sceneData: Partial<SceneData>\n  // configuration options of {@link Niivue} instance\n  opts: NVConfigOptions\n  // encoded meshes\n  meshesString: string\n  // TODO the following fields were missing in the typedef\n  labels: NVLabel3D[]\n  connectomes: string[]\n  customData: string\n}\n\n/**\n * Creates and instance of NVDocument\n * @ignore\n */\nexport class NVDocument {\n  data: DocumentData = {\n    title: 'Untitled document',\n    imageOptionsArray: [],\n    meshOptionsArray: [],\n    opts: { ...DEFAULT_OPTIONS },\n    previewImageDataURL: '',\n    labels: [],\n    encodedImageBlobs: [],\n    encodedDrawingBlob: ''\n  }\n\n  scene: Scene\n\n  volumes: NVImage[] = []\n  meshDataObjects?: Array<NVMesh | NVConnectome>\n  meshes: Array<NVMesh | NVConnectome> = []\n  drawBitmap: Uint8Array | null = null\n  imageOptionsMap = new Map()\n  meshOptionsMap = new Map()\n\n  constructor() {\n    this.scene = {\n      onAzimuthElevationChange: (): void => {},\n      onZoom3DChange: (): void => {},\n      sceneData: {\n        ...INITIAL_SCENE_DATA,\n        pan2Dxyzmm: vec4.fromValues(0, 0, 0, 1),\n        crosshairPos: vec3.fromValues(0.5, 0.5, 0.5)\n      },\n\n      get renderAzimuth(): number {\n        return this.sceneData.azimuth\n      },\n      set renderAzimuth(azimuth: number) {\n        this.sceneData.azimuth = azimuth\n        if (this.onAzimuthElevationChange) {\n          this.onAzimuthElevationChange(this.sceneData.azimuth, this.sceneData.elevation)\n        }\n      },\n\n      get renderElevation(): number {\n        return this.sceneData.elevation\n      },\n      set renderElevation(elevation: number) {\n        this.sceneData.elevation = elevation\n        if (this.onAzimuthElevationChange) {\n          this.onAzimuthElevationChange(this.sceneData.azimuth, this.sceneData.elevation)\n        }\n      },\n\n      get volScaleMultiplier(): number {\n        return this.sceneData.volScaleMultiplier\n      },\n      set volScaleMultiplier(scale: number) {\n        this.sceneData.volScaleMultiplier = scale\n        this.onZoom3DChange(scale)\n      },\n\n      get crosshairPos(): vec3 {\n        return this.sceneData.crosshairPos\n      },\n      set crosshairPos(crosshairPos: vec3) {\n        this.sceneData.crosshairPos = crosshairPos\n      },\n\n      get clipPlane(): number[] {\n        return this.sceneData.clipPlane\n      },\n      set clipPlane(clipPlane) {\n        this.sceneData.clipPlane = clipPlane\n      },\n\n      get clipPlaneDepthAziElev(): number[] {\n        return this.sceneData.clipPlaneDepthAziElev\n      },\n      set clipPlaneDepthAziElev(clipPlaneDepthAziElev: number[]) {\n        this.sceneData.clipPlaneDepthAziElev = clipPlaneDepthAziElev\n      },\n\n      get pan2Dxyzmm(): vec4 {\n        return this.sceneData.pan2Dxyzmm\n      },\n\n      /**\n       * Sets current 2D pan in 3D mm\n       */\n      set pan2Dxyzmm(pan2Dxyzmm) {\n        this.sceneData.pan2Dxyzmm = pan2Dxyzmm\n      }\n    }\n  }\n\n  /**\n   * Title of the document\n   */\n  get title(): string {\n    return this.data.title\n  }\n\n  /**\n   * Gets preview image blob\n   * @returns dataURL of preview image\n   */\n  get previewImageDataURL(): string {\n    return this.data.previewImageDataURL\n  }\n\n  /**\n   * Sets preview image blob\n   * @param dataURL - encoded preview image\n   */\n  set previewImageDataURL(dataURL: string) {\n    this.data.previewImageDataURL = dataURL\n  }\n\n  /**\n   * @param title - title of document\n   */\n  set title(title: string) {\n    this.data.title = title\n  }\n\n  get imageOptionsArray(): ImageFromUrlOptions[] {\n    return this.data.imageOptionsArray\n  }\n\n  /**\n   * Gets the base 64 encoded blobs of associated images\n   */\n  get encodedImageBlobs(): string[] {\n    return this.data.encodedImageBlobs\n  }\n\n  /**\n   * Gets the base 64 encoded blob of the associated drawing\n   * TODO the return type was marked as string[] here, was that an error?\n   */\n  get encodedDrawingBlob(): string {\n    return this.data.encodedDrawingBlob\n  }\n\n  /**\n   * Gets the options of the {@link Niivue} instance\n   */\n  get opts(): NVConfigOptions {\n    return this.data.opts\n  }\n\n  /**\n   * Sets the options of the {@link Niivue} instance\n   */\n  set opts(opts) {\n    this.data.opts = { ...opts }\n  }\n\n  /**\n   * Gets the 3D labels of the {@link Niivue} instance\n   */\n  get labels(): NVLabel3D[] {\n    return this.data.labels\n  }\n\n  /**\n   * Sets the 3D labels of the {@link Niivue} instance\n   */\n  set labels(labels: NVLabel3D[]) {\n    this.data.labels = labels\n  }\n\n  get customData(): string | undefined {\n    return this.data.customData\n  }\n\n  set customData(data: string) {\n    this.data.customData = data\n  }\n\n  /**\n   * Checks if document has an image by id\n   */\n  hasImage(image: NVImage): boolean {\n    return this.volumes.find((i) => i.id === image.id) !== undefined\n  }\n\n  /**\n   * Checks if document has an image by url\n   */\n  hasImageFromUrl(url: string): boolean {\n    return this.data.imageOptionsArray.find((i) => i.url === url) !== undefined\n  }\n\n  /**\n   * Adds an image and the options an image was created with\n   */\n  addImageOptions(image: NVImage, imageOptions: ImageFromUrlOptions): void {\n    if (!this.hasImage(image)) {\n      if (!imageOptions.name) {\n        if (imageOptions.url) {\n          const absoluteUrlRE = /^(?:[a-z+]+:)?\\/\\//i\n          const url = absoluteUrlRE.test(imageOptions.url)\n            ? new URL(imageOptions.url)\n            : new URL(imageOptions.url, window.location.href)\n\n          imageOptions.name = url.pathname.split('/').pop()! // TODO guaranteed?\n          if (imageOptions.name.toLowerCase().endsWith('.gz')) {\n            imageOptions.name = imageOptions.name.slice(0, -3)\n          }\n\n          if (!imageOptions.name.toLowerCase().endsWith('.nii')) {\n            imageOptions.name += '.nii'\n          }\n        } else {\n          imageOptions.name = 'untitled.nii'\n        }\n      }\n    }\n\n    imageOptions.imageType = NVIMAGE_TYPE.NII\n\n    this.data.imageOptionsArray.push(imageOptions)\n    this.imageOptionsMap.set(image.id, this.data.imageOptionsArray.length - 1)\n  }\n\n  /**\n   * Removes image from the document as well as its options\n   */\n  removeImage(image: NVImage): void {\n    if (this.imageOptionsMap.has(image.id)) {\n      const index = this.imageOptionsMap.get(image.id)\n      if (this.data.imageOptionsArray.length > index) {\n        this.data.imageOptionsArray.splice(index, 1)\n      }\n      this.imageOptionsMap.delete(image.id)\n    }\n    this.volumes = this.volumes.filter((i) => i.id !== image.id)\n  }\n\n  /**\n   * Returns the options for the image if it was added by url\n   */\n  getImageOptions(image: NVImage): ImageFromUrlOptions | null {\n    return this.imageOptionsMap.has(image.id) ? this.data.imageOptionsArray[this.imageOptionsMap.get(image.id)] : null\n  }\n\n  /**\n   * Converts NVDocument to JSON\n   */\n  json(): ExportDocumentData {\n    const data: Partial<ExportDocumentData> = {\n      encodedImageBlobs: [],\n      previewImageDataURL: this.data.previewImageDataURL,\n      imageOptionsMap: new Map()\n    }\n    const imageOptionsArray = []\n    // save our scene object\n    data.sceneData = { ...this.scene.sceneData }\n    // save our options\n    data.opts = { ...this.opts }\n    // infinity is a symbol\n    if (this.opts.meshThicknessOn2D === Infinity) {\n      data.opts.meshThicknessOn2D = 'infinity'\n    }\n\n    data.labels = [...this.data.labels]\n\n    // remove any handlers\n    for (const label of data.labels) {\n      delete label.onClick\n    }\n\n    data.customData = this.customData\n\n    // volumes\n    // TODO move this to a per-volume export function in NVImage?\n    if (this.volumes.length) {\n      let imageOptions = this.imageOptionsArray[0]\n      if (!imageOptions) {\n        log.debug('no image options for base image')\n        imageOptions = {\n          name: '',\n          colormap: 'gray',\n          opacity: 1.0,\n          pairedImgData: null,\n          cal_min: NaN,\n          cal_max: NaN,\n          trustCalMinMax: true,\n          percentileFrac: 0.02,\n          ignoreZeroVoxels: false,\n          useQFormNotSForm: false,\n          colormapNegative: '',\n          colormapLabel: null,\n          imageType: NVIMAGE_TYPE.NII,\n          frame4D: 0,\n          limitFrames4D: NaN,\n          // TODO the following fields were previously not included\n          url: '',\n          urlImageData: '',\n          alphaThreshold: false,\n          cal_minNeg: NaN,\n          cal_maxNeg: NaN,\n          colorbarVisible: true\n        }\n      }\n\n      // update image options on current image settings\n      imageOptions.colormap = this.volumes[0].colormap\n      imageOptions.opacity = this.volumes[0].opacity\n      imageOptions.cal_max = this.volumes[0].cal_max || NaN\n      imageOptions.cal_min = this.volumes[0].cal_min || NaN\n\n      if (imageOptions) {\n        imageOptionsArray.push(imageOptions)\n        const encodedImageBlob = NVUtilities.uint8tob64(this.volumes[0].toUint8Array())\n        data.encodedImageBlobs!.push(encodedImageBlob)\n        if (this.drawBitmap) {\n          data.encodedDrawingBlob = NVUtilities.uint8tob64(this.volumes[0].toUint8Array(this.drawBitmap))\n        }\n\n        data.imageOptionsMap!.set(this.volumes[0].id, 0)\n      } else {\n        throw new Error('image options for base layer not found')\n      }\n\n      for (let i = 1; i < this.volumes.length; i++) {\n        const volume = this.volumes[i]\n        let imageOptions = this.getImageOptions(volume)\n\n        if (imageOptions === null) {\n          log.warn('no options found for image, using default')\n          imageOptions = {\n            name: '',\n            colormap: 'gray',\n            opacity: 1.0,\n            pairedImgData: null,\n            cal_min: NaN,\n            cal_max: NaN,\n            trustCalMinMax: true,\n            percentileFrac: 0.02,\n            ignoreZeroVoxels: false,\n            useQFormNotSForm: false,\n            colormapNegative: '',\n            colormapLabel: null,\n            imageType: NVIMAGE_TYPE.NII,\n            frame4D: 0,\n            limitFrames4D: NaN,\n            // TODO the following were missing\n            url: '',\n            urlImageData: '',\n            alphaThreshold: false,\n            cal_minNeg: NaN,\n            cal_maxNeg: NaN,\n            colorbarVisible: true\n          }\n        } else {\n          if (!('imageType' in imageOptions)) {\n            imageOptions.imageType = NVIMAGE_TYPE.NII\n          }\n        }\n        // update image options on current image settings\n        imageOptions.colormap = volume.colormap\n        imageOptions.colormapLabel = volume.colormapLabel\n        imageOptions.opacity = volume.opacity\n        imageOptions.cal_max = volume.cal_max || NaN\n        imageOptions.cal_min = volume.cal_min || NaN\n\n        imageOptionsArray.push(imageOptions)\n\n        const encodedImageBlob = NVUtilities.uint8tob64(volume.toUint8Array())\n        data.encodedImageBlobs!.push(encodedImageBlob)\n        data.imageOptionsMap!.set(volume.id, i)\n      }\n    }\n    // Add it even if it's empty\n    data.imageOptionsArray = [...imageOptionsArray]\n\n    // meshes\n    const meshes = []\n    data.connectomes = []\n    for (const mesh of this.meshes) {\n      if (mesh.type === MeshType.CONNECTOME) {\n        data.connectomes.push(JSON.stringify((mesh as NVConnectome).json()))\n        continue\n      }\n      const copyMesh: Mutable<any> = {\n        pts: mesh.pts,\n        tris: mesh.tris,\n        name: mesh.name,\n        rgba255: Uint8Array.from(mesh.rgba255),\n        opacity: mesh.opacity,\n        connectome: mesh.connectome,\n        dpg: mesh.dpg,\n        dps: mesh.dps,\n        dpv: mesh.dpv,\n        meshShaderIndex: mesh.meshShaderIndex,\n        layers: mesh.layers.map((layer) => ({\n          values: layer.values,\n          nFrame4D: layer.nFrame4D,\n          frame4D: 0,\n          outlineBorder: layer.outlineBorder,\n          global_min: layer.global_min,\n          global_max: layer.global_max,\n          cal_min: layer.cal_min,\n          cal_max: layer.cal_max,\n          opacity: layer.opacity,\n          colormap: layer.colormap,\n          colormapNegative: layer.colormapNegative,\n          colormapLabel: layer.colormapLabel,\n          useNegativeCmap: layer.useNegativeCmap\n        })),\n        hasConnectome: mesh.hasConnectome,\n        edgeColormap: mesh.edgeColormap,\n        edgeColormapNegative: mesh.edgeColormapNegative,\n        edgeMax: mesh.edgeMax,\n        edgeMin: mesh.edgeMin,\n        edges: mesh.edges && Array.isArray(mesh.edges) ? [...mesh.edges] : [],\n        extentsMax: mesh.extentsMax,\n        extentsMin: mesh.extentsMin,\n        furthestVertexFromOrigin: mesh.furthestVertexFromOrigin,\n        nodeColormap: mesh.nodeColormap,\n        nodeColormapNegative: mesh.nodeColormapNegative,\n        nodeMaxColor: mesh.nodeMaxColor,\n        nodeMinColor: mesh.nodeMinColor,\n        nodeScale: mesh.nodeScale,\n        legendLineThickness: mesh.legendLineThickness,\n        offsetPt0: mesh.offsetPt0,\n        nodes: mesh.nodes\n      }\n      if (mesh.offsetPt0 && mesh.offsetPt0.length > 0) {\n        copyMesh.offsetPt0 = mesh.offsetPt0\n        copyMesh.fiberGroupColormap = mesh.fiberGroupColormap\n        copyMesh.fiberColor = mesh.fiberColor\n        copyMesh.fiberDither = mesh.fiberDither\n        copyMesh.fiberRadius = mesh.fiberRadius\n        copyMesh.colormap = mesh.colormap\n      }\n      meshes.push(copyMesh)\n    }\n    data.meshesString = JSON.stringify(serialize(meshes))\n    return data as ExportDocumentData\n  }\n\n  /**\n   * Downloads a JSON file with options, scene, images, meshes and drawing of {@link Niivue} instance\n   */\n  async download(fileName: string, compress: boolean): Promise<void> {\n    const data = this.json()\n    const dataText = JSON.stringify(data)\n    const contentType = compress ? 'application/gzip' : 'application/json'\n    let content: string | ArrayBuffer\n\n    if (compress) {\n      content = await NVUtilities.compressStringToArrayBuffer(dataText)\n    } else {\n      content = JSON.stringify(data)\n    }\n\n    NVUtilities.download(content, fileName, contentType)\n  }\n\n  /**\n   * Deserialize mesh data objects\n   */\n  static deserializeMeshDataObjects(document: NVDocument): void {\n    if (document.data.meshesString) {\n      document.meshDataObjects = deserialize(JSON.parse(document.data.meshesString))\n      for (const mesh of document.meshDataObjects!) {\n        for (const layer of mesh.layers) {\n          if ('colorMap' in layer) {\n            layer.colormap = layer.colorMap as string\n            delete layer.colorMap\n          }\n          if ('colorMapNegative' in layer) {\n            layer.colormapNegative = layer.colorMapNegative as string\n            delete layer.colorMapNegative\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Factory method to return an instance of NVDocument from a URL\n   */\n  static async loadFromUrl(url: string): Promise<NVDocument> {\n    const response = await fetch(url)\n    const buffer = await response.arrayBuffer()\n    let documentData: DocumentData\n\n    if (NVUtilities.isArrayBufferCompressed(buffer)) {\n      // The file is gzip compressed\n      const documentText = await NVUtilities.decompressArrayBuffer(buffer)\n      documentData = JSON.parse(documentText)\n    } else {\n      const utf8decoder = new TextDecoder()\n      documentData = JSON.parse(utf8decoder.decode(buffer))\n    }\n\n    return NVDocument.loadFromJSON(documentData)\n  }\n\n  /**\n   * Factory method to return an instance of NVDocument from a File object\n   */\n  static async loadFromFile(file: Blob): Promise<NVDocument> {\n    const arrayBuffer = await NVUtilities.readFileAsync(file)\n    let dataString: string\n    const document = new NVDocument()\n\n    if (NVUtilities.isArrayBufferCompressed(arrayBuffer)) {\n      dataString = await NVUtilities.decompressArrayBuffer(arrayBuffer)\n    } else {\n      const utf8decoder = new TextDecoder()\n      dataString = utf8decoder.decode(arrayBuffer)\n    }\n    document.data = JSON.parse(dataString)\n\n    if (document.data.opts.meshThicknessOn2D === 'infinity') {\n      document.data.opts.meshThicknessOn2D = Infinity\n    }\n    document.scene.sceneData = { ...INITIAL_SCENE_DATA, ...document.data.sceneData }\n\n    NVDocument.deserializeMeshDataObjects(document)\n    return document\n  }\n\n  /**\n   * Factory method to return an instance of NVDocument from JSON\n   */\n  static loadFromJSON(data: DocumentData): NVDocument {\n    const document = new NVDocument()\n    document.data = data\n    if (document.data.opts.meshThicknessOn2D === 'infinity') {\n      document.data.opts.meshThicknessOn2D = Infinity\n    }\n    document.scene.sceneData = { ...INITIAL_SCENE_DATA, ...data.sceneData }\n    NVDocument.deserializeMeshDataObjects(document)\n    return document\n  }\n}\n","import * as nifti from 'nifti-reader-js'\nimport daikon from 'daikon'\nimport { mat3, mat4, vec3, vec4 } from 'gl-matrix'\nimport { Decompress, decompressSync, gzipSync } from 'fflate/browser'\nimport { v4 as uuidv4 } from '@lukeed/uuid'\nimport { ColorMap, LUT, cmapper } from '../colortables.js'\nimport { NiivueObject3D } from '../niivue-object3D.js'\nimport { log } from '../logger.js'\nimport { NVUtilities } from '../nvutilities.js'\nimport {\n  ImageFromBase64,\n  ImageFromFileOptions,\n  ImageFromUrlOptions,\n  ImageMetadata,\n  ImageType,\n  NVIMAGE_TYPE,\n  NiiDataType,\n  NiiIntentCode,\n  NVImageFromUrlOptions,\n  getBestTransform,\n  getExtents,\n  hdrToArrayBuffer,\n  isAffineOK,\n  isPlatformLittleEndian\n} from './utils.js'\n\nexport * from './utils.js'\n\nexport type TypedVoxelArray = Float32Array | Uint8Array | Int16Array | Float64Array | Uint16Array\n\n/**\n * a NVImage encapsulates some images data and provides methods to query and operate on images\n */\nexport class NVImage {\n  name: string\n  id: string\n  url?: string\n  headers?: Record<string, string>\n  _colormap: string\n  _opacity: number\n  percentileFrac: number\n  ignoreZeroVoxels: boolean\n  trustCalMinMax: boolean\n  colormapNegative: string\n  // TODO see niivue/loadDocument\n  colormapLabel: LUT | null\n  colormapInvert?: boolean\n  nFrame4D?: number\n  frame4D: number // indexed from 0!\n  nTotalFrame4D?: number\n  cal_minNeg: number\n  cal_maxNeg: number\n  colorbarVisible = true\n  modulationImage: number | null = null\n  modulateAlpha = 0 // if !=0, mod transparency with expon power |Alpha|\n  // TODO this is some Daikon internal thing\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  series: any = [] // for concatenating dicom images\n  nVox3D?: number\n  oblique_angle?: number\n  maxShearDeg?: number\n  useQFormNotSForm: boolean\n\n  alphaThreshold?: number\n\n  pixDims?: number[]\n  matRAS?: mat4\n  pixDimsRAS?: number[]\n  obliqueRAS?: mat4\n  dimsRAS?: number[]\n  permRAS?: number[]\n  img2RASstep?: number[]\n  img2RASstart?: number[]\n  toRAS?: mat4\n  toRASvox?: mat4\n\n  frac2mm?: mat4\n  frac2mmOrtho?: mat4\n  extentsMinOrtho?: number[]\n  extentsMaxOrtho?: number[]\n  mm2ortho?: mat4\n\n  hdr: nifti.NIFTI1 | nifti.NIFTI2 | null = null\n  imageType?: ImageType\n  img?: TypedVoxelArray\n  imaginary?: Float32Array // only for complex data\n  v1?: Float32Array // only for FIB files\n  fileObject?: File | File[]\n  dims?: number[]\n\n  onColormapChange: (img: NVImage) => void = () => {}\n  onOpacityChange: (img: NVImage) => void = () => {}\n\n  mm000?: vec3\n  mm100?: vec3\n  mm010?: vec3\n  mm001?: vec3\n\n  cal_min?: number\n  cal_max?: number\n  robust_min?: number\n  robust_max?: number\n  global_min?: number\n  global_max?: number\n\n  // TODO referenced by niivue/loadVolumes\n  urlImgData?: string\n  isManifest?: boolean\n  limitFrames4D?: number\n\n  /**\n   *\n   * @param dataBuffer - an array buffer of image data to load (there are also methods that abstract this more. See loadFromUrl, and loadFromFile)\n   * @param name - a name for this image. Default is an empty string\n   * @param colormap - a color map to use. default is gray\n   * @param opacity - the opacity for this image. default is 1\n   * @param pairedImgData - Allows loading formats where header and image are separate files (e.g. nifti.hdr, nifti.img)\n   * @param cal_min - minimum intensity for color brightness/contrast\n   * @param cal_max - maximum intensity for color brightness/contrast\n   * @param trustCalMinMax - whether or not to trust cal_min and cal_max from the nifti header (trusting results in faster loading)\n   * @param percentileFrac - the percentile to use for setting the robust range of the display values (smart intensity setting for images with large ranges)\n   * @param ignoreZeroVoxels - whether or not to ignore zero voxels in setting the robust range of display values\n   * @param useQFormNotSForm - give precedence to QForm (Quaternion) or SForm (Matrix)\n   * @param colormapNegative - a color map to use for symmetrical negative intensities\n   * @param frame4D - volume displayed, 0 indexed, must be less than nFrame4D\n   *\n   * FIXME the following params are documented but not included in the actual constructor\n   * @param onColormapChange - callback for color map change\n   * @param onOpacityChange -callback for color map change\n   *\n   * TODO the following parameters were not documented\n   * @param imageType - TODO\n   * @param cal_minNeg - TODO\n   * @param cal_maxNeg - TODO\n   * @param colorbarVisible - TODO\n   * @param colormapLabel - TODO\n   */\n  constructor(\n    // can be an array of Typed arrays or just a typed array. If an array of Typed arrays then it is assumed you are loading DICOM (perhaps the only real use case?)\n    dataBuffer: ArrayBuffer | ArrayBuffer[] | null = null,\n    name = '',\n    colormap = 'gray',\n    opacity = 1.0,\n    pairedImgData: ArrayBuffer | null = null,\n    cal_min = NaN,\n    cal_max = NaN,\n    trustCalMinMax = true,\n    percentileFrac = 0.02,\n    ignoreZeroVoxels = false,\n    // TODO this was marked as true by default in the docs!\n    useQFormNotSForm = false,\n    colormapNegative = '',\n    frame4D = 0,\n    imageType = NVIMAGE_TYPE.UNKNOWN,\n    cal_minNeg = NaN,\n    cal_maxNeg = NaN,\n    colorbarVisible = true,\n    colormapLabel: LUT | null = null\n  ) {\n    this.name = name\n    this.id = uuidv4()\n    this._colormap = colormap\n    this._opacity = opacity > 1.0 ? 1.0 : opacity // make sure opacity can't be initialized greater than 1 see: #107 and #117 on github\n    this.percentileFrac = percentileFrac\n    this.ignoreZeroVoxels = ignoreZeroVoxels\n    this.trustCalMinMax = trustCalMinMax\n    this.colormapNegative = colormapNegative\n    this.colormapLabel = colormapLabel\n    this.frame4D = frame4D // indexed from 0!\n    this.cal_minNeg = cal_minNeg\n    this.cal_maxNeg = cal_maxNeg\n    this.colorbarVisible = colorbarVisible\n\n    // TODO this was missing\n    this.useQFormNotSForm = useQFormNotSForm\n    // Added to support zerosLike\n    // TODO this line causes an absurd amount of handling undefined fields - it would probably be better to isolate this as a separate class.\n    if (!dataBuffer) {\n      return\n    }\n    const re = /(?:\\.([^.]+))?$/\n    let ext = re.exec(name)![1] || '' // TODO ! guaranteed?\n    ext = ext.toUpperCase()\n    if (ext === 'GZ') {\n      ext = re.exec(name.slice(0, -3))![1] // img.trk.gz -> img.trk\n      ext = ext.toUpperCase()\n    }\n    let imgRaw: ArrayBufferLike | Uint8Array | null = null\n\n    if (imageType === NVIMAGE_TYPE.UNKNOWN) {\n      imageType = NVIMAGE_TYPE.parse(ext)\n    }\n    this.imageType = imageType\n    switch (imageType) {\n      case NVIMAGE_TYPE.DCM_FOLDER:\n      case NVIMAGE_TYPE.DCM_MANIFEST:\n      case NVIMAGE_TYPE.DCM:\n        imgRaw = this.readDICOM(dataBuffer)\n        break\n      case NVIMAGE_TYPE.FIB:\n        ;[imgRaw, this.v1] = this.readFIB(dataBuffer as ArrayBuffer)\n        break\n      case NVIMAGE_TYPE.MIH:\n      case NVIMAGE_TYPE.MIF:\n        imgRaw = this.readMIF(dataBuffer as ArrayBuffer, pairedImgData) // detached\n        break\n      case NVIMAGE_TYPE.NHDR:\n      case NVIMAGE_TYPE.NRRD:\n        imgRaw = this.readNRRD(dataBuffer as ArrayBuffer, pairedImgData) // detached\n        break\n      case NVIMAGE_TYPE.MHD:\n      case NVIMAGE_TYPE.MHA:\n        imgRaw = this.readMHA(dataBuffer as ArrayBuffer, pairedImgData)\n        break\n      case NVIMAGE_TYPE.MGH:\n      case NVIMAGE_TYPE.MGZ:\n        imgRaw = this.readMGH(dataBuffer as ArrayBuffer) // to do: pairedImgData\n        break\n      case NVIMAGE_TYPE.SRC:\n        imgRaw = this.readSRC(dataBuffer as ArrayBuffer)\n        break\n      case NVIMAGE_TYPE.V:\n        imgRaw = this.readECAT(dataBuffer as ArrayBuffer)\n        break\n      case NVIMAGE_TYPE.V16:\n        imgRaw = this.readV16(dataBuffer as ArrayBuffer)\n        break\n      case NVIMAGE_TYPE.VMR:\n        imgRaw = this.readVMR(dataBuffer as ArrayBuffer)\n        break\n      case NVIMAGE_TYPE.HEAD:\n        imgRaw = this.readHEAD(dataBuffer as ArrayBuffer, pairedImgData) // paired = .BRIK\n        break\n      case NVIMAGE_TYPE.NII:\n        this.hdr = nifti.readHeader(dataBuffer as ArrayBuffer)\n        if (this.hdr !== null) {\n          if (this.hdr.cal_min === 0 && this.hdr.cal_max === 255) {\n            this.hdr.cal_max = 0.0\n          }\n          if (nifti.isCompressed(dataBuffer as ArrayBuffer)) {\n            imgRaw = nifti.readImage(this.hdr, nifti.decompress(dataBuffer as ArrayBuffer))\n          } else {\n            imgRaw = nifti.readImage(this.hdr, dataBuffer as ArrayBuffer)\n          }\n        }\n        break\n      default:\n        throw new Error('Image type not supported')\n    }\n    if (this.hdr && typeof this.hdr.magic === 'number') {\n      this.hdr.magic = 'n+1'\n    } // fix for issue 481, where magic is set to the number 1 rather than a string\n    this.nFrame4D = 1\n    if (this.hdr) {\n      for (let i = 4; i < 7; i++) {\n        if (this.hdr.dims[i] > 1) {\n          this.nFrame4D *= this.hdr.dims[i]\n        }\n      }\n    }\n    this.frame4D = Math.min(this.frame4D, this.nFrame4D - 1)\n    this.nTotalFrame4D = this.nFrame4D\n\n    if (!this.hdr || !imgRaw) {\n      return\n    }\n\n    this.nVox3D = this.hdr.dims[1] * this.hdr.dims[2] * this.hdr.dims[3]\n    const bytesPerVol = this.nVox3D * (this.hdr.numBitsPerVoxel / 8)\n    const nVol4D = imgRaw.byteLength / bytesPerVol\n    if (nVol4D !== this.nFrame4D) {\n      if (nVol4D > 0 && nVol4D * bytesPerVol === imgRaw.byteLength) {\n        log.debug('Loading the first ' + nVol4D + ' of ' + this.nFrame4D + ' volumes')\n      } else {\n        log.warn('This header does not match voxel data', this.hdr, imgRaw.byteLength)\n      }\n      this.nFrame4D = nVol4D\n    }\n\n    // n.b. NIfTI standard says \"NIFTI_INTENT_RGB_VECTOR\" should be RGBA, but FSL only stores RGB\n    if (\n      (this.hdr.intent_code === NiiIntentCode.NIFTI_INTENT_VECTOR ||\n        this.hdr.intent_code === NiiIntentCode.NIFTI_INTENT_RGB_VECTOR) &&\n      this.nFrame4D === 3 &&\n      this.hdr.datatypeCode === NiiDataType.DT_FLOAT32\n    ) {\n      // change data from float32 to rgba32\n      imgRaw = this.float32V1asRGBA(new Float32Array(imgRaw))\n    } // NIFTI_INTENT_VECTOR: this is a RGB tensor\n    if (this.hdr.pixDims[1] === 0.0 || this.hdr.pixDims[2] === 0.0 || this.hdr.pixDims[3] === 0.0) {\n      log.error('pixDims not plausible', this.hdr)\n    }\n    if (isNaN(this.hdr.scl_slope) || this.hdr.scl_slope === 0.0) {\n      this.hdr.scl_slope = 1.0\n    } // https://github.com/nipreps/fmriprep/issues/2507\n    if (isNaN(this.hdr.scl_inter)) {\n      this.hdr.scl_inter = 0.0\n    }\n    let affineOK = isAffineOK(this.hdr.affine)\n    if (useQFormNotSForm || !affineOK || this.hdr.qform_code > this.hdr.sform_code) {\n      log.debug('spatial transform based on QForm')\n      // https://github.com/rii-mango/NIFTI-Reader-JS/blob/6908287bf99eb3bc4795c1591d3e80129da1e2f6/src/nifti1.js#L238\n      // Define a, b, c, d for coding covenience\n      const b = this.hdr.quatern_b\n      const c = this.hdr.quatern_c\n      const d = this.hdr.quatern_d\n      // quatern_a is a parameter in quaternion [a, b, c, d], which is required in affine calculation (METHOD 2)\n      // mentioned in the nifti1.h file\n      // It can be calculated by a = sqrt(1.0-(b*b+c*c+d*d))\n      const a = Math.sqrt(1.0 - (Math.pow(b, 2) + Math.pow(c, 2) + Math.pow(d, 2)))\n      const qfac = this.hdr.pixDims[0] === 0 ? 1 : this.hdr.pixDims[0]\n      const quatern_R = [\n        [a * a + b * b - c * c - d * d, 2 * b * c - 2 * a * d, 2 * b * d + 2 * a * c],\n        [2 * b * c + 2 * a * d, a * a + c * c - b * b - d * d, 2 * c * d - 2 * a * b],\n        [2 * b * d - 2 * a * c, 2 * c * d + 2 * a * b, a * a + d * d - c * c - b * b]\n      ]\n      const affine = this.hdr.affine\n      for (let ctrOut = 0; ctrOut < 3; ctrOut += 1) {\n        for (let ctrIn = 0; ctrIn < 3; ctrIn += 1) {\n          affine[ctrOut][ctrIn] = quatern_R[ctrOut][ctrIn] * this.hdr.pixDims[ctrIn + 1]\n          if (ctrIn === 2) {\n            affine[ctrOut][ctrIn] *= qfac\n          }\n        }\n      }\n      // The last row of affine matrix is the offset vector\n      affine[0][3] = this.hdr.qoffset_x\n      affine[1][3] = this.hdr.qoffset_y\n      affine[2][3] = this.hdr.qoffset_z\n      this.hdr.affine = affine\n    }\n    affineOK = isAffineOK(this.hdr.affine)\n    if (!affineOK) {\n      log.debug('Defective NIfTI: spatial transform does not make sense')\n      let x = this.hdr.pixDims[1]\n      let y = this.hdr.pixDims[2]\n      let z = this.hdr.pixDims[3]\n      if (isNaN(x) || x === 0.0) {\n        x = 1.0\n      }\n      if (isNaN(y) || y === 0.0) {\n        y = 1.0\n      }\n      if (isNaN(z) || z === 0.0) {\n        z = 1.0\n      }\n      this.hdr.pixDims[1] = x\n      this.hdr.pixDims[2] = y\n      this.hdr.pixDims[3] = z\n      const affine = [\n        [x, 0, 0, 0],\n        [0, y, 0, 0],\n        [0, 0, z, 0],\n        [0, 0, 0, 1]\n      ]\n      this.hdr.affine = affine\n    } // defective affine\n    // swap data if foreign endian:\n    if (\n      this.hdr.datatypeCode !== NiiDataType.DT_RGB24 &&\n      this.hdr.datatypeCode !== NiiDataType.DT_RGBA32 &&\n      this.hdr.littleEndian !== isPlatformLittleEndian() &&\n      this.hdr.numBitsPerVoxel > 8\n    ) {\n      if (this.hdr.numBitsPerVoxel === 16) {\n        // inspired by https://github.com/rii-mango/Papaya\n        const u16 = new Uint16Array(imgRaw)\n        for (let i = 0; i < u16.length; i++) {\n          const val = u16[i]\n          u16[i] = ((((val & 0xff) << 8) | ((val >> 8) & 0xff)) << 16) >> 16 // since JS uses 32-bit  when bit shifting\n        }\n      } else if (this.hdr.numBitsPerVoxel === 32) {\n        // inspired by https://github.com/rii-mango/Papaya\n        const u32 = new Uint32Array(imgRaw)\n        for (let i = 0; i < u32.length; i++) {\n          const val = u32[i]\n          u32[i] = ((val & 0xff) << 24) | ((val & 0xff00) << 8) | ((val >> 8) & 0xff00) | ((val >> 24) & 0xff)\n        }\n      } else if (this.hdr.numBitsPerVoxel === 64) {\n        // inspired by MIT licensed code: https://github.com/rochars/endianness\n        const numBytesPerVoxel = this.hdr.numBitsPerVoxel / 8\n        const u8 = new Uint8Array(imgRaw)\n        for (let index = 0; index < u8.length; index += numBytesPerVoxel) {\n          let offset = numBytesPerVoxel - 1\n          for (let x = 0; x < offset; x++) {\n            const theByte = u8[index + x]\n            u8[index + x] = u8[index + offset]\n            u8[index + offset] = theByte\n            offset--\n          }\n        }\n      } // if 64-bits\n    } // swap byte order\n    switch (this.hdr.datatypeCode) {\n      case NiiDataType.DT_UINT8:\n        this.img = new Uint8Array(imgRaw)\n        break\n      case NiiDataType.DT_INT16:\n        this.img = new Int16Array(imgRaw)\n        break\n      case NiiDataType.DT_FLOAT32:\n        this.img = new Float32Array(imgRaw)\n        break\n      case NiiDataType.DT_FLOAT64:\n        this.img = new Float64Array(imgRaw)\n        break\n      case NiiDataType.DT_RGB24:\n        this.img = new Uint8Array(imgRaw)\n        break\n      case NiiDataType.DT_UINT16:\n        this.img = new Uint16Array(imgRaw)\n        break\n      case NiiDataType.DT_RGBA32:\n        this.img = new Uint8Array(imgRaw)\n        break\n      case NiiDataType.DT_INT8: {\n        const i8 = new Int8Array(imgRaw)\n        const vx8 = i8.length\n        this.img = new Int16Array(vx8)\n        for (let i = 0; i < vx8; i++) {\n          this.img[i] = i8[i]\n        }\n        this.hdr.datatypeCode = NiiDataType.DT_INT16\n        this.hdr.numBitsPerVoxel = 16\n        break\n      }\n      case NiiDataType.DT_BINARY: {\n        const nvox = this.hdr.dims[1] * this.hdr.dims[2] * Math.max(1, this.hdr.dims[3]) * Math.max(1, this.hdr.dims[4])\n        const img1 = new Uint8Array(imgRaw)\n        this.img = new Uint8Array(nvox)\n        const lut = new Uint8Array(8)\n        for (let i = 0; i < 8; i++) {\n          lut[i] = Math.pow(2, i)\n        }\n        let i1 = -1\n        for (let i = 0; i < nvox; i++) {\n          const bit = i % 8\n          if (bit === 0) {\n            i1++\n          }\n          if ((img1[i1] & lut[bit]) !== 0) {\n            this.img[i] = 1\n          }\n        }\n        this.hdr.datatypeCode = NiiDataType.DT_UINT8\n        this.hdr.numBitsPerVoxel = 8\n        break\n      }\n      case NiiDataType.DT_UINT32: {\n        const u32 = new Uint32Array(imgRaw)\n        const vx32 = u32.length\n        this.img = new Float64Array(vx32)\n        for (let i = 0; i < vx32 - 1; i++) {\n          this.img[i] = u32[i]\n        }\n        this.hdr.datatypeCode = NiiDataType.DT_FLOAT64\n        break\n      }\n      case NiiDataType.DT_INT32: {\n        const i32 = new Int32Array(imgRaw)\n        const vxi32 = i32.length\n        this.img = new Float64Array(vxi32)\n        for (let i = 0; i < vxi32 - 1; i++) {\n          this.img[i] = i32[i]\n        }\n        this.hdr.datatypeCode = NiiDataType.DT_FLOAT64\n        break\n      }\n      case NiiDataType.DT_INT64: {\n        const i64 = new BigInt64Array(imgRaw)\n        const vx = i64.length\n        this.img = new Float64Array(vx)\n        for (let i = 0; i < vx - 1; i++) {\n          this.img[i] = Number(i64[i])\n        }\n        this.hdr.datatypeCode = NiiDataType.DT_FLOAT64\n        break\n      }\n      case NiiDataType.DT_COMPLEX64: {\n        // saved as real/imaginary pairs: show real following fsleyes/MRIcroGL convention\n        const f32 = new Float32Array(imgRaw)\n        const nvx = Math.floor(f32.length / 2)\n        this.imaginary = new Float32Array(nvx)\n        this.img = new Float32Array(nvx)\n        let r = 0\n        for (let i = 0; i < nvx - 1; i++) {\n          this.img[i] = f32[r]\n          this.imaginary[i] = f32[r + 1]\n          r += 2\n        }\n        this.hdr.datatypeCode = NiiDataType.DT_FLOAT32\n        break\n      }\n      default:\n        throw new Error('datatype ' + this.hdr.datatypeCode + ' not supported')\n    }\n    this.calculateRAS()\n    if (!isNaN(cal_min)) {\n      this.hdr.cal_min = cal_min\n    }\n    if (!isNaN(cal_max)) {\n      this.hdr.cal_max = cal_max\n    }\n    this.calMinMax()\n  }\n\n  // not included in public docs\n  // detect difference between voxel grid and world space\n  // https://github.com/afni/afni/blob/25e77d564f2c67ff480fa99a7b8e48ec2d9a89fc/src/thd_coords.c#L717\n  computeObliqueAngle(mtx44: mat4): number {\n    const mtx = mat4.clone(mtx44)\n    mat4.transpose(mtx, mtx44)\n    const dxtmp = Math.sqrt(mtx[0] * mtx[0] + mtx[1] * mtx[1] + mtx[2] * mtx[2])\n    const xmax = Math.max(Math.max(Math.abs(mtx[0]), Math.abs(mtx[1])), Math.abs(mtx[2])) / dxtmp\n    const dytmp = Math.sqrt(mtx[4] * mtx[4] + mtx[5] * mtx[5] + mtx[6] * mtx[6])\n    const ymax = Math.max(Math.max(Math.abs(mtx[4]), Math.abs(mtx[5])), Math.abs(mtx[6])) / dytmp\n    const dztmp = Math.sqrt(mtx[8] * mtx[8] + mtx[9] * mtx[9] + mtx[10] * mtx[10])\n    const zmax = Math.max(Math.max(Math.abs(mtx[8]), Math.abs(mtx[9])), Math.abs(mtx[10])) / dztmp\n    const fig_merit = Math.min(Math.min(xmax, ymax), zmax)\n    let oblique_angle = Math.abs((Math.acos(fig_merit) * 180.0) / 3.141592653)\n    if (oblique_angle > 0.01) {\n      log.warn('Warning voxels not aligned with world space: ' + oblique_angle + ' degrees from plumb.\\n')\n    } else {\n      oblique_angle = 0.0\n    }\n    return oblique_angle\n  }\n\n  float32V1asRGBA(inImg: Float32Array): Uint8Array {\n    if (inImg.length !== this.nVox3D * 3) {\n      log.warn('float32V1asRGBA() expects ' + this.nVox3D * 3 + 'voxels, got ', +inImg.length)\n    }\n    const f32 = inImg.slice()\n    // Note we will use RGBA rather than RGB and use least significant bits to store vector polarity\n    // this allows a single bitmap to store BOTH (unsigned) color magnitude and signed vector direction\n    this.hdr.datatypeCode = NiiDataType.DT_RGBA32\n    this.nFrame4D = 1\n    for (let i = 4; i < 7; i++) {\n      this.hdr.dims[i] = 1\n    }\n    this.hdr.dims[0] = 3 // 3D\n    const imgRaw = new Uint8Array(this.nVox3D * 4) //* 3 for RGB\n    let mx = 1.0\n    for (let i = 0; i < this.nVox3D * 3; i++) {\n      // n.b. NaN values created by dwi2tensor and tensor2metric tensors.mif -vector v1.mif\n      if (isNaN(f32[i])) {\n        continue\n      }\n      mx = Math.max(mx, Math.abs(f32[i]))\n    }\n    const slope = 255 / mx\n    const nVox3D2 = this.nVox3D * 2\n    let j = 0\n    for (let i = 0; i < this.nVox3D; i++) {\n      // n.b. it is really necessary to overwrite imgRaw with a new datatype mid-method\n      const x = f32[i]\n      const y = f32[i + this.nVox3D]\n      const z = f32[i + nVox3D2]\n      ;(imgRaw as Uint8Array)[j] = Math.abs(x * slope)\n      ;(imgRaw as Uint8Array)[j + 1] = Math.abs(y * slope)\n      ;(imgRaw as Uint8Array)[j + 2] = Math.abs(z * slope)\n      const xNeg = Number(x > 0) * 1\n      const yNeg = Number(y > 0) * 2\n      const zNeg = Number(z > 0) * 4\n      let alpha = 248 + xNeg + yNeg + zNeg\n      if (Math.abs(x) + Math.abs(y) + Math.abs(z) < 0.1) {\n        alpha = 0\n      }\n      ;(imgRaw as Uint8Array)[j + 3] = alpha\n      j += 4\n    }\n    return imgRaw\n  }\n\n  loadImgV1(isFlipX: boolean = false, isFlipY: boolean = false, isFlipZ: boolean = false): boolean {\n    let v1 = this.v1\n    if (!v1 && this.nFrame4D === 3 && this.img.constructor === Float32Array) {\n      v1 = this.img.slice()\n    }\n    if (!v1) {\n      log.warn('Image does not have V1 data')\n      return false\n    }\n    if (isFlipX) {\n      for (let i = 0; i < this.nVox3D; i++) {\n        v1[i] = -v1[i]\n      }\n    }\n    if (isFlipY) {\n      for (let i = this.nVox3D; i < 2 * this.nVox3D; i++) {\n        v1[i] = -v1[i]\n      }\n    }\n    if (isFlipZ) {\n      for (let i = 2 * this.nVox3D; i < 3 * this.nVox3D; i++) {\n        v1[i] = -v1[i]\n      }\n    }\n    this.img = this.float32V1asRGBA(v1)\n    return true\n  }\n\n  // not included in public docs\n  // detect difference between voxel grid and world space\n  calculateOblique(): void {\n    if (!this.matRAS) {\n      throw new Error('matRAS not defined')\n    }\n    if (this.pixDimsRAS === undefined) {\n      throw new Error('pixDimsRAS not defined')\n    }\n    if (!this.dimsRAS) {\n      throw new Error('dimsRAS not defined')\n    }\n\n    this.oblique_angle = this.computeObliqueAngle(this.matRAS)\n    const LPI = this.vox2mm([0.0, 0.0, 0.0], this.matRAS)\n    const X1mm = this.vox2mm([1.0 / this.pixDimsRAS[1], 0.0, 0.0], this.matRAS)\n    const Y1mm = this.vox2mm([0.0, 1.0 / this.pixDimsRAS[2], 0.0], this.matRAS)\n    const Z1mm = this.vox2mm([0.0, 0.0, 1.0 / this.pixDimsRAS[3]], this.matRAS)\n    vec3.subtract(X1mm, X1mm, LPI)\n    vec3.subtract(Y1mm, Y1mm, LPI)\n    vec3.subtract(Z1mm, Z1mm, LPI)\n    const oblique = mat4.fromValues(\n      X1mm[0],\n      X1mm[1],\n      X1mm[2],\n      0,\n      Y1mm[0],\n      Y1mm[1],\n      Y1mm[2],\n      0,\n      Z1mm[0],\n      Z1mm[1],\n      Z1mm[2],\n      0,\n      0,\n      0,\n      0,\n      1\n    )\n    this.obliqueRAS = mat4.clone(oblique)\n    const XY = Math.abs(90 - vec3.angle(X1mm, Y1mm) * (180 / Math.PI))\n    const XZ = Math.abs(90 - vec3.angle(X1mm, Z1mm) * (180 / Math.PI))\n    const YZ = Math.abs(90 - vec3.angle(Y1mm, Z1mm) * (180 / Math.PI))\n    this.maxShearDeg = Math.max(Math.max(XY, XZ), YZ)\n    if (this.maxShearDeg > 0.1) {\n      log.warn('Warning: voxels are rhomboidal, maximum shear is %f degrees.', this.maxShearDeg)\n    }\n    // compute a matrix to transform vectors from factional space to mm:\n    const dim = vec4.fromValues(this.dimsRAS[1], this.dimsRAS[2], this.dimsRAS[3], 1)\n    const sform = mat4.clone(this.matRAS)\n    mat4.transpose(sform, sform)\n    const shim = vec4.fromValues(-0.5, -0.5, -0.5, 0) // bitmap with 5 voxels scaled 0..1, voxel centers are 0.1,0.3,0.5,0.7,0.9\n    mat4.translate(sform, sform, vec3.fromValues(shim[0], shim[1], shim[2]))\n    // mat.mat4.scale(sform, sform, dim);\n    sform[0] *= dim[0]\n    sform[1] *= dim[0]\n    sform[2] *= dim[0]\n    sform[4] *= dim[1]\n    sform[5] *= dim[1]\n    sform[6] *= dim[1]\n    sform[8] *= dim[2]\n    sform[9] *= dim[2]\n    sform[10] *= dim[2]\n    this.frac2mm = mat4.clone(sform)\n    const pixdimX = this.pixDimsRAS[1] // vec3.length(X1mm);\n    const pixdimY = this.pixDimsRAS[2] // vec3.length(Y1mm);\n    const pixdimZ = this.pixDimsRAS[3] // vec3.length(Z1mm);\n    // orthographic view\n    const oform = mat4.clone(sform)\n    oform[0] = pixdimX * dim[0]\n    oform[1] = 0\n    oform[2] = 0\n    oform[4] = 0\n    oform[5] = pixdimY * dim[1]\n    oform[6] = 0\n    oform[8] = 0\n    oform[9] = 0\n    oform[10] = pixdimZ * dim[2]\n    const originVoxel = this.mm2vox([0, 0, 0], true)\n    // set matrix translation for distance from origin\n    oform[12] = (-originVoxel[0] - 0.5) * pixdimX\n    oform[13] = (-originVoxel[1] - 0.5) * pixdimY\n    oform[14] = (-originVoxel[2] - 0.5) * pixdimZ\n    this.frac2mmOrtho = mat4.clone(oform)\n    this.extentsMinOrtho = [oform[12], oform[13], oform[14]]\n    this.extentsMaxOrtho = [oform[0] + oform[12], oform[5] + oform[13], oform[10] + oform[14]]\n    this.mm2ortho = mat4.create()\n    mat4.invert(this.mm2ortho, oblique)\n  }\n\n  // not included in public docs\n  // convert AFNI head/brik space to NIfTI format\n  // https://github.com/afni/afni/blob/d6997e71f2b625ac1199460576d48f3136dac62c/src/thd_niftiwrite.c#L315\n  THD_daxes_to_NIFTI(xyzDelta: number[], xyzOrigin: number[], orientSpecific: number[]): void {\n    const hdr = this.hdr\n\n    if (hdr === null) {\n      throw new Error('HDR is not set')\n    }\n\n    hdr.sform_code = 2\n    const ORIENT_xyz = 'xxyyzzg' // note strings indexed from 0!\n    let nif_x_axnum = -1\n    let nif_y_axnum = -1\n    let nif_z_axnum = -1\n    const axcode = ['x', 'y', 'z']\n    axcode[0] = ORIENT_xyz[orientSpecific[0]]\n    axcode[1] = ORIENT_xyz[orientSpecific[1]]\n    axcode[2] = ORIENT_xyz[orientSpecific[2]]\n    const axstep = xyzDelta.slice(0, 3)\n    const axstart = xyzOrigin.slice(0, 3)\n    for (let ii = 0; ii < 3; ii++) {\n      if (axcode[ii] === 'x') {\n        nif_x_axnum = ii\n      } else if (axcode[ii] === 'y') {\n        nif_y_axnum = ii\n      } else {\n        nif_z_axnum = ii\n      }\n    }\n    if (nif_x_axnum < 0 || nif_y_axnum < 0 || nif_z_axnum < 0) {\n      return\n    } // not assigned\n    if (nif_x_axnum === nif_y_axnum || nif_x_axnum === nif_z_axnum || nif_y_axnum === nif_z_axnum) {\n      return\n    } // not assigned\n    hdr.pixDims[1] = Math.abs(axstep[0])\n    hdr.pixDims[2] = Math.abs(axstep[1])\n    hdr.pixDims[3] = Math.abs(axstep[2])\n    hdr.affine = [\n      [1, 0, 0, 0],\n      [0, 1, 0, 0],\n      [0, 0, 1, 0],\n      [0, 0, 0, 1]\n    ]\n    hdr.affine[0][nif_x_axnum] = -axstep[nif_x_axnum]\n    hdr.affine[1][nif_y_axnum] = -axstep[nif_y_axnum]\n    hdr.affine[2][nif_z_axnum] = axstep[nif_z_axnum]\n    hdr.affine[0][3] = -axstart[nif_x_axnum]\n    hdr.affine[1][3] = -axstart[nif_y_axnum]\n    hdr.affine[2][3] = axstart[nif_z_axnum]\n  }\n\n  // not included in public docs\n  // determine spacing voxel centers (rows, columns, slices)\n  SetPixDimFromSForm(): void {\n    if (!this.hdr) {\n      throw new Error('hdr not defined')\n    }\n    const m = this.hdr.affine\n    const mat = mat4.fromValues(\n      m[0][0],\n      m[0][1],\n      m[0][2],\n      m[0][3],\n      m[1][0],\n      m[1][1],\n      m[1][2],\n      m[1][3],\n      m[2][0],\n      m[2][1],\n      m[2][2],\n      m[2][3],\n      m[3][0],\n      m[3][1],\n      m[3][2],\n      m[3][3]\n    )\n    const mm000 = this.vox2mm([0, 0, 0], mat)\n    const mm100 = this.vox2mm([1, 0, 0], mat)\n    vec3.subtract(mm100, mm100, mm000)\n    const mm010 = this.vox2mm([0, 1, 0], mat)\n    vec3.subtract(mm010, mm010, mm000)\n    const mm001 = this.vox2mm([0, 0, 1], mat)\n    vec3.subtract(mm001, mm001, mm000)\n    this.hdr.pixDims[1] = vec3.length(mm100)\n    this.hdr.pixDims[2] = vec3.length(mm010)\n    this.hdr.pixDims[3] = vec3.length(mm001)\n  }\n\n  // not included in public docs\n  // read DICOM format image and treat it like a NIfTI\n  readDICOM(buf: ArrayBuffer | ArrayBuffer[]): ArrayBuffer {\n    this.series = new daikon.Series()\n    // parse DICOM file\n    if (Array.isArray(buf)) {\n      for (let i = 0; i < buf.length; i++) {\n        const dataview = new DataView(buf[i])\n        const image = daikon.Series.parseImage(dataview)\n        if (image === null) {\n          log.error(daikon.Series.parserError)\n        } else if (image.hasPixelData()) {\n          // if it's part of the same series, add it\n          if (this.series.images.length === 0 || image.getSeriesId() === this.series.images[0].getSeriesId()) {\n            this.series.addImage(image)\n          }\n        } // if hasPixelData\n      } // for i\n    } else {\n      // not a dicom folder drop\n      const image = daikon.Series.parseImage(new DataView(buf))\n      if (image === null) {\n        log.error(daikon.Series.parserError)\n      } else if (image.hasPixelData()) {\n        // if it's part of the same series, add it\n        if (this.series.images.length === 0 || image.getSeriesId() === this.series.images[0].getSeriesId()) {\n          this.series.addImage(image)\n        }\n      }\n    }\n    // order the image files, determines number of frames, etc.\n    this.series.buildSeries()\n    // output some header info\n    this.hdr = new nifti.NIFTI1()\n    const hdr = this.hdr\n    hdr.scl_inter = 0\n    hdr.scl_slope = 1\n    if (this.series.images[0].getDataScaleIntercept()) {\n      hdr.scl_inter = this.series.images[0].getDataScaleIntercept()\n    }\n    if (this.series.images[0].getDataScaleSlope()) {\n      hdr.scl_slope = this.series.images[0].getDataScaleSlope()\n    }\n    hdr.dims = [3, 1, 1, 1, 0, 0, 0, 0]\n    hdr.pixDims = [1, 1, 1, 1, 1, 0, 0, 0]\n    hdr.dims[1] = this.series.images[0].getCols()\n    hdr.dims[2] = this.series.images[0].getRows()\n    hdr.dims[3] = this.series.images[0].getNumberOfFrames()\n    if (this.series.images.length > 1) {\n      if (hdr.dims[3] > 1) {\n        log.debug('To Do: multiple slices per file and multiple files (XA30 DWI)')\n      }\n      hdr.dims[3] = this.series.images.length\n    }\n    const rc = this.series.images[0].getPixelSpacing() // TODO: order?\n    hdr.pixDims[1] = rc[0]\n    hdr.pixDims[2] = rc[1]\n    if (this.series.images.length > 1) {\n      // Multiple slices. The depth of a pixel is the physical distance between offsets. This is not the same as slice\n      // spacing for tilted slices (skew).\n      const p0 = vec3.fromValues(...(this.series.images[0].getImagePosition() as [number, number, number]))\n      const p1 = vec3.fromValues(...(this.series.images[1].getImagePosition() as [number, number, number]))\n      const n = vec3.fromValues(0, 0, 0)\n      vec3.subtract(n, p0, p1)\n      hdr.pixDims[3] = vec3.length(n)\n    } else {\n      // Single slice. Use the slice thickness as pixel depth.\n      hdr.pixDims[3] = this.series.images[0].getSliceThickness()\n    }\n    hdr.pixDims[4] = this.series.images[0].getTR() / 1000.0 // msec -> sec\n    const dt = this.series.images[0].getDataType() // 2=int,3=uint,4=float,\n    const bpv = this.series.images[0].getBitsAllocated()\n    hdr.numBitsPerVoxel = bpv\n    this.hdr.littleEndian = this.series.images[0].littleEndian\n    if (bpv === 8 && dt === 2) {\n      hdr.datatypeCode = NiiDataType.DT_INT8\n    } else if (bpv === 8 && dt === 3) {\n      hdr.datatypeCode = NiiDataType.DT_UINT8\n    } else if (bpv === 16 && dt === 2) {\n      hdr.datatypeCode = NiiDataType.DT_INT16\n    } else if (bpv === 16 && dt === 3) {\n      hdr.datatypeCode = NiiDataType.DT_UINT16\n    } else if (bpv === 32 && dt === 2) {\n      hdr.datatypeCode = NiiDataType.DT_INT32\n    } else if (bpv === 32 && dt === 3) {\n      hdr.datatypeCode = NiiDataType.DT_UINT32\n    } else if (bpv === 32 && dt === 4) {\n      hdr.datatypeCode = NiiDataType.DT_FLOAT32\n    } else if (bpv === 64 && dt === 4) {\n      hdr.datatypeCode = NiiDataType.DT_FLOAT64\n    } else if (bpv === 1) {\n      hdr.datatypeCode = NiiDataType.DT_BINARY\n    } else {\n      log.warn('Unsupported DICOM format: ' + dt + ' ' + bpv)\n    }\n    const voxelDimensions = hdr.pixDims.slice(1, 4)\n    const m = getBestTransform(\n      this.series.images[0].getImageDirections(),\n      voxelDimensions,\n      this.series.images[0].getImagePosition()\n    )\n    if (m) {\n      hdr.sform_code = 1\n      hdr.affine = [\n        [m[0][0], m[0][1], m[0][2], m[0][3]],\n        [m[1][0], m[1][1], m[1][2], m[1][3]],\n        [m[2][0], m[2][1], m[2][2], m[2][3]],\n        [0, 0, 0, 1]\n      ]\n    }\n    let data\n    let length = this.series.validatePixelDataLength(this.series.images[0])\n    const buffer = new Uint8Array(new ArrayBuffer(length * this.series.images.length))\n    // implementation copied from:\n    // https://github.com/rii-mango/Daikon/blob/bbe08bad9758dfbdf31ca22fb79048c7bad85706/src/series.js#L496\n    for (let i = 0; i < this.series.images.length; i++) {\n      if (this.series.isMosaic) {\n        data = this.series.getMosaicData(this.series.images[i], this.series.images[i].getPixelDataBytes())\n      } else {\n        data = this.series.images[i].getPixelDataBytes()\n      }\n      length = this.series.validatePixelDataLength(this.series.images[i])\n      this.series.images[i].clearPixelData()\n      buffer.set(new Uint8Array(data, 0, length), length * i)\n    } // for images.length\n    return buffer.buffer\n  } // readDICOM()\n\n  // not included in public docs\n  // read ECAT7 format image\n  // https://github.com/openneuropet/PET2BIDS/tree/28aae3fab22309047d36d867c624cd629c921ca6/ecat_validation/ecat_info\n  readECAT(buffer: ArrayBuffer): ArrayBuffer {\n    this.hdr = new nifti.NIFTI1()\n    const hdr = this.hdr\n    hdr.dims = [3, 1, 1, 1, 0, 0, 0, 0]\n    hdr.pixDims = [1, 1, 1, 1, 1, 0, 0, 0]\n    const reader = new DataView(buffer)\n\n    const signature = reader.getInt32(0, false) // \"MATR\"\n    const filetype = reader.getInt16(50, false)\n    if (signature !== 1296127058 || filetype < 1 || filetype > 14) {\n      throw new Error('Not a valid ECAT file')\n    }\n    // list header, starts at 512 bytes: int32_t hdr[4], r[31][4];\n    let pos = 512 // 512=main header, 4*32-bit hdr\n    let vols = 0\n    const frame_duration = []\n    let rawImg = new Float32Array()\n    while (true) {\n      // read 512 block lists\n      const hdr0 = reader.getInt32(pos, false)\n      const hdr3 = reader.getInt32(pos + 12, false)\n      if (hdr0 + hdr3 !== 31) {\n        break\n      }\n      let lpos = pos + 20 // skip hdr and read slice offset (r[0][1])\n      let r = 0\n      let voloffset = 0\n      while (r < 31) {\n        // r[0][1]...r[30][1]\n        voloffset = reader.getInt32(lpos, false)\n        lpos += 16 // e.g. r[0][1] to r[1][1]\n        if (voloffset === 0) {\n          break\n        }\n        r++\n        let ipos = voloffset * 512 // image start position\n        const spos = ipos - 512 // subheader for matrix image, immediately before image\n        const data_type = reader.getUint16(spos, false)\n        hdr.dims[1] = reader.getUint16(spos + 4, false)\n        hdr.dims[2] = reader.getUint16(spos + 6, false)\n        hdr.dims[3] = reader.getUint16(spos + 8, false)\n        const scale_factor = reader.getFloat32(spos + 26, false)\n        hdr.pixDims[1] = reader.getFloat32(spos + 34, false) * 10.0 // cm -> mm\n        hdr.pixDims[2] = reader.getFloat32(spos + 38, false) * 10.0 // cm -> mm\n        hdr.pixDims[3] = reader.getFloat32(spos + 42, false) * 10.0 // cm -> mm\n        hdr.pixDims[4] = reader.getUint32(spos + 46, false) / 1000.0 // ms -> sec\n        frame_duration.push(hdr.pixDims[4])\n        const nvox3D = hdr.dims[1] * hdr.dims[2] * hdr.dims[3]\n        const newImg = new Float32Array(nvox3D) // convert to float32 as scale varies\n        if (data_type === 1) {\n          // uint8\n          for (let i = 0; i < nvox3D; i++) {\n            newImg[i] = reader.getUint8(ipos) * scale_factor\n            ipos++\n          }\n        } else if (data_type === 6) {\n          // uint16\n          for (let i = 0; i < nvox3D; i++) {\n            newImg[i] = reader.getUint16(ipos, false) * scale_factor\n            ipos += 2\n          }\n        } else if (data_type === 7) {\n          // uint32\n          for (let i = 0; i < nvox3D; i++) {\n            newImg[i] = reader.getUint32(ipos, false) * scale_factor\n            ipos += 4\n          }\n        } else {\n          log.warn('Unknown ECAT data type ' + data_type)\n        }\n        const prevImg = rawImg.slice(0)\n        rawImg = new Float32Array(prevImg.length + newImg.length)\n        rawImg.set(prevImg)\n        rawImg.set(newImg, prevImg.length)\n        vols++\n      }\n      if (voloffset === 0) {\n        break\n      }\n      pos += 512 // possible to have multiple 512-byte lists of images\n    }\n    hdr.dims[4] = vols\n    hdr.pixDims[4] = frame_duration[0]\n    if (vols > 1) {\n      hdr.dims[0] = 4\n      let isFDvaries = false\n      for (let i = 0; i < vols; i++) {\n        if (frame_duration[i] !== frame_duration[0]) {\n          isFDvaries = true\n        }\n      }\n      if (isFDvaries) {\n        log.warn('Frame durations vary')\n      }\n    }\n    hdr.sform_code = 1\n    hdr.affine = [\n      [-hdr.pixDims[1], 0, 0, (hdr.dims[1] - 2) * 0.5 * hdr.pixDims[1]],\n      [0, -hdr.pixDims[2], 0, (hdr.dims[2] - 2) * 0.5 * hdr.pixDims[2]],\n      [0, 0, -hdr.pixDims[3], (hdr.dims[3] - 2) * 0.5 * hdr.pixDims[3]],\n      [0, 0, 0, 1]\n    ]\n    hdr.numBitsPerVoxel = 32\n    hdr.datatypeCode = NiiDataType.DT_FLOAT32\n    return rawImg\n  } // readECAT()\n\n  readV16(buffer: ArrayBuffer): ArrayBuffer {\n    this.hdr = new nifti.NIFTI1()\n    const hdr = this.hdr\n    hdr.dims = [3, 1, 1, 1, 0, 0, 0, 0]\n    hdr.pixDims = [1, 1, 1, 1, 1, 0, 0, 0]\n    const reader = new DataView(buffer)\n    hdr.dims[1] = reader.getUint16(0, true)\n    hdr.dims[2] = reader.getUint16(2, true)\n    hdr.dims[3] = reader.getUint16(4, true)\n    const nBytes = 2 * hdr.dims[1] * hdr.dims[2] * hdr.dims[3]\n    if (nBytes + 6 !== buffer.byteLength) {\n      log.warn('This does not look like a valid BrainVoyager V16 file')\n    }\n    hdr.numBitsPerVoxel = 16\n    hdr.datatypeCode = NiiDataType.DT_UINT16\n    log.warn('Warning: V16 files have no spatial transforms')\n    hdr.affine = [\n      [0, 0, -hdr.pixDims[1], (hdr.dims[1] - 2) * 0.5 * hdr.pixDims[1]],\n      [-hdr.pixDims[2], 0, 0, (hdr.dims[2] - 2) * 0.5 * hdr.pixDims[2]],\n      [0, -hdr.pixDims[3], 0, (hdr.dims[3] - 2) * 0.5 * hdr.pixDims[3]],\n      [0, 0, 0, 1]\n    ]\n    hdr.littleEndian = true\n    return buffer.slice(6)\n  } // readV16()\n\n  // not included in public docs\n  // read brainvoyager format VMR image\n  // https://support.brainvoyager.com/brainvoyager/automation-development/84-file-formats/343-developer-guide-2-6-the-format-of-vmr-files\n  readVMR(buffer: ArrayBuffer): ArrayBuffer {\n    this.hdr = new nifti.NIFTI1()\n    const hdr = this.hdr\n    hdr.dims = [3, 1, 1, 1, 0, 0, 0, 0]\n    hdr.pixDims = [1, 1, 1, 1, 1, 0, 0, 0]\n    const reader = new DataView(buffer)\n    const version = reader.getUint16(0, true)\n    if (version !== 4) {\n      log.warn('Not a valid version 4 VMR image')\n    }\n    hdr.dims[1] = reader.getUint16(2, true)\n    hdr.dims[2] = reader.getUint16(4, true)\n    hdr.dims[3] = reader.getUint16(6, true)\n    const nBytes = hdr.dims[1] * hdr.dims[2] * hdr.dims[3]\n    if (version >= 4) {\n      let pos = 8 + nBytes // offset to post header\n      // let xoff = reader.getUint16(pos, true);\n      // let yoff = reader.getUint16(pos + 2, true);\n      // let zoff = reader.getUint16(pos + 4, true);\n      // let framingCube = reader.getUint16(pos + 6, true);\n      // let posInfo = reader.getUint32(pos + 8, true);\n      // let coordSys = reader.getUint32(pos + 12, true);\n      // let XmmStart = reader.getFloat32(pos + 16, true);\n      // let YmmStart = reader.getFloat32(pos + 20, true);\n      // let ZmmStart = reader.getFloat32(pos + 24, true);\n      // let XmmEnd = reader.getFloat32(pos + 28, true);\n      // let YmmEnd = reader.getFloat32(pos + 32, true);\n      // let ZmmEnd = reader.getFloat32(pos + 36, true);\n      // let Xsl = reader.getFloat32(pos + 40, true);\n      // let Ysl = reader.getFloat32(pos + 44, true);\n      // let Zsl = reader.getFloat32(pos + 48, true);\n      // let colDirX = reader.getFloat32(pos + 52, true);\n      // let colDirY = reader.getFloat32(pos + 56, true);\n      // let colDirZ = reader.getFloat32(pos + 60, true);\n      // let nRow = reader.getUint32(pos + 64, true);\n      // let nCol = reader.getUint32(pos + 68, true);\n      // let FOVrow = reader.getFloat32(pos + 72, true);\n      // let FOVcol = reader.getFloat32(pos + 76, true);\n      // let sliceThickness = reader.getFloat32(pos + 80, true);\n      // let gapThickness = reader.getFloat32(pos + 84, true);\n      const nSpatialTransforms = reader.getUint32(pos + 88, true)\n      pos = pos + 92\n      if (nSpatialTransforms > 0) {\n        const len = buffer.byteLength\n        for (let i = 0; i < nSpatialTransforms; i++) {\n          // read variable length name name...\n          while (pos < len && reader.getUint8(pos) !== 0) {\n            pos++\n          }\n          pos++\n          // let typ = reader.getUint32(pos, true);\n          pos += 4\n          // read variable length name name...\n          while (pos < len && reader.getUint8(pos) !== 0) {\n            pos++\n          }\n          pos++\n          const nValues = reader.getUint32(pos, true)\n          pos += 4\n          for (let j = 0; j < nValues; j++) {\n            pos += 4\n          }\n        }\n      }\n      // let LRconv = reader.getUint8(pos);\n      // let ref = reader.getUint8(pos + 1);\n      hdr.pixDims[1] = reader.getFloat32(pos + 2, true)\n      hdr.pixDims[2] = reader.getFloat32(pos + 6, true)\n      hdr.pixDims[3] = reader.getFloat32(pos + 10, true)\n      // let isVer = reader.getUint8(pos + 14);\n      // let isTal = reader.getUint8(pos + 15);\n      // let minInten = reader.getInt32(pos + 16, true);\n      // let meanInten = reader.getInt32(pos + 20, true);\n      // let maxInten = reader.getInt32(pos + 24, true);\n    }\n    log.warn('Warning: VMR spatial transform not implemented')\n    // if (XmmStart === XmmEnd) { // https://brainvoyager.com/bv/sampledata/index.html??\n    hdr.affine = [\n      [0, 0, -hdr.pixDims[1], (hdr.dims[1] - 2) * 0.5 * hdr.pixDims[1]],\n      [-hdr.pixDims[2], 0, 0, (hdr.dims[2] - 2) * 0.5 * hdr.pixDims[2]],\n      [0, -hdr.pixDims[3], 0, (hdr.dims[3] - 2) * 0.5 * hdr.pixDims[3]],\n      [0, 0, 0, 1]\n    ]\n    // }\n    log.debug(hdr)\n    hdr.numBitsPerVoxel = 8\n    hdr.datatypeCode = NiiDataType.DT_UINT8\n    return buffer.slice(8, 8 + nBytes)\n  } // readVMR()\n\n  // not included in public docs\n  // read FreeSurfer MGH format image\n  readMGH(buffer: ArrayBuffer): ArrayBuffer {\n    this.hdr = new nifti.NIFTI1()\n    const hdr = this.hdr\n    hdr.littleEndian = false // MGH always big ending\n    hdr.dims = [3, 1, 1, 1, 0, 0, 0, 0]\n    hdr.pixDims = [1, 1, 1, 1, 1, 0, 0, 0]\n    let raw = buffer\n    let reader = new DataView(raw)\n    if (reader.getUint8(0) === 31 && reader.getUint8(1) === 139) {\n      const raw8 = decompressSync(new Uint8Array(buffer))\n      raw = raw8.buffer\n      reader = new DataView(raw)\n    }\n    const version = reader.getInt32(0, false)\n    const width = reader.getInt32(4, false)\n    const height = reader.getInt32(8, false)\n    const depth = reader.getInt32(12, false)\n    const nframes = reader.getInt32(16, false)\n    const mtype = reader.getInt32(20, false)\n    // let dof = reader.getInt32(24, false);\n    // let goodRASFlag = reader.getInt16(28, false);\n    const spacingX = reader.getFloat32(30, false)\n    const spacingY = reader.getFloat32(34, false)\n    const spacingZ = reader.getFloat32(38, false)\n    const xr = reader.getFloat32(42, false)\n    const xa = reader.getFloat32(46, false)\n    const xs = reader.getFloat32(50, false)\n    const yr = reader.getFloat32(54, false)\n    const ya = reader.getFloat32(58, false)\n    const ys = reader.getFloat32(62, false)\n    const zr = reader.getFloat32(66, false)\n    const za = reader.getFloat32(70, false)\n    const zs = reader.getFloat32(74, false)\n    const cr = reader.getFloat32(78, false)\n    const ca = reader.getFloat32(82, false)\n    const cs = reader.getFloat32(86, false)\n    if (version !== 1 || mtype < 0 || mtype > 4) {\n      log.warn('Not a valid MGH file')\n    }\n    if (mtype === 0) {\n      hdr.numBitsPerVoxel = 8\n      hdr.datatypeCode = NiiDataType.DT_UINT8\n    } else if (mtype === 4) {\n      hdr.numBitsPerVoxel = 16\n      hdr.datatypeCode = NiiDataType.DT_INT16\n    } else if (mtype === 1) {\n      hdr.numBitsPerVoxel = 32\n      hdr.datatypeCode = NiiDataType.DT_INT32\n    } else if (mtype === 3) {\n      hdr.numBitsPerVoxel = 32\n      hdr.datatypeCode = NiiDataType.DT_FLOAT32\n    }\n    hdr.dims[1] = width\n    hdr.dims[2] = height\n    hdr.dims[3] = depth\n    hdr.dims[4] = nframes\n    if (nframes > 1) {\n      hdr.dims[0] = 4\n    }\n    hdr.pixDims[1] = spacingX\n    hdr.pixDims[2] = spacingY\n    hdr.pixDims[3] = spacingZ\n    hdr.vox_offset = 284\n    hdr.sform_code = 1\n    const rot44 = mat4.fromValues(\n      xr * hdr.pixDims[1],\n      yr * hdr.pixDims[2],\n      zr * hdr.pixDims[3],\n      0,\n      xa * hdr.pixDims[1],\n      ya * hdr.pixDims[2],\n      za * hdr.pixDims[3],\n      0,\n      xs * hdr.pixDims[1],\n      ys * hdr.pixDims[2],\n      zs * hdr.pixDims[3],\n      0,\n      0,\n      0,\n      0,\n      1\n    )\n    const Pcrs = [hdr.dims[1] / 2.0, hdr.dims[2] / 2.0, hdr.dims[3] / 2.0, 1]\n    const PxyzOffset = [0, 0, 0, 0]\n    for (let i = 0; i < 3; i++) {\n      PxyzOffset[i] = 0\n      for (let j = 0; j < 3; j++) {\n        PxyzOffset[i] = PxyzOffset[i] + rot44[j + i * 4] * Pcrs[j]\n      }\n    }\n    hdr.affine = [\n      [rot44[0], rot44[1], rot44[2], cr - PxyzOffset[0]],\n      [rot44[4], rot44[5], rot44[6], ca - PxyzOffset[1]],\n      [rot44[8], rot44[9], rot44[10], cs - PxyzOffset[2]],\n      [0, 0, 0, 1]\n    ]\n    const nBytes = hdr.dims[1] * hdr.dims[2] * hdr.dims[3] * hdr.dims[4] * (hdr.numBitsPerVoxel / 8)\n    return raw.slice(hdr.vox_offset, hdr.vox_offset + nBytes)\n  } // readMGH()\n\n  // not included in public docs\n  // read DSI-Studio FIB format image\n  // https://dsi-studio.labsolver.org/doc/cli_data.html\n  readFIB(buffer: ArrayBuffer): [ArrayBuffer, Float32Array] {\n    this.hdr = new nifti.NIFTI1()\n    const hdr = this.hdr\n    hdr.littleEndian = false // MGH always big ending\n    hdr.dims = [3, 1, 1, 1, 0, 0, 0, 0]\n    hdr.pixDims = [1, 1, 1, 1, 1, 0, 0, 0]\n    const mat = NVUtilities.readMatV4(buffer)\n    if (!('dimension' in mat) || !('dti_fa' in mat)) {\n      throw new Error('Not a valid DSIstudio FIB file')\n    }\n    const hasV1 = 'index0' in mat && 'index1' in mat && 'index2' in mat\n    // const hasV1 = false\n    hdr.numBitsPerVoxel = 32\n    hdr.datatypeCode = NiiDataType.DT_FLOAT32\n    hdr.dims[1] = mat.dimension[0]\n    hdr.dims[2] = mat.dimension[1]\n    hdr.dims[3] = mat.dimension[2]\n    hdr.dims[4] = 1\n    hdr.pixDims[1] = mat.voxel_size[0]\n    hdr.pixDims[2] = mat.voxel_size[1]\n    hdr.pixDims[3] = mat.voxel_size[2]\n    hdr.sform_code = 1\n    const xmm = (hdr.dims[1] - 1) * 0.5 * hdr.pixDims[1]\n    const ymm = (hdr.dims[2] - 1) * 0.5 * hdr.pixDims[2]\n    const zmm = (hdr.dims[3] - 1) * 0.5 * hdr.pixDims[3]\n    hdr.affine = [\n      [hdr.pixDims[1], 0, 0, -xmm],\n      [0, -hdr.pixDims[2], 0, ymm],\n      [0, 0, hdr.pixDims[2], -zmm],\n      [0, 0, 0, 1]\n    ]\n    hdr.littleEndian = true\n    const nVox3D = hdr.dims[1] * hdr.dims[2] * hdr.dims[3]\n    const nBytes3D = nVox3D * Math.ceil(hdr.numBitsPerVoxel / 8)\n    const nBytes = nBytes3D * hdr.dims[4]\n    const buff8v1 = new Uint8Array(new ArrayBuffer(nVox3D * 4 * 3)) // 4=Float32, 3=x,y,z\n    if (hasV1) {\n      // read directions, stored as index\n      const nvox = hdr.dims[1] * hdr.dims[2] * hdr.dims[3]\n      const dir0 = new Float32Array(nvox)\n      const dir1 = new Float32Array(nvox)\n      const dir2 = new Float32Array(nvox)\n      const idxs = mat.index0\n      const dirs = mat.odf_vertices\n      for (let i = 0; i < nvox; i++) {\n        const idx = idxs[i] * 3\n        dir0[i] = dirs[idx + 0]\n        dir1[i] = dirs[idx + 1]\n        dir2[i] = -dirs[idx + 2]\n      }\n      buff8v1.set(new Uint8Array(dir0.buffer, dir0.byteOffset, dir0.byteLength), 0 * nBytes3D)\n      buff8v1.set(new Uint8Array(dir1.buffer, dir1.byteOffset, dir1.byteLength), 1 * nBytes3D)\n      buff8v1.set(new Uint8Array(dir2.buffer, dir2.byteOffset, dir2.byteLength), 2 * nBytes3D)\n    }\n    const buff8 = new Uint8Array(new ArrayBuffer(nBytes))\n    // read FA\n    const arrFA = Float32Array.from(mat.dti_fa)\n    const imgFA = new Uint8Array(arrFA.buffer, arrFA.byteOffset, arrFA.byteLength)\n    buff8.set(imgFA, 0)\n    if ('report' in mat) {\n      hdr.description = new TextDecoder().decode(mat.report.subarray(0, Math.min(79, mat.report.byteLength)))\n    }\n    return [buff8.buffer, new Float32Array(buff8v1.buffer)]\n  } // readFIB()\n\n  // not included in public docs\n  // read DSI-Studio SRC format image\n  // https://dsi-studio.labsolver.org/doc/cli_data.html\n  readSRC(buffer: ArrayBuffer): ArrayBuffer {\n    this.hdr = new nifti.NIFTI1()\n    const hdr = this.hdr\n    hdr.littleEndian = false // MGH always big ending\n    hdr.dims = [3, 1, 1, 1, 0, 0, 0, 0]\n    hdr.pixDims = [1, 1, 1, 1, 1, 0, 0, 0]\n    const mat = NVUtilities.readMatV4(buffer)\n    if (!('dimension' in mat) || !('image0' in mat)) {\n      throw new Error('Not a valid DSIstudio SRC file')\n    }\n    let n = 0\n    let len = 0\n    for (const [key, value] of Object.entries(mat)) {\n      if (!key.startsWith('image')) {\n        continue\n      }\n      if (n === 0) {\n        len = value.length\n      } else if (len !== value.length) {\n        len = -1\n      }\n      if (value.constructor !== Uint16Array) {\n        throw new Error('DSIstudio SRC files always use Uint16 datatype')\n      }\n      n++\n    }\n    if (len < 1 || n < 1) {\n      throw new Error('SRC file not valid DSI Studio data. The image(s) should have the same length')\n    }\n    hdr.numBitsPerVoxel = 16\n    hdr.datatypeCode = NiiDataType.DT_UINT16\n    hdr.dims[1] = mat.dimension[0]\n    hdr.dims[2] = mat.dimension[1]\n    hdr.dims[3] = mat.dimension[2]\n    hdr.dims[4] = n\n    if (hdr.dims[4] > 1) {\n      hdr.dims[0] = 4\n    }\n    hdr.pixDims[1] = mat.voxel_size[0]\n    hdr.pixDims[2] = mat.voxel_size[1]\n    hdr.pixDims[3] = mat.voxel_size[2]\n    hdr.sform_code = 1\n    const xmm = (hdr.dims[1] - 1) * 0.5 * hdr.pixDims[1]\n    const ymm = (hdr.dims[2] - 1) * 0.5 * hdr.pixDims[2]\n    const zmm = (hdr.dims[3] - 1) * 0.5 * hdr.pixDims[3]\n    hdr.affine = [\n      [hdr.pixDims[1], 0, 0, -xmm],\n      [0, -hdr.pixDims[2], 0, ymm],\n      [0, 0, hdr.pixDims[2], -zmm],\n      [0, 0, 0, 1]\n    ]\n    hdr.littleEndian = true\n    const nBytes3D = hdr.dims[1] * hdr.dims[2] * hdr.dims[3] * (hdr.numBitsPerVoxel / 8)\n    const nBytes = nBytes3D * hdr.dims[4]\n    const buff8 = new Uint8Array(new ArrayBuffer(nBytes))\n    let offset = 0\n    for (let i = 0; i < n; i++) {\n      const arr = mat[`image${i}`]\n      const img8 = new Uint8Array(arr.buffer, arr.byteOffset, arr.byteLength)\n      buff8.set(img8, offset)\n      offset += nBytes3D\n    }\n    if ('report' in mat) {\n      hdr.description = new TextDecoder().decode(mat.report.subarray(0, Math.min(79, mat.report.byteLength)))\n    }\n    return buff8.buffer\n  } // readSRC()\n\n  // not included in public docs\n  // read AFNI head/brik format image\n  readHEAD(dataBuffer: ArrayBuffer, pairedImgData: ArrayBuffer | null): ArrayBuffer {\n    this.hdr = new nifti.NIFTI1()\n    const hdr = this.hdr\n    hdr.dims[0] = 3\n    hdr.pixDims = [1, 1, 1, 1, 1, 0, 0, 0]\n    let orientSpecific = [0, 0, 0]\n    let xyzOrigin = [0, 0, 0]\n    let xyzDelta = [1, 1, 1]\n    const txt = new TextDecoder().decode(dataBuffer)\n    const lines = txt.split(/\\r?\\n/)\n    // embed entire AFNI HEAD text as NIfTI extension\n    const mod = (dataBuffer.byteLength + 8) % 16\n    const len = dataBuffer.byteLength + (16 - mod)\n    log.debug(dataBuffer.byteLength, 'len', len)\n    const extBuffer = new Uint8Array(len)\n    extBuffer.fill(0)\n    extBuffer.set(new Uint8Array(dataBuffer))\n    const newExtension = new nifti.NIFTIEXTENSION(len + 8, 42, extBuffer, true)\n    hdr.addExtension(newExtension)\n    hdr.extensionCode = 42\n    hdr.extensionFlag[0] = 1\n    hdr.extensionSize = len + 8\n    // Done creating an extension\n    const nlines = lines.length\n    let i = 0\n    let hasIJK_TO_DICOM_REAL = false\n    while (i < nlines) {\n      let line = lines[i] // e.g. 'type = string-attribute'\n      i++\n      if (!line.startsWith('type')) {\n        continue\n      } // n.b. white space varies, \"type =\" vs \"type  =\"\n      const isInt = line.includes('integer-attribute')\n      const isFloat = line.includes('float-attribute')\n      line = lines[i] // e.g. 'name = IDCODE_DATE'\n      i++\n      if (!line.startsWith('name')) {\n        continue\n      }\n      let items: Array<string | number> = line.split('= ')\n      const key = items[1] // e.g. 'IDCODE_DATE'\n      line = lines[i] // e.g. 'count = 5'\n      i++\n      items = line.split('= ')\n      let count = parseInt(items[1] as string) // e.g. '5'\n      if (count < 1) {\n        continue\n      }\n      line = lines[i] // e.g. ''LSB_FIRST~'\n      i++\n      items = line.trim().split(/\\s+/)\n      if (isFloat || isInt) {\n        // read arrays written on multiple lines\n        while (items.length < count) {\n          line = lines[i] // e.g. ''LSB_FIRST~'\n          i++\n          const items2 = line.trim().split(/\\s+/)\n          items.push(...items2)\n        }\n        for (let j = 0; j < count; j++) {\n          items[j] = parseFloat(items[j] as string)\n        }\n      }\n      switch (key) {\n        case 'BYTEORDER_STRING':\n          if ((items[0] as string).includes('LSB_FIRST')) {\n            hdr.littleEndian = true\n          } else if ((items[0] as string).includes('MSB_FIRST')) {\n            hdr.littleEndian = false\n          }\n          break\n        case 'BRICK_TYPES':\n          {\n            hdr.dims[4] = count\n            const datatype = parseInt(items[0] as string)\n            if (datatype === 0) {\n              hdr.numBitsPerVoxel = 8\n              hdr.datatypeCode = NiiDataType.DT_UINT8\n            } else if (datatype === 1) {\n              hdr.numBitsPerVoxel = 16\n              hdr.datatypeCode = NiiDataType.DT_INT16\n            } else if (datatype === 3) {\n              hdr.numBitsPerVoxel = 32\n              hdr.datatypeCode = NiiDataType.DT_FLOAT32\n            } else {\n              log.warn('Unknown BRICK_TYPES ', datatype)\n            }\n          }\n          break\n        case 'IJK_TO_DICOM_REAL':\n          if (count < 12) {\n            break\n          }\n          hasIJK_TO_DICOM_REAL = true\n          hdr.sform_code = 2\n          // note DICOM space is LPS while NIfTI is RAS\n          hdr.affine = [\n            [-items[0], -items[1], -items[2], -items[3]],\n            [-items[4], -items[5], -items[6], -items[7]],\n            // TODO don't re-use items for numeric values\n            [items[8] as number, items[9] as number, items[10] as number, items[11] as number],\n            [0, 0, 0, 1]\n          ]\n          break\n        case 'DATASET_DIMENSIONS':\n          count = Math.max(count, 3)\n          for (let j = 0; j < count; j++) {\n            hdr.dims[j + 1] = items[j] as number\n          }\n          break\n        case 'ORIENT_SPECIFIC':\n          orientSpecific = items as number[]\n          break\n        case 'ORIGIN':\n          xyzOrigin = items as number[]\n          break\n        case 'DELTA':\n          xyzDelta = items as number[]\n          break\n        case 'TAXIS_FLOATS':\n          hdr.pixDims[4] = items[0] as number\n          break\n        default:\n          log.warn('Unknown:', key)\n      } // read item\n    } // read all lines\n    if (!hasIJK_TO_DICOM_REAL) {\n      this.THD_daxes_to_NIFTI(xyzDelta, xyzOrigin, orientSpecific)\n    } else {\n      this.SetPixDimFromSForm()\n    }\n    const nBytes = (hdr.numBitsPerVoxel / 8) * hdr.dims[1] * hdr.dims[2] * hdr.dims[3] * hdr.dims[4]\n    if (!pairedImgData) {\n      throw new Error('pairedImgData not set')\n    }\n    if (pairedImgData.byteLength < nBytes) {\n      // n.b. npm run dev implicitly extracts gz, npm run demo does not!\n      // assume gz compressed\n      const raw = decompressSync(new Uint8Array(pairedImgData))\n      return raw.buffer\n    }\n    return pairedImgData.slice(0)\n  }\n\n  // not included in public docs\n  // read ITK MHA format image\n  // https://itk.org/Wiki/ITK/MetaIO/Documentation#Reading_a_Brick-of-Bytes_.28an_N-Dimensional_volume_in_a_single_file.29\n  readMHA(buffer: ArrayBuffer, pairedImgData: ArrayBuffer | null): ArrayBuffer {\n    const len = buffer.byteLength\n    if (len < 20) {\n      throw new Error('File too small to be VTK: bytes = ' + buffer.byteLength)\n    }\n    const bytes = new Uint8Array(buffer)\n    let pos = 0\n    function eol(c: number): boolean {\n      return c === 10 || c === 13 // c is either a line feed character (10) or carriage return character (13)\n    }\n    function readStr(): string {\n      while (pos < len && eol(bytes[pos])) {\n        pos++\n      } // Skip blank lines\n      const startPos = pos\n      while (pos < len && !eol(bytes[pos])) {\n        pos++\n      } // Forward until end of line\n      if (pos - startPos < 2) {\n        return ''\n      }\n      return new TextDecoder().decode(buffer.slice(startPos, pos))\n    }\n    let line = readStr() // 1st line: signature\n    this.hdr = new nifti.NIFTI1()\n    const hdr = this.hdr\n    hdr.pixDims = [1, 1, 1, 1, 1, 0, 0, 0]\n    hdr.dims = [1, 1, 1, 1, 1, 1, 1, 1]\n    hdr.littleEndian = true\n    let isGz = false\n    let isDetached = false\n    const mat33 = mat3.fromValues(NaN, 0, 0, 0, 1, 0, 0, 0, 1)\n    const offset = vec3.fromValues(0, 0, 0)\n    while (line !== '') {\n      let items = line.split(' ')\n      if (items.length > 2) {\n        items = items.slice(2)\n      }\n      if (line.startsWith('BinaryDataByteOrderMSB') && items[0].includes('False')) {\n        hdr.littleEndian = true\n      }\n      if (line.startsWith('BinaryDataByteOrderMSB') && items[0].includes('True')) {\n        hdr.littleEndian = false\n      }\n      if (line.startsWith('CompressedData') && items[0].includes('True')) {\n        isGz = true\n      }\n      if (line.startsWith('TransformMatrix')) {\n        for (let d = 0; d < 9; d++) {\n          mat33[d] = parseFloat(items[d])\n        }\n      }\n      if (line.startsWith('Offset')) {\n        for (let d = 0; d < Math.min(items.length, 3); d++) {\n          offset[d] = parseFloat(items[d])\n        }\n      }\n      // if (line.startsWith(\"AnatomicalOrientation\")) //we can ignore, tested with Slicer3D converting NIfTIspace images\n      if (line.startsWith('ElementSpacing')) {\n        for (let d = 0; d < items.length; d++) {\n          hdr.pixDims[d + 1] = parseFloat(items[d])\n        }\n      }\n      if (line.startsWith('DimSize')) {\n        hdr.dims[0] = items.length\n        for (let d = 0; d < items.length; d++) {\n          hdr.dims[d + 1] = parseInt(items[d])\n        }\n      }\n      if (line.startsWith('ElementType')) {\n        switch (items[0]) {\n          case 'MET_UCHAR':\n            hdr.numBitsPerVoxel = 8\n            hdr.datatypeCode = NiiDataType.DT_UINT8\n            break\n          case 'MET_CHAR':\n            hdr.numBitsPerVoxel = 8\n            hdr.datatypeCode = NiiDataType.DT_INT8\n            break\n          case 'MET_SHORT':\n            hdr.numBitsPerVoxel = 16\n            hdr.datatypeCode = NiiDataType.DT_INT16\n            break\n          case 'MET_USHORT':\n            hdr.numBitsPerVoxel = 16\n            hdr.datatypeCode = NiiDataType.DT_UINT16\n            break\n          case 'MET_INT':\n            hdr.numBitsPerVoxel = 32\n            hdr.datatypeCode = NiiDataType.DT_INT32\n            break\n          case 'MET_UINT':\n            hdr.numBitsPerVoxel = 32\n            hdr.datatypeCode = NiiDataType.DT_UINT32\n            break\n          case 'MET_FLOAT':\n            hdr.numBitsPerVoxel = 32\n            hdr.datatypeCode = NiiDataType.DT_FLOAT32\n            break\n          case 'MET_DOUBLE':\n            hdr.numBitsPerVoxel = 64\n            hdr.datatypeCode = NiiDataType.DT_FLOAT64\n            break\n          default:\n            throw new Error('Unsupported MHA data type: ' + items[0])\n        }\n      }\n      if (line.startsWith('ObjectType') && !items[0].includes('Image')) {\n        log.warn('Only able to read ObjectType = Image, not ' + line)\n      }\n      if (line.startsWith('ElementDataFile')) {\n        if (items[0] !== 'LOCAL') {\n          isDetached = true\n        }\n        break\n      }\n      line = readStr()\n    }\n    const mmMat = mat3.fromValues(hdr.pixDims[1], 0, 0, 0, hdr.pixDims[2], 0, 0, 0, hdr.pixDims[3])\n    mat3.multiply(mat33, mat33, mmMat)\n    hdr.affine = [\n      [-mat33[0], -mat33[3], -mat33[6], -offset[0]],\n      [-mat33[1], -mat33[4], -mat33[7], -offset[1]],\n      [mat33[2], mat33[5], mat33[8], offset[2]],\n      [0, 0, 0, 1]\n    ]\n    while (bytes[pos] === 10) {\n      pos++\n    }\n    hdr.vox_offset = pos\n    if (isDetached && pairedImgData) {\n      if (isGz) {\n        return decompressSync(new Uint8Array(pairedImgData.slice(0))).buffer\n      }\n      return pairedImgData.slice(0)\n    }\n    if (isGz) {\n      return decompressSync(new Uint8Array(buffer.slice(hdr.vox_offset))).buffer\n    }\n    return buffer.slice(hdr.vox_offset)\n  } // readMHA()\n\n  // not included in public docs\n  // read mrtrix MIF format image\n  // https://mrtrix.readthedocs.io/en/latest/getting_started/image_data.html#mrtrix-image-formats\n  readMIF(buffer: ArrayBuffer, pairedImgData: ArrayBuffer | null): ArrayBuffer {\n    // MIF files typically 3D (e.g. anatomical), 4D (fMRI, DWI). 5D rarely seen\n    // This read currently supports up to 5D. To create test: \"mrcat -axis 4 a4d.mif b4d.mif out5d.mif\"\n    this.hdr = new nifti.NIFTI1()\n    const hdr = this.hdr\n    hdr.pixDims = [1, 1, 1, 1, 1, 0, 0, 0]\n    hdr.dims = [1, 1, 1, 1, 1, 1, 1, 1]\n    let len = buffer.byteLength\n    if (len < 20) {\n      throw new Error('File too small to be MIF: bytes = ' + len)\n    }\n    const bytes = new Uint8Array(buffer)\n    if (bytes[0] === 31 && bytes[1] === 139) {\n      log.debug('MIF with GZ decompression')\n      const raw = decompressSync(new Uint8Array(buffer))\n      buffer = raw.buffer\n      len = buffer.byteLength\n    }\n    let pos = 0\n    function readStr(): string {\n      while (pos < len && bytes[pos] === 10) {\n        pos++\n      } // skip blank lines\n      const startPos = pos\n      while (pos < len && bytes[pos] !== 10) {\n        pos++\n      }\n      pos++ // skip EOLN\n      if (pos - startPos < 1) {\n        return ''\n      }\n      return new TextDecoder().decode(buffer.slice(startPos, pos - 1))\n    }\n    let line = readStr() // 1st line: signature 'mrtrix tracks'\n    if (!line.startsWith('mrtrix image')) {\n      throw new Error('Not a valid MIF file')\n    }\n    const layout = []\n    let isBit = false\n    let nTransform = 0\n    let TR = 0\n    let isDetached = false\n    // let isTensor = false\n    line = readStr()\n    while (pos < len && !line.startsWith('END')) {\n      let items = line.split(':') // \"vox: 1,1,1\" -> \"vox\", \" 1,1,1\"\n      line = readStr()\n      if (items.length < 2) {\n        break\n      } //\n      const tag = items[0] // \"datatype\", \"dim\"\n      items = items[1].split(',') // \" 1,1,1\" -> \" 1\", \"1\", \"1\"\n      for (let i = 0; i < items.length; i++) {\n        items[i] = items[i].trim()\n      } // \" 1\", \"1\", \"1\" -> \"1\", \"1\", \"1\"\n      switch (tag) {\n        case 'dim':\n          hdr.dims[0] = items.length\n          for (let i = 0; i < items.length; i++) {\n            hdr.dims[i + 1] = parseInt(items[i])\n          }\n          break\n        case 'vox':\n          for (let i = 0; i < items.length; i++) {\n            hdr.pixDims[i + 1] = parseFloat(items[i])\n            if (isNaN(hdr.pixDims[i + 1])) {\n              hdr.pixDims[i + 1] = 0.0\n            }\n          }\n          break\n        case 'layout':\n          for (let i = 0; i < items.length; i++) {\n            layout.push(parseInt(items[i]))\n          } // n.b. JavaScript preserves sign for -0\n          break\n        case 'datatype':\n          {\n            const dt = items[0]\n            if (dt.startsWith('Bit')) {\n              isBit = true\n              hdr.datatypeCode = NiiDataType.DT_UINT8\n            } else if (dt.startsWith('Int8')) {\n              hdr.datatypeCode = NiiDataType.DT_INT8\n            } else if (dt.startsWith('UInt8')) {\n              hdr.datatypeCode = NiiDataType.DT_UINT8\n            } else if (dt.startsWith('Int16')) {\n              hdr.datatypeCode = NiiDataType.DT_INT16\n            } else if (dt.startsWith('UInt16')) {\n              hdr.datatypeCode = NiiDataType.DT_UINT16\n            } else if (dt.startsWith('Int32')) {\n              hdr.datatypeCode = NiiDataType.DT_INT32\n            } else if (dt.startsWith('UInt32')) {\n              hdr.datatypeCode = NiiDataType.DT_UINT32\n            } else if (dt.startsWith('Float32')) {\n              hdr.datatypeCode = NiiDataType.DT_FLOAT32\n            } else if (dt.startsWith('Float64')) {\n              hdr.datatypeCode = NiiDataType.DT_FLOAT64\n            } else {\n              log.warn('Unsupported datatype ' + dt)\n            }\n            if (dt.includes('8')) {\n              hdr.numBitsPerVoxel = 8\n            } else if (dt.includes('16')) {\n              hdr.numBitsPerVoxel = 16\n            } else if (dt.includes('32')) {\n              hdr.numBitsPerVoxel = 32\n            } else if (dt.includes('64')) {\n              hdr.numBitsPerVoxel = 64\n            }\n            hdr.littleEndian = true // native, to do support big endian readers\n            if (dt.endsWith('LE')) {\n              hdr.littleEndian = true\n            }\n            if (dt.endsWith('BE')) {\n              hdr.littleEndian = false\n            }\n          }\n          break\n        case 'transform':\n          if (nTransform > 2 || items.length !== 4) {\n            break\n          }\n          hdr.affine[nTransform][0] = parseFloat(items[0])\n          hdr.affine[nTransform][1] = parseFloat(items[1])\n          hdr.affine[nTransform][2] = parseFloat(items[2])\n          hdr.affine[nTransform][3] = parseFloat(items[3])\n          nTransform++\n          break\n        case 'comments':\n          hdr.description = items[0].substring(0, Math.min(79, items[0].length))\n          break\n        /* case 'command_history':\n          if (items[0].startsWith('dwi2tensor')) {\n            isTensor = true\n          }\n          break */\n        case 'RepetitionTime':\n          TR = parseFloat(items[0])\n          break\n        case 'file':\n          isDetached = !items[0].startsWith('. ')\n          if (!isDetached) {\n            items = items[0].split(' ') // \". 2336\" -> \". \", \"2336\"\n            hdr.vox_offset = parseInt(items[1])\n          }\n          break\n      }\n    }\n    const ndim = hdr.dims[0]\n    if (ndim > 5) {\n      log.warn('reader only designed for a maximum of 5 dimensions (XYZTD)')\n    }\n    let nvox = 1\n    for (let i = 0; i < ndim; i++) {\n      nvox *= Math.max(hdr.dims[i + 1], 1)\n    }\n    // let nvox = hdr.dims[1] * hdr.dims[2] * hdr.dims[3] * hdr.dims[4];\n    for (let i = 0; i < 3; i++) {\n      for (let j = 0; j < 3; j++) {\n        // hdr.affine[i][j] *= hdr.pixDims[i + 1];\n        hdr.affine[i][j] *= hdr.pixDims[j + 1]\n      }\n    }\n    log.debug('mif affine:' + hdr.affine[0])\n    if (TR > 0) {\n      hdr.pixDims[4] = TR\n    }\n    if (isDetached && !pairedImgData) {\n      log.warn('MIH header provided without paired image data')\n    }\n    let rawImg: ArrayBuffer\n    if (pairedImgData && isDetached) {\n      rawImg = pairedImgData.slice(0)\n    } else if (isBit) {\n      hdr.numBitsPerVoxel = 8\n      const img8 = new Uint8Array(nvox)\n      const buffer1 = buffer.slice(hdr.vox_offset, hdr.vox_offset + Math.ceil(nvox / 8))\n      const img1 = new Uint8Array(buffer1)\n      let j = 0\n      for (let i = 0; i < nvox; i++) {\n        const bit = i % 8\n        img8[i] = (img1[j] >> (7 - bit)) & 1\n        if (bit === 7) {\n          j++\n        }\n      }\n      rawImg = img8.buffer\n    } else {\n      // n.b. mrconvert can pad files? See dtitest_Siemens_SC 4_dti_nopf_x2_pitch\n      rawImg = buffer.slice(hdr.vox_offset, hdr.vox_offset + nvox * (hdr.numBitsPerVoxel / 8))\n    }\n    if (layout.length !== hdr.dims[0]) {\n      log.warn('dims does not match layout')\n    }\n    // estimate strides:\n    let stride = 1\n    const instride = [1, 1, 1, 1, 1]\n    const inflip = [false, false, false, false, false]\n    for (let i = 0; i < layout.length; i++) {\n      for (let j = 0; j < layout.length; j++) {\n        const a = Math.abs(layout[j])\n        if (a !== i) {\n          continue\n        }\n        instride[j] = stride\n        // detect -0: https://medium.com/coding-at-dawn/is-negative-zero-0-a-number-in-javascript-c62739f80114\n        if (layout[j] < 0 || Object.is(layout[j], -0)) {\n          inflip[j] = true\n        }\n        stride *= hdr.dims[j + 1]\n      }\n    }\n    // lookup table for flips and stride offsets:\n    let xlut = NVUtilities.range(0, hdr.dims[1] - 1, 1)\n    if (inflip[0]) {\n      xlut = NVUtilities.range(hdr.dims[1] - 1, 0, -1)\n    }\n    for (let i = 0; i < hdr.dims[1]; i++) {\n      xlut[i] *= instride[0]\n    }\n    let ylut = NVUtilities.range(0, hdr.dims[2] - 1, 1)\n    if (inflip[1]) {\n      ylut = NVUtilities.range(hdr.dims[2] - 1, 0, -1)\n    }\n    for (let i = 0; i < hdr.dims[2]; i++) {\n      ylut[i] *= instride[1]\n    }\n    let zlut = NVUtilities.range(0, hdr.dims[3] - 1, 1)\n    if (inflip[2]) {\n      zlut = NVUtilities.range(hdr.dims[3] - 1, 0, -1)\n    }\n    for (let i = 0; i < hdr.dims[3]; i++) {\n      zlut[i] *= instride[2]\n    }\n    let tlut = NVUtilities.range(0, hdr.dims[4] - 1, 1)\n    if (inflip[3]) {\n      tlut = NVUtilities.range(hdr.dims[4] - 1, 0, -1)\n    }\n    for (let i = 0; i < hdr.dims[4]; i++) {\n      tlut[i] *= instride[3]\n    }\n    let dlut = NVUtilities.range(0, hdr.dims[5] - 1, 1)\n    if (inflip[4]) {\n      dlut = NVUtilities.range(hdr.dims[5] - 1, 0, -1)\n    }\n    for (let i = 0; i < hdr.dims[5]; i++) {\n      dlut[i] *= instride[4]\n    }\n    // input and output arrays\n    let j = 0\n    let inVs: Int8Array | Uint8Array | Int16Array | Uint16Array | Int32Array | Uint32Array | Float32Array | Float64Array\n    let outVs:\n      | Int8Array\n      | Uint8Array\n      | Int16Array\n      | Uint16Array\n      | Int32Array\n      | Uint32Array\n      | Float32Array\n      | Float64Array\n    switch (hdr.datatypeCode) {\n      case NiiDataType.DT_INT8:\n        inVs = new Int8Array(rawImg)\n        outVs = new Int8Array(nvox)\n        break\n      case NiiDataType.DT_UINT8:\n        inVs = new Uint8Array(rawImg)\n        outVs = new Uint8Array(nvox)\n        break\n      case NiiDataType.DT_INT16:\n        inVs = new Int16Array(rawImg)\n        outVs = new Int16Array(nvox)\n        break\n      case NiiDataType.DT_UINT16:\n        inVs = new Uint16Array(rawImg)\n        outVs = new Uint16Array(nvox)\n        break\n      case NiiDataType.DT_INT32:\n        inVs = new Int32Array(rawImg)\n        outVs = new Int32Array(nvox)\n        break\n      case NiiDataType.DT_UINT32:\n        inVs = new Uint32Array(rawImg)\n        outVs = new Uint32Array(nvox)\n        break\n      case NiiDataType.DT_FLOAT32:\n        inVs = new Float32Array(rawImg)\n        outVs = new Float32Array(nvox)\n        break\n      case NiiDataType.DT_FLOAT64:\n        inVs = new Float64Array(rawImg)\n        outVs = new Float64Array(nvox)\n        break\n      default:\n        throw new Error('unknown datatypeCode')\n    }\n    for (let d = 0; d < hdr.dims[5]; d++) {\n      for (let t = 0; t < hdr.dims[4]; t++) {\n        for (let z = 0; z < hdr.dims[3]; z++) {\n          for (let y = 0; y < hdr.dims[2]; y++) {\n            for (let x = 0; x < hdr.dims[1]; x++) {\n              outVs[j] = inVs[xlut[x] + ylut[y] + zlut[z] + tlut[t] + dlut[d]]\n              j++\n            } // for x\n          } // for y\n        } // for z\n      } // for t (time)\n    } // for d (direction, phase/real, etc)\n    /*\n    \n    let v1s = new Float32Array(0)\n    if (isTensor && isDerived && hdr.datatypeCode === NiiDataType.DT_FLOAT32 && hdr.dims[4] === 6) {\n      // https://community.mrtrix.org/t/dti-volumes-storage-formats-and-conversion/4502\n      // https://mrtrix.readthedocs.io/en/latest/reference/commands/dwi2tensor.html\n      // volumes 0-5: D11, D22, D33, D12, D13, D23\n      // https://github.com/ANTsX/ANTs/wiki/Importing-diffusion-tensor-data-from-other-software\n      // mrtrix xx, yy, zz, xy, xz, yz\n      // ants xx, xy, yy, xz, yz, zz (NIfTI, lower)\n      // NIFTI_INTENT_SYMMATRIX https://nifti.nimh.nih.gov/pub/dist/src/niftilib/nifti1.h\n      hdr.dims[0] = 3\n      hdr.dims[4] = 1\n      const nVox3D = hdr.dims[1] * hdr.dims[2] * hdr.dims[3]\n      const rawImg = outVs.slice()\n      outVs = new Float32Array(nVox3D)\n      v1s = new Float32Array(nVox3D * 3)\n      const offsets = [0, nVox3D, 2 * nVox3D, 3 * nVox3D, 4 * nVox3D, 5 * nVox3D]\n      for (let i = 0; i < nVox3D; i++) {\n        const tensor = [\n          rawImg[i + offsets[0]],\n          rawImg[i + offsets[1]],\n          rawImg[i + offsets[2]],\n          rawImg[i + offsets[5]],\n          rawImg[i + offsets[3]],\n          rawImg[i + offsets[4]]\n        ]\n        let allZeros = true\n        for (let j = 0; j < 6; j++) {\n          if (tensor[j] !== 0) {\n            allZeros = false\n            break\n          }\n        }\n        if (allZeros) {\n          continue\n        }\n        const v1 = tensorToPrincipalAxesAndFA(tensor)\n        outVs[i] = v1[3]\n        v1s[i] = v1[0]\n        v1s[i + offsets[1]] = v1[1]\n        v1s[i + offsets[2]] = v1[2]\n      }\n    }\n    return [outVs, v1s] */\n    return outVs\n  } // readMIF()\n\n  // not included in public docs\n  // read NRRD format image\n  // http://teem.sourceforge.net/nrrd/format.html\n  readNRRD(dataBuffer: ArrayBuffer, pairedImgData: ArrayBuffer | null): ArrayBuffer {\n    // inspired by parserNRRD.js in https://github.com/xtk\n    // Copyright (c) 2012 The X Toolkit Developers <dev@goXTK.com>\n    // http://www.opensource.org/licenses/mit-license.php\n    this.hdr = new nifti.NIFTI1()\n    const hdr = this.hdr\n    hdr.pixDims = [1, 1, 1, 1, 1, 0, 0, 0]\n    const len = dataBuffer.byteLength\n    // extract initial text header\n    let txt = null\n    const bytes = new Uint8Array(dataBuffer)\n    for (let i = 1; i < len; i++) {\n      if (bytes[i - 1] === 10 && bytes[i] === 10) {\n        const v = dataBuffer.slice(0, i - 1)\n        txt = new TextDecoder().decode(v)\n        hdr.vox_offset = i + 1\n        break\n      }\n    }\n\n    if (txt === null) {\n      throw new Error('could not extract txt')\n    }\n\n    const lines = txt.split('\\n')\n    if (!lines[0].startsWith('NRRD')) {\n      alert('Invalid NRRD image')\n    }\n    const n = lines.length\n    let isGz = false\n    let isMicron = false\n    let isDetached = false\n    const mat33 = mat3.fromValues(NaN, 0, 0, 0, 1, 0, 0, 0, 1)\n    const offset = vec3.fromValues(0, 0, 0)\n    let rot33 = mat3.create()\n    for (let i = 1; i < n; i++) {\n      let str = lines[i]\n      if (str[0] === '#') {\n        continue\n      } // comment\n      str = str.toLowerCase()\n      const items = str.split(':')\n      if (items.length < 2) {\n        continue\n      }\n      const key = items[0].trim()\n      let value = items[1].trim()\n      value = value.replaceAll(')', ' ')\n      value = value.replaceAll('(', ' ')\n      value = value.trim()\n      switch (key) {\n        case 'data file':\n          isDetached = true\n          break\n        case 'encoding':\n          if (value.includes('raw')) {\n            isGz = false\n          } else if (value.includes('gz')) {\n            isGz = true\n          } else {\n            alert('Unsupported NRRD encoding')\n          }\n          break\n        case 'type':\n          switch (value) {\n            case 'uchar':\n            case 'unsigned char':\n            case 'uint8':\n            case 'uint8_t':\n              hdr.numBitsPerVoxel = 8\n              hdr.datatypeCode = NiiDataType.DT_UINT8\n              break\n            case 'signed char':\n            case 'int8':\n            case 'int8_t':\n              hdr.numBitsPerVoxel = 8\n              hdr.datatypeCode = NiiDataType.DT_INT8\n              break\n            case 'short':\n            case 'short int':\n            case 'signed short':\n            case 'signed short int':\n            case 'int16':\n            case 'int16_t':\n              hdr.numBitsPerVoxel = 16\n              hdr.datatypeCode = NiiDataType.DT_INT16\n              break\n            case 'ushort':\n            case 'unsigned short':\n            case 'unsigned short int':\n            case 'uint16':\n            case 'uint16_t':\n              hdr.numBitsPerVoxel = 16\n              hdr.datatypeCode = NiiDataType.DT_UINT16\n              break\n            case 'int':\n            case 'signed int':\n            case 'int32':\n            case 'int32_t':\n              hdr.numBitsPerVoxel = 32\n              hdr.datatypeCode = NiiDataType.DT_INT32\n              break\n            case 'uint':\n            case 'unsigned int':\n            case 'uint32':\n            case 'uint32_t':\n              hdr.numBitsPerVoxel = 32\n              hdr.datatypeCode = NiiDataType.DT_UINT32\n              break\n            case 'float':\n              hdr.numBitsPerVoxel = 32\n              hdr.datatypeCode = NiiDataType.DT_FLOAT32\n              break\n            case 'double':\n              hdr.numBitsPerVoxel = 64\n              hdr.datatypeCode = NiiDataType.DT_FLOAT64\n              break\n            default:\n              throw new Error('Unsupported NRRD data type: ' + value)\n          }\n          break\n        case 'spacings':\n          {\n            const values = value.split(/[ ,]+/)\n            for (let d = 0; d < values.length; d++) {\n              hdr.pixDims[d + 1] = parseFloat(values[d])\n            }\n          }\n          break\n        case 'sizes':\n          {\n            const dims = value.split(/[ ,]+/)\n            hdr.dims[0] = dims.length\n            for (let d = 0; d < dims.length; d++) {\n              hdr.dims[d + 1] = parseInt(dims[d])\n            }\n          }\n          break\n        case 'endian':\n          if (value.includes('little')) {\n            hdr.littleEndian = true\n          } else if (value.includes('big')) {\n            hdr.littleEndian = false\n          }\n          break\n        case 'space directions':\n          {\n            const vs = value.split(/[ ,]+/)\n            if (vs.length !== 9) {\n              break\n            }\n            for (let d = 0; d < 9; d++) {\n              mat33[d] = parseFloat(vs[d])\n            }\n          }\n          break\n        case 'space origin':\n          {\n            const ts = value.split(/[ ,]+/)\n            if (ts.length !== 3) {\n              break\n            }\n            offset[0] = parseFloat(ts[0])\n            offset[1] = parseFloat(ts[1])\n            offset[2] = parseFloat(ts[2])\n          }\n          break\n        case 'space units':\n          if (value.includes('microns')) {\n            isMicron = true\n          }\n          break\n        case 'space':\n          if (value.includes('right-anterior-superior') || value.includes('ras')) {\n            rot33 = mat3.fromValues(\n              1,\n              0,\n              0,\n\n              0,\n              1,\n              0,\n\n              0,\n              0,\n              1\n            )\n          } else if (value.includes('left-anterior-superior') || value.includes('las')) {\n            rot33 = mat3.fromValues(\n              -1,\n              0,\n              0,\n\n              0,\n              1,\n              0,\n\n              0,\n              0,\n              1\n            )\n          } else if (value.includes('left-posterior-superior') || value.includes('lps')) {\n            rot33 = mat3.fromValues(\n              -1,\n              0,\n              0,\n\n              0,\n              -1,\n              0,\n\n              0,\n              0,\n              1\n            )\n          } else {\n            log.warn('Unsupported NRRD space value:', value)\n          }\n          break\n        default:\n          log.warn('Unknown:', key)\n      } // read line\n    } // read all lines\n    if (!isNaN(mat33[0])) {\n      // if spatial transform provided\n      this.hdr.sform_code = 2\n      if (isMicron) {\n        // convert micron to mm\n        // @ts-expect-error FIXME: converting mat3 to mat4\n        mat4.multiplyScalar(mat33, mat33, 0.001)\n        offset[0] *= 0.001\n        offset[1] *= 0.001\n        offset[2] *= 0.001\n      }\n      if (rot33[0] < 0) {\n        offset[0] = -offset[0]\n      } // origin L<->R\n      if (rot33[4] < 0) {\n        offset[1] = -offset[1]\n      } // origin A<->P\n      if (rot33[8] < 0) {\n        offset[2] = -offset[2]\n      } // origin S<->I\n      mat3.multiply(mat33, rot33, mat33)\n      const mat = mat4.fromValues(\n        mat33[0],\n        mat33[3],\n        mat33[6],\n        offset[0],\n        mat33[1],\n        mat33[4],\n        mat33[7],\n        offset[1],\n        mat33[2],\n        mat33[5],\n        mat33[8],\n        offset[2],\n        0,\n        0,\n        0,\n        1\n      )\n      const mm000 = this.vox2mm([0, 0, 0], mat)\n      const mm100 = this.vox2mm([1, 0, 0], mat)\n      vec3.subtract(mm100, mm100, mm000)\n      const mm010 = this.vox2mm([0, 1, 0], mat)\n      vec3.subtract(mm010, mm010, mm000)\n      const mm001 = this.vox2mm([0, 0, 1], mat)\n      vec3.subtract(mm001, mm001, mm000)\n      hdr.pixDims[1] = vec3.length(mm100)\n      hdr.pixDims[2] = vec3.length(mm010)\n      hdr.pixDims[3] = vec3.length(mm001)\n      hdr.affine = [\n        [mat[0], mat[1], mat[2], mat[3]],\n        [mat[4], mat[5], mat[6], mat[7]],\n        [mat[8], mat[9], mat[10], mat[11]],\n        [0, 0, 0, 1]\n      ]\n    }\n\n    if (isDetached && pairedImgData) {\n      // ??? .gz files automatically decompressed?\n      return pairedImgData.slice(0)\n    }\n    if (isDetached) {\n      log.warn('Missing data: NRRD header describes detached data file but only one URL provided')\n    }\n    if (isGz) {\n      return decompressSync(new Uint8Array(dataBuffer.slice(hdr.vox_offset))).buffer\n    } else {\n      return dataBuffer.slice(hdr.vox_offset)\n    }\n  } // readNRRD()\n\n  // not included in public docs\n  // Transform to orient NIfTI image to Left->Right,Posterior->Anterior,Inferior->Superior (48 possible permutations)\n  calculateRAS(): void {\n    if (!this.hdr) {\n      throw new Error('hdr not set')\n    }\n    // port of Matlab reorient() https://github.com/xiangruili/dicm2nii/blob/master/nii_viewer.m\n    // not elegant, as JavaScript arrays are always 1D\n    const a = this.hdr.affine\n    const header = this.hdr\n    const absR = mat3.fromValues(\n      Math.abs(a[0][0]),\n      Math.abs(a[0][1]),\n      Math.abs(a[0][2]),\n      Math.abs(a[1][0]),\n      Math.abs(a[1][1]),\n      Math.abs(a[1][2]),\n      Math.abs(a[2][0]),\n      Math.abs(a[2][1]),\n      Math.abs(a[2][2])\n    )\n    // 1st column = x\n    const ixyz = [1, 1, 1]\n    if (absR[3] > absR[0]) {\n      ixyz[0] = 2 // (absR[1][0] > absR[0][0]) ixyz[0] = 2;\n    }\n    if (absR[6] > absR[0] && absR[6] > absR[3]) {\n      ixyz[0] = 3 // ((absR[2][0] > absR[0][0]) && (absR[2][0]> absR[1][0])) ixyz[0] = 3;\n    } // 2nd column = y\n    ixyz[1] = 1\n    if (ixyz[0] === 1) {\n      if (absR[4] > absR[7]) {\n        // (absR[1][1] > absR[2][1])\n        ixyz[1] = 2\n      } else {\n        ixyz[1] = 3\n      }\n    } else if (ixyz[0] === 2) {\n      if (absR[1] > absR[7]) {\n        // (absR[0][1] > absR[2][1])\n        ixyz[1] = 1\n      } else {\n        ixyz[1] = 3\n      }\n    } else {\n      if (absR[1] > absR[4]) {\n        // (absR[0][1] > absR[1][1])\n        ixyz[1] = 1\n      } else {\n        ixyz[1] = 2\n      }\n    }\n    // 3rd column = z: constrained as x+y+z = 1+2+3 = 6\n    ixyz[2] = 6 - ixyz[1] - ixyz[0]\n    let perm = [1, 2, 3]\n    perm[ixyz[0] - 1] = 1\n    perm[ixyz[1] - 1] = 2\n    perm[ixyz[2] - 1] = 3\n    let rotM = mat4.fromValues(\n      a[0][0],\n      a[0][1],\n      a[0][2],\n      a[0][3],\n      a[1][0],\n      a[1][1],\n      a[1][2],\n      a[1][3],\n      a[2][0],\n      a[2][1],\n      a[2][2],\n      a[2][3],\n      0,\n      0,\n      0,\n      1\n    )\n    // n.b. 0.5 in these values to account for voxel centers, e.g. a 3-pixel wide bitmap in unit space has voxel centers at 0.25, 0.5 and 0.75\n    this.mm000 = this.vox2mm([-0.5, -0.5, -0.5], rotM)\n    this.mm100 = this.vox2mm([header.dims[1] - 0.5, -0.5, -0.5], rotM)\n    this.mm010 = this.vox2mm([-0.5, header.dims[2] - 0.5, -0.5], rotM)\n    this.mm001 = this.vox2mm([-0.5, -0.5, header.dims[3] - 0.5], rotM)\n    const R = mat4.create()\n    mat4.copy(R, rotM)\n    for (let i = 0; i < 3; i++) {\n      for (let j = 0; j < 3; j++) {\n        R[i * 4 + j] = rotM[i * 4 + perm[j] - 1] // rotM[i+(4*(perm[j]-1))];//rotM[i],[perm[j]-1];\n      }\n    }\n    const flip = [0, 0, 0]\n    if (R[0] < 0) {\n      flip[0] = 1\n    } // R[0][0]\n    if (R[5] < 0) {\n      flip[1] = 1\n    } // R[1][1]\n    if (R[10] < 0) {\n      flip[2] = 1\n    } // R[2][2]\n    this.dimsRAS = [header.dims[0], header.dims[perm[0]], header.dims[perm[1]], header.dims[perm[2]]]\n    this.pixDimsRAS = [header.pixDims[0], header.pixDims[perm[0]], header.pixDims[perm[1]], header.pixDims[perm[2]]]\n    this.permRAS = perm.slice()\n    for (let i = 0; i < 3; i++) {\n      if (flip[i] === 1) {\n        this.permRAS[i] = -this.permRAS[i]\n      }\n    }\n    if (this.arrayEquals(perm, [1, 2, 3]) && this.arrayEquals(flip, [0, 0, 0])) {\n      this.toRAS = mat4.create() // aka fromValues(1,0,0,0, 0,1,0,0, 0,0,1,0, 0,0,0,1);\n      this.matRAS = mat4.clone(rotM)\n      this.calculateOblique()\n      this.img2RASstep = [1, this.dimsRAS[1], this.dimsRAS[1] * this.dimsRAS[2]]\n      this.img2RASstart = [0, 0, 0]\n      return // no rotation required!\n    }\n    mat4.identity(rotM)\n    rotM[0 + 0 * 4] = 1 - flip[0] * 2\n    rotM[1 + 1 * 4] = 1 - flip[1] * 2\n    rotM[2 + 2 * 4] = 1 - flip[2] * 2\n    rotM[3 + 0 * 4] = (header.dims[perm[0]] - 1) * flip[0]\n    rotM[3 + 1 * 4] = (header.dims[perm[1]] - 1) * flip[1]\n    rotM[3 + 2 * 4] = (header.dims[perm[2]] - 1) * flip[2]\n    const residualR = mat4.create()\n    mat4.invert(residualR, rotM)\n    mat4.multiply(residualR, residualR, R)\n    this.matRAS = mat4.clone(residualR)\n    rotM = mat4.fromValues(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1)\n    rotM[perm[0] - 1 + 0 * 4] = -flip[0] * 2 + 1\n    rotM[perm[1] - 1 + 1 * 4] = -flip[1] * 2 + 1\n    rotM[perm[2] - 1 + 2 * 4] = -flip[2] * 2 + 1\n    rotM[3 + 0 * 4] = flip[0]\n    rotM[3 + 1 * 4] = flip[1]\n    rotM[3 + 2 * 4] = flip[2]\n    this.toRAS = mat4.clone(rotM) // webGL unit textures\n    // voxel based column-major,\n    rotM[3] = 0\n    rotM[7] = 0\n    rotM[11] = 0\n    rotM[12] = 0\n    if (this.permRAS[0] === -1 || this.permRAS[1] === -1 || this.permRAS[2] === -1) {\n      rotM[12] = header.dims[1] - 1\n    }\n    rotM[13] = 0\n    if (this.permRAS[0] === -2 || this.permRAS[1] === -2 || this.permRAS[2] === -2) {\n      rotM[13] = header.dims[2] - 1\n    }\n    rotM[14] = 0\n    if (this.permRAS[0] === -3 || this.permRAS[1] === -3 || this.permRAS[2] === -3) {\n      rotM[14] = header.dims[3] - 1\n    }\n    this.toRASvox = mat4.clone(rotM)\n    log.debug(this.hdr.dims)\n    log.debug(this.dimsRAS)\n\n    // compute img2RASstep[] and img2RASstart[] for rapid native<->RAS conversion\n    // TODO: replace all other outStep/outStart calculations with img2RASstep/img2RASstart\n    const hdr = this.hdr\n    perm = this.permRAS\n    const aperm = [Math.abs(perm[0]), Math.abs(perm[1]), Math.abs(perm[2])]\n    const outdim = [hdr.dims[aperm[0]], hdr.dims[aperm[1]], hdr.dims[aperm[2]]]\n    const inStep = [1, hdr.dims[1], hdr.dims[1] * hdr.dims[2]] // increment i,j,k\n    const outStep = [inStep[aperm[0] - 1], inStep[aperm[1] - 1], inStep[aperm[2] - 1]]\n    const outStart = [0, 0, 0]\n    for (let p = 0; p < 3; p++) {\n      // flip dimensions\n      if (perm[p] < 0) {\n        outStart[p] = outStep[p] * (outdim[p] - 1)\n        outStep[p] = -outStep[p]\n      }\n    }\n    this.img2RASstep = outStep\n    this.img2RASstart = outStart\n\n    this.calculateOblique()\n  }\n\n  // Reorient raw header data to RAS\n  // assume single volume, use nVolumes to specify, set nVolumes = 0 for same as input\n\n  hdr2RAS(nVolumes: number = 1): nifti.NIFTI1 | nifti.NIFTI2 {\n    if (!this.permRAS) {\n      throw new Error('permRAS undefined')\n    }\n    if (!this.hdr) {\n      throw new Error('hdr undefined')\n    }\n    // make a deep clone\n    const hdrBytes = hdrToArrayBuffer({ ...this.hdr!, vox_offset: 352 }, false)\n    const hdr = nifti.readHeader(hdrBytes.buffer, true)\n    // n.b. if nVolumes < 1, input volumes = output volumess\n    if (nVolumes === 1) {\n      // 3D\n      hdr.dims[0] = 3\n      hdr.dims[4] = 1\n    } else if (nVolumes > 1) {\n      // 4D\n      hdr.dims[0] = 4\n      hdr.dims[4] = nVolumes\n    }\n    const perm = this.permRAS.slice()\n    if (perm[0] === 1 && perm[1] === 2 && perm[2] === 3) {\n      return hdr\n    } // header is already in RAS\n    hdr.qform_code = 0\n    for (let i = 1; i < 4; i++) {\n      hdr.dims[i] = this.dimsRAS[i]\n    }\n\n    for (let i = 0; i < this.pixDimsRAS.length; i++) {\n      hdr.pixDims[i] = this.pixDimsRAS[i]\n    }\n    let k = 0\n    for (let i = 0; i < 4; i++) {\n      for (let j = 0; j < 4; j++) {\n        hdr.affine[i][j] = this.matRAS[k]\n        k++\n      }\n    }\n    return hdr\n  }\n\n  // Reorient raw image data to RAS\n  // note that GPU-based orient shader is much faster\n  // returns single 3D volume even for 4D input. Use nVolume to select volume (0 indexed)\n  img2RAS(nVolume: number = 0): TypedVoxelArray {\n    if (!this.permRAS) {\n      throw new Error('permRAS undefined')\n    }\n    if (!this.img) {\n      throw new Error('img undefined')\n    }\n    if (!this.hdr) {\n      throw new Error('hdr undefined')\n    }\n\n    const perm = this.permRAS.slice()\n    if (perm[0] === 1 && perm[1] === 2 && perm[2] === 3) {\n      return this.img\n    } // image is already in RAS\n    const hdr = this.hdr\n    const nVox = hdr.dims[1] * hdr.dims[2] * hdr.dims[3]\n    let volSkip = nVolume * nVox\n    if (volSkip + nVox > this.img.length || volSkip < 0) {\n      volSkip = 0\n      log.warn(`img2RAS nVolume (${nVolume}) out of bounds (${nVolume}+1)×${nVox} > ${this.img.length}`)\n    }\n    // preallocate/clone image (only 3D for 4D datasets!)\n    const imgRAS = this.img.slice(0, nVox)\n    const aperm = [Math.abs(perm[0]), Math.abs(perm[1]), Math.abs(perm[2])]\n    const outdim = [hdr.dims[aperm[0]], hdr.dims[aperm[1]], hdr.dims[aperm[2]]]\n    const inStep = [1, hdr.dims[1], hdr.dims[1] * hdr.dims[2]] // increment i,j,k\n    const outStep = [inStep[aperm[0] - 1], inStep[aperm[1] - 1], inStep[aperm[2] - 1]]\n    const outStart = [0, 0, 0]\n    for (let p = 0; p < 3; p++) {\n      // flip dimensions\n      if (perm[p] < 0) {\n        outStart[p] = outStep[p] * (outdim[p] - 1)\n        outStep[p] = -outStep[p]\n      }\n    }\n    let j = 0\n    for (let z = 0; z < outdim[2]; z++) {\n      const zi = outStart[2] + z * outStep[2]\n      for (let y = 0; y < outdim[1]; y++) {\n        const yi = outStart[1] + y * outStep[1]\n        for (let x = 0; x < outdim[0]; x++) {\n          const xi = outStart[0] + x * outStep[0]\n          imgRAS[j] = this.img[xi + yi + zi + volSkip]\n          j++\n        } // for x\n      } // for y\n    } // for z\n    return imgRAS\n  } // img2RAS()\n\n  // not included in public docs\n  // convert voxel location (row, column slice, indexed from 0) to world space\n  vox2mm(XYZ: number[], mtx: mat4): vec3 {\n    const sform = mat4.clone(mtx)\n    mat4.transpose(sform, sform)\n    const pos = vec4.fromValues(XYZ[0], XYZ[1], XYZ[2], 1)\n    vec4.transformMat4(pos, pos, sform)\n    const pos3 = vec3.fromValues(pos[0], pos[1], pos[2])\n    return pos3\n  } // vox2mm()\n\n  // not included in public docs\n  // convert world space to voxel location (row, column slice, indexed from 0)\n  mm2vox(mm: number[], frac = false): Float32Array | vec3 {\n    if (!this.matRAS) {\n      throw new Error('matRAS undefined')\n    }\n\n    const sform = mat4.clone(this.matRAS)\n    const out = mat4.clone(sform)\n    mat4.transpose(out, sform)\n    mat4.invert(out, out)\n    const pos = vec4.fromValues(mm[0], mm[1], mm[2], 1)\n    vec4.transformMat4(pos, pos, out)\n    const pos3 = vec3.fromValues(pos[0], pos[1], pos[2])\n    if (frac) {\n      return pos3\n    }\n    return [Math.round(pos3[0]), Math.round(pos3[1]), Math.round(pos3[2])]\n  } // vox2mm()\n\n  // not included in public docs\n  // returns boolean: are two arrays identical?\n  // TODO this won't work for complex objects. Maybe use array-equal from NPM\n  arrayEquals(a: unknown[], b: unknown[]): boolean {\n    return Array.isArray(a) && Array.isArray(b) && a.length === b.length && a.every((val, index) => val === b[index])\n  }\n\n  // not included in public docs\n  // base function for niivue.setColormap()\n  // colormaps are continuously interpolated between 256 values (0..256)\n  setColormap(cm: string): void {\n    this._colormap = cm\n    this.calMinMax()\n    if (this.onColormapChange) {\n      this.onColormapChange(this)\n    }\n  }\n\n  // not included in public docs\n  // base function for niivue.setColormap()\n  // label colormaps are discretely sampled from an arbitrary number of colors\n  setColormapLabel(cm: ColorMap): void {\n    this.colormapLabel = cmapper.makeLabelLut(cm)\n  }\n\n  async setColormapLabelFromUrl(url: string): Promise<void> {\n    this.colormapLabel = await cmapper.makeLabelLutFromUrl(url)\n  }\n\n  get colormap(): string {\n    return this._colormap\n  }\n\n  get colorMap(): string {\n    return this._colormap\n  }\n\n  // TODO duplicate fields, see niivue/loadDocument\n  set colormap(cm: string) {\n    this.setColormap(cm)\n  }\n\n  set colorMap(cm: string) {\n    this.setColormap(cm)\n  }\n\n  get opacity(): number {\n    return this._opacity\n  }\n\n  set opacity(opacity) {\n    this._opacity = opacity\n    if (this.onOpacityChange) {\n      this.onOpacityChange(this)\n    }\n  }\n\n  /**\n   * set contrast/brightness to robust range (2%..98%)\n   * @param vol - volume for estimate (use -1 to use estimate on all loaded volumes; use INFINITY for current volume)\n   * @sets volume brightness and returns array [pct2, pct98, mnScale, mxScale]\n   * @see {@link https://niivue.github.io/niivue/features/timeseries2.html | live demo usage}\n   */\n  calMinMax(vol: number = Number.POSITIVE_INFINITY): number[] {\n    if (!this.hdr) {\n      throw new Error('hdr undefined')\n    }\n    if (!this.img) {\n      throw new Error('img undefined')\n    }\n    // determine full range: min..max\n    let mn = Number.POSITIVE_INFINITY // not this.img[0] in case ignoreZeroVoxels\n    let mx = Number.NEGATIVE_INFINITY // this.img[0] in case ignoreZeroVoxels\n    let nZero = 0\n    let nNan = 0\n    let voxEnd = this.img.length\n    let voxStart = 0 // offset to first voxel\n    const nVox3D = this.hdr.dims[1] * this.hdr.dims[2] * this.hdr.dims[3]\n    // n.b. due to limitFrames4D nVol may not equal dims[4]\n    const nVol = Math.floor(voxEnd / nVox3D)\n    if (vol >= nVol) {\n      // use currently selected volume\n      vol = this.frame4D\n    }\n    if (vol >= 0 && vol < nVol) {\n      voxStart = vol * nVox3D\n      voxEnd = voxStart + nVox3D\n    }\n    // we can accelerate loops for integer data (which can not store NaN)\n    // n.b. do to stack size, we can not use Math.max.apply()\n    const isFastCalc =\n      this.img.constructor !== Float64Array && this.img.constructor !== Float32Array && this.ignoreZeroVoxels\n\n    if (isFastCalc) {\n      for (let i = voxStart; i < voxEnd; i++) {\n        mn = Math.min(this.img[i], mn)\n        mx = Math.max(this.img[i], mx)\n        if (this.img[i] === 0) {\n          nZero++\n        }\n      }\n    } else {\n      for (let i = voxStart; i < voxEnd; i++) {\n        if (isNaN(this.img[i])) {\n          nNan++\n          continue\n        }\n        if (this.img[i] === 0) {\n          nZero++\n          if (this.ignoreZeroVoxels) {\n            continue\n          }\n        }\n        mn = Math.min(this.img[i], mn)\n        mx = Math.max(this.img[i], mx)\n      }\n    }\n    if (this.ignoreZeroVoxels && mn === mx && nZero > 0) {\n      mn = 0\n    }\n    const mnScale = this.intensityRaw2Scaled(mn)\n    const mxScale = this.intensityRaw2Scaled(mx)\n    const cmap = cmapper.colormapFromKey(this._colormap)\n    let cmMin = 0\n    let cmMax = 0\n    if (cmap.min !== undefined) {\n      cmMin = cmap.min\n    }\n    if (cmap.max !== undefined) {\n      cmMax = cmap.max\n    }\n    if (\n      cmMin === cmMax &&\n      this.trustCalMinMax &&\n      isFinite(this.hdr.cal_min) &&\n      isFinite(this.hdr.cal_max) &&\n      this.hdr.cal_max > this.hdr.cal_min\n    ) {\n      this.cal_min = this.hdr.cal_min\n      this.cal_max = this.hdr.cal_max\n      this.robust_min = this.cal_min\n      this.robust_max = this.cal_max\n      this.global_min = mnScale\n      this.global_max = mxScale\n      return [this.hdr.cal_min, this.hdr.cal_max, this.hdr.cal_min, this.hdr.cal_max]\n    }\n    // if color map specifies non zero values for min and max then use them\n    if (cmMin !== cmMax) {\n      this.cal_min = cmMin\n      this.cal_max = cmMax\n      this.robust_min = this.cal_min\n      this.robust_max = this.cal_max\n      return [cmMin, cmMax, cmMin, cmMax]\n    }\n    const percentZero = (100 * nZero) / (voxEnd - voxStart)\n    let isOverrideIgnoreZeroVoxels = false\n    if (percentZero > 60 && !this.ignoreZeroVoxels) {\n      log.warn(`${Math.round(percentZero)}% of voxels are zero: ignoring zeros for cal_max`)\n      isOverrideIgnoreZeroVoxels = true\n      this.ignoreZeroVoxels = true\n    }\n    if (!this.ignoreZeroVoxels) {\n      nZero = 0\n    }\n    nZero += nNan\n    const n2pct = Math.round((voxEnd - voxStart - nZero) * this.percentileFrac)\n    if (n2pct < 1 || mn === mx) {\n      log.debug('no variability in image intensity?')\n      this.cal_min = mnScale\n      this.cal_max = mxScale\n      this.robust_min = this.cal_min\n      this.robust_max = this.cal_max\n      this.global_min = mnScale\n      this.global_max = mxScale\n      return [mnScale, mxScale, mnScale, mxScale]\n    }\n    const nBins = 1001\n    const scl = (nBins - 1) / (mx - mn)\n    const hist = new Array(nBins)\n    for (let i = 0; i < nBins; i++) {\n      hist[i] = 0\n    }\n    if (isFastCalc) {\n      for (let i = voxStart; i < voxEnd; i++) {\n        hist[Math.round((this.img[i] - mn) * scl)]++\n      }\n    } else if (this.ignoreZeroVoxels) {\n      for (let i = voxStart; i < voxEnd; i++) {\n        if (this.img[i] === 0) {\n          continue\n        }\n        if (isNaN(this.img[i])) {\n          continue\n        }\n        hist[Math.round((this.img[i] - mn) * scl)]++\n      }\n    } else {\n      for (let i = voxStart; i < voxEnd; i++) {\n        if (isNaN(this.img[i])) {\n          continue\n        }\n        hist[Math.round((this.img[i] - mn) * scl)]++\n      }\n    }\n    let n = 0\n    let lo = 0\n    while (n < n2pct) {\n      n += hist[lo]\n      lo++\n    }\n    lo-- // remove final increment\n    n = 0\n    let hi = nBins\n    while (n < n2pct) {\n      hi--\n      n += hist[hi]\n    }\n    if (lo === hi) {\n      // MAJORITY are not black or white\n      let ok = -1\n      while (ok !== 0) {\n        if (lo > 0) {\n          lo--\n          if (hist[lo] > 0) {\n            ok = 0\n          }\n        }\n        if (ok !== 0 && hi < nBins - 1) {\n          hi++\n          if (hist[hi] > 0) {\n            ok = 0\n          }\n        }\n        if (lo === 0 && hi === nBins - 1) {\n          ok = 0\n        }\n      } // while not ok\n    } // if lo === hi\n    let pct2 = this.intensityRaw2Scaled(lo / scl + mn)\n    let pct98 = this.intensityRaw2Scaled(hi / scl + mn)\n    if (this.hdr.cal_min < this.hdr.cal_max && this.hdr.cal_min >= mnScale && this.hdr.cal_max <= mxScale) {\n      pct2 = this.hdr.cal_min\n      pct98 = this.hdr.cal_max\n    }\n    if (isOverrideIgnoreZeroVoxels) {\n      pct2 = Math.min(pct2, 0)\n    }\n    this.cal_min = pct2\n    this.cal_max = pct98\n    this.robust_min = this.cal_min\n    this.robust_max = this.cal_max\n    this.global_min = mnScale\n    this.global_max = mxScale\n    return [pct2, pct98, mnScale, mxScale]\n  } // calMinMax\n\n  // not included in public docs\n  // convert voxel intensity from stored value to scaled intensity\n  intensityRaw2Scaled(raw: number): number {\n    if (!this.hdr) {\n      throw new Error('hdr undefined')\n    }\n\n    if (this.hdr.scl_slope === 0) {\n      this.hdr.scl_slope = 1.0\n    }\n    return raw * this.hdr.scl_slope + this.hdr.scl_inter\n  }\n\n  // convert voxel intensity from scaled intensity to stored value\n  intensityScaled2Raw(scaled: number): number {\n    if (!this.hdr) {\n      throw new Error('hdr undefined')\n    }\n\n    if (this.hdr.scl_slope === 0) {\n      this.hdr.scl_slope = 1.0\n    }\n    return (scaled - this.hdr.scl_inter) / this.hdr.scl_slope\n  }\n\n  // not included in public docs\n  // see niivue.saveImage() for wrapper of this function\n  saveToUint8Array(fnm: string, drawing8: Uint8Array | null = null): Uint8Array {\n    if (!this.hdr) {\n      throw new Error('hdr undefined')\n    }\n    if (!this.img) {\n      throw new Error('img undefined')\n    }\n\n    const isDrawing8 = drawing8 !== null\n    const hdrBytes = hdrToArrayBuffer(this.hdr, isDrawing8)\n    const opad = new Uint8Array(4)\n    let img8 = new Uint8Array(this.img.buffer)\n    if (isDrawing8) {\n      img8 = new Uint8Array(drawing8.buffer)\n    }\n    const odata = new Uint8Array(hdrBytes.length + opad.length + img8.length)\n    odata.set(hdrBytes)\n    odata.set(opad, hdrBytes.length)\n\n    odata.set(img8, hdrBytes.length + opad.length)\n    let saveData = null\n    const compress = fnm.endsWith('.gz') // true if name ends with .gz\n    if (compress) {\n      saveData = gzipSync(odata, {\n        // GZIP-specific: the filename to use when decompressed\n        filename: fnm,\n        // GZIP-specific: the modification time. Can be a Date, date string,\n        // or Unix timestamp\n        mtime: Date.now(),\n        level: 6 // the default\n      })\n    } else {\n      saveData = odata\n    }\n    return saveData\n  }\n\n  // not included in public docs\n  // save image as NIfTI volume\n  // if fnm is empty, data is returned\n  saveToDisk(fnm: string = '', drawing8: Uint8Array | null = null): Uint8Array {\n    // TODO there was an unnecessary strict string check for fnm here,\n    // shouldn't be necessary anymore. Thanks TS! :)\n    const saveData = this.saveToUint8Array(fnm, drawing8)\n    if (fnm === '') {\n      log.debug('saveToDisk: empty file name, returning data as Uint8Array rather than triggering download')\n      return saveData\n    }\n    const blob = new Blob([saveData.buffer], {\n      type: 'application/octet-stream'\n    })\n    const blobUrl = URL.createObjectURL(blob)\n    const link = document.createElement('a')\n    link.setAttribute('href', blobUrl)\n    link.setAttribute('download', fnm)\n    link.style.visibility = 'hidden'\n    document.body.appendChild(link)\n    link.click()\n    document.body.removeChild(link)\n    return saveData\n  } // saveToDisk()\n\n  static async fetchDicomData(url: string, headers: Record<string, string> = {}): Promise<ArrayBuffer[]> {\n    if (url === '') {\n      throw Error('url must not be empty')\n    }\n\n    // https://stackoverflow.com/questions/10687099/how-to-test-if-a-url-string-is-absolute-or-relative\n    const absoluteUrlRE = /^(?:[a-z+]+:)?\\/\\//i\n\n    let manifestUrl = absoluteUrlRE.test(url) ? url : new URL(url, window.location.href)\n    const extensionRE = /(?:.([^.]+))?$/\n    const extension = extensionRE.exec((manifestUrl as URL).pathname)\n    if (!extension) {\n      manifestUrl = new URL('niivue-manifest.txt', url)\n    }\n\n    let response = await fetch(manifestUrl, { headers })\n    if (!response.ok) {\n      throw Error(response.statusText)\n    }\n    const text = await response.text()\n    const lines = text.split('\\n')\n\n    const baseUrlRE = /(.*\\/).*/\n    const folderUrl = baseUrlRE.exec(manifestUrl as string)![0]\n    const dataBuffer = []\n    for (const line of lines) {\n      const fileUrl = new URL(line, folderUrl)\n      response = await fetch(fileUrl, { headers })\n      if (!response.ok) {\n        throw Error(response.statusText)\n      }\n      const contents = await response.arrayBuffer()\n      dataBuffer.push(contents)\n    }\n    return dataBuffer\n  }\n\n  static async fetchPartial(url: string, bytesToLoad: number, headers: Record<string, string> = {}): Promise<Response> {\n    try {\n      const response = await fetch(url, {\n        headers: { range: `bytes=0-'${bytesToLoad}`, stream: 'true', ...headers }\n      })\n      return response\n    } catch (error) {\n      log.error(error)\n      log.error('fetchPartial failed, trying again without range header')\n      const response = await fetch(url, { headers })\n      return response\n    }\n  }\n\n  /**\n   * factory function to load and return a new NVImage instance from a given URL\n   * @returns  NVImage instance\n   */\n  static async loadFromUrl({\n    url = '',\n    urlImgData = '',\n    headers = {},\n    name = '',\n    colormap = 'gray',\n    opacity = 1.0,\n    cal_min = NaN,\n    cal_max = NaN,\n    trustCalMinMax = true,\n    percentileFrac = 0.02,\n    ignoreZeroVoxels = false,\n    useQFormNotSForm = false,\n    colormapNegative = '',\n    frame4D = 0,\n    isManifest = false,\n    limitFrames4D = NaN,\n    imageType = NVIMAGE_TYPE.UNKNOWN,\n    colorbarVisible = true,\n    buffer = new ArrayBuffer(0)\n  }: Partial<Omit<ImageFromUrlOptions, 'url'>> & { url?: string | Uint8Array | ArrayBuffer } = {}): Promise<NVImage> {\n    if (url === '') {\n      throw Error('url must not be empty')\n    }\n    let nvimage = null\n    let dataBuffer = null\n    if (url instanceof Uint8Array) {\n      url = url.buffer as ArrayBuffer\n    } // convert Uint8Array -> ArrayBuffer\n    if (buffer.byteLength > 0) {\n      url = buffer\n    }\n    if (url instanceof ArrayBuffer) {\n      dataBuffer = url\n      if (name !== '') {\n        url = name\n      } else {\n        url = 'array.nii'\n        const bytes = new Uint8Array(dataBuffer)\n        if (bytes[0] === 31 && bytes[1] === 139) {\n          url = 'array.nii.gz'\n        }\n      }\n    }\n    // fetch data associated with image\n    if (!isNaN(limitFrames4D)) {\n      // let response = await fetch(url, { headers: { range: \"bytes=0-352\" } });\n      // NIfTI header first 352 bytes\n      // however, GZip header might can add bloat https://en.wikipedia.org/wiki/Gzip\n      let response = await this.fetchPartial(url, 512, headers)\n      dataBuffer = await response.arrayBuffer()\n      let bytes = new Uint8Array(dataBuffer)\n      let isGz = false\n      if (bytes[0] === 31 && bytes[1] === 139) {\n        isGz = true\n        const dcmpStrm = new Decompress((chunk) => {\n          bytes = chunk\n        })\n        dcmpStrm.push(bytes)\n        dataBuffer = bytes.buffer\n      }\n      let isNifti1 = bytes[0] === 92 && bytes[1] === 1\n      if (!isNifti1) {\n        isNifti1 = bytes[1] === 92 && bytes[0] === 1\n      }\n      if (!isNifti1) {\n        dataBuffer = null\n      } else {\n        const hdr = nifti.readHeader(dataBuffer)\n        if (hdr === null) {\n          throw new Error('could not read nifti header')\n        }\n        const nBytesPerVoxel = hdr.numBitsPerVoxel / 8\n        let nVox3D = 1\n        for (let i = 1; i < 4; i++) {\n          if (hdr.dims[i] > 1) {\n            nVox3D *= hdr.dims[i]\n          }\n        }\n        let nFrame4D = 1\n        for (let i = 4; i < 7; i++) {\n          if (hdr.dims[i] > 1) {\n            nFrame4D *= hdr.dims[i]\n          }\n        }\n        const volsToLoad = Math.max(Math.min(limitFrames4D, nFrame4D), 1)\n        const bytesToLoad = hdr.vox_offset + volsToLoad * nVox3D * nBytesPerVoxel\n        if (dataBuffer.byteLength < bytesToLoad) {\n          response = await this.fetchPartial(url, bytesToLoad, headers)\n          dataBuffer = await response.arrayBuffer()\n          if (isGz) {\n            let bytes = new Uint8Array(dataBuffer)\n            const dcmpStrm2 = new Decompress((chunk) => {\n              bytes = chunk\n            })\n            dcmpStrm2.push(bytes)\n            dataBuffer = bytes.buffer\n          }\n        } // load image data\n        if (dataBuffer.byteLength < bytesToLoad) {\n          // fail: e.g. incompressible data\n          dataBuffer = null\n        } else {\n          dataBuffer = dataBuffer.slice(0, bytesToLoad)\n        }\n      } // if isNifti1\n    }\n    if (dataBuffer) {\n      //\n    } else if (isManifest) {\n      dataBuffer = await NVImage.fetchDicomData(url, headers)\n      imageType = NVIMAGE_TYPE.DCM_MANIFEST\n    } else {\n      const response = await fetch(url, { headers })\n      if (!response.ok) {\n        throw Error(response.statusText)\n      }\n      dataBuffer = await response.arrayBuffer()\n    }\n    const re = /(?:\\.([^.]+))?$/\n    let ext = ''\n    if (name === '') {\n      ext = re.exec(url)![1]\n    } else {\n      ext = re.exec(name)![1]\n    }\n    if (ext.toUpperCase() === 'HEAD') {\n      if (urlImgData === '') {\n        urlImgData = url.substring(0, url.lastIndexOf('HEAD')) + 'BRIK'\n      }\n    }\n    let urlParts\n    if (name === '') {\n      try {\n        // if a full url like https://domain/path/file.nii.gz?query=filter\n        // parse the url and get the pathname component without the query\n        urlParts = new URL(url).pathname.split('/')\n      } catch (e) {\n        // if a relative url then parse the path (assuming no query)\n        urlParts = url.split('/')\n      }\n      name = urlParts.slice(-1)[0] // name will be last part of url (e.g. some/url/image.nii.gz --> image.nii.gz\n      if (name.indexOf('?') > -1) {\n        name = name.slice(0, name.indexOf('?')) // remove query string if any\n      }\n    }\n\n    let pairedImgData = null\n    if (urlImgData.length > 0) {\n      let resp = await fetch(urlImgData, { headers })\n      if (resp.status === 404) {\n        if (urlImgData.lastIndexOf('BRIK') !== -1) {\n          resp = await fetch(urlImgData + '.gz', { headers })\n        }\n      }\n      pairedImgData = await resp.arrayBuffer()\n    }\n    if (!dataBuffer) {\n      throw new Error('Unable to load buffer properly from volume')\n    }\n    nvimage = new NVImage(\n      dataBuffer,\n      name,\n      colormap,\n      opacity,\n      pairedImgData,\n      cal_min,\n      cal_max,\n      trustCalMinMax,\n      percentileFrac,\n      ignoreZeroVoxels,\n      useQFormNotSForm,\n      colormapNegative,\n      frame4D,\n      imageType\n    )\n    nvimage.url = url\n    nvimage.colorbarVisible = colorbarVisible\n    return nvimage\n  }\n\n  // not included in public docs\n  // loading Nifti files\n  static readFileAsync(file: File, bytesToLoad = NaN): Promise<ArrayBuffer> {\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader()\n      reader.onload = (): void => {\n        if (file.name.lastIndexOf('gz') !== -1 && isNaN(bytesToLoad)) {\n          resolve(nifti.decompress(reader.result as ArrayBuffer))\n        } else {\n          resolve(reader.result as ArrayBuffer)\n        }\n      }\n\n      reader.onerror = reject\n      if (isNaN(bytesToLoad)) {\n        reader.readAsArrayBuffer(file)\n      } else {\n        reader.readAsArrayBuffer(file.slice(0, bytesToLoad))\n      }\n    })\n  }\n\n  /**\n   * factory function to load and return a new NVImage instance from a file in the browser\n   */\n  static async loadFromFile({\n    file, // file can be an array of file objects or a single file object\n    name = '',\n    colormap = 'gray',\n    opacity = 1.0,\n    urlImgData = null,\n    cal_min = NaN,\n    cal_max = NaN,\n    trustCalMinMax = true,\n    percentileFrac = 0.02,\n    ignoreZeroVoxels = false,\n    useQFormNotSForm = false,\n    colormapNegative = '',\n    frame4D = 0,\n    limitFrames4D = NaN,\n    imageType = NVIMAGE_TYPE.UNKNOWN\n  }: ImageFromFileOptions): Promise<NVImage> {\n    let nvimage: NVImage | null = null\n    let dataBuffer: ArrayBuffer | ArrayBuffer[] = []\n    try {\n      if (Array.isArray(file)) {\n        for (let i = 0; i < file.length; i++) {\n          dataBuffer.push(await this.readFileAsync(file[i]))\n        }\n      } else {\n        if (!isNaN(limitFrames4D)) {\n          dataBuffer = await this.readFileAsync(file, 512)\n          let bytes = new Uint8Array(dataBuffer)\n          let isGz = false\n          if (bytes[0] === 31 && bytes[1] === 139) {\n            isGz = true\n            const dcmpStrm = new Decompress((chunk) => {\n              bytes = chunk\n            })\n            dcmpStrm.push(bytes)\n            dataBuffer = bytes.buffer\n          }\n          let isNifti1 = bytes[0] === 92 && bytes[1] === 1\n          if (!isNifti1) {\n            isNifti1 = bytes[1] === 92 && bytes[0] === 1\n          }\n          if (!isNifti1) {\n            dataBuffer = await this.readFileAsync(file)\n          } else {\n            const hdr = nifti.readHeader(dataBuffer)\n            if (!hdr) {\n              throw new Error('could not read nifti header')\n            }\n            const nBytesPerVoxel = hdr.numBitsPerVoxel / 8\n            let nVox3D = 1\n            for (let i = 1; i < 4; i++) {\n              if (hdr.dims[i] > 1) {\n                nVox3D *= hdr.dims[i]\n              }\n            }\n            let nFrame4D = 1\n            for (let i = 4; i < 7; i++) {\n              if (hdr.dims[i] > 1) {\n                nFrame4D *= hdr.dims[i]\n              }\n            }\n            const volsToLoad = Math.max(Math.min(limitFrames4D, nFrame4D), 1)\n            const bytesToLoad = hdr.vox_offset + volsToLoad * nVox3D * nBytesPerVoxel\n            if (dataBuffer.byteLength < bytesToLoad) {\n              // response = await this.fetchPartial(url, bytesToLoad);\n              // dataBuffer = await response.arrayBuffer();\n              dataBuffer = await this.readFileAsync(file, bytesToLoad)\n              if (isGz) {\n                let bytes = new Uint8Array(dataBuffer)\n                const dcmpStrm2 = new Decompress((chunk) => {\n                  bytes = chunk\n                })\n                dcmpStrm2.push(bytes)\n                dataBuffer = bytes.buffer\n              }\n            } // load image data\n            if (dataBuffer.byteLength < bytesToLoad) {\n              // fail: e.g. incompressible data\n              throw new Error('failed to load image data (e.g. incompressible data)')\n            } else {\n              dataBuffer = dataBuffer.slice(0, bytesToLoad)\n            }\n          } // if isNifti1\n        } else {\n          dataBuffer = await this.readFileAsync(file, limitFrames4D)\n        }\n        name = file.name\n      }\n      let pairedImgData = null\n      if (urlImgData) {\n        // @ts-expect-error check data type?\n        pairedImgData = await this.readFileAsync(urlImgData)\n      }\n      nvimage = new NVImage(\n        dataBuffer,\n        name,\n        colormap,\n        opacity,\n        pairedImgData,\n        cal_min,\n        cal_max,\n        trustCalMinMax,\n        percentileFrac,\n        ignoreZeroVoxels,\n        useQFormNotSForm,\n        colormapNegative,\n        frame4D,\n        imageType\n      )\n      // add a reference to the file object as a new property of the NVImage instance\n      // is this too hacky?\n      nvimage.fileObject = file\n    } catch (err) {\n      log.error(err)\n      log.error(err)\n    }\n    if (nvimage === null) {\n      throw new Error('could not build NVImage')\n    }\n    return nvimage\n  }\n\n  /**\n   * factory function to load and return a new NVImage instance from a base64 encoded string\n   *\n   * @returns NVImage instance\n   * @example\n   * myImage = NVImage.loadFromBase64('SomeBase64String')\n   */\n  static createNiftiArray(\n    dims = [256, 256, 256],\n    pixDims = [1, 1, 1],\n    affine = [1, 0, 0, -128, 0, 1, 0, -128, 0, 0, 1, -128, 0, 0, 0, 1],\n    datatypeCode = 2, // DT_UINT8\n    img = new Uint8Array()\n  ): Uint8Array {\n    const hdr = this.createNiftiHeader(dims, pixDims, affine, datatypeCode)\n    const hdrBytes = hdrToArrayBuffer(hdr, false)\n    if (img.length < 1) {\n      return hdrBytes\n    }\n    const opad = new Uint8Array(4)\n    const img8 = new Uint8Array(img.buffer)\n    const odata = new Uint8Array(hdrBytes.length + opad.length + img8.length)\n    odata.set(hdrBytes)\n    odata.set(opad, hdrBytes.length)\n    odata.set(img8, hdrBytes.length + opad.length)\n    return odata\n  } // createNiftiFile()\n\n  static createNiftiHeader(\n    dims = [256, 256, 256],\n    pixDims = [1, 1, 1],\n    affine = [1, 0, 0, -128, 0, 1, 0, -128, 0, 0, 1, -128, 0, 0, 0, 1],\n    datatypeCode = 2 // NiiDataType.DT_UINT8\n  ): nifti.NIFTI1 {\n    const hdr = new nifti.NIFTI1()\n    hdr.littleEndian = true\n    hdr.dims = [3, 1, 1, 1, 0, 0, 0, 0]\n    hdr.dims[0] = Math.max(3, dims.length)\n    for (let i = 0; i < dims.length; i++) {\n      hdr.dims[i + 1] = dims[i]\n    }\n    hdr.pixDims = [1, 1, 1, 1, 1, 0, 0, 0]\n    for (let i = 0; i < dims.length; i++) {\n      hdr.pixDims[i + 1] = pixDims[i]\n    }\n    if (affine.length === 16) {\n      let k = 0\n      for (let i = 0; i < 4; i++) {\n        for (let j = 0; j < 4; j++) {\n          hdr.affine[i][j] = affine[k]\n          k++\n        }\n      }\n    }\n    let bpv = 8\n    if (datatypeCode === 256 || datatypeCode === 2) {\n      bpv = 8\n    } else if (datatypeCode === 512 || datatypeCode === 4) {\n      bpv = 16\n    } else if (datatypeCode === 16 || datatypeCode === 768 || datatypeCode === 8) {\n      bpv = 32\n    } else if (datatypeCode === 64) {\n      bpv = 64\n    } else {\n      log.warn('Unsupported NIfTI datatypeCode: ' + datatypeCode)\n    }\n    hdr.datatypeCode = datatypeCode\n    hdr.numBitsPerVoxel = bpv\n    hdr.scl_inter = 0\n    hdr.scl_slope = 0\n    hdr.sform_code = 2\n    hdr.magic = 'n+1'\n    hdr.vox_offset = 352\n    return hdr\n  } // loadFromHeader\n\n  /**\n   * read a 3D slab of voxels from a volume\n   * @param voxStart - first row, column and slice (RAS order) for selection\n   * @param voxEnd - final row, column and slice (RAS order) for selection\n   * @param dataType - array data type. Options: 'same' (default), 'uint8', 'float32', 'scaled', 'normalized', 'windowed'\n   * @returns the an array where ret[0] is the voxel values and ret[1] is dimension of selection\n   * @see {@link https://niivue.github.io/niivue/features/slab_selection.html | live demo usage}\n   */\n\n  getVolumeData(voxStart = [-1, 0, 0], voxEnd = [0, 0, 0], dataType = 'same'): [TypedVoxelArray, number[]] {\n    let img: TypedVoxelArray = new Uint8Array()\n    if (Math.min(...voxStart) < 0 || Math.min(...voxEnd) < 0) {\n      return [img, [0, 0, 0]]\n    }\n    const dims = this.dimsRAS!.slice(1, 4)\n    for (let i = 0; i < 3; i++) {\n      voxStart[i] = Math.min(voxStart[i], dims[i] - 1)\n      voxEnd[i] = Math.min(voxEnd[i], dims[i] - 1)\n      if (voxEnd[i] < voxStart[i]) {\n        const tmp = voxEnd[i]\n        voxEnd[i] = voxStart[i]\n        voxStart[i] = tmp\n      }\n    }\n    const slabDims = [voxEnd[0] - voxStart[0] + 1, voxEnd[1] - voxStart[1] + 1, voxEnd[2] - voxStart[2] + 1]\n    const slabNVox = slabDims[0] * slabDims[1] * slabDims[2]\n    let dt = this.hdr!.datatypeCode\n    if (dataType === 'uint8') {\n      dt = NiiDataType.DT_UINT8\n    } else if (\n      dataType === 'float32' ||\n      dataType === 'scaled' ||\n      dataType === 'normalized' ||\n      dataType === 'windowed'\n    ) {\n      dt = NiiDataType.DT_FLOAT32\n    }\n    if (dt === NiiDataType.DT_UINT8) {\n      img = new Uint8Array(slabNVox)\n    } else if (dt === NiiDataType.DT_INT16) {\n      img = new Int16Array(slabNVox)\n    } else if (dt === NiiDataType.DT_UINT16) {\n      img = new Uint16Array(slabNVox)\n    } else if (dt === NiiDataType.DT_FLOAT32) {\n      img = new Float32Array(slabNVox)\n    } else if (dt === NiiDataType.DT_FLOAT64) {\n      img = new Float64Array(slabNVox)\n    } else {\n      log.error('getVolumeData unsupported datatype')\n      return [img, [0, 0, 0]]\n    }\n    const outStep = this.img2RASstep!\n    const outStart = this.img2RASstart!\n    let i = 0\n    for (let z = voxStart[2]; z <= voxEnd[2]; z++) {\n      const zi = outStart[2] + z * outStep[2]\n      for (let y = voxStart[1]; y <= voxEnd[1]; y++) {\n        const yizi = zi + outStart[1] + y * outStep[1]\n        for (let x = voxStart[0]; x <= voxEnd[0]; x++) {\n          const xi = outStart[0] + x * outStep[0]\n          img[i++] = this.img![xi + yizi]\n        }\n      }\n    }\n    if (dataType === 'scaled' || dataType === 'normalized' || dataType === 'windowed') {\n      for (let i = 0; i < img.length; i++) {\n        img[i] = img[i] * this.hdr.scl_slope + this.hdr.scl_inter\n      }\n    }\n    if (dataType === 'normalized' || dataType === 'windowed') {\n      let mn = this.cal_min\n      let mx = this.cal_max\n      if (dataType === 'normalized') {\n        mn = this.global_min\n        mx = this.global_max\n      }\n      const scale = 1 / (mx - mn)\n      for (let i = 0; i < img.length; i++) {\n        img[i] = (img[i] - mn) * scale\n        img[i] = Math.max(Math.min(img[i], 1), 0)\n      }\n    }\n    return [img, slabDims]\n  } // getVolumeData()\n\n  /**\n   * write a 3D slab of voxels from a volume\n   * @param voxStart - first row, column and slice (RAS order) for selection\n   * @param voxEnd - final row, column and slice (RAS order) for selection\n   * @param img - array of voxel values to insert (RAS order)\n   * @see {@link https://niivue.github.io/niivue/features/slab_selection.html | live demo usage}\n   */\n\n  setVolumeData(voxStart = [-1, 0, 0], voxEnd = [0, 0, 0], img: TypedVoxelArray = new Uint8Array()): void {\n    if (img.length < 1 || Math.min(...voxStart) < 0 || Math.min(...voxEnd) < 0) {\n      return\n    }\n    const dims = this.dimsRAS!.slice(1, 4)\n    for (let i = 0; i < 3; i++) {\n      voxStart[i] = Math.min(voxStart[i], dims[i] - 1)\n      voxEnd[i] = Math.min(voxEnd[i], dims[i] - 1)\n      if (voxEnd[i] < voxStart[i]) {\n        const tmp = voxEnd[i]\n        voxEnd[i] = voxStart[i]\n        voxStart[i] = tmp\n      }\n    }\n    const slabDims = [voxEnd[0] - voxStart[0] + 1, voxEnd[1] - voxStart[1] + 1, voxEnd[2] - voxStart[2] + 1]\n    const slabNVox = slabDims[0] * slabDims[1] * slabDims[2]\n    if (img.length < slabNVox) {\n      log.error('setVolumeData image does not have enough voxels')\n      return\n    }\n    const outStep = this.img2RASstep!\n    const outStart = this.img2RASstart!\n    let i = 0\n    for (let z = voxStart[2]; z <= voxEnd[2]; z++) {\n      const zi = outStart[2] + z * outStep[2]\n      for (let y = voxStart[1]; y <= voxEnd[1]; y++) {\n        const yizi = zi + outStart[1] + y * outStep[1]\n        for (let x = voxStart[0]; x <= voxEnd[0]; x++) {\n          const xi = outStart[0] + x * outStep[0]\n          // imgRAS[j] = this.img[xi + yi + zi]\n          this.img![xi + yizi] = img[i++]\n        }\n      }\n    }\n  } // setVolumeData()\n\n  /**\n   * factory function to load and return a new NVImage instance from a base64 encoded string\n   *\n   * @returns NVImage instance\n   * @example\n   * myImage = NVImage.loadFromBase64('SomeBase64String')\n   */\n  static loadFromBase64({\n    base64,\n    name = '',\n    colormap = 'gray',\n    opacity = 1.0,\n    cal_min = NaN,\n    cal_max = NaN,\n    trustCalMinMax = true,\n    percentileFrac = 0.02,\n    ignoreZeroVoxels = false,\n    useQFormNotSForm = false,\n    colormapNegative = '',\n    frame4D = 0,\n    imageType = NVIMAGE_TYPE.UNKNOWN,\n    cal_minNeg = NaN,\n    cal_maxNeg = NaN,\n    colorbarVisible = true,\n    colormapLabel = null\n  }: ImageFromBase64): NVImage {\n    // https://stackoverflow.com/questions/21797299/convert-base64-string-to-arraybuffer\n    function base64ToArrayBuffer(base64: string): ArrayBuffer {\n      const binary_string = window.atob(base64)\n      const len = binary_string.length\n      const bytes = new Uint8Array(len)\n      for (let i = 0; i < len; i++) {\n        bytes[i] = binary_string.charCodeAt(i)\n      }\n      return bytes.buffer\n    }\n    let nvimage = null\n    try {\n      const dataBuffer = base64ToArrayBuffer(base64)\n      const pairedImgData = null\n      nvimage = new NVImage(\n        dataBuffer,\n        name,\n        colormap,\n        opacity,\n        pairedImgData,\n        cal_min,\n        cal_max,\n        trustCalMinMax,\n        percentileFrac,\n        ignoreZeroVoxels,\n        useQFormNotSForm,\n        colormapNegative,\n        frame4D,\n        imageType,\n        cal_minNeg,\n        cal_maxNeg,\n        colorbarVisible,\n        colormapLabel\n      )\n    } catch (err) {\n      log.debug(err)\n    }\n\n    if (nvimage === null) {\n      throw new Error('could not load NVImage')\n    }\n\n    return nvimage\n  }\n\n  /**\n   * make a clone of a NVImage instance and return a new NVImage\n   * @returns NVImage instance\n   * @example\n   * myImage = NVImage.loadFromFile(SomeFileObject) // files can be from dialogs or drag and drop\n   * clonedImage = myImage.clone()\n   */\n  clone(): NVImage {\n    const clonedImage = new NVImage()\n    // important! the clone should have a new ID to avoid conflicts\n    // when referencing images by ID. A user could add the cloned\n    // image as a viewable volume in any order.\n    clonedImage.id = uuidv4()\n    clonedImage.hdr = Object.assign({}, this.hdr)\n    clonedImage.img = this.img!.slice()\n    clonedImage.calculateRAS()\n    clonedImage.calMinMax()\n    return clonedImage\n  }\n\n  /**\n   * fill a NVImage instance with zeros for the image data\n   * @example\n   * myImage = NVImage.loadFromFile(SomeFileObject) // files can be from dialogs or drag and drop\n   * clonedImageWithZeros = myImage.clone().zeroImage()\n   */\n  zeroImage(): void {\n    this.img!.fill(0)\n  }\n\n  /**\n   * get nifti specific metadata about the image\n   */\n  getImageMetadata(): ImageMetadata {\n    if (!this.hdr) {\n      throw new Error('hdr undefined')\n    }\n    const id = this.id\n    const datatypeCode = this.hdr.datatypeCode\n    const dims = this.hdr.dims\n    const nx = dims[1]\n    const ny = dims[2]\n    const nz = dims[3]\n    const nt = Math.max(1, dims[4])\n    const pixDims = this.hdr.pixDims\n    const dx = pixDims[1]\n    const dy = pixDims[2]\n    const dz = pixDims[3]\n    const dt = pixDims[4]\n    const bpv = Math.floor(this.hdr.numBitsPerVoxel / 8)\n\n    return {\n      id,\n      datatypeCode,\n      nx,\n      ny,\n      nz,\n      nt,\n      dx,\n      dy,\n      dz,\n      dt,\n      bpv\n    }\n  }\n\n  /**\n   * a factory function to make a zero filled image given a NVImage as a reference\n   * @param nvImage - an existing NVImage as a reference\n   * @param dataType - the output data type. Options: 'same', 'uint8'\n   * @returns new NVImage filled with zeros for the image data\n   * @example\n   * myImage = NVImage.loadFromFile(SomeFileObject) // files can be from dialogs or drag and drop\n   * newZeroImage = NVImage.zerosLike(myImage)\n   */\n  static zerosLike(nvImage: NVImage, dataType = 'same'): NVImage {\n    // dataType can be: 'same', 'uint8'\n    // 'same' means that the zeroed image data type is the same as the input image\n    const zeroClone = nvImage.clone()\n    zeroClone.zeroImage()\n    if (dataType === 'uint8') {\n      zeroClone.img = Uint8Array.from(zeroClone.img!)\n      zeroClone.hdr!.datatypeCode = NiiDataType.DT_UINT8\n      zeroClone.hdr!.numBitsPerVoxel = 8\n    }\n    if (dataType === 'float32') {\n      zeroClone.img = Float32Array.from(zeroClone.img!)\n      zeroClone.hdr!.datatypeCode = NiiDataType.DT_FLOAT32\n      zeroClone.hdr!.numBitsPerVoxel = 32\n    }\n    return zeroClone\n  }\n\n  // not included in public docs\n  // return voxel intensity at specific coordinates (xyz are zero indexed column row, slice)\n  getValue(x: number, y: number, z: number, frame4D = 0, isReadImaginary = false): number {\n    if (!this.hdr) {\n      throw new Error('hdr undefined')\n    }\n    if (!this.img) {\n      throw new Error('img undefined')\n    }\n\n    const nx = this.hdr.dims[1]\n    const ny = this.hdr.dims[2]\n    const nz = this.hdr.dims[3]\n    const perm = this.permRAS!.slice()\n    if (perm[0] !== 1 || perm[1] !== 2 || perm[2] !== 3) {\n      const pos = vec4.fromValues(x, y, z, 1)\n      vec4.transformMat4(pos, pos, this.toRASvox!)\n      x = pos[0]\n      y = pos[1]\n      z = pos[2]\n    } // image is already in RAS\n    let vx = x + y * nx + z * nx * ny\n\n    if (this.hdr.datatypeCode === NiiDataType.DT_RGBA32) {\n      vx *= 4\n      // convert rgb to luminance\n      return Math.round(this.img[vx] * 0.21 + this.img[vx + 1] * 0.72 + this.img[vx + 2] * 0.07)\n    }\n    if (this.hdr.datatypeCode === NiiDataType.DT_RGB24) {\n      vx *= 3\n      // convert rgb to luminance\n      return Math.round(this.img[vx] * 0.21 + this.img[vx + 1] * 0.72 + this.img[vx + 2] * 0.07)\n    }\n    const vol = frame4D * nx * ny * nz\n    let i = this.img[vx + vol]\n    if (isReadImaginary) {\n      i = this.imaginary![vx + vol]\n    }\n\n    return this.hdr.scl_slope * i + this.hdr.scl_inter\n  }\n\n  /**\n   * @param id - id of 3D Object (is this the base volume or an overlay?)\n   * @param gl - WebGL rendering context\n   * @returns new 3D object in model space\n   */\n  toNiivueObject3D(id: number, gl: WebGL2RenderingContext): NiivueObject3D {\n    // TODO somehow enforce that these fields are set\n    const dimsRAS = this.dimsRAS as number[]\n    const matRAS = this.matRAS as mat4\n    const pixDimsRAS = this.pixDimsRAS as number[]\n    // cube has 8 vertices: left/right, posterior/anterior, inferior/superior\n    // n.b. voxel coordinates are from VOXEL centers\n    // add/subtract 0.5 to get full image field of view\n    const L = -0.5\n    const P = -0.5\n    const I = -0.5\n    const R = dimsRAS[1] - 1 + 0.5\n    const A = dimsRAS[2] - 1 + 0.5\n    const S = dimsRAS[3] - 1 + 0.5\n\n    const LPI = this.vox2mm([L, P, I], matRAS)\n    const LAI = this.vox2mm([L, A, I], matRAS)\n    const LPS = this.vox2mm([L, P, S], matRAS)\n    const LAS = this.vox2mm([L, A, S], matRAS)\n    const RPI = this.vox2mm([R, P, I], matRAS)\n    const RAI = this.vox2mm([R, A, I], matRAS)\n    const RPS = this.vox2mm([R, P, S], matRAS)\n    const RAS = this.vox2mm([R, A, S], matRAS)\n    const posTex = [\n      // spatial position (XYZ), texture coordinates UVW\n      // Superior face\n      ...LPS,\n      ...[0.0, 0.0, 1.0],\n      ...RPS,\n      ...[1.0, 0.0, 1.0],\n      ...RAS,\n      ...[1.0, 1.0, 1.0],\n      ...LAS,\n      ...[0.0, 1.0, 1.0],\n\n      // Inferior face\n      ...LPI,\n      ...[0.0, 0.0, 0.0],\n      ...LAI,\n      ...[0.0, 1.0, 0.0],\n      ...RAI,\n      ...[1.0, 1.0, 0.0],\n      ...RPI,\n      ...[1.0, 0.0, 0.0]\n    ]\n\n    const indexBuffer = gl.createBuffer()\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, indexBuffer)\n\n    // This array defines each face as two triangles, using the\n    // indices into the vertex array to specify each triangle's\n    // position.\n\n    const indices = [\n      // six faces of cube: each has 2 triangles (6 indices)\n      0,\n      3,\n      2,\n      2,\n      1,\n      0, // Top\n      4,\n      7,\n      6,\n      6,\n      5,\n      4, // Bottom\n      5,\n      6,\n      2,\n      2,\n      3,\n      5, // Front\n      4,\n      0,\n      1,\n      1,\n      7,\n      4, // Back\n      7,\n      1,\n      2,\n      2,\n      6,\n      7, // Right\n      4,\n      5,\n      3,\n      3,\n      0,\n      4 // Left\n    ]\n    // Now send the element array to GL\n\n    gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(indices), gl.STATIC_DRAW)\n\n    const posTexBuffer = gl.createBuffer()!\n    gl.bindBuffer(gl.ARRAY_BUFFER, posTexBuffer)\n    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(posTex), gl.STATIC_DRAW)\n\n    const vao = gl.createVertexArray()\n    gl.bindVertexArray(vao)\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, indexBuffer)\n    gl.bindBuffer(gl.ARRAY_BUFFER, posTexBuffer)\n    // vertex spatial position: 3 floats X,Y,Z\n    gl.enableVertexAttribArray(0)\n    gl.vertexAttribPointer(0, 3, gl.FLOAT, false, 24, 0)\n    // UVW texCoord: (also three floats)\n    gl.enableVertexAttribArray(1)\n    gl.vertexAttribPointer(1, 3, gl.FLOAT, false, 24, 12)\n    gl.bindVertexArray(null)\n\n    const obj3D = new NiivueObject3D(id, posTexBuffer, gl.TRIANGLES, indices.length, indexBuffer, vao)\n    const extents = getExtents([...LPS, ...RPS, ...RAS, ...LAS, ...LPI, ...LAI, ...RAI, ...RPI])\n    obj3D.extentsMin = extents.min.slice()\n    obj3D.extentsMax = extents.max.slice()\n    obj3D.furthestVertexFromOrigin = extents.furthestVertexFromOrigin\n    obj3D.originNegate = vec3.clone(extents.origin)\n    vec3.negate(obj3D.originNegate, obj3D.originNegate)\n    obj3D.fieldOfViewDeObliqueMM = [dimsRAS[1] * pixDimsRAS[1], dimsRAS[2] * pixDimsRAS[2], dimsRAS[3] * pixDimsRAS[3]]\n    return obj3D\n  }\n\n  /**\n   * Update options for image\n   */\n  applyOptionsUpdate(options: ImageFromUrlOptions): void {\n    this.hdr!.cal_min = options.cal_min!\n    this.hdr!.cal_max = options.cal_max!\n    Object.assign(this, options)\n  }\n\n  getImageOptions(): ImageFromUrlOptions {\n    const options = NVImageFromUrlOptions(\n      '', // url,\n      '', // urlImageData\n      this.name, // name\n      this._colormap, // colormap\n      this.opacity, // opacity\n      this.hdr!.cal_min, // cal_min\n      this.hdr!.cal_max, // cal_max\n      this.trustCalMinMax, // trustCalMinMax,\n      this.percentileFrac, // percentileFrac\n      this.ignoreZeroVoxels, // ignoreZeroVoxels\n      this.useQFormNotSForm, // useQFormNotSForm\n      this.colormapNegative, // colormapNegative\n      this.frame4D,\n      this.imageType // imageType\n    )\n    return options\n  }\n\n  /**\n   * Converts NVImage to NIfTI compliant byte array\n   */\n  toUint8Array(drawingBytes: Uint8Array | null = null): Uint8Array {\n    const isDrawing = drawingBytes !== null\n    const hdrBytes = hdrToArrayBuffer({ ...this.hdr!, vox_offset: 352 }, isDrawing)\n\n    let drawingBytesToBeConverted = drawingBytes\n    if (isDrawing) {\n      const perm = this.permRAS as number[]\n      if (perm[0] !== 1 || perm[1] !== 2 || perm[2] !== 3) {\n        const dims = this.hdr!.dims // reverse to original\n        // reverse RAS to native space, layout is mrtrix MIF format\n        // for details see NVImage.readMIF()\n        const layout = [0, 0, 0]\n        for (let i = 0; i < 3; i++) {\n          for (let j = 0; j < 3; j++) {\n            if (Math.abs(perm[i]) - 1 !== j) {\n              continue\n            }\n            layout[j] = i * Math.sign(perm[i])\n          }\n        }\n        let stride = 1\n        const instride = [1, 1, 1]\n        const inflip = [false, false, false]\n        for (let i = 0; i < layout.length; i++) {\n          for (let j = 0; j < layout.length; j++) {\n            const a = Math.abs(layout[j])\n            if (a !== i) {\n              continue\n            }\n            instride[j] = stride\n            // detect -0: https://medium.com/coding-at-dawn/is-negative-zero-0-a-number-in-javascript-c62739f80114\n            if (layout[j] < 0 || Object.is(layout[j], -0)) {\n              inflip[j] = true\n            }\n            stride *= dims[j + 1]\n          }\n        }\n        let xlut = NVUtilities.range(0, dims[1] - 1, 1)\n        if (inflip[0]) {\n          xlut = NVUtilities.range(dims[1] - 1, 0, -1)\n        }\n        for (let i = 0; i < dims[1]; i++) {\n          xlut[i] *= instride[0]\n        }\n        let ylut = NVUtilities.range(0, dims[2] - 1, 1)\n        if (inflip[1]) {\n          ylut = NVUtilities.range(dims[2] - 1, 0, -1)\n        }\n        for (let i = 0; i < dims[2]; i++) {\n          ylut[i] *= instride[1]\n        }\n        let zlut = NVUtilities.range(0, dims[3] - 1, 1)\n        if (inflip[2]) {\n          zlut = NVUtilities.range(dims[3] - 1, 0, -1)\n        }\n        for (let i = 0; i < dims[3]; i++) {\n          zlut[i] *= instride[2]\n        }\n        // convert data\n\n        const inVs = new Uint8Array(drawingBytes)\n        const outVs = new Uint8Array(dims[1] * dims[2] * dims[3])\n        let j = 0\n        for (let z = 0; z < dims[3]; z++) {\n          for (let y = 0; y < dims[2]; y++) {\n            for (let x = 0; x < dims[1]; x++) {\n              outVs[j] = inVs[xlut[x] + ylut[y] + zlut[z]]\n              j++\n            } // for x\n          } // for y\n        } // for z\n        drawingBytesToBeConverted = outVs\n        log.debug('drawing bytes')\n        log.debug(drawingBytesToBeConverted)\n      }\n    }\n    const img8 = isDrawing ? (drawingBytesToBeConverted as Uint8Array) : new Uint8Array(this.img!.buffer)\n    const opad = new Uint8Array(4)\n    const odata = new Uint8Array(hdrBytes.length + opad.length + img8.length)\n    odata.set(hdrBytes)\n    odata.set(opad, hdrBytes.length)\n    odata.set(img8, hdrBytes.length + opad.length)\n    return odata\n  }\n\n  // not included in public docs\n  convertVox2Frac(vox: vec3): vec3 {\n    // convert from  0-index voxel space [0..dim[1]-1, 0..dim[2]-1, 0..dim[3]-1] to normalized texture space XYZ= [0..1, 0..1 ,0..1]\n    // consider dimension with 3 voxels, the voxel centers are at 0.25, 0.5, 0.75 corresponding to 0,1,2\n    const frac = vec3.fromValues(\n      (vox[0] + 0.5) / this.dimsRAS![1],\n      (vox[1] + 0.5) / this.dimsRAS![2],\n      (vox[2] + 0.5) / this.dimsRAS![3]\n    )\n    return frac\n  }\n\n  // not included in public docs\n  convertFrac2Vox(frac: vec3): vec3 {\n    const vox = vec3.fromValues(\n      Math.round(frac[0] * this.dims![1] - 0.5), // dims === RAS\n      Math.round(frac[1] * this.dims![2] - 0.5), // dims === RAS\n      Math.round(frac[2] * this.dims![3] - 0.5) // dims === RAS\n    )\n    return vox\n  }\n\n  // not included in public docs\n  convertFrac2MM(frac: vec3, isForceSliceMM = false): vec4 {\n    const pos = vec4.fromValues(frac[0], frac[1], frac[2], 1)\n    if (isForceSliceMM) {\n      vec4.transformMat4(pos, pos, this.frac2mm!)\n    } else {\n      vec4.transformMat4(pos, pos, this.frac2mmOrtho!)\n    }\n    return pos\n  }\n\n  // not included in public docs\n  convertMM2Frac(mm: vec3 | vec4, isForceSliceMM = false): vec3 {\n    // given mm, return volume fraction\n    // convert from object space in millimeters to normalized texture space XYZ= [0..1, 0..1 ,0..1]\n    const mm4 = vec4.fromValues(mm[0], mm[1], mm[2], 1)\n    const d = this.dimsRAS\n    const frac = vec3.fromValues(0, 0, 0)\n    if (typeof d === 'undefined') {\n      return frac\n    }\n    if (!isForceSliceMM) {\n      const xform = mat4.clone(this.frac2mmOrtho!)\n      mat4.invert(xform, xform)\n      vec4.transformMat4(mm4, mm4, xform)\n      frac[0] = mm4[0]\n      frac[1] = mm4[1]\n      frac[2] = mm4[2]\n      return frac\n    }\n    if (d[1] < 1 || d[2] < 1 || d[3] < 1) {\n      return frac\n    }\n    const sform = mat4.clone(this.matRAS!)\n    mat4.invert(sform, sform)\n    mat4.transpose(sform, sform)\n    vec4.transformMat4(mm4, mm4, sform)\n    frac[0] = (mm4[0] + 0.5) / d[1]\n    frac[1] = (mm4[1] + 0.5) / d[2]\n    frac[2] = (mm4[2] + 0.5) / d[3]\n    return frac\n  }\n}\n","import { vec3 } from 'gl-matrix'\nimport { log } from '../logger.js'\nimport { NiftiHeader } from '../types.js'\nimport { LUT } from '../colortables.js'\n\nexport const isPlatformLittleEndian = (): boolean => {\n  // inspired by https://github.com/rii-mango/Papaya\n  const buffer = new ArrayBuffer(2)\n  new DataView(buffer).setInt16(0, 256, true)\n  return new Int16Array(buffer)[0] === 256\n}\n\n/**\n * Enum for NIfTI datatype codes\n *   // https://nifti.nimh.nih.gov/pub/dist/src/niftilib/nifti1.h\n */\nexport enum NiiDataType {\n  DT_NONE = 0,\n  DT_BINARY = 1,\n  DT_UINT8 = 2,\n  DT_INT16 = 4,\n  DT_INT32 = 8,\n  DT_FLOAT32 = 16,\n  DT_COMPLEX64 = 32,\n  DT_FLOAT64 = 64,\n  DT_RGB24 = 128,\n  DT_INT8 = 256,\n  DT_UINT16 = 512,\n  DT_UINT32 = 768,\n  DT_INT64 = 1024,\n  DT_UINT64 = 1280,\n  DT_FLOAT128 = 1536,\n  DT_COMPLEX128 = 1792,\n  DT_COMPLEX256 = 2048,\n  DT_RGBA32 = 2304\n}\n\n/**\n * Enum for NIfTI intent codes\n *   // https://nifti.nimh.nih.gov/pub/dist/src/niftilib/nifti1.h\n */\nexport enum NiiIntentCode {\n  NIFTI_INTENT_LABEL = 1002,\n  NIFTI_INTENT_VECTOR = 1007,\n  NIFTI_INTENT_RGB_VECTOR = 2003\n}\n\n/**\n * Enum for supported image types (e.g. NII, NRRD, DICOM)\n */\nexport enum ImageType {\n  UNKNOWN = 0,\n  NII = 1,\n  DCM = 2,\n  DCM_MANIFEST = 3,\n  MIH = 4,\n  MIF = 5,\n  NHDR = 6,\n  NRRD = 7,\n  MHD = 8,\n  MHA = 9,\n  MGH = 10,\n  MGZ = 11,\n  V = 12,\n  V16 = 13,\n  VMR = 14,\n  HEAD = 15,\n  DCM_FOLDER = 16,\n  SRC = 17,\n  FIB = 18\n}\n\nexport const NVIMAGE_TYPE = Object.freeze({\n  ...ImageType,\n  parse: (ext: string) => {\n    let imageType: ImageType = ImageType.UNKNOWN\n    switch (ext.toUpperCase()) {\n      case '':\n      case 'DCM':\n        imageType = ImageType.DCM\n        break\n      case 'TXT':\n        imageType = ImageType.DCM_MANIFEST\n        break\n      case 'FIB':\n        imageType = ImageType.FIB\n        break\n      case 'NII':\n        imageType = ImageType.NII\n        break\n      case 'MIH':\n        imageType = ImageType.MIH\n        break\n      case 'MIF':\n        imageType = ImageType.MIF\n        break\n      case 'NHDR':\n        imageType = ImageType.NHDR\n        break\n      case 'NRRD':\n        imageType = ImageType.NRRD\n        break\n      case 'MHD':\n        imageType = ImageType.MHD\n        break\n      case 'MHA':\n        imageType = ImageType.MHA\n        break\n      case 'MGH':\n        imageType = ImageType.MGH\n        break\n      case 'MGZ':\n        imageType = ImageType.MGZ\n        break\n      case 'SRC':\n        imageType = ImageType.SRC\n        break\n      case 'V':\n        imageType = ImageType.V\n        break\n      case 'V16':\n        imageType = ImageType.V16\n        break\n      case 'VMR':\n        imageType = ImageType.VMR\n        break\n      case 'HEAD':\n        imageType = ImageType.HEAD\n        break\n    }\n    return imageType\n  }\n})\n\nexport type ImageFromUrlOptions = {\n  // the resolvable URL pointing to a nifti image to load\n  url: string\n  // Allows loading formats where header and image are separate files (e.g. nifti.hdr, nifti.img)\n  urlImageData?: string\n  // headers to use in the fetch call\n  headers?: Record<string, string>\n  // a name for this image (defaults to empty)\n  name?: string\n  // a color map to use (defaults to gray)\n  colorMap?: string\n  // TODO see duplicate usage in niivue/loadDocument\n  colormap?: string\n  // the opacity for this image (defaults to 1)\n  opacity?: number\n  // minimum intensity for color brightness/contrast\n  cal_min?: number\n  // maximum intensity for color brightness/contrast\n  cal_max?: number\n  // whether or not to trust cal_min and cal_max from the nifti header (trusting results in faster loading, defaults to true)\n  trustCalMinMax?: boolean\n  // the percentile to use for setting the robust range of the display values (smart intensity setting for images with large ranges, defaults to 0.02)\n  percentileFrac?: number\n  // whether or not to use QForm over SForm constructing the NVImage instance (defaults to false)\n  useQFormNotSForm?: boolean\n  // if true, values below cal_min are shown as translucent, not transparent (defaults to false)\n  alphaThreshold?: boolean\n  // a color map to use for negative intensities\n  colormapNegative?: string\n  // backwards compatible option\n  colorMapNegative?: string\n  // minimum intensity for colormapNegative brightness/contrast (NaN for symmetrical cal_min)\n  cal_minNeg?: number\n  // maximum intensity for colormapNegative brightness/contrast (NaN for symmetrical cal_max)\n  cal_maxNeg?: number\n  // show/hide colormaps (defaults to true)\n  colorbarVisible?: boolean\n  // TODO the following fields were not documented\n  ignoreZeroVoxels?: boolean\n  imageType?: ImageType\n  frame4D?: number\n  colormapLabel?: LUT | null\n  pairedImgData?: null\n  limitFrames4D?: number\n  isManifest?: boolean\n  urlImgData?: string\n  buffer?: ArrayBuffer\n}\n\n// TODO centralize shared options\nexport type ImageFromFileOptions = {\n  // the file object\n  file: File | File[]\n  // a name for this image. Default is an empty string\n  name?: string\n  // a color map to use. default is gray\n  colormap?: string\n  // the opacity for this image. default is 1\n  opacity?: number\n  // Allows loading formats where header and image are separate files (e.g. nifti.hdr, nifti.img)\n  urlImgData?: File | null | FileSystemEntry\n  // minimum intensity for color brightness/contrast\n  cal_min?: number\n  // maximum intensity for color brightness/contrast\n  cal_max?: number\n  // whether or not to trust cal_min and cal_max from the nifti header (trusting results in faster loading)\n  trustCalMinMax?: boolean\n  // the percentile to use for setting the robust range of the display values (smart intensity setting for images with large ranges)\n  percentileFrac?: number\n  // whether or not to ignore zero voxels in setting the robust range of display values\n  ignoreZeroVoxels?: boolean\n  // whether or not to use QForm instead of SForm during construction\n  useQFormNotSForm?: boolean\n  // colormap negative for the image\n  colormapNegative?: string\n  // image type\n  imageType?: ImageType\n  frame4D?: number\n  limitFrames4D?: number\n}\n\nexport type ImageFromBase64 = {\n  // base64 string\n  base64: string\n  // a name for this image. Default is an empty string\n  name?: string\n  // a color map to use. default is gray\n  colormap?: string\n  // the opacity for this image. default is 1\n  opacity?: number\n  // minimum intensity for color brightness/contrast\n  cal_min?: number\n  // maximum intensity for color brightness/contrast\n  cal_max?: number\n  // whether or not to trust cal_min and cal_max from the nifti header (trusting results in faster loading)\n  trustCalMinMax?: boolean\n  // the percentile to use for setting the robust range of the display values (smart intensity setting for images with large ranges)\n  percentileFrac?: number\n  // whether or not to ignore zero voxels in setting the robust range of display values\n  ignoreZeroVoxels?: boolean\n  // whether or not use QForm instead of SForm\n  useQFormNotSForm?: boolean\n  colormapNegative?: string\n  frame4D?: number\n  imageType?: ImageType\n  cal_minNeg?: number\n  cal_maxNeg?: number\n  colorbarVisible?: boolean\n  colormapLabel?: LUT | null\n}\n\nexport type ImageMetadata = {\n  // unique if of image\n  id: string\n  // data type\n  datatypeCode: number\n  // number of columns\n  nx: number\n  // number of rows\n  ny: number\n  // number of slices\n  nz: number\n  // number of volumes\n  nt: number\n  // space between columns\n  dx: number\n  // space between rows\n  dy: number\n  // space between slices\n  dz: number\n  // time between volumes\n  dt: number\n  // bits per voxel\n  // TODO was documented as bpx\n  bpv: number\n}\n\nexport const NVImageFromUrlOptions = (\n  url: string,\n  urlImageData = '',\n  name = '',\n  colormap = 'gray',\n  opacity = 1.0,\n  cal_min = NaN,\n  cal_max = NaN,\n  trustCalMinMax = true,\n  percentileFrac = 0.02,\n  ignoreZeroVoxels = false,\n  useQFormNotSForm = false,\n  colormapNegative = '',\n  frame4D = 0,\n  imageType = NVIMAGE_TYPE.UNKNOWN,\n  cal_minNeg = NaN,\n  cal_maxNeg = NaN,\n  colorbarVisible = true,\n  alphaThreshold = false,\n  colormapLabel = null\n): ImageFromUrlOptions => {\n  return {\n    url,\n    urlImageData,\n    name,\n    colormap,\n    colorMap: colormap,\n    opacity,\n    cal_min,\n    cal_max,\n    trustCalMinMax,\n    percentileFrac,\n    ignoreZeroVoxels,\n    useQFormNotSForm,\n    colormapNegative,\n    imageType,\n    cal_minNeg,\n    cal_maxNeg,\n    colorbarVisible,\n    frame4D,\n    alphaThreshold,\n    colormapLabel\n  }\n}\n\n// not included in public docs\n// create NIfTI format SForm from DICOM frame of reference\nexport function getBestTransform(\n  imageDirections: number[],\n  voxelDimensions: number[],\n  imagePosition: number[]\n): number[][] | null {\n  // https://github.com/rii-mango/Papaya/blob/782a19341af77a510d674c777b6da46afb8c65f1/src/js/volume/dicom/header-dicom.js#L605\n  /* Copyright (c) 2012-2015, RII-UTHSCSA\nAll rights reserved.\n\nTHIS PRODUCT IS NOT FOR CLINICAL USE.\n\nRedistribution and use in source and binary forms, with or without modification, are permitted provided that the\nfollowing conditions are met:\n\n - Redistributions of source code must retain the above copyright notice, this list of conditions and the following\n   disclaimer.\n\n - Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following\n   disclaimer in the documentation and/or other materials provided with the distribution.\n\n - Neither the name of the RII-UTHSCSA nor the names of its contributors may be used to endorse or promote products\n   derived from this software without specific prior written permission.\n\n THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES,\n INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n*/\n  const cosines = imageDirections\n  let m = null\n  if (cosines) {\n    const vs = {\n      colSize: voxelDimensions[0],\n      rowSize: voxelDimensions[1],\n      sliceSize: voxelDimensions[2]\n    }\n    const coord = imagePosition\n    const cosx = [cosines[0], cosines[1], cosines[2]]\n    const cosy = [cosines[3], cosines[4], cosines[5]]\n    const cosz = [\n      cosx[1] * cosy[2] - cosx[2] * cosy[1],\n      cosx[2] * cosy[0] - cosx[0] * cosy[2],\n      cosx[0] * cosy[1] - cosx[1] * cosy[0]\n    ]\n    m = [\n      [cosx[0] * vs.colSize * -1, cosy[0] * vs.rowSize * -1, cosz[0] * vs.sliceSize * -1, -1 * coord[0]],\n      [cosx[1] * vs.colSize * -1, cosy[1] * vs.rowSize * -1, cosz[1] * vs.sliceSize * -1, -1 * coord[1]],\n      [cosx[2] * vs.colSize, cosy[2] * vs.rowSize, cosz[2] * vs.sliceSize, coord[2]],\n      [0, 0, 0, 1]\n    ]\n  }\n  return m\n}\n\nfunction str2Buffer(str: string, maxLen: number = 80): number[] {\n  // emulate node.js Buffer.from\n  // remove characters than could be used for shell expansion\n  str = str.replace(/[`$]/g, '')\n  const bytes = []\n  const len = Math.min(maxLen, str.length)\n  for (let i = 0; i < len; i++) {\n    const char = str.charCodeAt(i)\n    bytes.push(char & 0xff)\n  }\n  return bytes\n}\n\n// save NIfTI header into UINT8 array for saving to disk\nexport function hdrToArrayBuffer(hdr: NiftiHeader, isDrawing8 = false, isInputEndian = false): Uint8Array {\n  const SHORT_SIZE = 2\n  const FLOAT32_SIZE = 4\n  let isLittleEndian = true\n  if (isInputEndian) {\n    isLittleEndian = hdr.littleEndian\n  }\n  const byteArray = new Uint8Array(348)\n  const view = new DataView(byteArray.buffer)\n  // sizeof_hdr\n  view.setInt32(0, 348, isLittleEndian)\n\n  // data_type, db_name, extents, session_error, regular are not used\n  // regular set to 'r' (ASCII 114) for Analyze compatibility\n  view.setUint8(38, 114)\n  // dim_info\n  view.setUint8(39, hdr.dim_info)\n\n  // dims\n  for (let i = 0; i < 8; i++) {\n    view.setUint16(40 + SHORT_SIZE * i, hdr.dims[i], isLittleEndian)\n  }\n\n  // intent_p1, intent_p2, intent_p3\n  view.setFloat32(56, hdr.intent_p1, isLittleEndian)\n  view.setFloat32(60, hdr.intent_p2, isLittleEndian)\n  view.setFloat32(64, hdr.intent_p3, isLittleEndian)\n  // intent_code, datatype, bitpix, slice_start\n  view.setInt16(68, hdr.intent_code, isLittleEndian)\n  if (isDrawing8) {\n    view.setInt16(70, 2, isLittleEndian) // 2 = DT_UINT8\n    view.setInt16(72, 8, isLittleEndian)\n  } else {\n    view.setInt16(70, hdr.datatypeCode, isLittleEndian)\n    view.setInt16(72, hdr.numBitsPerVoxel, isLittleEndian)\n  }\n  view.setInt16(74, hdr.slice_start, isLittleEndian)\n\n  // pixdim[8], vox_offset, scl_slope, scl_inter\n  for (let i = 0; i < 8; i++) {\n    view.setFloat32(76 + FLOAT32_SIZE * i, hdr.pixDims[i], isLittleEndian)\n  }\n  if (isDrawing8) {\n    view.setFloat32(108, 352, isLittleEndian)\n    view.setFloat32(112, 1.0, isLittleEndian)\n    view.setFloat32(116, 0.0, isLittleEndian)\n  } else {\n    // view.setFloat32(108, hdr.vox_offset, isLittleEndian)\n    view.setFloat32(108, 352, isLittleEndian)\n    view.setFloat32(112, hdr.scl_slope, isLittleEndian)\n    view.setFloat32(116, hdr.scl_inter, isLittleEndian)\n  }\n  // slice_end\n  view.setInt16(120, hdr.slice_end, isLittleEndian)\n\n  // slice_code, xyzt_units\n  view.setUint8(122, hdr.slice_code)\n  if (hdr.xyzt_units === 0) {\n    view.setUint8(123, 10)\n  } else {\n    view.setUint8(123, hdr.xyzt_units)\n  }\n\n  // cal_max, cal_min, slice_duration, toffset\n  if (isDrawing8) {\n    view.setFloat32(124, 0, isLittleEndian)\n    view.setFloat32(128, 0, isLittleEndian)\n  } else {\n    view.setFloat32(124, hdr.cal_max, isLittleEndian)\n    view.setFloat32(128, hdr.cal_min, isLittleEndian)\n  }\n  view.setFloat32(132, hdr.slice_duration, isLittleEndian)\n  view.setFloat32(136, hdr.toffset, isLittleEndian)\n\n  // glmax, glmin are unused\n\n  // descrip and aux_file\n  // node.js byteArray.set(Buffer.from(hdr.description), 148);\n  byteArray.set(str2Buffer(hdr.description), 148)\n  // node.js: byteArray.set(Buffer.from(hdr.aux_file), 228);\n  byteArray.set(str2Buffer(hdr.aux_file), 228)\n  // qform_code, sform_code\n  view.setInt16(252, hdr.qform_code, isLittleEndian)\n  // if sform unknown, assume NIFTI_XFORM_SCANNER_ANAT\n  if (hdr.sform_code < 1 || hdr.sform_code < 1) {\n    view.setInt16(254, 1, isLittleEndian)\n  } else {\n    view.setInt16(254, hdr.sform_code, isLittleEndian)\n  }\n\n  // quatern_b, quatern_c, quatern_d, qoffset_x, qoffset_y, qoffset_z, srow_x[4], srow_y[4], and srow_z[4]\n  view.setFloat32(256, hdr.quatern_b, isLittleEndian)\n  view.setFloat32(260, hdr.quatern_c, isLittleEndian)\n  view.setFloat32(264, hdr.quatern_d, isLittleEndian)\n  view.setFloat32(268, hdr.qoffset_x, isLittleEndian)\n  view.setFloat32(272, hdr.qoffset_y, isLittleEndian)\n  view.setFloat32(276, hdr.qoffset_z, isLittleEndian)\n  const flattened = hdr.affine.flat()\n  // we only want the first three rows\n  for (let i = 0; i < 12; i++) {\n    view.setFloat32(280 + FLOAT32_SIZE * i, flattened[i], isLittleEndian)\n  }\n  // node.js https://www.w3schools.com/nodejs/met_buffer_from.asp\n  // intent_name and magic\n  // node.js byteArray.set(Buffer.from(hdr.intent_name), 328);\n  //  byteArray.set(str2Buffer(hdr.intent_name), 328)\n  // node.js byteArray.set(Buffer.from(hdr.magic), 344);\n  // byteArray.set(str2Buffer(hdr.magic), 344)\n  view.setInt32(344, 3222382, true) // \"n+1\\0\"\n\n  return byteArray\n  // return byteArray.buffer;\n}\n\ntype Extents = {\n  // min bounding point\n  min: number[]\n  // max bounding point\n  max: number[]\n  // point furthest from origin\n  furthestVertexFromOrigin: number\n  // origin\n  origin: vec3\n}\n\nexport function getExtents(positions: number[], forceOriginInVolume = true): Extents {\n  const nV = Math.round(positions.length / 3) // each vertex has 3 components: XYZ\n  const origin = vec3.fromValues(0, 0, 0) // default center of rotation\n  const mn = vec3.create()\n  const mx = vec3.create()\n  let mxDx = 0.0\n  let nLoops = 1\n  if (forceOriginInVolume) {\n    nLoops = 2\n  } // second pass to reposition origin\n  for (let loop = 0; loop < nLoops; loop++) {\n    mxDx = 0.0\n    for (let i = 0; i < nV; i++) {\n      const v = vec3.fromValues(positions[i * 3], positions[i * 3 + 1], positions[i * 3 + 2])\n      if (i === 0) {\n        vec3.copy(mn, v)\n        vec3.copy(mx, v)\n      }\n      vec3.min(mn, mn, v)\n      vec3.max(mx, mx, v)\n      vec3.subtract(v, v, origin)\n      const dx = vec3.len(v)\n      mxDx = Math.max(mxDx, dx)\n    }\n    if (loop + 1 >= nLoops) {\n      break\n    }\n    let ok = true\n    for (let j = 0; j < 3; ++j) {\n      if (mn[j] > origin[j]) {\n        ok = false\n      }\n      if (mx[j] < origin[j]) {\n        ok = false\n      }\n    }\n    if (ok) {\n      break\n    }\n    vec3.lerp(origin, mn, mx, 0.5)\n    log.debug('origin moved inside volume: ', origin)\n  }\n  const min = [mn[0], mn[1], mn[2]]\n  const max = [mx[0], mx[1], mx[2]]\n  const furthestVertexFromOrigin = mxDx\n  return { min, max, furthestVertexFromOrigin, origin }\n}\n\nexport function isAffineOK(mtx: number[][]): boolean {\n  // A good matrix should not have any components that are not a number\n  // A good spatial transformation matrix should not have a row or column that is all zeros\n  const iOK = [false, false, false, false]\n  const jOK = [false, false, false, false]\n  for (let i = 0; i < 4; i++) {\n    for (let j = 0; j < 4; j++) {\n      if (isNaN(mtx[i][j])) {\n        return false\n      }\n    }\n  }\n  for (let i = 0; i < 3; i++) {\n    for (let j = 0; j < 3; j++) {\n      if (mtx[i][j] === 0.0) {\n        continue\n      }\n      iOK[i] = true\n      jOK[j] = true\n    }\n  }\n  for (let i = 0; i < 3; i++) {\n    if (!iOK[i]) {\n      return false\n    }\n    if (!jOK[i]) {\n      return false\n    }\n  }\n  return true\n}\n","export enum LabelTextAlignment {\n  LEFT = 'left',\n  RIGHT = 'right',\n  CENTER = 'center'\n}\n\nexport enum LabelLineTerminator {\n  NONE = 'none',\n  CIRCLE = 'circle',\n  RING = 'ring'\n}\n\nexport enum LabelAnchorFlag {\n  NONE = 0,\n  LEFT = 1 << 0,\n  CENTER = 1 << 1,\n  RIGHT = 1 << 2,\n  TOP = 1 << 3,\n  MIDDLE = 1 << 4,\n  BOTTOM = 1 << 5\n}\n\nexport enum LabelAnchorPoint {\n  NONE = LabelAnchorFlag.NONE,\n  TOPLEFT = LabelAnchorFlag.TOP | LabelAnchorFlag.LEFT,\n  TOPCENTER = LabelAnchorFlag.TOP | LabelAnchorFlag.CENTER,\n  TOPRIGHT = LabelAnchorFlag.TOP | LabelAnchorFlag.RIGHT,\n  MIDDLELEFT = LabelAnchorFlag.MIDDLE | LabelAnchorFlag.LEFT,\n  MIDDLECENTER = LabelAnchorFlag.MIDDLE | LabelAnchorFlag.CENTER,\n  MIDDLERIGHT = LabelAnchorFlag.MIDDLE | LabelAnchorFlag.RIGHT,\n  BOTTOMLEFT = LabelAnchorFlag.BOTTOM | LabelAnchorFlag.LEFT,\n  BOTTOMCENTER = LabelAnchorFlag.BOTTOM | LabelAnchorFlag.CENTER,\n  BOTTOMRIGHT = LabelAnchorFlag.BOTTOM | LabelAnchorFlag.RIGHT\n}\n\n/**\n * Class representing label style.\n * @ignore\n */\nexport class NVLabel3DStyle {\n  textColor: number[]\n  textScale: number\n  textAlignment?: LabelTextAlignment\n  lineWidth: number\n  lineColor: number[]\n  lineTerminator: LabelLineTerminator\n  bulletScale?: number\n  bulletColor?: number[]\n  backgroundColor?: number[]\n\n  /**\n   * @param textColor - Color of text\n   * @param textScale - Text Size (0.0..1.0)\n   * @param lineWidth - Line width\n   * @param lineColor - Line color\n   * @param bulletScale - Bullet size respective of text\n   * @param bulletColor - Bullet color\n   * @param backgroundColor - Background color of label\n   */\n  constructor(\n    textColor = [1.0, 1.0, 1.0, 1.0],\n    textScale = 1.0,\n    textAlignment = LabelTextAlignment.LEFT,\n    lineWidth = 0.0,\n    lineColor = [0.0, 0.0, 0.0],\n    lineTerminator = LabelLineTerminator.NONE,\n    bulletScale?: number,\n    bulletColor?: number[],\n    backgroundColor?: number[]\n  ) {\n    this.textColor = textColor\n    this.textScale = textScale\n    this.textAlignment = textAlignment\n    this.lineWidth = lineWidth\n    this.lineColor = lineColor\n    this.lineTerminator = lineTerminator\n    this.bulletScale = bulletScale\n    this.bulletColor = bulletColor\n    this.backgroundColor = backgroundColor\n  }\n}\n\n/**\n * Label class\n * @ignore\n */\nexport class NVLabel3D {\n  text: string\n  style: NVLabel3DStyle\n  points?: number[] | number[][]\n  anchor: LabelAnchorPoint\n  onClick?: (label: NVLabel3D) => void\n\n  /**\n   * @param text - The text of the label\n   * @param style - The style of the label\n   * @param points - An array of points label for label lines\n   */\n  constructor(\n    text: string,\n    style: NVLabel3DStyle,\n    points?: number[] | number[][],\n    anchor?: LabelAnchorPoint,\n    onClick?: (label: NVLabel3D) => void\n  ) {\n    this.text = text\n    this.style = style\n    this.points = points\n    this.anchor = anchor || LabelAnchorPoint.NONE\n    this.onClick = onClick\n  }\n}\n","import { vec3 } from 'gl-matrix'\nimport { NVMesh, MeshType } from './nvmesh.js'\nimport { NVUtilities } from './nvutilities.js'\nimport { NiivueObject3D } from './niivue-object3D.js'\nimport { NVMeshUtilities } from './nvmesh-utilities.js'\nimport { cmapper } from './colortables.js'\nimport { NVLabel3D, LabelTextAlignment, LabelLineTerminator } from './nvlabel.js'\nimport { Connectome, ConnectomeOptions, LegacyConnectome, NVConnectomeEdge, NVConnectomeNode } from './types.js'\nimport { log } from './logger.js'\n\nconst defaultOptions: ConnectomeOptions = {\n  name: 'untitled connectome',\n  nodeColormap: 'warm',\n  nodeColormapNegative: 'winter',\n  nodeMinColor: 0,\n  nodeMaxColor: 4,\n  nodeScale: 3,\n  edgeColormap: 'warm',\n  edgeColormapNegative: 'winter',\n  edgeMin: 2,\n  edgeMax: 6,\n  edgeScale: 1,\n  legendLineThickness: 0\n}\n\nexport type FreeSurferConnectome = {\n  data_type: string\n  points: Array<{\n    comments?: Array<{\n      text: string\n    }>\n    coordinates: {\n      x: number\n      y: number\n      z: number\n    }\n  }>\n}\n\n/**\n * Represents a connectome\n */\nexport class NVConnectome extends NVMesh {\n  gl: WebGL2RenderingContext\n  nodesChanged: EventTarget\n\n  constructor(gl: WebGL2RenderingContext, connectome: LegacyConnectome) {\n    super(new Float32Array([]), new Uint32Array([]), connectome.name, new Uint8Array([]), 1.0, true, gl, connectome)\n    this.gl = gl\n    // this.nodes = connectome.nodes;\n    // this.edges = connectome.edges;\n    // this.options = { ...defaultOptions, ...connectome };\n    this.type = MeshType.CONNECTOME\n    if (this.nodes) {\n      this.updateLabels()\n    }\n\n    this.nodesChanged = new EventTarget()\n  }\n\n  static convertLegacyConnectome(json: LegacyConnectome): Connectome {\n    const connectome: Connectome = { nodes: [], edges: [], ...defaultOptions }\n    for (const prop in json) {\n      if (prop in defaultOptions) {\n        const key = prop as keyof ConnectomeOptions\n        // @ts-expect-error -- this will work, as both extend ConnectomeOptions\n        connectome[key] = json[key]\n      }\n    }\n    const nodes = json.nodes\n    for (let i = 0; i < nodes.names.length; i++) {\n      connectome.nodes.push({\n        name: nodes.names[i],\n        x: nodes.X[i],\n        y: nodes.Y[i],\n        z: nodes.Z[i],\n        colorValue: nodes.Color[i],\n        sizeValue: nodes.Size[i]\n      })\n    }\n\n    for (let i = 0; i < nodes.names.length - 1; i++) {\n      for (let j = i + 1; j < nodes.names.length; j++) {\n        const colorValue = json.edges[i * nodes.names.length + j]\n        connectome.edges.push({\n          first: i,\n          second: j,\n          colorValue\n        })\n      }\n    }\n\n    return connectome\n  }\n\n  static convertFreeSurferConnectome(json: FreeSurferConnectome, colormap = 'warm'): Connectome {\n    let isValid = true\n    if (!('data_type' in json)) {\n      isValid = false\n    } else if (json.data_type !== 'fs_pointset') {\n      isValid = false\n    }\n    if (!('points' in json)) {\n      isValid = false\n    }\n    if (!isValid) {\n      throw Error('not a valid FreeSurfer json pointset')\n    }\n\n    const nodes = json.points.map((p) => ({\n      name: Array.isArray(p.comments) && p.comments.length > 0 && 'text' in p.comments[0] ? p.comments[0].text : '',\n      x: p.coordinates.x,\n      y: p.coordinates.y,\n      z: p.coordinates.z,\n      colorValue: 1,\n      sizeValue: 1,\n      metadata: p.comments\n    }))\n    const connectome = {\n      ...defaultOptions,\n      nodeColormap: colormap,\n      edgeColormap: colormap,\n      nodes,\n      edges: []\n    }\n    return connectome\n  }\n\n  updateLabels(): void {\n    const nodes = this.nodes as NVConnectomeNode[]\n    if (nodes && nodes.length > 0) {\n      // largest node\n      const largest = (nodes as NVConnectomeNode[]).reduce((a, b) => (a.sizeValue > b.sizeValue ? a : b)).sizeValue\n      let min, max\n\n      // Determine the minimum color value\n      if (typeof this.nodeMinColor !== 'undefined' && isFinite(this.nodeMinColor)) {\n        min = this.nodeMinColor\n      } else {\n        min = nodes[0].colorValue // Initialize min to the first node's colorValue\n        for (let i = 1; i < nodes.length; i++) {\n          if (nodes[i].colorValue < min) {\n            min = nodes[i].colorValue\n          }\n        }\n      }\n      // Determine the maximum color value\n      if (typeof this.nodeMaxColor !== 'undefined' && isFinite(this.nodeMaxColor)) {\n        max = this.nodeMaxColor\n      } else {\n        max = nodes[0].colorValue // Initialize max to the first node's colorValue\n        for (let i = 1; i < nodes.length; i++) {\n          if (nodes[i].colorValue > max) {\n            max = nodes[i].colorValue\n          }\n        }\n      }\n      const lut = cmapper.colormap(this.nodeColormap, this.colormapInvert)\n      const lutNeg = cmapper.colormap(this.nodeColormapNegative, this.colormapInvert)\n      const hasNeg = 'nodeColormapNegative' in this\n      const legendLineThickness = this.legendLineThickness ? this.legendLineThickness : 0.0\n\n      for (let i = 0; i < nodes.length; i++) {\n        let color = nodes[i].colorValue\n        let isNeg = false\n        if (hasNeg && color < 0) {\n          isNeg = true\n          color = -color\n        }\n\n        if (min < max) {\n          if (color < min) {\n            log.warn('color value lower than min')\n            continue\n          }\n          color = (color - min) / (max - min)\n        } else {\n          color = 1.0\n        }\n\n        color = Math.round(Math.max(Math.min(255, color * 255))) * 4\n        let rgba = [lut[color], lut[color + 1], lut[color + 2], 255]\n        if (isNeg) {\n          rgba = [lutNeg[color], lutNeg[color + 1], lutNeg[color + 2], 255]\n        }\n        rgba = rgba.map((c) => c / 255)\n        log.debug('adding label for ', nodes[i])\n        nodes[i].label = new NVLabel3D(\n          nodes[i].name,\n          {\n            textColor: rgba,\n            bulletScale: nodes[i].sizeValue / largest,\n            bulletColor: rgba,\n            lineWidth: legendLineThickness,\n            lineColor: rgba,\n            textScale: 1.0,\n            textAlignment: LabelTextAlignment.LEFT,\n            lineTerminator: LabelLineTerminator.NONE\n          },\n          [nodes[i].x, nodes[i].y, nodes[i].z]\n        )\n        log.debug('label for node:', nodes[i].label)\n      }\n    }\n  }\n\n  addConnectomeNode(node: NVConnectomeNode): void {\n    log.debug('adding node', node)\n    if (!this.nodes) {\n      throw new Error('nodes not defined')\n    }\n\n    ;(this.nodes as NVConnectomeNode[]).push(node)\n    this.updateLabels()\n    this.nodesChanged.dispatchEvent(new CustomEvent('nodeAdded', { detail: { node } }))\n  }\n\n  deleteConnectomeNode(node: NVConnectomeNode): void {\n    // delete any connected edges\n    const index = (this.nodes as NVConnectomeNode[]).indexOf(node)\n    const edges = this.edges as NVConnectomeEdge[]\n    if (edges) {\n      this.edges = edges.filter((e) => e.first !== index && e.second !== index)\n    }\n    this.nodes = (this.nodes as NVConnectomeNode[]).filter((n) => n !== node)\n\n    this.updateLabels()\n    this.updateConnectome(this.gl)\n    this.nodesChanged.dispatchEvent(new CustomEvent('nodeDeleted', { detail: { node } }))\n  }\n\n  updateConnectomeNodeByIndex(index: number, updatedNode: NVConnectomeNode): void {\n    ;(this.nodes as NVConnectomeNode[])[index] = updatedNode\n    this.updateLabels()\n    this.updateConnectome(this.gl)\n    this.nodesChanged.dispatchEvent(new CustomEvent('nodeChanged', { detail: { node: updatedNode } }))\n  }\n\n  updateConnectomeNodeByPoint(point: [number, number, number], updatedNode: NVConnectomeNode): void {\n    // TODO this was updating nodes in this.connectome.nodes\n    const nodes = this.nodes as NVConnectomeNode[]\n    if (!nodes) {\n      throw new Error('Node to update does not exist')\n    }\n    const node = nodes.find((node) => NVUtilities.arraysAreEqual([node.x, node.y, node.z], point))\n    if (!node) {\n      throw new Error(`Node with point ${point} to update does not exist`)\n    }\n    const index = nodes.findIndex((n) => n === node)\n    this.updateConnectomeNodeByIndex(index, updatedNode)\n  }\n\n  addConnectomeEdge(first: number, second: number, colorValue: number): NVConnectomeEdge {\n    const edges = this.edges as NVConnectomeEdge[]\n    let edge = edges.find((f) => (f.first === first || f.second === first) && f.first + f.second === first + second)\n    if (edge) {\n      return edge\n    }\n    edge = { first, second, colorValue }\n    edges.push(edge)\n    this.updateConnectome(this.gl)\n    return edge\n  }\n\n  deleteConnectomeEdge(first: number, second: number): NVConnectomeEdge {\n    const edges = this.edges as NVConnectomeEdge[]\n\n    const edge = edges.find((f) => (f.first === first || f.first === second) && f.first + f.second === first + second)\n    if (edge) {\n      this.edges = edges.filter((e) => e !== edge)\n    } else {\n      throw new Error(`edge between ${first} and ${second} not found`)\n    }\n    this.updateConnectome(this.gl)\n    return edge\n  }\n\n  findClosestConnectomeNode(point: number[], distance: number): NVConnectomeNode | null {\n    const nodes = this.nodes as NVConnectomeNode[]\n    if (!nodes || nodes.length === 0) {\n      return null\n    }\n\n    const closeNodes = nodes\n      .map((n, i) => ({\n        node: n,\n        distance: Math.sqrt(Math.pow(n.x - point[0], 2) + Math.pow(n.y - point[1], 2) + Math.pow(n.z - point[2], 2)),\n        index: i\n      }))\n      .filter((n) => n.distance < distance)\n      .sort((a, b) => a.distance - b.distance)\n    if (closeNodes.length > 0) {\n      return closeNodes[0].node\n    } else {\n      return null\n    }\n  }\n\n  updateConnectome(gl: WebGL2RenderingContext): void {\n    const tris: number[] = []\n    const pts: number[] = []\n    const rgba255: number[] = []\n    let lut = cmapper.colormap(this.nodeColormap, this.colormapInvert)\n    let lutNeg = cmapper.colormap(this.nodeColormapNegative, this.colormapInvert)\n    let hasNeg = 'nodeColormapNegative' in this\n\n    // issue1080 we can have nodes without edges, so edgeMin/Max need not be defined\n    if (this.nodeMinColor === undefined) {\n      this.nodeMinColor = NaN\n    }\n    if (this.nodeMaxColor === undefined) {\n      this.nodeMaxColor = NaN\n    }\n    // issue1080 we can have nodes without edges, so edgeMin/Max need not be defined\n\n    if (this.edgeMin === undefined) {\n      this.edgeMin = NaN\n    }\n    if (this.edgeMax === undefined) {\n      this.edgeMax = NaN\n    }\n    let min = this.nodeMinColor\n    let max = this.nodeMaxColor\n    if (!isFinite(min) || !isFinite(min)) {\n      const nodes = this.nodes as NVConnectomeNode[]\n      min = nodes[0].colorValue\n      max = nodes[0].colorValue\n      for (let i = 0; i < nodes.length; i++) {\n        min = Math.min(min, nodes[i].colorValue)\n        max = Math.max(max, nodes[i].colorValue)\n      }\n    }\n    // TODO these statements can be removed once the node types are cleaned up\n    const nodes = this.nodes as NVConnectomeNode[]\n    const nNode = nodes.length\n    for (let i = 0; i < nNode; i++) {\n      const radius = nodes[i].sizeValue * this.nodeScale\n      if (radius <= 0.0) {\n        continue\n      }\n      let color = nodes[i].colorValue\n      let isNeg = false\n      if (hasNeg && color < 0) {\n        isNeg = true\n        color = -color\n      }\n      if (min < max) {\n        if (color < min) {\n          continue\n        }\n        color = (color - min) / (max - min)\n      } else {\n        color = 1.0\n      }\n      color = Math.round(Math.max(Math.min(255, color * 255))) * 4\n      let rgba = [lut[color], lut[color + 1], lut[color + 2], 255]\n      if (isNeg) {\n        rgba = [lutNeg[color], lutNeg[color + 1], lutNeg[color + 2], 255]\n      }\n      const pt = vec3.fromValues(nodes[i].x, nodes[i].y, nodes[i].z)\n\n      NiivueObject3D.makeColoredSphere(pts, tris, rgba255, radius, pt, rgba)\n    }\n\n    lut = cmapper.colormap(this.edgeColormap, this.colormapInvert)\n    lutNeg = cmapper.colormap(this.edgeColormapNegative, this.colormapInvert)\n    hasNeg = 'edgeColormapNegative' in this\n    // TODO fix edge types\n    const edges = this.edges as NVConnectomeEdge[]\n    if (edges !== undefined && edges.length > 0) {\n      min = this.edgeMin\n      max = this.edgeMax\n      // issue 1080: autodetect range\n      if (!isFinite(min) || !isFinite(min)) {\n        min = edges[0].colorValue\n        max = edges[0].colorValue\n        for (let i = 0; i < edges.length; i++) {\n          min = Math.min(min, edges[i].colorValue)\n          max = Math.max(max, edges[i].colorValue)\n        }\n      }\n      for (const edge of edges) {\n        let color = edge.colorValue\n        const isNeg = hasNeg && color < 0\n        if (isNeg) {\n          color = -color\n        }\n        const radius = color * this.edgeScale\n        if (radius <= 0) {\n          continue\n        }\n        if (min < max) {\n          if (color < min) {\n            continue\n          }\n          color = (color - min) / (max - min)\n        } else {\n          color = 1.0\n        }\n        color = Math.round(Math.max(Math.min(255, color * 255))) * 4\n        let rgba = [lut[color], lut[color + 1], lut[color + 2], 255]\n        if (isNeg) {\n          rgba = [lutNeg[color], lutNeg[color + 1], lutNeg[color + 2], 255]\n        }\n        const pti = vec3.fromValues(nodes[edge.first].x, nodes[edge.first].y, nodes[edge.first].z)\n        const ptj = vec3.fromValues(nodes[edge.second].x, nodes[edge.second].y, nodes[edge.second].z)\n        NiivueObject3D.makeColoredCylinder(pts, tris, rgba255, pti, ptj, radius, rgba)\n      }\n    }\n\n    const pts32 = new Float32Array(pts)\n    const tris32 = new Uint32Array(tris)\n    // calculate spatial extent of connectome: user adjusting node sizes may influence size\n    const obj = NVMeshUtilities.getExtents(pts32)\n\n    this.furthestVertexFromOrigin = obj.mxDx\n    this.extentsMin = obj.extentsMin\n    this.extentsMax = obj.extentsMax\n    const posNormClr = this.generatePosNormClr(pts32, tris32, new Uint8Array(rgba255))\n    // generate webGL buffers and vao\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.indexBuffer)\n    gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, Uint32Array.from(tris32), gl.STATIC_DRAW)\n    gl.bindBuffer(gl.ARRAY_BUFFER, this.vertexBuffer)\n    gl.bufferData(gl.ARRAY_BUFFER, Float32Array.from(posNormClr), gl.STATIC_DRAW)\n    this.indexCount = tris.length\n  }\n\n  updateMesh(gl: WebGL2RenderingContext): void {\n    this.updateConnectome(gl)\n    this.updateLabels()\n  }\n\n  json(): Connectome {\n    const json: Partial<Connectome> = {}\n    for (const prop in this) {\n      if (prop in defaultOptions || prop === 'nodes' || prop === 'edges') {\n        // @ts-expect-error this is not very ethical; returning every field explicitly would probably be better\n        json[prop as keyof Connectome] = this[prop]\n      }\n    }\n    return json as Connectome\n  }\n\n  /**\n   * Factory method to create connectome from options\n   */\n  static async loadConnectomeFromUrl(gl: WebGL2RenderingContext, url: string): Promise<NVConnectome> {\n    const response = await fetch(url)\n    const json = await response.json()\n    return new NVConnectome(gl, json)\n  }\n}\n","import { mat4, vec3, vec4 } from 'gl-matrix'\nimport { log } from '../logger.js'\nimport { NiftiHeader, Volume } from '../types.js'\nimport { NVUtilities } from '../nvutilities.js'\n\n// rotate image to match right-anterior-superior voxel order\nexport function img2ras16(volume: Volume): Int16Array {\n  // return image oriented to RAS space as int16\n  const dims = volume.hdr.dims // reverse to original\n  const perm = volume.permRAS\n  const vx = dims[1] * dims[2] * dims[3]\n  // this.drawBitmap = new Uint8Array(vx);\n  const img16 = new Int16Array(vx)\n  const layout = [0, 0, 0]\n  for (let i = 0; i < 3; i++) {\n    for (let j = 0; j < 3; j++) {\n      if (Math.abs(perm[i]) - 1 !== j) {\n        continue\n      }\n      layout[j] = i * Math.sign(perm[i])\n    }\n  }\n  let stride = 1\n  const instride = [1, 1, 1]\n  const inflip = [false, false, false]\n  for (let i = 0; i < layout.length; i++) {\n    for (let j = 0; j < layout.length; j++) {\n      const a = Math.abs(layout[j])\n      if (a !== i) {\n        continue\n      }\n      instride[j] = stride\n      // detect -0: https://medium.com/coding-at-dawn/is-negative-zero-0-a-number-in-javascript-c62739f80114\n      if (layout[j] < 0 || Object.is(layout[j], -0)) {\n        inflip[j] = true\n      }\n      stride *= dims[j + 1]\n    }\n  }\n  let xlut = NVUtilities.range(0, dims[1] - 1, 1)\n  if (inflip[0]) {\n    xlut = NVUtilities.range(dims[1] - 1, 0, -1)\n  }\n  for (let i = 0; i < dims[1]; i++) {\n    xlut[i] *= instride[0]\n  }\n  let ylut = NVUtilities.range(0, dims[2] - 1, 1)\n  if (inflip[1]) {\n    ylut = NVUtilities.range(dims[2] - 1, 0, -1)\n  }\n  for (let i = 0; i < dims[2]; i++) {\n    ylut[i] *= instride[1]\n  }\n  let zlut = NVUtilities.range(0, dims[3] - 1, 1)\n  if (inflip[2]) {\n    zlut = NVUtilities.range(dims[3] - 1, 0, -1)\n  }\n  for (let i = 0; i < dims[3]; i++) {\n    zlut[i] *= instride[2]\n  }\n  // convert data\n  let j = 0\n  for (let z = 0; z < dims[3]; z++) {\n    for (let y = 0; y < dims[2]; y++) {\n      for (let x = 0; x < dims[1]; x++) {\n        img16[xlut[x] + ylut[y] + zlut[z]] = volume.img[j]\n        j++\n      }\n    }\n  }\n  return img16\n}\n\nfunction nice(x: number, round: boolean): number {\n  const exp = Math.floor(Math.log(x) / Math.log(10))\n  const f = x / Math.pow(10, exp)\n  let nf\n  if (round) {\n    if (f < 1.5) {\n      nf = 1\n    } else if (f < 3) {\n      nf = 2\n    } else if (f < 7) {\n      nf = 5\n    } else {\n      nf = 10\n    }\n  } else {\n    if (f <= 1) {\n      nf = 1\n    } else if (f <= 2) {\n      nf = 2\n    } else if (f <= 5) {\n      nf = 5\n    } else {\n      nf = 10\n    }\n  }\n  return nf * Math.pow(10, exp)\n}\n\nfunction loose_label(min: number, max: number, ntick = 4): [number, number, number, boolean] {\n  const range = nice(max - min, false)\n  const d = nice(range / (ntick - 1), true)\n  const graphmin = Math.floor(min / d) * d\n  const graphmax = Math.ceil(max / d) * d\n  const perfect = graphmin === min && graphmax === max\n  return [d, graphmin, graphmax, perfect]\n}\n\n// \"Nice Numbers for Graph Labels\", Graphics Gems, pp 61-63\n// https://github.com/cenfun/nice-ticks/blob/master/docs/Nice-Numbers-for-Graph-Labels.pdf\nexport function tickSpacing(mn: number, mx: number): number[] {\n  let v = loose_label(mn, mx, 3)\n  if (!v[3]) {\n    v = loose_label(mn, mx, 5)\n  }\n  if (!v[3]) {\n    v = loose_label(mn, mx, 4)\n  }\n  if (!v[3]) {\n    v = loose_label(mn, mx, 3)\n  }\n  if (!v[3]) {\n    v = loose_label(mn, mx, 5)\n  }\n  return [v[0], v[1], v[2]]\n}\n\n// convert degrees to radians\nexport function deg2rad(deg: number): number {\n  return deg * (Math.PI / 180.0)\n}\n\nexport function negMinMax(min: number, max: number, minNeg: number, maxNeg: number): [number, number] {\n  let mn = -min\n  let mx = -max\n  if (isFinite(minNeg) && isFinite(maxNeg)) {\n    mn = minNeg\n    mx = maxNeg\n  }\n  if (mn > mx) {\n    ;[mn, mx] = [mx, mn]\n  }\n  return [mn, mx]\n}\n\nexport function swizzleVec3(vec: vec3, order = [0, 1, 2]): vec3 {\n  const vout = vec3.create()\n  vout[0] = vec[order[0]]\n  vout[1] = vec[order[1]]\n  vout[2] = vec[order[2]]\n  return vout\n}\n\n// return boolean is 2D slice view is radiological\n// n.b. ambiguous for pure sagittal views\n// TODO: this doesn't return a boolean.\nexport function isRadiological(mtx: mat4): number {\n  const vRight = vec4.fromValues(1, 0, 0, 0) // pure right vector\n  const vRotated = vec4.create()\n  vec4.transformMat4(vRotated, vRight, mtx)\n  return vRotated[0]\n}\n\nexport function unProject(winX: number, winY: number, winZ: number, mvpMatrix: mat4): vec4 {\n  // https://github.com/bringhurst/webgl-unproject\n  const inp = vec4.fromValues(winX, winY, winZ, 1.0)\n  const finalMatrix = mat4.clone(mvpMatrix)\n  // mat.mat4.multiply(finalMatrix, model, proj);\n  mat4.invert(finalMatrix, finalMatrix)\n  // view is leftTopWidthHeight\n  /* Map to range -1 to 1 */\n  inp[0] = inp[0] * 2 - 1\n  inp[1] = inp[1] * 2 - 1\n  inp[2] = inp[2] * 2 - 1\n  const out = vec4.create()\n  vec4.transformMat4(out, inp, finalMatrix)\n  if (out[3] === 0.0) {\n    return out\n  } // error\n  out[0] /= out[3]\n  out[1] /= out[3]\n  out[2] /= out[3]\n  return out\n}\n\nexport function unpackFloatFromVec4i(val: Uint8Array): number {\n  // Convert 32-bit rgba to float32\n  // https://github.com/rii-mango/Papaya/blob/782a19341af77a510d674c777b6da46afb8c65f1/src/js/viewer/screensurface.js#L552\n  const bitSh = [1.0 / (256.0 * 256.0 * 256.0), 1.0 / (256.0 * 256.0), 1.0 / 256.0, 1.0]\n  return (val[0] * bitSh[0] + val[1] * bitSh[1] + val[2] * bitSh[2] + val[3] * bitSh[3]) / 255.0\n}\n\n// https://stackoverflow.com/questions/11409895/whats-the-most-elegant-way-to-cap-a-number-to-a-segment\nexport function clamp(value: number, min: number, max: number): number {\n  return Math.min(Math.max(value, min), max)\n}\n\n// Internal function to compress drawing using run length encoding\n// inputs\n// data: Uint8Array to compress\n// output\n// returns rle compressed Uint8Array\nexport function encodeRLE(data: Uint8Array): Uint8Array {\n  // https://en.wikipedia.org/wiki/PackBits\n  // run length encoding\n  // input and output are Uint8Array\n  // Will compress data with long runs up to x64\n  // Worst case encoded size is ~1% larger than input\n  const dl = data.length // input length\n  let dp = 0 // input position\n  // worst case: run length encoding (1+1/127) times larger than input\n  const r = new Uint8Array(dl + Math.ceil(0.01 * dl))\n  const rI = new Int8Array(r.buffer) // typecast as header can be negative\n  let rp = 0 // run length position\n  while (dp < dl) {\n    // for each byte in input\n    let v = data[dp]\n    dp++\n    let rl = 1 // run length\n    while (rl < 129 && dp < dl && data[dp] === v) {\n      dp++\n      rl++\n    }\n    if (rl > 1) {\n      // header\n      rI[rp] = -rl + 1\n      rp++\n      r[rp] = v\n      rp++\n      continue\n    }\n    // count literal length\n    while (dp < dl) {\n      if (rl > 127) {\n        break\n      }\n      if (dp + 2 < dl) {\n        if (v !== data[dp] && data[dp + 2] === data[dp] && data[dp + 1] === data[dp]) {\n          break\n        }\n      }\n      v = data[dp]\n      dp++\n      rl++\n    }\n    // write header\n    r[rp] = rl - 1\n    rp++\n    for (let i = 0; i < rl; i++) {\n      r[rp] = data[dp - rl + i]\n      rp++\n    }\n  }\n  log.info('PackBits ' + dl + ' -> ' + rp + ' bytes (x' + dl / rp + ')')\n  return r.slice(0, rp)\n}\n\n// Internal function to decompress drawing using run length encoding\n// inputs\n// rle: packbits compressed stream\n// decodedlen: size of uncompressed data\n// output\n// returns Uint8Array of decodedlen bytes\nexport function decodeRLE(rle: Uint8Array, decodedlen: number): Uint8Array {\n  const r = new Uint8Array(rle.buffer)\n  const rI = new Int8Array(r.buffer) // typecast as header can be negative\n  let rp = 0 // input position in rle array\n  // d: output uncompressed data array\n  const d = new Uint8Array(decodedlen)\n  let dp = 0 // output position in decoded array\n  while (rp < r.length) {\n    // read header\n    const hdr = rI[rp]\n    rp++\n    if (hdr < 0) {\n      // write run\n      const v = rI[rp]\n      rp++\n      for (let i = 0; i < 1 - hdr; i++) {\n        d[dp] = v\n        dp++\n      }\n    } else {\n      // write literal\n      for (let i = 0; i < hdr + 1; i++) {\n        d[dp] = rI[rp]\n        rp++\n        dp++\n      }\n    }\n  }\n  return d\n}\n\n/**\n * Scale the raw intensity values by the header scale slope and intercept\n * @param hdr - the header object\n * @param raw - the raw intensity values\n * @returns the scaled intensity values\n * @internal\n */\nexport function intensityRaw2Scaled(hdr: NiftiHeader, raw: number): number {\n  if (hdr.scl_slope === 0) {\n    hdr.scl_slope = 1.0\n  }\n  return raw * hdr.scl_slope + hdr.scl_inter\n}\n","import { WebSocketSubject, webSocket } from 'rxjs/webSocket'\nimport { v4 as uuidv4 } from '@lukeed/uuid'\nimport { Message, NVMESSAGE } from './nvmessage.js'\nimport { log } from './logger.js'\n\n/**\n * SessionUser specifies display name, user id and user key\n * @param userKey - Used to protect user properties\n */\nexport class SessionUser {\n  id: string\n  displayName: string\n  key: string\n  properties: Map<string, string>\n  constructor(displayName?: string, userId?: string, userKey?: string, userProperties?: Map<string, string>) {\n    this.id = userId || uuidv4()\n    this.displayName = displayName || `user-${this.id}`\n    this.key = userKey || uuidv4()\n    this.properties = userProperties || new Map()\n  }\n}\n\n/**\n * Checks if local storage is available\n * @param type - type of local storage requested\n * @returns whether or not the specified storage type is available\n */\nfunction storageAvailable(type: 'localStorage' | 'sessionStorage'): boolean {\n  const storage = window[type]\n  const test = 'test'\n  try {\n    storage.setItem(test, test)\n    storage.removeItem(test)\n    return true\n  } catch (e) {\n    return false\n  }\n}\n\n/**\n * SessionBus is for synchronizing both remote and local instances\n */\nexport class SessionBus {\n  userList: SessionUser[]\n  user: SessionUser\n  userQueueName?: string\n  userListName?: string\n\n  onMessageCallback: (newMessage: Message) => void\n  isConnectedToServer = false\n  isController = false\n  sessionScene = {}\n  sessionKey: string\n  sessionName: string\n  sessionSceneName: string\n  serverConnection$: WebSocketSubject<Message> | null = null\n\n  constructor(\n    name: string,\n    user: SessionUser,\n    onMessageCallback: (newMessage: Message) => void,\n    serverURL = '',\n    sessionKey = ''\n  ) {\n    this.userList = []\n    this.user = user || new SessionUser('anonymous')\n\n    this.onMessageCallback = onMessageCallback\n\n    this.sessionScene = {}\n    this.sessionKey = sessionKey || uuidv4()\n\n    this.sessionName = name\n    this.sessionSceneName = `session-${name}-scene`\n\n    if (serverURL) {\n      // remote\n      this.connectToServer(serverURL, name)\n      this.subscribeToServer()\n      this.isConnectedToServer = true\n      if (this.serverConnection$ !== null) {\n        this.serverConnection$.next({\n          op: NVMESSAGE.CREATE,\n          key: this.sessionKey\n        })\n      }\n    } else {\n      // local\n      if (!storageAvailable('localStorage')) {\n        throw new Error('Local storage unavailable')\n      }\n\n      this.userQueueName = `user-${this.user.id}-q`\n      this.userListName = `${name}-user-list`\n\n      // add our user to the list\n      this.userList = JSON.parse(localStorage.getItem(this.userListName) || '[]')\n      this.userList.push(this.user)\n      localStorage.setItem(this.userListName, JSON.stringify(this.userList))\n\n      // create our message queue\n      localStorage.setItem(this.userQueueName, JSON.stringify([]))\n\n      window.addEventListener('storage', this.localStorageEventListener.bind(this))\n    }\n  }\n\n  sendSessionMessage(message: Message): void {\n    message.from = this.user.id\n    if (this.isConnectedToServer && this.serverConnection$ !== null) {\n      this.serverConnection$.next({\n        ...message,\n        key: this.sessionKey,\n        userKey: this.user.key\n      } as Message)\n    } else {\n      this.sendLocalMessage(message)\n    }\n  }\n\n  // Remote\n  // not included in public docs\n  // Internal function to connect to web socket server\n  connectToServer(serverURL: string, sessionName: string): void {\n    const url = new URL(serverURL)\n    url.pathname = 'websockets'\n    url.search = '?session=' + sessionName\n    this.serverConnection$ = webSocket(url.href)\n    log.debug(url.href)\n  }\n\n  // Internal function called after a connection with the server has been made\n  subscribeToServer(): void {\n    if (this.serverConnection$ !== null) {\n      this.serverConnection$.subscribe({\n        next: (msg) => {\n          this.onMessageCallback(msg)\n        }, // Called whenever there is a message from the server.\n        error: (err) => log.error(err), // Called if at any point WebSocket API signals some kind of error.\n        complete: () => log.debug('complete') // Called when connection is closed (for whatever reason).\n      })\n    }\n  }\n\n  sendLocalMessage(message: Message): void {\n    // add the message for each client\n    for (const user of this.userList) {\n      if (user.id === this.user.id) {\n        continue\n      }\n      const userQueueName = `user-${user.id}-q`\n      const userQueueText = localStorage.getItem(userQueueName)\n      const userQueue = userQueueText ? JSON.parse(userQueueText) : []\n      userQueue.push(message)\n      localStorage.setItem(userQueueName, JSON.stringify(userQueue))\n    }\n  }\n\n  localStorageEventListener(e: StorageEvent): void {\n    // discard empty events\n    if (!e.newValue) {\n      return\n    }\n\n    // is this message for us?\n    switch (e.key) {\n      case this.userListName:\n        {\n          const newUserList = JSON.parse(e.newValue) as SessionUser[]\n          const oldUserList = JSON.parse(e.oldValue ?? '[]') as SessionUser[]\n          this.userList = newUserList\n          // compare new and old values\n          const newUsers = newUserList.filter((u) => !oldUserList.map((o) => o.id).includes(u.id))\n          for (const newUser of newUsers) {\n            this.onMessageCallback({\n              op: NVMESSAGE.USER_JOINED,\n              user: newUser\n            })\n          }\n        }\n        break\n      case this.userQueueName:\n        {\n          const messages = JSON.parse(e.newValue)\n          for (const message of messages) {\n            if (this.onMessageCallback) {\n              this.onMessageCallback(message)\n            }\n          }\n          // reset our message queue\n          localStorage.setItem(this.userQueueName ?? '', JSON.stringify([]))\n        }\n        break\n    }\n  }\n}\n","import { SessionBus, SessionUser } from './session-bus.js'\nimport { ImageFromUrlOptions, NVImage } from './nvimage/index.js'\nimport { LoadFromUrlParams, NVMesh } from './nvmesh.js'\nimport { Niivue } from './niivue/index.js'\nimport { Message, NVMESSAGE } from './nvmessage.js'\nimport { log } from './logger.js'\n\n/**\n * NVController is for synchronizing both remote and local instances of Niivue\n * @ignore\n */\nexport class NVController {\n  niivue: Niivue\n  mediaUrlMap: Map<string, unknown>\n  isInSession = false\n  user?: SessionUser\n  sessionBus?: SessionBus\n\n  // events for external consumers\n  onFrameChange = (_volume: NVImage, _index: number): void => {}\n\n  /**\n   * @param niivue - niivue object to control\n   */\n  constructor(niivue: Niivue) {\n    this.niivue = niivue\n    this.mediaUrlMap = new Map()\n\n    // bind all of our events\n\n    // 2D\n    this.niivue.onLocationChange = this.onLocationChangeHandler.bind(this)\n\n    // 3D\n    this.niivue.onZoom3DChange = this.onZoom3DChangeHandler.bind(this)\n    this.niivue.scene.onAzimuthElevationChange = this.onAzimuthElevationChangeHandler.bind(this)\n    this.niivue.onClipPlaneChange = this.onClipPlaneChangeHandler.bind(this)\n\n    // volume handlers\n    this.niivue.onVolumeAddedFromUrl = this.onVolumeAddedFromUrlHandler.bind(this)\n    this.niivue.onVolumeWithUrlRemoved = this.onVolumeWithUrlRemovedHandler.bind(this)\n\n    // mesh handlers\n    this.niivue.onMeshAddedFromUrl = this.onMeshAddedFromUrlHandler.bind(this)\n    this.niivue.onMeshWithUrlRemoved = this.onMeshWithUrlRemovedHandler.bind(this)\n    this.niivue.onCustomMeshShaderAdded = this.onCustomMeshShaderAddedHandler.bind(this)\n    this.niivue.onMeshShaderChanged = this.onMeshShaderChanged.bind(this)\n    this.niivue.onMeshPropertyChanged = this.onMeshPropertyChanged.bind(this)\n\n    // 4D\n    this.niivue.onFrameChange = this.onFrameChangeHandler.bind(this)\n\n    // volume specific handlers\n    for (const volume of this.niivue.volumes) {\n      volume.onColormapChange = this.onColormapChangeHandler.bind(this)\n      volume.onOpacityChange = this.onOpacityChangeHandler.bind(this)\n    }\n  }\n\n  // TODO location type\n  onLocationChangeHandler(location: unknown): void {\n    log.debug(location)\n  }\n\n  addVolume(volume: NVImage, url: string): void {\n    this.niivue.volumes.push(volume)\n    const idx = this.niivue.volumes.length === 1 ? 0 : this.niivue.volumes.length - 1\n    this.niivue.setVolume(volume, idx)\n    this.niivue.mediaUrlMap.set(volume, url)\n  }\n\n  addMesh(mesh: NVMesh, url: string): void {\n    this.niivue.meshes.push(mesh)\n    const idx = this.niivue.meshes.length === 1 ? 0 : this.niivue.meshes.length - 1\n    this.niivue.setMesh(mesh, idx)\n    this.niivue.mediaUrlMap.set(mesh, url)\n  }\n\n  onNewMessage(msg: Message): void {\n    switch (msg.op) {\n      case NVMESSAGE.ZOOM:\n        // TODO was _volScaleMultiplier, doesn't exist.\n        this.niivue.volScaleMultiplier = msg.zoom\n        break\n      case NVMESSAGE.CLIP_PLANE:\n        this.niivue.scene.clipPlane = msg.clipPlane\n        break\n      case NVMESSAGE.AZIMUTH_ELEVATION:\n        this.niivue.scene._elevation = msg.elevation\n        this.niivue.scene._azimuth = msg.azimuth\n        break\n      case NVMESSAGE.FRAME_CHANGED:\n        {\n          const volume = this.niivue.getMediaByUrl(msg.url) as NVImage\n          if (volume) {\n            volume.frame4D = msg.index\n          }\n        }\n        break\n      case NVMESSAGE.VOLUME_ADDED_FROM_URL:\n        if (!this.niivue.getMediaByUrl(msg.imageOptions.url)) {\n          NVImage.loadFromUrl(msg.imageOptions)\n            .then((volume) => {\n              if (volume) {\n                this.addVolume(volume, msg.imageOptions.url)\n              }\n            })\n            .catch((e) => {\n              if (e) {\n                throw e\n              }\n            })\n        }\n\n        break\n      case NVMESSAGE.VOLUME_WITH_URL_REMOVED:\n        {\n          const volume = this.niivue.getMediaByUrl(msg.url)\n          if (volume) {\n            this.niivue.setVolume(volume as NVImage, -1)\n            this.niivue.mediaUrlMap.delete(volume)\n          }\n        }\n        break\n      case NVMESSAGE.COLORMAP_CHANGED:\n        {\n          const volume = this.niivue.getMediaByUrl(msg.url) as NVImage\n          volume._colormap = msg.colormap\n          this.niivue.updateGLVolume()\n        }\n        break\n\n      case NVMESSAGE.OPACITY_CHANGED:\n        {\n          const volume = this.niivue.getMediaByUrl(msg.url) as NVImage\n          volume._opacity = msg.opacity\n          this.niivue.updateGLVolume()\n        }\n        break\n      case NVMESSAGE.MESH_FROM_URL_ADDED:\n        if (!this.niivue.getMediaByUrl(msg.meshOptions.url)) {\n          msg.meshOptions.gl = this.niivue.gl!\n          NVMesh.loadFromUrl(msg.meshOptions)\n            .then((mesh) => {\n              this.addMesh(mesh, msg.meshOptions.url)\n            })\n            .catch((e) => {\n              if (e) {\n                throw e\n              }\n            })\n        }\n        break\n      case NVMESSAGE.MESH_WITH_URL_REMOVED:\n        {\n          const mesh = this.niivue.getMediaByUrl(msg.url)\n          if (mesh) {\n            this.niivue.setMesh(mesh as NVMesh, -1)\n            this.niivue.mediaUrlMap.delete(mesh)\n          }\n        }\n        break\n      case NVMESSAGE.CUSTOM_SHADER_ADDED:\n        {\n          const shader = this.niivue.createCustomMeshShader(msg.fragmentShaderText, msg.name)\n          this.niivue.meshShaders.push(shader)\n        }\n        break\n\n      case NVMESSAGE.SHADER_CHANGED:\n        this.niivue.meshes[msg.meshIndex].meshShaderIndex = msg.shaderIndex\n        this.niivue.updateGLVolume()\n        break\n\n      case NVMESSAGE.MESH_PROPERTY_CHANGED:\n        this.niivue.meshes[msg.meshIndex].setProperty(msg.key as keyof NVMesh, msg.val, this.niivue.gl!)\n        break\n    }\n    this.niivue.drawScene()\n  }\n\n  /**\n   * Connects to existing session or creates new session\n   */\n  connectToSession(sessionName: string, user?: SessionUser, serverBaseUrl?: string, sessionKey?: string): void {\n    this.user = user || new SessionUser()\n    this.sessionBus = new SessionBus(sessionName, this.user, this.onNewMessage.bind(this), serverBaseUrl, sessionKey)\n    this.isInSession = true\n  }\n\n  /**\n   * Zoom level has changed\n   */\n  onZoom3DChangeHandler(zoom: number): void {\n    if (this.isInSession && this.sessionBus) {\n      this.sessionBus.sendSessionMessage({\n        op: NVMESSAGE.ZOOM,\n        zoom\n      })\n    }\n  }\n\n  /**\n   * Azimuth and/or elevation has changed\n   */\n  onAzimuthElevationChangeHandler(azimuth: number, elevation: number): void {\n    if (this.isInSession && this.sessionBus) {\n      this.sessionBus.sendSessionMessage({\n        op: NVMESSAGE.AZIMUTH_ELEVATION,\n        azimuth,\n        elevation\n      })\n    }\n  }\n\n  /**\n   * Clip plane has changed\n   */\n  onClipPlaneChangeHandler(clipPlane: number[]): void {\n    if (this.isInSession && this.sessionBus) {\n      this.sessionBus.sendSessionMessage({\n        op: NVMESSAGE.CLIP_PLANE,\n        clipPlane\n      })\n    }\n  }\n\n  /**\n   * Add an image and notify subscribers\n   */\n  onVolumeAddedFromUrlHandler(imageOptions: ImageFromUrlOptions, volume: NVImage): void {\n    if (this.isInSession && this.sessionBus) {\n      log.debug(imageOptions)\n      this.sessionBus.sendSessionMessage({\n        op: NVMESSAGE.VOLUME_ADDED_FROM_URL,\n        imageOptions\n      })\n    }\n    volume.onColormapChange = this.onColormapChangeHandler.bind(this)\n    volume.onOpacityChange = this.onOpacityChangeHandler.bind(this)\n  }\n\n  /**\n   * A volume has been added\n   */\n  onImageLoadedHandler(volume: NVImage): void {\n    volume.onColormapChange = this.onColormapChangeHandler.bind(this)\n    volume.onOpacityChange = this.onOpacityChangeHandler.bind(this)\n    if (this.isInSession && this.sessionBus && this.niivue.mediaUrlMap.has(volume)) {\n      const url = this.niivue.mediaUrlMap.get(volume)\n      this.sessionBus.sendSessionMessage({\n        // TODO this was \"volume with url added\", but there is VOLUME_ADDED_FROM_URL -- not sure if that is meant?\n        // That would break the switch statement above\n        op: NVMESSAGE.VOLUME_LOADED_FROM_URL,\n        url: url!\n      })\n    }\n  }\n\n  /**\n   * Notifies other users that a volume has been removed\n   */\n  onVolumeWithUrlRemovedHandler(url: string): void {\n    if (this.isInSession && this.sessionBus) {\n      this.sessionBus.sendSessionMessage({\n        op: NVMESSAGE.VOLUME_WITH_URL_REMOVED,\n        url\n      })\n    }\n  }\n\n  /**\n   * Notifies that a mesh has been loaded by URL\n   */\n  onMeshAddedFromUrlHandler(meshOptions: LoadFromUrlParams): void {\n    log.debug('mesh loaded from url')\n    log.debug(meshOptions)\n    if (this.isInSession && this.sessionBus) {\n      this.sessionBus.sendSessionMessage({\n        op: NVMESSAGE.MESH_FROM_URL_ADDED,\n        meshOptions\n      })\n    }\n  }\n\n  /**\n   * Notifies that a mesh has been added\n   */\n  onMeshLoadedHandler(mesh: NVMesh): void {\n    log.debug('mesh has been added')\n    log.debug(mesh)\n  }\n\n  onMeshWithUrlRemovedHandler(url: string): void {\n    if (this.isInSession && this.sessionBus) {\n      this.sessionBus.sendSessionMessage({\n        op: NVMESSAGE.MESH_WITH_URL_REMOVED,\n        url\n      })\n    }\n  }\n\n  /**\n   *\n   * @param volume - volume that has changed color maps\n   */\n  onColormapChangeHandler(volume: NVImage): void {\n    if (this.isInSession && this.sessionBus && this.niivue.mediaUrlMap.has(volume)) {\n      const url = this.niivue.mediaUrlMap.get(volume)\n      const colormap = volume.colormap\n      this.sessionBus.sendSessionMessage({\n        op: NVMESSAGE.COLORMAP_CHANGED,\n        url: url!,\n        colormap\n      })\n    }\n  }\n\n  /**\n   * @param volume - volume that has changed opacity\n   */\n  onOpacityChangeHandler(volume: NVImage): void {\n    if (this.isInSession && this.sessionBus && this.niivue.mediaUrlMap.has(volume)) {\n      const url = this.niivue.mediaUrlMap.get(volume)\n      const opacity = volume.opacity\n      this.sessionBus.sendSessionMessage({\n        op: NVMESSAGE.OPACITY_CHANGED,\n        url: url!,\n        opacity\n      })\n    }\n  }\n\n  /**\n   * Frame for 4D image has changed\n   */\n  onFrameChangeHandler(volume: NVImage, index: number): void {\n    log.debug('frame has changed to ' + index)\n    log.debug(volume)\n    if (this.niivue.mediaUrlMap.has(volume) && this.isInSession && this.sessionBus) {\n      const url = this.niivue.mediaUrlMap.get(volume)\n      this.sessionBus.sendSessionMessage({\n        op: NVMESSAGE.FRAME_CHANGED,\n        url: url!,\n        index\n      })\n    }\n    this.onFrameChange(volume, index)\n  }\n\n  /**\n   * Custom mesh shader has been added\n   * @param fragmentShaderText - shader code to be compiled\n   * @param name - name of shader, can be used as index\n   */\n  onCustomMeshShaderAddedHandler(fragmentShaderText: string, name: string): void {\n    if (this.isInSession && this.sessionBus) {\n      this.sessionBus.sendSessionMessage({\n        op: NVMESSAGE.CUSTOM_SHADER_ADDED,\n        fragmentShaderText,\n        name\n      })\n    }\n  }\n\n  /**\n   * Mesh shader has changed\n   * @param meshIndex - index of mesh\n   * @param shaderIndex - index of shader\n   */\n  onMeshShaderChanged(meshIndex: number, shaderIndex: number): void {\n    if (this.isInSession && this.sessionBus) {\n      this.sessionBus.sendSessionMessage({\n        op: NVMESSAGE.SHADER_CHANGED,\n        meshIndex,\n        shaderIndex\n      })\n    }\n  }\n\n  /**\n   * Mesh property has been changed\n   * @param meshIndex - index of mesh\n   * @param key - property index\n   * @param val - property value\n   */\n  onMeshPropertyChanged(meshIndex: number, key: string, val: unknown): void {\n    if (this.isInSession && this.sessionBus) {\n      log.debug(NVMESSAGE.MESH_PROPERTY_CHANGED)\n      this.sessionBus.sendSessionMessage({\n        op: NVMESSAGE.MESH_PROPERTY_CHANGED,\n        meshIndex,\n        key,\n        val\n      })\n    }\n  }\n}\n"],"mappings":";;;;;;;;;AAAA,SAAS,QAAAA,OAAM,MAAM,QAAAC,QAAM,QAAAC,aAAY;;;ACErC,cAAW;;;ACCb,IAAM,OAAN,MAAM,KAAI;AAAA,EAGR,YAAY,EAAE,OAAO,UAAU,QAAQ,OAAO,IAAI,CAAC,GAAG;AAFtD;AACA;AAEE,SAAK,OAAO,GAAG,IAAI;AACnB,SAAK,QAAQ;AAAA,EACf;AAAA,EAaA,SAAS,MAAuB;AAC9B,QAAI,KAAI,OAAO,KAAK,KAAK,IAAI,KAAI,OAAO,OAAO;AAC7C;AAAA,IACF;AAEA,YAAQ,MAAM,GAAG,KAAK,IAAI,UAAU,GAAG,IAAI;AAAA,EAC7C;AAAA,EAEA,QAAQ,MAAuB;AAC7B,QAAI,KAAI,OAAO,KAAK,KAAK,IAAI,KAAI,OAAO,MAAM;AAC5C;AAAA,IACF;AAEA,YAAQ,KAAK,GAAG,KAAK,IAAI,SAAS,GAAG,IAAI;AAAA,EAC3C;AAAA,EAEA,QAAQ,MAAuB;AAC7B,QAAI,KAAI,OAAO,KAAK,KAAK,IAAI,KAAI,OAAO,MAAM;AAC5C;AAAA,IACF;AAEA,YAAQ,KAAK,GAAG,KAAK,IAAI,SAAS,GAAG,IAAI;AAAA,EAC3C;AAAA,EAEA,SAAS,MAAuB;AAC9B,QAAI,KAAI,OAAO,KAAK,KAAK,IAAI,KAAI,OAAO,OAAO;AAC7C;AAAA,IACF;AAEA,YAAQ,MAAM,GAAG,KAAK,IAAI,UAAU,GAAG,IAAI;AAAA,EAC7C;AAAA,EAEA,SAAS,MAAuB;AAC9B,QAAI,KAAI,OAAO,KAAK,KAAK,IAAI,KAAI,OAAO,OAAO;AAC7C;AAAA,IACF;AAEA,YAAQ,MAAM,GAAG,KAAK,IAAI,UAAU,GAAG,IAAI;AAAA,EAC7C;AAAA,EAEA,YAAY,OAAqB;AAC/B,SAAK,QAAQ;AAAA,EACf;AAAA,EAEA,QAAQ,MAAoB;AAC1B,SAAK,OAAO;AAAA,EACd;AACF;AAAA;AAAA;AAxDE,cAVI,MAUG,UAAsB;AAAA,EAC3B,OAAO;AAAA,EACP,MAAM;AAAA,EACN,MAAM;AAAA,EACN,OAAO;AAAA,EACP,OAAO;AAAA,EACP,QAAQ;AACV;AAjBF,IAAM,MAAN;AAqEA,IAAM,MAAM,IAAI,IAAI,EAAE,MAAM,UAAU,OAAO,OAAO,CAAC;;;AClE9C,IAAM,gBAAgB,SAAU,IAA4B,MAAc,MAA4B;AAC3G,QAAM,KAAK,GAAG,aAAa,GAAG,aAAa;AAC3C,KAAG,aAAa,IAAI,IAAI;AACxB,KAAG,cAAc,EAAE;AACnB,QAAM,KAAK,GAAG,aAAa,GAAG,eAAe;AAC7C,KAAG,aAAa,IAAI,IAAI;AACxB,KAAG,cAAc,EAAE;AACnB,QAAM,UAAU,GAAG,cAAc;AACjC,KAAG,aAAa,SAAS,EAAE;AAC3B,KAAG,aAAa,SAAS,EAAE;AAC3B,KAAG,YAAY,OAAO;AACtB,MAAI,CAAC,GAAG,oBAAoB,SAAS,GAAG,WAAW,GAAG;AAEpD,YAAQ,IAAI,GAAG,kBAAkB,OAAO,CAAC;AACzC,QAAI,CAAC,GAAG,mBAAmB,IAAI,GAAG,cAAc,GAAG;AACjD,cAAQ,IAAI,oCAAoC,GAAG,iBAAiB,EAAE,CAAC;AAAA,IACzE;AACA,QAAI,CAAC,GAAG,mBAAmB,IAAI,GAAG,cAAc,GAAG;AACjD,cAAQ,IAAI,sCAAsC,GAAG,iBAAiB,EAAE,CAAC;AAAA,IAC3E;AACA,QAAI,MAAM,GAAG,kBAAkB,OAAO,CAAC;AACvC,UAAM,IAAI,MAAM,4CAA4C;AAAA,EAC9D;AACA,SAAO;AACT;AAUO,IAAM,SAAN,MAAa;AAAA,EAKlB,YAAY,IAA4B,WAAmB,aAAqB;AAJhF;AACA,oCAAwD,CAAC;AACzD;AAGE,SAAK,UAAU,cAAc,IAAI,WAAW,WAAW;AAEvD,UAAM,eAAe;AACrB,UAAM,mBAAmB;AAEzB,UAAM,cAAc,UAAU,MAAM,YAAY;AAChD,UAAM,YAAY,YAAY,MAAM,YAAY;AAEhD,QAAI,aAAa;AACf,kBAAY,QAAQ,CAAC,SAAS;AAC5B,cAAM,IAAI,KAAK,MAAM,gBAAgB;AACrC,aAAK,SAAS,EAAG,CAAC,CAAC,IAAI;AAAA,MACzB,CAAC;AAAA,IACH;AACA,QAAI,WAAW;AACb,gBAAU,QAAQ,CAAC,SAAS;AAC1B,cAAM,IAAI,KAAK,MAAM,gBAAgB;AACrC,aAAK,SAAS,EAAG,CAAC,CAAC,IAAI;AAAA,MACzB,CAAC;AAAA,IACH;AAEA,eAAW,QAAQ,KAAK,UAAU;AAChC,WAAK,SAAS,IAAI,IAAI,GAAG,mBAAmB,KAAK,SAAS,IAAI;AAAA,IAChE;AAAA,EACF;AAAA,EAEA,IAAI,IAAkC;AACpC,OAAG,WAAW,KAAK,OAAO;AAAA,EAC5B;AACF;;;AC3EO,IAAM,mBAAmB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWhC,IAAM,YAAY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASlB,IAAM,cACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAgGG;AAEL,IAAM,cAAc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAiEpB,IAAM,cAAcgIb,IAAM,wBACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAyBA,cACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IA0DA;AAEK,IAAM,mBACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAyBA,cACA,cACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAeA;AAEK,IAAM,2BACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IA4BA,cACA,cACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IA+BA;AAEK,IAAM,oBAAoB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAkB1B,IAAM,iBACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAiiBAAiB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAcvB,IAAM,oBAAoB,iBAAiB;AAE3C,IAAM,oBACX,iBACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAmCA;AAEK,IAAM,iBAAiB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUvB,IAAM,wBAAwB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAyC9B,IAAM,qBAAqB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAgB3B,IAAM,qBAAqB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAc3B,IAAM,iBAAiB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAcvB,IAAM,iBAAiB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAevB,IAAM,mBAAmB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAqBzB,IAAM,gBAAgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAgBtB,IAAM,gBAAgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWtB,IAAM,iBAAiB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAiBvB,IAAM,iBAAiB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAoBvB,IAAM,mBAAmB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAgBzB,IAAM,mBAAmB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAoBzB,IAAM,mBAAmB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWzB,IAAM,oBAAoB;AAAA;AAAA;AAI1B,IAAM,oBAAoB;AAAA;AAAA;AAI1B,IAAM,oBAAoB;AAAA;AAAA;AAI1B,IAAM,wBAAwB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA4C9B,IAAM,mBAAmB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAsFzB,IAAM,sBAAsB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAkC5B,IAAM,oBAAoB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAa1B,IAAM,oBAAoB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA+D1B,IAAM,oBAAoB;AAAA;AAAA;AAAA;AAAA;AAAA;AAO1B,IAAM,oBAAoB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAS1B,IAAM,kBAAkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUxB,IAAM,kBAAkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUxB,IAAM,iBAAiB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAuBvB,IAAM,sBAAsB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAiB5B,IAAM,qBAAqB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA8C3B,IAAM,wBAAwB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA4B9B,IAAM,qBAAqB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAqB3B,IAAM,4BAA4B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAclC,IAAM,6BAA6B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAwBnC,IAAM,wBAAwB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAwC9B,IAAM,iBAAiB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAwBvB,IAAM,uBAAuB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAiB7B,IAAM,sBAAsB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAoB5B,IAAM,qBAAqB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA4B3B,IAAM,uBAAuB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAwD7B,IAAM,qBAAqB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAgB3B,IAAM,qBAAqB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAuB3B,IAAM,0BACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAsBA,cACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAsDK,IAAM,uBAAuB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAiB7B,IAAM,uBAAuB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAS7B,IAAM,wBAAwB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAY9B,IAAM,wBAAwB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAW9B,IAAM,iBAAiB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWvB,IAAM,iBAAiB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAwBvB,IAAM,kBAAkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACxwDxB,IAAM,aAAa,IAAI,aAAa;AAAA,EACzC;AAAA,EAAI;AAAA,EAAI;AAAA,EAAI;AAAA,EAAM;AAAA,EAAM;AAAA,EAAM;AAAA,EAAI;AAAA,EAAI;AAAA,EAAI;AAAA,EAAM;AAAA,EAAM;AAAA,EAAM;AAAA,EAAI;AAAA,EAAG;AAAA,EAAI;AAAA,EAAM;AAAA,EAAM;AAAA,EAAM;AAAA,EAAG;AAAA,EAAI;AAAA,EAAI;AAAA,EAAM;AAAA,EAAM;AAAA,EAChH;AAAA,EAAG;AAAA,EAAG;AAAA,EAAI;AAAA,EAAM;AAAA,EAAM;AAAA,EAAM;AAAA,EAAG;AAAA,EAAG;AAAA,EAAI;AAAA,EAAM;AAAA,EAAM;AAAA,EAAM;AAAA,EAAI;AAAA,EAAI;AAAA,EAAG;AAAA,EAAK;AAAA,EAAK;AAAA,EAAK;AAAA,EAAI;AAAA,EAAI;AAAA,EAAG;AAAA,EAAK;AAAA,EAAK;AAAA,EAAK;AAAA,EAAG;AAAA,EAAI;AAAA,EACnH;AAAA,EAAK;AAAA,EAAK;AAAA,EAAK;AAAA,EAAI;AAAA,EAAG;AAAA,EAAG;AAAA,EAAK;AAAA,EAAK;AAAA,EAAK;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAK;AAAA,EAAK;AAAA,EAAK;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAK;AAAA,EAAK;AAAA,EAAK;AAAA,EAAI;AAAA,EAAG;AAAA,EAAI;AAAA,EAAG;AAAA,EAAG;AAAA,EAAM;AAAA,EAAI;AAAA,EACnjH;AAAA,EAAG;AAAA,EAAI;AAAA,EAAG;AAAA,EAAM;AAAA,EAAG;AAAA,EAAM;AAAA,EAAI;AAAA,EAAI;AAAA,EAAI;AAAA,EAAM;AAAA,EAAG;AAAA,EAAG;AAAA,EAAI;AAAA,EAAI;AAAA,EAAI;AAAA,EAAM;AAAA,EAAG;AAAA,EAAG;AAAA,EAAI;AAAA,EAAI;AAAA,EAAG;AAAA,EAAM;AAAA,EAAG;AAAA,EAAG;AAAA,EAAI;AAAA,EAAG;AAAA,EAAI;AAAA,EAAM;AAAA,EAAG;AAAA,EACpH;AAAA,EAAI;AAAA,EAAG;AAAA,EAAG;AAAA,EAAM;AAAA,EAAG;AAAA,EAAG;AAAA,EAAI;AAAA,EAAG;AAAA,EAAG;AAAA,EAAM;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAI;AAAA,EAAI;AAAA,EAAG;AAAA,EAAK;AAAA,EAAG;AAAA,EAAG;AAAA,EAAI;AAAA,EAAI;AAAA,EAAG;AAAA,EAAK;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAI;AAAA,EAAG;AAAA,EAAK;AAAA,EAAG;AAAA,EAAG;AAAA,EAAI;AAAA,EACpH;AAAA,EAAG;AAAA,EAAK;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAK;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAK;AAAA;AAAA,EAEhD;AAAA,EAAO;AAAA,EAAG;AAAA,EAAM;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAO;AAAA,EAAG;AAAA,EAAM;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAO;AAAA,EAAG;AAAA,EAAK;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAO;AAAA,EAAG;AAAA,EAAM;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAO;AAAA,EAAG;AAAA,EAAK;AAAA,EAClH;AAAA,EAAG;AAAA,EAAG;AAAA,EAAO;AAAA,EAAG;AAAA,EAAK;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAO;AAAA,EAAG;AAAA,EAAK;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAO;AAAA,EAAG;AAAA,EAAK;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAO;AAAA,EAAG;AAAA,EAAK;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAM;AAAA,EAAG;AAAA,EAAK;AAAA,EACpH;AAAA,EAAG;AAAA,EAAG;AAAA,EAAM;AAAA,EAAG;AAAA,EAAK;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAM;AAAA,EAAG;AAAA,EAAK;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAM;AAAA,EAAG;AAAA,EAAK;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAM;AAAA,EAAG;AAAA,EAAK;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAM;AAAA,EAAG;AAAA,EAAK;AAAA,EAAG;AAAA,EACnH;AAAA,EAAG;AAAA,EAAM;AAAA,EAAG;AAAA,EAAK;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAM;AAAA,EAAG;AAAA,EAAK;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAM;AAAA,EAAG;AAAA,EAAK;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAO;AAAA,EAAG;AAAA,EAAM;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAO;AAAA,EAAG;AAAA,EAAM;AAAA,EAAG;AAAA,EACpnH;AAAA,EAAG;AAAA,EAAG;AAAA,EAAO;AAAA,EAAI;AAAA,EAAK;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAO;AAAA,EAAI;AAAA,EAAM;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAO;AAAA,EAAI;AAAA,EAAM;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAM;AAAA,EAAI;AAAA,EAAK;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAO;AAAA,EAClH;AAAA,EAAM;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAO;AAAA,EAAI;AAAA,EAAK;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAO;AAAA,EAAI;AAAA,EAAK;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAM;AAAA,EAAI;AAAA,EAAM;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAM;AAAA,EAAI;AAAA,EAAM;AAAA,EAAG;AAAA,EAAG;AAAA,EAChH;AAAA,EAAM;AAAA,EAAI;AAAA,EAAM;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAO;AAAA,EAAI;AAAA,EAAM;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAO;AAAA,EAAI;AAAA,EAAM;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAO;AAAA,EAAI;AAAA,EAAM;AAAA,EAAG;AAAA,EAAG;AAAA;AAAA,EAEpG;AAAA,EAAO;AAAA,EAAK;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAO;AAAA,EAAK;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAO;AAAA,EAAK;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAO;AAAA,EAAK;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAO;AAAA,EAAK;AAAA,EAAG;AAAA,EAAG;AAAA,EAClH;AAAA,EAAG;AAAA,EAAO;AAAA,EAAK;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAO;AAAA,EAAK;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAO;AAAA,EAAK;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAO;AAAA,EAAK;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAM;AAAA,EAAK;AAAA,EAAG;AAAA,EAAG;AAAA,EACpH;AAAA,EAAG;AAAA,EAAM;AAAA,EAAK;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAM;AAAA,EAAK;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAM;AAAA,EAAK;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAM;AAAA,EAAK;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAM;AAAA,EAAM;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EACpH;AAAA,EAAM;AAAA,EAAK;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAM;AAAA,EAAK;AA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AA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAO;AAAA,EAAK;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EACpH;AAAA,EAAO;AAAA,EAAK;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAO;AAAA,EAAK;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAO;AAAA,EAAK;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAO;AAAA,EAAK;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAO;AAAA,EAAK;AAAA,EAAG;AAAA,EAAG;AAAA,EAClH;AAAA,EAAG;AAAA,EAAO;AAAA,EAAK;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAO;AAAA,EAAK;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAO;AAAA,EAAK;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAM;AAAA,EAAM;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAM;AAAA,EAAM;AAAA,EAAG;AAAA,EAClH;AAAA,EAAG;AAAA,EAAG;AAAA,EAAM;AAAA,EAAK;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAO;AAAA,EAAM;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAO;AAAA,EAAK;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAO;AAAA,EAAK;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAO;AAAA,EAAM;AAAA,EACnH;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAO;AAAA,EAAM;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAO;AAAA,EAAM;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAO;AAAA,EAAM;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAO;AAAA,EAAM;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAC7G;AAAA,EAAM;AAAA,EAAG;AAAA,EAAG;AACd,CAAC;;;AC7CD,SAAS,MAAM,YAAkB;AAY1B,IAAM,kBAAN,MAAM,gBAAe;AAAA,EAsC1B,YACE,IACA,cACA,MACA,YACA,cAA6C,MAC7C,MAAqC,MACrC;AAtCF,qCAAsB,CAAC;AACvB,qCAAsB,CAAC;AACvB,yCAA0B,CAAC;AAC3B,qCAAY;AACZ,sCAAa;AACb;AACA;AACA;AACA;AACA;AACA,mCAAU;AACV;AACA;AAEA,uCAAc,KAAK,OAAO;AAC1B,iCAAQ,CAAC,GAAG,GAAG,CAAC;AAChB,oCAAW,CAAC,GAAG,GAAG,CAAC;AACnB,oCAAW,CAAC,GAAG,GAAG,CAAC;AACnB,2CAAkB;AAElB,sCAAuB,CAAC;AACxB,sCAAuB,CAAC;AAGxB;AAAA;AACA;AACA;AAGA;AAAA;AAUE,SAAK,eAAe;AACpB,SAAK,aAAa;AAClB,SAAK,cAAc;AACnB,SAAK,MAAM;AACX,SAAK,OAAO;AAEZ,SAAK,KAAK;AACV,SAAK,UAAU;AAAA,OACX,MAAM,IAAK,OAAQ;AAAA,OACnB,MAAM,IAAK,OAAQ;AAAA,OACnB,MAAM,KAAM,OAAQ;AAAA,OACpB,MAAM,KAAM,OAAQ;AAAA,IACxB;AAAA,EACF;AA+WF;AAzaE,cADW,iBACJ,SAAQ;AACf,cAFW,iBAEJ,aAAY;AACnB,cAHW,iBAGJ,cAAa;AACpB,cAJW,iBAIJ,aAAY;AACnB,cALW,iBAKJ,qBAAoB;AAwD3B,cA7DW,iBA6DJ,sBAAqB,SAC1B,IACA,IACA,OACA,QACA,QACA,QACA,QAAQ,IACR,MAAM,GACU;AAChB,QAAM,WAAW,gBAAe,2BAA2B,IAAI,OAAO,QAAQ,QAAQ,QAAQ,OAAO,GAAG;AACxG,SAAO,IAAI;AAAA,IACT;AAAA,IACA,SAAS;AAAA,IACT,GAAG;AAAA,IACH,SAAS;AAAA,IACT,SAAS;AAAA,IACT,SAAS;AAAA,EACX;AACF;AAAA;AAGA,cAnFW,iBAmFJ,8BAA6B,SAClC,IACA,OACA,QACA,QACA,QACA,QAAQ,IACR,MAAM,GACI;AACV,QAAM,WAAqB,CAAC;AAC5B,QAAM,UAAoB,CAAC;AAC3B,QAAM,OAAO,SAAS;AACtB,MAAI,QAAQ,GAAG;AAEb,QAAI,QAAQ,KAAK,WAAW,OAAO,CAAC,GAAG,MAAM,CAAC,GAAG,MAAM,CAAC,CAAC;AACzD,QAAI,OAAO,KAAK,WAAW,OAAO,CAAC,GAAG,MAAM,CAAC,GAAG,MAAM,CAAC,CAAC;AACxD,oBAAe,aAAa,UAAU,SAAS,OAAO,MAAM,QAAQ,KAAK;AAEzE,YAAQ,KAAK,WAAW,MAAM,CAAC,GAAG,OAAO,CAAC,GAAG,MAAM,CAAC,CAAC;AACrD,WAAO,KAAK,WAAW,MAAM,CAAC,GAAG,OAAO,CAAC,GAAG,MAAM,CAAC,CAAC;AACpD,oBAAe,aAAa,UAAU,SAAS,OAAO,MAAM,QAAQ,KAAK;AAEzE,YAAQ,KAAK,WAAW,MAAM,CAAC,GAAG,MAAM,CAAC,GAAG,OAAO,CAAC,CAAC;AACrD,WAAO,KAAK,WAAW,MAAM,CAAC,GAAG,MAAM,CAAC,GAAG,OAAO,CAAC,CAAC;AACpD,oBAAe,aAAa,UAAU,SAAS,OAAO,MAAM,QAAQ,KAAK;AAAA,EAC3E,OAAO;AAEL,QAAI,QAAQ,KAAK,WAAW,OAAO,CAAC,GAAG,MAAM,CAAC,GAAG,MAAM,CAAC,CAAC;AACzD,QAAI,OAAO,KAAK,WAAW,MAAM,CAAC,IAAI,MAAM,MAAM,CAAC,GAAG,MAAM,CAAC,CAAC;AAC9D,oBAAe,aAAa,UAAU,SAAS,OAAO,MAAM,QAAQ,OAAO,KAAK;AAChF,YAAQ,KAAK,WAAW,MAAM,CAAC,IAAI,MAAM,MAAM,CAAC,GAAG,MAAM,CAAC,CAAC;AAC3D,WAAO,KAAK,WAAW,OAAO,CAAC,GAAG,MAAM,CAAC,GAAG,MAAM,CAAC,CAAC;AACpD,oBAAe,aAAa,UAAU,SAAS,OAAO,MAAM,QAAQ,OAAO,KAAK;AAEhF,YAAQ,KAAK,WAAW,MAAM,CAAC,GAAG,OAAO,CAAC,GAAG,MAAM,CAAC,CAAC;AACrD,WAAO,KAAK,WAAW,MAAM,CAAC,GAAG,MAAM,CAAC,IAAI,MAAM,MAAM,CAAC,CAAC;AAC1D,oBAAe,aAAa,UAAU,SAAS,OAAO,MAAM,QAAQ,OAAO,KAAK;AAChF,YAAQ,KAAK,WAAW,MAAM,CAAC,GAAG,MAAM,CAAC,IAAI,MAAM,MAAM,CAAC,CAAC;AAC3D,WAAO,KAAK,WAAW,MAAM,CAAC,GAAG,OAAO,CAAC,GAAG,MAAM,CAAC,CAAC;AACpD,oBAAe,aAAa,UAAU,SAAS,OAAO,MAAM,QAAQ,OAAO,KAAK;AAEhF,YAAQ,KAAK,WAAW,MAAM,CAAC,GAAG,MAAM,CAAC,GAAG,OAAO,CAAC,CAAC;AACrD,WAAO,KAAK,WAAW,MAAM,CAAC,GAAG,MAAM,CAAC,GAAG,MAAM,CAAC,IAAI,IAAI;AAC1D,oBAAe,aAAa,UAAU,SAAS,OAAO,MAAM,QAAQ,OAAO,KAAK;AAChF,YAAQ,KAAK,WAAW,MAAM,CAAC,GAAG,MAAM,CAAC,GAAG,MAAM,CAAC,IAAI,IAAI;AAC3D,WAAO,KAAK,WAAW,MAAM,CAAC,GAAG,MAAM,CAAC,GAAG,OAAO,CAAC,CAAC;AACpD,oBAAe,aAAa,UAAU,SAAS,OAAO,MAAM,QAAQ,OAAO,KAAK;AAAA,EAClF;AAEA,QAAM,eAAe,GAAG,aAAa;AACrC,MAAI,iBAAiB,MAAM;AACzB,UAAM,IAAI,MAAM,qCAAqC;AAAA,EACvD;AAEA,KAAG,WAAW,GAAG,cAAc,YAAY;AAC3C,KAAG,WAAW,GAAG,cAAc,IAAI,aAAa,QAAQ,GAAG,GAAG,WAAW;AAGzE,QAAM,cAAc,GAAG,aAAa;AACpC,MAAI,gBAAgB,MAAM;AACxB,UAAM,IAAI,MAAM,oCAAoC;AAAA,EACtD;AACA,KAAG,WAAW,GAAG,sBAAsB,WAAW;AAClD,KAAG,WAAW,GAAG,sBAAsB,IAAI,YAAY,OAAO,GAAG,GAAG,WAAW;AAE/E,QAAM,MAAM,GAAG,kBAAkB;AACjC,KAAG,gBAAgB,GAAG;AACtB,KAAG,WAAW,GAAG,sBAAsB,WAAW;AAClD,KAAG,WAAW,GAAG,cAAc,YAAY;AAE3C,KAAG,wBAAwB,CAAC;AAC5B,KAAG,oBAAoB,GAAG,GAAG,GAAG,OAAO,OAAO,GAAG,CAAC;AAClD,KAAG,gBAAgB,IAAI;AAEvB,SAAO;AAAA,IACL;AAAA,IACA;AAAA,IACA,YAAY,QAAQ;AAAA,IACpB;AAAA,EACF;AACF;AAEA,cArKW,iBAqKJ,sBAAqB,SAAU,IAAgB;AACpD,QAAM,KAAK,KAAK,WAAW,GAAK,GAAK,CAAG;AACxC,MAAI,GAAG,CAAC,MAAM,GAAK;AACjB,OAAG,CAAC,IAAI;AAAA,EACV,WAAW,GAAG,CAAC,MAAM,GAAK;AACxB,OAAG,CAAC,IAAI;AAAA,EACV,WAAW,GAAG,CAAC,MAAM,GAAK;AACxB,OAAG,CAAC,IAAI;AAAA,EACV,OAAO;AAGL,OAAG,CAAC,IAAI,GAAG,CAAC;AACZ,OAAG,CAAC,IAAI,GAAG,CAAC;AACZ,OAAG,CAAC,IAAI,EAAE,GAAG,CAAC,IAAI,GAAG,CAAC;AACtB,SAAK,UAAU,IAAI,EAAE;AAAA,EACvB;AACA,SAAO;AACT;AAEA,cAxLW,iBAwLJ,aAAY,SAAU,OAAiB,OAAuB;AAEnE,MAAI,KAAK,MAAM,SAAS;AACxB,MAAI,KAAK,MAAM,SAAS;AACxB,QAAM,IAAI;AACV,QAAM,OAAO,KAAK,OAAO;AACzB,QAAM,OAAO,KAAK,OAAO;AACzB,WAAS,YAAY,GAAG,YAAY,GAAG,aAAa;AAElD,UAAM,KAAK,MAAM,YAAY,IAAI,CAAC;AAClC,UAAM,KAAK,MAAM,YAAY,IAAI,CAAC;AAClC,UAAM,KAAK,MAAM,YAAY,IAAI,CAAC;AAClC,UAAM,KAAK,KAAK,WAAW,MAAM,KAAK,IAAI,CAAC,GAAG,MAAM,KAAK,IAAI,CAAC,GAAG,MAAM,KAAK,IAAI,CAAC,CAAC;AAClF,UAAM,KAAK,KAAK,WAAW,MAAM,KAAK,IAAI,CAAC,GAAG,MAAM,KAAK,IAAI,CAAC,GAAG,MAAM,KAAK,IAAI,CAAC,CAAC;AAClF,UAAM,KAAK,KAAK,WAAW,MAAM,KAAK,IAAI,CAAC,GAAG,MAAM,KAAK,IAAI,CAAC,GAAG,MAAM,KAAK,IAAI,CAAC,CAAC;AAClF,SAAK,IAAI,MAAM,IAAI,EAAE;AACrB,SAAK,UAAU,MAAM,IAAI;AACzB,UAAM,KAAK,GAAG,IAAI;AAElB,SAAK,IAAI,MAAM,IAAI,EAAE;AACrB,SAAK,UAAU,MAAM,IAAI;AACzB,UAAM,KAAK,GAAG,IAAI;AAElB,SAAK,IAAI,MAAM,IAAI,EAAE;AACrB,SAAK,UAAU,MAAM,IAAI;AACzB,UAAM,KAAK,GAAG,IAAI;AAElB,QAAI,OAAO,CAAC,IAAI,KAAK,GAAG,KAAK,CAAC;AAC9B,UAAM,KAAK,GAAG,IAAI;AAClB,WAAO,CAAC,IAAI,IAAI,KAAK,CAAC;AACtB,UAAM,KAAK,GAAG,IAAI;AAClB,WAAO,CAAC,IAAI,IAAI,KAAK,CAAC;AACtB,UAAM,KAAK,GAAG,IAAI;AAClB,UAAM,YAAY,IAAI,CAAC,IAAI,KAAK;AAChC,UAAM,YAAY,IAAI,CAAC,IAAI,KAAK;AAChC,UAAM,YAAY,IAAI,CAAC,IAAI;AAC3B,SAAK,KAAK;AACV,SAAK,KAAK;AAAA,EACZ;AACF;AAEA,cAjOW,iBAiOJ,gBAAe,SAAU,OAAiB,OAA2B;AAE1E,QAAM,KAAK,MAAM,SAAS;AAE1B,MAAI,UAAU;AAEd,QAAM,QAAQ,IAAI,WAAW,EAAE;AAC/B,WAAS,IAAI,GAAG,IAAI,KAAK,GAAG,KAAK;AAC/B,QAAI,MAAM,CAAC,MAAM,GAAG;AAClB;AAAA,IACF;AACA,UAAM,CAAC,IAAI;AACX,QAAI,IAAI,IAAI;AACZ,UAAM,IAAI,MAAM,CAAC;AACjB,UAAM,IAAI,MAAM,IAAI,CAAC;AACrB,UAAM,IAAI,MAAM,IAAI,CAAC;AACrB,aAAS,IAAI,IAAI,GAAG,IAAI,IAAI,KAAK;AAC/B,WAAK;AACL,UAAI,MAAM,MAAM,CAAC,KAAK,MAAM,MAAM,IAAI,CAAC,KAAK,MAAM,MAAM,IAAI,CAAC,GAAG;AAC9D,cAAM,CAAC,IAAI;AAAA,MACb;AAAA,IACF;AACA;AAAA,EACF;AACA,MAAI,YAAY,IAAI;AAClB,WAAO;AAAA,EACT;AAEA,QAAM,KAAK,MAAM;AACjB,WAAS,IAAI,GAAG,IAAI,IAAI,KAAK;AAC3B,UAAM,CAAC,IAAI,MAAM,MAAM,CAAC,CAAC;AAAA,EAC3B;AACA,QAAM,MAAM,MAAM,MAAM,GAAG,UAAU,IAAI,CAAC;AAC1C,WAAS,IAAI,GAAG,IAAI,KAAK,GAAG,KAAK;AAC/B,UAAM,IAAI,IAAI;AACd,UAAM,IAAI,MAAM,CAAC,IAAI;AACrB,QAAI,CAAC,IAAI,MAAM,CAAC;AAChB,QAAI,IAAI,CAAC,IAAI,MAAM,IAAI,CAAC;AACxB,QAAI,IAAI,CAAC,IAAI,MAAM,IAAI,CAAC;AAAA,EAC1B;AACA,SAAO;AACT;AAEA,cA5QW,iBA4QJ,cAAa,SAClB,UACA,SACA,QACA,SAAsB,CAAC,GAAG,GAAG,CAAC,GACxB;AACN,MAAI,MAAM;AAAA,IACR;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAO;AAAA,IAAK;AAAA,IAAO;AAAA,IAAO;AAAA,IAAO;AAAA,IAAO;AAAA,IAAQ;AAAA,IAAO;AAAA,IAAO;AAAA,IAAQ;AAAA,IAAQ;AAAA,IAAO;AAAA,IAAO;AAAA,IAC3G;AAAA,IAAO;AAAA,IAAO;AAAA,IAAO;AAAA,IAAQ;AAAA,IAAQ;AAAA,IAAO;AAAA,IAAQ;AAAA,IAAQ;AAAA,IAAK;AAAA,IAAQ;AAAA,IAAQ;AAAA,IAAQ;AAAA,IAAQ;AAAA,IAAO;AAAA,IACxG;AAAA,IAAQ;AAAA,IAAK;AAAA,IAAK;AAAA,EACpB;AAEA,QAAM,MAAM;AAAA,IACV;AAAA,IAAG;AAAA,IAAG;AAAA,IAAG;AAAA,IAAG;AAAA,IAAG;AAAA,IAAG;AAAA,IAAG;AAAA,IAAG;AAAA,IAAG;AAAA,IAAG;AAAA,IAAG;AAAA,IAAG;AAAA,IAAG;AAAA,IAAG;AAAA,IAAG;AAAA,IAAG;AAAA,IAAG;AAAA,IAAI;AAAA,IAAG;AAAA,IAAG;AAAA,IAAI;AAAA,IAAG;AAAA,IAAG;AAAA,IAAI;AAAA,IAAI;AAAA,IAAG;AAAA,IAAI;AAAA,IAAG;AAAA,IAAI;AAAA,IAAI;AAAA,IAAG;AAAA,IAAG;AAAA,IAAG;AAAA,IAAG;AAAA,IAAG;AAAA,IAChH;AAAA,IAAG;AAAA,IAAG;AAAA,IAAG;AAAA,IAAG;AAAA,IAAG;AAAA,IAAG;AAAA,IAAI;AAAA,IAAG;AAAA,IAAG;AAAA,IAAG;AAAA,IAAG;AAAA,IAAG;AAAA,IAAG;AAAA,IAAG;AAAA,IAAG;AAAA,IAAG;AAAA,IAAG;AAAA,IAAG;AAAA,IAAG;AAAA,IAAI;AAAA,IAAG;AAAA,IAAI;AAAA,IAAG;AAAA,EAC1E;AACA,kBAAe,UAAU,KAAK,GAAG;AACjC,kBAAe,UAAU,KAAK,GAAG;AACjC,QAAM,gBAAe,aAAa,KAAK,GAAG;AAE1C,WAAS,IAAI,GAAG,IAAI,IAAI,QAAQ,KAAK;AACnC,QAAI,CAAC,IAAI,IAAI,CAAC,IAAI;AAAA,EACpB;AACA,QAAM,OAAO,IAAI,SAAS;AAC1B,MAAI,IAAI;AACR,WAAS,IAAI,GAAG,IAAI,MAAM,KAAK;AAC7B,QAAI,CAAC,IAAI,IAAI,CAAC,IAAI,OAAO,CAAC;AAC1B;AACA,QAAI,CAAC,IAAI,IAAI,CAAC,IAAI,OAAO,CAAC;AAC1B;AACA,QAAI,CAAC,IAAI,IAAI,CAAC,IAAI,OAAO,CAAC;AAC1B;AAAA,EACF;AACA,QAAM,OAAO,KAAK,MAAM,SAAS,SAAS,CAAC;AAC3C,WAAS,IAAI,GAAG,IAAI,IAAI,QAAQ,KAAK;AACnC,QAAI,CAAC,IAAI,IAAI,CAAC,IAAI;AAAA,EACpB;AAEA,UAAQ,KAAK,GAAG,GAAG;AACnB,WAAS,KAAK,GAAG,GAAG;AACtB;AAEA,cAtTW,iBAsTJ,gBAAe,SACpB,UACA,SACA,OACA,MACA,QACA,QAAQ,IACR,UAAU,MACJ;AACN,MAAI,QAAQ,GAAG;AACb,YAAQ;AAAA,EACV;AACA,QAAM,KAAK,KAAK,OAAO;AACvB,OAAK,SAAS,IAAI,MAAM,KAAK;AAC7B,OAAK,UAAU,IAAI,EAAE;AACrB,QAAM,KAAK,gBAAe,mBAAmB,EAAE;AAE/C,QAAM,KAAK,KAAK,OAAO;AACvB,OAAK,MAAM,IAAI,IAAI,EAAE;AACrB,OAAK,UAAU,IAAI,EAAE;AACrB,MAAI,QAAQ,IAAI;AAChB,MAAI,QAAQ,IAAI;AAChB,MAAI,SAAS;AACX,aAAS,IAAI;AACb,aAAS;AAAA,EACX;AACA,QAAM,OAAO,KAAK,MAAM,SAAS,SAAS,CAAC;AAC3C,QAAM,MAAM,IAAI,YAAY,QAAQ,CAAC;AACrC,QAAM,MAAM,IAAI,aAAa,QAAQ,CAAC;AACtC,WAAS,KAAK,GAAWC,QAAkB;AACzC,QAAI,IAAI,IAAI,CAAC,IAAIA,OAAK,CAAC;AACvB,QAAI,IAAI,IAAI,CAAC,IAAIA,OAAK,CAAC;AACvB,QAAI,IAAI,IAAI,CAAC,IAAIA,OAAK,CAAC;AAAA,EACzB;AACA,WAAS,KAAK,GAAW,GAAW,GAAW,GAAiB;AAC9D,QAAI,IAAI,IAAI,CAAC,IAAI,IAAI;AACrB,QAAI,IAAI,IAAI,CAAC,IAAI,IAAI;AACrB,QAAI,IAAI,IAAI,CAAC,IAAI,IAAI;AAAA,EACvB;AACA,QAAM,YAAY,IAAI;AACtB,QAAM,WAAW,YAAY;AAC7B,MAAI,SAAS;AACX,SAAK,WAAW,KAAK;AACrB,SAAK,UAAU,IAAI;AAAA,EACrB;AACA,QAAM,MAAM,KAAK,OAAO;AACxB,QAAM,MAAM,KAAK,OAAO;AACxB,WAAS,IAAI,GAAG,IAAI,OAAO,KAAK;AAC9B,UAAM,IAAI,KAAK,IAAK,IAAI,QAAS,IAAI,KAAK,EAAE;AAC5C,UAAM,IAAI,KAAK,IAAK,IAAI,QAAS,IAAI,KAAK,EAAE;AAC5C,QAAI,CAAC,IAAI,UAAU,IAAI,GAAG,CAAC,IAAI,IAAI,GAAG,CAAC;AACvC,QAAI,CAAC,IAAI,UAAU,IAAI,GAAG,CAAC,IAAI,IAAI,GAAG,CAAC;AACvC,QAAI,CAAC,IAAI,UAAU,IAAI,GAAG,CAAC,IAAI,IAAI,GAAG,CAAC;AACvC,SAAK,IAAI,KAAK,OAAO,GAAG;AACxB,SAAK,GAAG,GAAG;AACX,SAAK,IAAI,KAAK,MAAM,GAAG;AACvB,SAAK,IAAI,OAAO,GAAG;AACnB,QAAI,MAAM;AACV,QAAI,IAAI,QAAQ,GAAG;AACjB,YAAM,IAAI;AAAA,IACZ;AACA,SAAK,IAAI,GAAG,GAAG,KAAK,IAAI,KAAK;AAC7B,SAAK,IAAI,IAAI,GAAG,KAAK,MAAM,OAAO,IAAI,KAAK;AAC3C,QAAI,SAAS;AACX,WAAK,QAAQ,IAAI,GAAG,GAAG,WAAW,GAAG;AACrC,WAAK,QAAQ,IAAI,IAAI,OAAO,UAAU,IAAI,OAAO,MAAM,KAAK;AAAA,IAC9D;AAAA,EACF;AACA,UAAQ,KAAK,GAAG,GAAG;AACnB,WAAS,KAAK,GAAG,GAAG;AACtB;AAEA,cA9XW,iBA8XJ,uBAAsB,SAC3B,UACA,SACA,QACA,OACA,MACA,QACA,UAAU,CAAC,KAAK,GAAG,GAAG,GAAG,GACzB,QAAQ,IACR,UAAU,OACJ;AACN,MAAI,KAAK,SAAS,SAAS;AAC3B,kBAAe,aAAa,UAAU,SAAS,OAAO,MAAM,QAAQ,OAAO,OAAO;AAClF,OAAK,SAAS,SAAS,IAAI;AAC3B,QAAM,OAAO,CAAC;AACd,WAAS,IAAI,GAAG,IAAI,KAAK,IAAI,GAAG,KAAK,GAAG;AACtC,SAAK,CAAC,IAAI,QAAQ,CAAC;AACnB,SAAK,IAAI,CAAC,IAAI,QAAQ,CAAC;AACvB,SAAK,IAAI,CAAC,IAAI,QAAQ,CAAC;AACvB,SAAK,IAAI,CAAC,IAAI,QAAQ,CAAC;AAAA,EACzB;AACA,SAAO,KAAK,GAAG,IAAI;AACrB;AAEA,cAtZW,iBAsZJ,qBAAoB,SACzB,UACA,SACA,QACA,QACA,SAAsB,CAAC,GAAG,GAAG,CAAC,GAC9B,UAAU,CAAC,GAAG,GAAG,KAAK,GAAG,GACnB;AACN,MAAI,KAAK,SAAS,SAAS;AAC3B,kBAAe,WAAW,UAAU,SAAS,QAAQ,MAAM;AAC3D,OAAK,SAAS,SAAS,IAAI;AAC3B,QAAM,OAAO,CAAC;AACd,WAAS,IAAI,GAAG,IAAI,KAAK,IAAI,GAAG,KAAK,GAAG;AACtC,SAAK,CAAC,IAAI,QAAQ,CAAC;AACnB,SAAK,IAAI,CAAC,IAAI,QAAQ,CAAC;AACvB,SAAK,IAAI,CAAC,IAAI,QAAQ,CAAC;AACvB,SAAK,IAAI,CAAC,IAAI,QAAQ,CAAC;AAAA,EACzB;AACA,SAAO,KAAK,GAAG,IAAI;AACrB;AAzaK,IAAM,iBAAN;;;ACZP,SAAS,QAAAC,OAAM,QAAAC,aAAY;AAC3B,SAAS,MAAM,cAAc;;;ACD7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACAA;AAAA,EACE,GAAK;AAAA,IACH;AAAA,IAAG;AAAA,IAAK;AAAA,IAAG;AAAA,IAAG;AAAA,IAAK;AAAA,IAAG;AAAA,IAAK;AAAA,IAAK;AAAA,IAAG;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAG;AAAA,IAAG;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IACtE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAG;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IACvE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAG;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IACtE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IACpE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAG;AAAA,IAAG;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IACvE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAG;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAG;AAAA,IAAK;AAAA,IAAK;AAAA,IACvE;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IACpE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAG;AAAA,IAAI;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAG;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IACxE;AAAA,IAAK;AAAA,EACP;AAAA,EACA,GAAK;AAAA,IACH;AAAA,IAAG;AAAA,IAAG;AAAA,IAAK;AAAA,IAAG;AAAA,IAAK;AAAA,IAAK;AAAA,IAAG;AAAA,IAAK;AAAA,IAAG;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAG;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IACxE;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAG;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IACxE;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAI;AAAA,IAAK;AAAA,IACxE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAG;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IACxE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAG;AAAA,IAAK;AAAA,IAAK;AAAA,IAAG;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IACrE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAG;AAAA,IAAG;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IACrE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAG;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAG;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IACtE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IACvE;AAAA,EACF;AAAA,EACA,GAAK;AAAA,IACH;AAAA,IAAG;AAAA,IAAG;AAAA,IAAG;AAAA,IAAK;AAAA,IAAG;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IACtE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IACpE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAG;AAAA,IAAI;AAAA,IAAG;AAAA,IAAK;AAAA,IAAK;AAAA,IAAG;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IACxE;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAG;AAAA,IAAI;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAG;AAAA,IAAK;AAAA,IACvE;AAAA,IAAK;AAAA,IAAG;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAI;AAAA,IAAK;AAAA,IACtE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAI;AAAA,IACxE;AAAA,IAAK;AAAA,IAAG;AAAA,IAAK;AAAA,IAAK;AAAA,IAAG;AAAA,IAAK;AAAA,IAAG;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IACpE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAG;AAAA,IAAG;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,EAC5E;AAAA,EACA,GAAK;AAAA,IACH;AAAA,IAAG;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IACpE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IACtE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IACtE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IACtE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IACtE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IACtE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IACtE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IACtE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,EACpD;AAAA,EACA,GAAK;AAAA,IACH;AAAA,IAAG;AAAA,IAAG;AAAA,IAAG;AAAA,IAAG;AAAA,IAAG;AAAA,IAAG;AAAA,IAAG;AAAA,IAAG;AAAA,IAAG;AAAA,IAAG;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IACtE;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IACxE;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IACxE;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IACxE;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IACxE;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IACxE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IACtE;AAAA,IAAK;AAAA,IAAK;AAAA,EACZ;AACF;;;ACtxE;AAAA,IAAG;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAI;AAAA,IAAG;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IACpE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAI;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IACxE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IACtE;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAG;AAAA,IAAG;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IACrE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IACpE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAI;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IACvE;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IACxE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IACtE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IACtE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IACxE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IACtE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IACrE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAG;AAAA,IAAK;AAAA,IACpE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IACtE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IACtE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,EAC3B;AAAA,EACA,GAAK;AAAA,IACH;AAAA,IAAG;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IACxE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IACrE;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAI;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IACxE;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IACrE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IACrE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IACtE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IACrE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IACtE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IACpE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IACtE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IACtE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IACtE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IACtE;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IACrE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IACtE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IACtE;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,EAC5D;AAAA,EACA,GAAK;AAAA,IACH;AAAA,IAAG;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAI;AAAA,IAAG;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IACvE;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAG;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IACvE;AAAA,IAAK;AAAA,IAAI;AAAA,IAAI;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IACvE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IACzE;AAAA,IAAK;AAAA,IAAI;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IACvE;AAAA,IAAK;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAI;AAAA,IAAK;AAAA,IACtE;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IACpE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IACxE;AAAA,IAAI;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAG;AAAA,IAAG;AAAA,IAAK;AAAA,IAAI;AAAA,IAAI;AAAA,IAAK;AAAA,IACpE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IACxE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IACtE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAK;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAK;AAAA,IAAI;AAAA,IACtE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IACpE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IACxE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IACtE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IACxE;AAAA,EACF;AAAA,EACA,GAAK;AAAA,IACH;AAAA,IAAG;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IACpE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IACtE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IACtE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IACtE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IACtE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IACtE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IACtE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IACtE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IACtE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IACtE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IACtE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IACtE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IACtE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IACtE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IACtE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IACtE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IACtE;AAAA,EACF;AAAA,EACA,GAAK;AAAA,IACH;AAAA,IAAG;AAAA,IAAG;AAAA,IAAG;AAAA,IAAG;AAAA,IAAG;AAAA,IAAG;AAAA,IAAG;AAAA,IAAG;AAAA,IAAG;AAAA,IAAG;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IACtE;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IACxE;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IACxE;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IACxE;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IACxE;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IACxE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IACtE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IACtE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IACtE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IACtE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IACtE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,I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A,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IACtE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IACtE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IACtE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IACtE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IACtE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IACtE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IACtE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IACtE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IACtE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IACtE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IACtE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,EACzD;AAAA,EACA,GAAK;AAAA,IACH;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IACxE;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IACxE;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IACxE;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IACxE;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IACxE;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IACxE;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IACtE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IACtE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IACtE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IACtE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IACtE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IACtE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IACtE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IACtE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IACtE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,EAC3B;AAAA,EACA,GAAK;AAAA,IACH;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IACtE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IACtE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IACtE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IACtE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IACtE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IACtE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IACtE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IACtE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IACtE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IACtE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IACtE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IACtE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IACtE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IACtE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IACtE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IACtE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IACtE;AAAA,EACF;AAAA,EACA,GAAK;AAAA,IACH;AAAA,IAAG;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IACvE;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IACxE;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IACxE;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IACxE;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IACxE;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IACxE;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IACxE;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IACxE;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IACxE;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IACxE;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IACxE;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IACxE;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IACxE;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,EAClC;AAAA,EACA,GAAK;AAAA,IACH;AAAA,IAAG;AAAA,IAAG;AAAA,IAAG;AAAA,IAAG;AAAA,IAAG;AAAA,IAAG;AAAA,IAAG;AAAA,IAAG;AAAA,IAAG;AAAA,IAAG;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IACtE;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IACxE;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IACxE;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IACxE;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IACxE;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IACxE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IACtE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IACtE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IACtE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IACtE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IACtE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IACtE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IACtE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IACtE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;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AA,IAAI;AAAA,IAAI;AAAA,IACrE;AAAA,IAAK;AAAA,IAAI;AAAA,IAAG;AAAA,IAAI;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IACtE;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAG;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAG;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IACzE;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAI;AAAA,IAAI;AAAA,IAAK;AAAA,IACtE;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IACxE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAI;AAAA,IAAK;AAAA,IAAI;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IACrE;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAI;AAAA,IAAI;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IACtE;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAG;AAAA,IAAI;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAK;AAAA,IACtE;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAG;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAG;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IACpE;AAAA,IAAK;AAAA,IAAI;AAAA,IAAG;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAI;AAAA,IACzE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IACxE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAI;AAAA,IAAK;AAAA,IAAI;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IACtE;AAAA,IAAI;AAAA,IAAI;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAI;AAAA,IAAI;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IACpE;AAAA,IAAK;AAAA,IAAI;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAG;AAAA,IAAI;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAI;AAAA,IACtE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAG;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAG;AAAA,IAAK;AAAA,IACpE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAG;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,EAChD;AAAA,EACA,GAAK;AAAA,IACH;AAAA,IAAK;AAAA,IAAI;AAAA,IAAI;AAAA,IAAK;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IACvE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IACrE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAI;AAAA,IAAK;AAAA,IACtE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAK;AAAA,IAAI;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IACrE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IACvE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAG;AAAA,IAAI;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IACzE;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAK;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IACpE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IACtE;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IACtE;AAAA,IAAK;AAAA,IAAG;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAK;AAAA,IAAI;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IACxE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAI;AAAA,IACvE;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAG;AAAA,IAAI;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAI;AAAA,IACxE;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAK;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IACxE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IACtE;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IACtE;AAAA,IAAK;AAAA,IAAG;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,EACvC;AAAA,EACA,GAAK;AAAA,IACH;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IACvE;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAI;AAAA,IAAI;AAAA,IAAG;AAAA,IAAG;AAAA,IAAK;AAAA,IAAK;AAAA,IACtE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IACvE;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAI;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IACxE;AAAA,IAAK;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAG;AAAA,IAAK;AAAA,IAAI;AAAA,IACxE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAI;AAAA,IAAI;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IACtE;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAI;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IACtE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAI;AAAA,IAAI;AAAA,IAAG;AAAA,IAAG;AAAA,IAAK;AAAA,IACtE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAI;AAAA,IAAK;AAAA,IACvE;AAAA,IAAK;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAI;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IACxE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAG;AAAA,IAAK;AAAA,IACzE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAI;AAAA,IAAI;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IACtE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAI;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IACtE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAI;AAAA,IAAI;AAAA,IAAG;AAAA,IAAG;AAAA,IACtE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAI;AAAA,IACvE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,EACtC;AAAA,EACA,GAAK;AAAA,IACH;AAAA,IAAG;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IACvE;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IACxE;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IACxE;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IACxE;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IACxE;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IACxE;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IACxE;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IACxE;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IACxE;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IACxE;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IACxE;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IACxE;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IACxE;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,EAClC;AAAA,EACA,GAAK;AAAA,IACH;AAAA,IAAG;AAAA,IAAG;AAAA,IAAG;AAAA,IAAG;AAAA,IAAG;AAAA,IAAG;AAAA,IAAG;AAAA,IAAG;AAAA,IAAG;AAAA,IAAG;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IACtE;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IACxE;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IACxE;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IACxE;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IACxE;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IACxE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IACtE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IACtE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IACtE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;A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AA,IACzE;AAAA,IAAI;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAG;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IACtE;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAI;AAAA,IAAK;AAAA,IAAG;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAG;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAI;AAAA,IACtE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAG;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IACvE;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAG;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IACtE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAG;AAAA,IAAK;AAAA,IAAI;AAAA,IAAI;AAAA,IACpE;AAAA,IAAK;AAAA,IAAG;AAAA,IAAI;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAI;AAAA,IAAI;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAG;AAAA,IAAK;AAAA,IACtE;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAG;AAAA,IAAK;AAAA,IAAG;AAAA,IAAI;AAAA,IAAK;AAAA,IAAI;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAG;AAAA,IAAK;AAAA,IAAK;AAAA,IACtE;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAG;AAAA,IAAK;AAAA,IAAG;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IACzE;AAAA,IAAG;AAAA,IAAI;AAAA,IAAK;AAAA,IAAI;AAAA,IAAI;AAAA,IAAK;AAAA,EAC3B;AAAA,EACA,GAAK;AAAA,IACH;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAG;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IACtE;AAAA,IAAK;AAAA,IAAI;AAAA,IAAI;AAAA,IAAK;AAAA,IAAG;AAAA,IAAI;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAG;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IACtE;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAG;AAAA,IAAK;AAAA,IAAK;AAAA,IAAG;AAAA,IAAK;AAAA,IAAI;AAAA,IAAG;AAAA,IAAI;AAAA,IAAK;AAAA,IACtE;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAG;AAAA,IAAK;AAAA,IAAG;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAG;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IACvE;AAAA,IAAI;AAAA,IAAK;AAAA,IAAG;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAK;AAAA,IAAG;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAI;AAAA,IACrE;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAG;AAAA,IAAK;AAAA,IAAG;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IACxE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAG;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IACxE;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAG;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IACpE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAG;AAAA,IAAI;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IACtE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAG;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAG;AAAA,IAAK;AAAA,IAAG;AAAA,IACxE;AAAA,IAAK;AAAA,IAAI;AAAA,IAAI;AAAA,IAAG;AAAA,IAAI;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAG;AAAA,IAAK;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAG;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IACxE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAG;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IACrE;AAAA,IAAI;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAG;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAG;AAAA,IACxE;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAG;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAC1E;AAAA,IAAG;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAK;AAAA,IAAG;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAI;AAAA,IAAI;AAAA,IACtE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,EAChB;AAAA,EACA,GAAK;AAAA,IACH;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAG;AAAA,IAAI;AAAA,IACvE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAG;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IACzE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAG;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IACtE;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAG;AAAA,IAAK;AAAA,IAAG;AAAA,IAAI;AAAA,IAAK;AAAA,IAAI;AAAA,IAAI;AAAA,IACtE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAI;AAAA,IAAK;AAAA,IAAG;AAAA,IAAK;AAAA,IAC1E;AAAA,IAAK;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAG;AAAA,IAAK;AAAA,IAAG;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAG;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IACzE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAG;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IACtE;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IACrE;AAAA,IAAK;AAAA,IAAI;AAAA,IAAI;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAG;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IACzE;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAG;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IACtE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAG;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAG;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IACrE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAI;AAAA,IAAK;AAAA,IAAI;AAAA,IAAG;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAG;AAAA,IAAI;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IACtE;AAAA,IAAI;AAAA,IAAK;AAAA,IAAI;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAG;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAG;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IACxE;AAAA,IAAI;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAG;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAI;AAAA,IACvE;AAAA,IAAK;AAAA,IAAG;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAI;AAAA,IACtE;AAAA,IAAG;AAAA,IAAI;AAAA,IAAG;AAAA,IAAK;AAAA,IAAK;AAAA,EACtB;AAAA,EACA,GAAK;AAAA,IACH;AAAA,IAAG;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IACvE;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IACxE;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IACxE;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IACxE;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IACxE;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IACxE;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IACxE;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IACxE;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IACxE;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IACxE;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IACxE;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IACxE;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IACxE;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,EAClC;AAAA,EACA,GAAK;AAAA,IACH;AAAA,IAAG;AAAA,IAAG;AAAA,IAAG;AAAA,IAAG;AAAA,IAAG;AAAA,IAAG;AAAA,IAAG;AAAA,IAAG;AAAA,IAAG;AAAA,IAAG;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IACtE;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IACxE;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IACxE;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IACxE;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IACxE;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IACxE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IACtE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IACtE;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAAK;AAAA,IAA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","names":["mat4","vec3","vec4","vec3","vec3","vec4","vec3","compress","mat4","vec4","vec3","decompressSync","mat4","vec3","vec4","pos","mat4","i","vec4","decompressSync","items","mn","mx","LUT","offsetPt0","pts","bytes","positions","indices","j","line","scalars","version","vec3","nvert","len","NVMesh","vec3","vec4","idx","lut","frame","frameOffset","mn","pts","base64","Roboto_Regular_default","vec3","vec4","mat4","vec3","vec4","decompressSync","gzipSync","uuidv4","vec3","ImageType","vec3","uuidv4","mat4","vec3","vec4","version","decompressSync","j","compress","gzipSync","bytes","i","base64","SLICE_TYPE","SHOW_RENDER","MULTIPLANAR_TYPE","DRAG_MODE","vec3","vec4","imageOptions","compress","document","LabelTextAlignment","LabelLineTerminator","LabelAnchorPoint","vec3","NVMesh","node","nodes","vec3","mat4","vec3","vec4","j","vec3","vec4","mat4","uuidv4","uuidv4","NVMesh","Roboto_Regular_default","vec4","vec3","NVMesh","e","j","h","img","document","base64","compress","mesh","nx","mat4","volScale","vox","mnNeg","mxNeg","scale","i","mm"]}